<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Techiedeepdive</title>
    <link>/</link>
    <description>Recent content on Techiedeepdive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 01 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Qemu - Data object exchange DOE</title>
      <link>/posts/2023/04/qemu-data-object-exchange-doe/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/04/qemu-data-object-exchange-doe/</guid>
      <description>This is a quick write-up about Qemu DOE emulation. DOE is part of PCIe and CXL extended capabilities. Technically, It&amp;rsquo;s optional but is important part of IDE starting gen5.
Starting with cxl_usp_read_config is one of the places where pcie_doe_read_config is called. It seems it&amp;rsquo;s only supported with CXL which kinda matches what kernel implements. If it&amp;rsquo;s DOE extended address, it will fall back to pci_default_read_config.
static uint32_t cxl_usp_read_config(PCIDevice *d, uint32_t address, int len) { CXLUpstreamPort *usp = CXL_USP(d); uint32_t val; if (pcie_doe_read_config(&amp;amp;usp-&amp;gt;doe_cdat, address, len, &amp;amp;val)) { return val; } return pci_default_read_config(d, address, len); } pcie_doe_read_config reads the fields when address matches the DW in DOW extended configuration address space.</description>
    </item>
    
    <item>
      <title>Qemu - PCIe SRIOV and virtual function</title>
      <link>/posts/2023/04/qemu-pcie-sriov-and-virtual-function/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/04/qemu-pcie-sriov-and-virtual-function/</guid>
      <description>This is a quick write-up about SRIOV and virtual functions emulation in Qemu. From link
 SR-IOV is a specification that allows a single Peripheral Component Interconnect Express (PCIe) physical device under a single root port to appear as multiple separate physical devices to the hypervisor or the guest operating system.
SR-IOV uses physical functions (PFs) and virtual functions (VFs) to manage global functions for the SR-IOV devices. PFs are full PCIe functions that are capable of configuring and managing the SR-IOV functionality.</description>
    </item>
    
    <item>
      <title>Misc useful commands</title>
      <link>/posts/2023/03/misc-useful-commands/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/03/misc-useful-commands/</guid>
      <description>These are misc useful commands using linux command line
spliting and combing PDF  Link to heading   pdfseparate -f 1 original.pdf output-page%d.pdf qpdf --empty --pages `cat l` -- all.pdf HP printer  Link to heading   These are some commands to document hplip linux HP printer utils.
sudo apt install hplip-gui hplip ``verilog hp-scan
 </description>
    </item>
    
    <item>
      <title>Qemu PCIe Emulation</title>
      <link>/posts/2023/03/qemu-pcie-emulation/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/03/qemu-pcie-emulation/</guid>
      <description>This post is about how qemu emulates PCI devices for guest Kernel. Honestly, I took the scenic road here which is reading the code and setting breakpoints in GDB at interesting places and work my way through the stack trace. Disclaimer, This is a very short post on a complicated topic and huge code base(Qemu). But It&amp;rsquo;s a good start to dig deeper into qemu code (more specifically PCI emulation in qemu)</description>
    </item>
    
    <item>
      <title>Crypto - big Picture</title>
      <link>/posts/2023/03/crypto-big-picture/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/03/crypto-big-picture/</guid>
      <description>This post describes the cryptography algorithms and their applications (As I understand them). Over the years, I read bits of &amp;ldquo;Understanding cryptography&amp;rdquo; by Cristof Paar and these are my notes which kinda match the chapters of the book. I also, added links to related posts for each section.
The crypto provides several goals (the technical name is services)
 confidentiality: Stop people from seeing the message Integrity: Make sure the message is correct(no tampering) Message Authentication (The message is coming from the right person) Nonrepudiation: prove that some person signed a message  symmetric algorithms  Link to heading   symmetric algorithms provide confidentiality by using shared key known by the Bob and Alice.</description>
    </item>
    
    <item>
      <title>Crypto - DH key exchange</title>
      <link>/posts/2023/03/crypto-dh-key-exchange/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/03/crypto-dh-key-exchange/</guid>
      <description>In most Crypto algorithms, we assumed the keys are already known by Alice and Bob. But we need a way to exchange the keys on securely first
 symmertic exchange (not common) Asymmetric exchange (very popular)  In Asymmetric exchange, Both sides share public keys and the other side uses the public key and private key, to calculate secret key.
Alice ------ A -----&amp;gt; Bob &amp;lt;-------B------ At Alice Kab = Fun(a, B) At Bob Kab = Fun(b, A) Diffie–Hellman key exchange (DHKE)  Link to heading   The problem how make sure is that Bob is Bob?</description>
    </item>
    
    <item>
      <title>Cocotb Deepdive - Force and release</title>
      <link>/posts/2023/03/cocotb-deepdive-force-and-release/</link>
      <pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/03/cocotb-deepdive-force-and-release/</guid>
      <description>A really nice feature of cocotb is force and release which map to RTL force and release depending on the language (and simulator). This is example how to use Force and Release.
from cocotb.handle import Force, Release, Deposit from cocotb.binary import BinaryValue value = &amp;#34;0&amp;#34; sig = .... sig.value = Force(BinaryValue(len(sig) * value) sig.value = Release() Force and Release are defines in handle.py and defines _as_gpi_args_for.
class _SetValueAction(_SetAction): __slots__ = (&amp;#34;value&amp;#34;,) &amp;#34;&amp;#34;&amp;#34;Base class representing the type of action used while write-accessing a handle with a value.</description>
    </item>
    
    <item>
      <title>Yosys Python bindings pyosys - Hello world and deepdive</title>
      <link>/posts/2023/03/yosys-python-bindings-pyosys-hello-world-and-deepdive/</link>
      <pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/03/yosys-python-bindings-pyosys-hello-world-and-deepdive/</guid>
      <description>I think Yosys is one most important open sources projects ever created, at least for hardware development. It enabled so much research and innovation in FPGA and ASIC area. It did what gcc did for software development.
Building and installation  Link to heading   These are the steps to build yosys with pyosys(python bindings). It&amp;rsquo;s not enabled by default. So you have to pass ENABLE_PYOSYS. Also, I am using virtualenv as I don&amp;rsquo;t want to install anything with root.</description>
    </item>
    
    <item>
      <title>IPXACT parser To Tree -- One way to avoid XML</title>
      <link>/posts/2023/03/ipxact-parser-to-tree-one-way-to-avoid-xml/</link>
      <pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/03/ipxact-parser-to-tree-one-way-to-avoid-xml/</guid>
      <description>In older post, I went through ipxactral (poor man&amp;rsquo;s RAL generator). It seems only logical to extract the part where i process XML and make dedicated module for that. I hear someone shouting, isn&amp;rsquo;t XML a tree already? My answer is I HATE XML, So I will do whatever to avoid dealing with XML.
Jumping right into it, IPXACTTree just takes path to ixact file.
t = IPXACTTree(args.ipxactfile) The heavy lifting is done here to create the tree starting from root and recursively going through the nodes.</description>
    </item>
    
    <item>
      <title>Parsing UPF - Embedding TCL interpreter with python</title>
      <link>/posts/2023/03/parsing-upf-embedding-tcl-interpreter-with-python/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/03/parsing-upf-embedding-tcl-interpreter-with-python/</guid>
      <description>This post is about quirky idea to parse UPF for fun and profit. I started with writing Lark BNF, To a man with a hammer, everything looks like a nail :) But gave up on the idea as i will end up writing frontend for TCL. So, I was mentally blocked for some time.
Then it hit me, I can use full-blown TCL interpreter to parse the actual UPF and pass it back to python for processing.</description>
    </item>
    
    <item>
      <title>Portable Stimulus Standard - Part 1</title>
      <link>/posts/2023/02/portable-stimulus-standard-part-1/</link>
      <pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/portable-stimulus-standard-part-1/</guid>
      <description>Portable stimulus standard (PSS) is very interesting. That said, It&amp;rsquo;s surprising simple.
These are important abstraction units specific by the spec:
 component action Activity  Component  Link to heading   Component is a way to encapsulate other elements (mainly actions)
 Components serve as a mechanism to encapsulate and reuse elements of functionality in a portable stimulus model. Typically, a model is broken down into parts that correspond to roles played by different actors during test execution.</description>
    </item>
    
    <item>
      <title>Liberty - Hello World</title>
      <link>/posts/2023/02/liberty-hello-world/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/liberty-hello-world/</guid>
      <description>Liberty format defines delays and power of cells. It&amp;rsquo;s important part of ASIC flow for delay calculation and power estimation.
Syntax  Link to heading   Liberty defines 3 types statements
 group statement attribute statement define statement  Group Statements  Link to heading   A group is a named collection of statements that defines a library, a cell, a pin, a timing arc, and so forth. Braces ({}), which are used in pairs, enclose the contents of the group.</description>
    </item>
    
    <item>
      <title>Weekend project - Python Hardware Description Language - PHDL</title>
      <link>/posts/2023/02/weekend-project-python-hardware-description-language-phdl/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/weekend-project-python-hardware-description-language-phdl/</guid>
      <description>It&amp;rsquo;s Saturday night and I have been cleaning up my github repos. And I found this old defunct project I wrote few years ago. So, I thought to write this post about it.
This is a quick prototype for Python Hardware Description Language(Ironically, Named PHDL). Basically, I wanted to figure out semantics to specify verilog design programmatically. I started with defining components I need to generate a module. The snippet below shows Port and Parameter.</description>
    </item>
    
    <item>
      <title>Generating sequence diagram using planuml</title>
      <link>/posts/2023/02/generating-sequence-diagram-using-planuml/</link>
      <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/generating-sequence-diagram-using-planuml/</guid>
      <description>This post is about generating sequence diagram using a tool called plantuml. It can be used for a lot of things, but I use it mainly for sequence diagram generation.
Sequence diagram is used to describe message-based protocols (like network TCP/UDP). That said, I have used it to visualize a lot of things. For example:
 Bus transaction (write/read) side-band signals (interrupts) req/ack handshakes power sequence FSM state changes UVM messages  Basically, Anything I can parse from logs.</description>
    </item>
    
    <item>
      <title>Haiku </title>
      <link>/posts/2023/02/haiku/</link>
      <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/haiku/</guid>
      <description>These are some haiku about random stuff. In case you are wondering what is haiku, here is one-liner from wiki:
 A Japanese poem in three lines, the first and last consisting of five morae, and the second consisting of seven morae, usually with an emphasis on the season or a naturalistic theme.
 Gate level simulation  Link to heading   This one is about the existential pain everyone gets while debugging GLS failures.</description>
    </item>
    
    <item>
      <title>The one books everyone should read</title>
      <link>/posts/2023/02/the-one-books-everyone-should-read/</link>
      <pubDate>Tue, 21 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/the-one-books-everyone-should-read/</guid>
      <description>You may think there is a typo in the title. It is not! This post is about The one book I like the most in each topic. I mean if you have to read just one book in computer Architecture, What would it be?
Disclaimer, This is purely personal preference so don&amp;rsquo;t fight me if you don&amp;rsquo;t like these books.
 Computer Organization: Digital Design and Computer Architecture, David Harris. Computer Architecture: Computer Architecture: A Quantitative Approach Cryptography: Understanding Cryptography Computer Graphics: Computer Graphics Principles Practice USB: Mindshare PCIE: Again Mindshare Graph Theory: Introduction to Graph Theory Linux Kernel: Understanding The Linux Kernel C : The C programming Language.</description>
    </item>
    
    <item>
      <title>Security Protocol and Data Model(SPDM) primer</title>
      <link>/posts/2023/02/security-protocol-and-data-modelspdm-primer/</link>
      <pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/security-protocol-and-data-modelspdm-primer/</guid>
      <description>SPDM defines the messages exchange protocol to do the following tasks
 The specification-defined message exchanges enable Requesters to: Discover and negotiate the security capabilities of a Responder. Authenticate or provision an identity of a Responder. Retrieve the measurements of a Responder. Securely establish cryptographic session keys to construct a secure communication channel for the transmission or reception of application data.
 In English, SPDM allows requester to know the capability of responder, encrypt/decrypt stuff.</description>
    </item>
    
    <item>
      <title>AES-GCM Galois-Counter Mode </title>
      <link>/posts/2023/02/aes-gcm-galois-counter-mode/</link>
      <pubDate>Sat, 18 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/aes-gcm-galois-counter-mode/</guid>
      <description>AES is one most important block ciphers used right now. AES has several modes of operation like CBC, ECB. This post is about GCM (Galois Counter Mode). This is used in several specifications. For example, This is I and E in PCIe IDE :)
GCM provides authenticated encryption. Basically, It keeps things secret and makes sure nobody played around with these secret. I read the NIST document for GCM but I think the best resource I found is paper.</description>
    </item>
    
    <item>
      <title>Deepdive - DOE CXL Linux driver</title>
      <link>/posts/2023/02/deepdive-doe-cxl-linux-driver/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/deepdive-doe-cxl-linux-driver/</guid>
      <description>This post is about DOE which is Data Object Exchange which is used by CMA to implement SPDM for PCI/CXL IDE specification(starting Gen5, I think). I can&amp;rsquo;t download ENC on PCI SIG, So the next best thing is reading the Linux kernel driver that uses DOE. Luckily, CXL driver uses it. win-win!
Entry point the probe  Link to heading   Starting with drivers/cxl/pci.c, .probe is called with devices by PCI core.</description>
    </item>
    
    <item>
      <title>PCIe physical layer 8b/10b encoder</title>
      <link>/posts/2023/02/pcie-physical-layer-8b/10b-encoder/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/pcie-physical-layer-8b/10b-encoder/</guid>
      <description>This is a quick post about 8b/10b encoder in PCIE Gen1/2. Not that change in Gen3.
From Mindeshare PCIe book, encoder balances out the
 Maintaining DC Balance. PCIe uses an AC‐coupled link, placing a capaci‐ tor serially in the path to isolate the DC part of the signal from the other end of the Link. This allows the Transmitter and Receiver to use different com‐ mon‐mode voltages and makes the electrical design easier for cases where the path between them is long enough that they’re less likely to have exactly the same reference voltages.</description>
    </item>
    
    <item>
      <title>Root of trust primer</title>
      <link>/posts/2023/02/root-of-trust-primer/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/root-of-trust-primer/</guid>
      <description>NIST defines Root of trust (RoT) as follows
 Roots of trust are highly reliable hardware, firmware, and software components that perform specific, critical security functions. Because roots of trust are inherently trusted, they must be secure by design.
 Basically, It&amp;rsquo;s hardware implementation of security functions like
 key management(generation and storage) cryptographic functions(Block ciphers, Asymmetric key crypto, Hash)  The hardware is designed with security threat model in mind.</description>
    </item>
    
    <item>
      <title>New computer! Who dis?</title>
      <link>/posts/2023/02/new-computer-who-dis/</link>
      <pubDate>Thu, 16 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/new-computer-who-dis/</guid>
      <description>People talk about the smell of a new car, but nobody talks about the smell of new computer. The smell of plastic and potential :)
I recently retired my veteran Ideapad after battery, battery socket and eventually screen failed. safe to say, I got my money worth out of it. Honestly, I am surprised it lasted 7 years!
Reset in peace(RIP), my friend!
I decided to get another Ideapad. After research for few days, I found what I am looking for.</description>
    </item>
    
    <item>
      <title>PCIe Galois LSFR scrambler - one way to do it!</title>
      <link>/posts/2023/02/pcie-galois-lsfr-scrambler-one-way-to-do-it/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/pcie-galois-lsfr-scrambler-one-way-to-do-it/</guid>
      <description>This is a quick post about PCIe scrambler as part of the physical layer. The polynomial is
 X^16 + X^5 + X^4 + X^3 + 1.
 From Wiki, This type of LSFR is called Galois LSFR where bits at taps(xor) is inverted when bit is 1.
 Named after the French mathematician Évariste Galois, an LFSR in Galois configuration, which is also known as modular, internal XORs, or one-to-many LFSR, is an alternate structure that can generate the same output stream as a conventional LFSR (but offset in time).</description>
    </item>
    
    <item>
      <title>AES Rijndael S-box explained</title>
      <link>/posts/2023/02/aes-rijndael-s-box-explained/</link>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/aes-rijndael-s-box-explained/</guid>
      <description>This post is about Rijndael S-box which the first stage of AES encryption. It&amp;rsquo;s substitution lookup table. AES implementation usually uses pre-computed table. I thought it would be fun to calculate it in python to see it action.
From Wiki
 the input is mapped to its multiplicative inverse in GF(28) = GF(2) [x]/(x8 + x4 + x3 + x + 1), Rijndael&amp;rsquo;s finite field. Zero, as the identity, is mapped to itself.</description>
    </item>
    
    <item>
      <title>SVA req/ack assertions</title>
      <link>/posts/2023/02/sva-req/ack-assertions/</link>
      <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/sva-req/ack-assertions/</guid>
      <description>After req edge, req should be stable and ack is low until ack goes high between 0:11
$rose(req) |-&amp;gt; (req &amp;amp;&amp;amp; !ack)[*0:11] ##1 (req &amp;amp;&amp;amp; ack) When ack does high, req should be high as well
!req |-&amp;gt; !ack req goes low after ack goes low
$fell(req) |-&amp;gt; !ack </description>
    </item>
    
    <item>
      <title>UVM cheatsheet - Sequencer to driver connection</title>
      <link>/posts/2023/02/uvm-cheatsheet-sequencer-to-driver-connection/</link>
      <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/uvm-cheatsheet-sequencer-to-driver-connection/</guid>
      <description>sequence  Link to heading   task body(); pkt t = pkt::type_id::create(&amp;#34;t&amp;#34;); start_item(t); tx.randomize(); finish_item(t); get_response(r); endtask driver  Link to heading   class mydriver extends uvm_driver #(pkt); seq_item_port.get_next_item(pkt); seq_item_port.item_done(); endclass or for response ```verilog class mydriver extends uvm_driver; seq_item_port.get(req); // create rsp 	rsp.set_id_info(req); seq_item_port.put(rsp); endclass Connection in Agent  Link to heading   m_drv.seq_item_port.connect(m_seqr.seq_item_export) </description>
    </item>
    
    <item>
      <title>UVM Internals - deepdive into uvm_reg_predictor</title>
      <link>/posts/2023/02/uvm-internals-deepdive-into-uvm_reg_predictor/</link>
      <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/uvm-internals-deepdive-into-uvm_reg_predictor/</guid>
      <description>I uvm_predictor is UVM way to determine the value of registers model by monitoring the bus in case someone other than reg model is changing the registers. The usual boilerplate code looks something like this:
predict.map = regmodel.default_map; predict.adapter = reg2rw; // reg2rw is adapter  bus.mon.ap.connect(predict.bus_in); regmodel.default_map.set_auto_predict(0); Looking at the source code, The following important variables bus_in, map and adapter.
`uvm_component_param_utils(uvm_reg_predictor#(BUSTYPE)) // Variable: bus_in  //  // Observed bus transactions of type ~BUSTYPE~ are received from this  // port and processed.</description>
    </item>
    
    <item>
      <title>UVM Internals - Deepdive into uvm_reg_bit_bash_seq</title>
      <link>/posts/2023/02/uvm-internals-deepdive-into-uvm_reg_bit_bash_seq/</link>
      <pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/uvm-internals-deepdive-into-uvm_reg_bit_bash_seq/</guid>
      <description>This is a deepdive into uvm_reg_bit_bash_seq. It&amp;rsquo;s one of UVM RAL builtin sequences to test registers. uvm_reg_bit_bash_seq can be used as by setting the model and start the sequence and that&amp;rsquo;s it.
seq = uvm_reg_bit_bash_seq::type_id::create(&amp;#34;seq&amp;#34;,this); seq.model = env.regmodel; seq.start(null); seq.wait_for_sequence_state(FINISHED); Starting with body(), it seems reset_blk is empty in src/reg/sequences/uvm_reg_bit_bash_seq.svh
reg_seq = uvm_reg_single_bit_bash_seq::type_id::create(&amp;#34;reg_single_bit_bash_seq&amp;#34;); this.reset_blk(model); model.reset(); do_block(model); The loop works on all registers and calls vm_reg_single_bit_bash_seq on each register
protected virtual task do_block(uvm_reg_block blk); uvm_reg regs[$]; .</description>
    </item>
    
    <item>
      <title>Purpose lost in search of limelight, They said!</title>
      <link>/posts/2023/02/purpose-lost-in-search-of-limelight-they-said/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/purpose-lost-in-search-of-limelight-they-said/</guid>
      <description>Disclaimer: This is joke/rant post. If sarcasm is not your thing, Please press next.
I was recently told something that I didn&amp;rsquo;t know how to respond to. I didn&amp;rsquo;t say anything at the time, but it bugged me for few hours then I thought of something and didn&amp;rsquo;t think about since(Good will hunting?!).
Anyway, someone said
 Your purpose is lost in search of limelight.
 It took me few seconds to parse and process the statement.</description>
    </item>
    
    <item>
      <title>UVM cheatsheet - Misc snippets</title>
      <link>/posts/2023/02/uvm-cheatsheet-misc-snippets/</link>
      <pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/uvm-cheatsheet-misc-snippets/</guid>
      <description>set_drain_time  Link to heading   class test extends uvm_test; task run_phase (uvm_phase phase); phase.raise_objection(this); my_seq.start(m_sequencer); phase.phase_done.set_drain_time(this, 20ns); phase.drop_objection(this); endtask: run_phase endclass function for UVM names  Link to heading   get_full_name() returns hierarchy from uvm_top get_type_name() returns class name get_name() return UVM object name. passed to new() How to start sequence  Link to heading   class seq extends uvm_sequence; task body(); start_item(obj); obj.randomize(); finish_item(obj); endtask endclass seq sq; sq.</description>
    </item>
    
    <item>
      <title>UVM cheatsheet - TLM</title>
      <link>/posts/2023/02/uvm-cheatsheet-tlm/</link>
      <pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/uvm-cheatsheet-tlm/</guid>
      <description>put port to imp  Link to heading   class A; uvm_blocking_put_port #(obj) m_port; task run_phase() m_port.put(pkt); endtask endclass class B; uvm_blocking_put_export #(obj, comp) m_imp; virtual task put(pkt p); endtask endclass a.m_port.connect(b.m_imp); get port/imp  Link to heading   class A; uvm_blocking_get_imp #(obj) m_imp; virtual task get(pkt p); endtask endclass class B; uvm_blocking_get_port #(obj, comp) m_port; task run_phase() m_port.get(pkt); endtask endclass b.m_port.connect(a.m_imp); Port to Port  Link to heading   m_subcompo.</description>
    </item>
    
    <item>
      <title>UVM Internals - What happens when you call set_auto_predict</title>
      <link>/posts/2023/02/uvm-internals-what-happens-when-you-call-set_auto_predict/</link>
      <pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/uvm-internals-what-happens-when-you-call-set_auto_predict/</guid>
      <description>This is a deepdive into how set_auto_predict works.
When called on reg_map, It updates the mirror values with write/read operation going through the reg model.
blabla_reg_block_map.set_auto_predict(1); The function is defined in uvm_reg_map.svh with the following comment
// When ~on~ is ~TRUE~,  // the register model will automatically update its mirror  // (what it thinks should be in the DUT) immediately after  // any bus read or write operation via this map.</description>
    </item>
    
    <item>
      <title>OpenGL and Intel Graphics linux driver deepdive</title>
      <link>/posts/2023/01/opengl-and-intel-graphics-linux-driver-deepdive/</link>
      <pubDate>Sat, 28 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/01/opengl-and-intel-graphics-linux-driver-deepdive/</guid>
      <description>This post is deepdive into how opengl application interacts with underlying software stack which are opengl implementation and graphics drivers in the kernel. The stack is something like this.
User Land ------------&amp;gt; OpenGL implementation (Mesa) -------------&amp;gt; Intel driver (i915) -----------&amp;gt; HW Userland1: application and GLUT  Link to heading   Starting with a simple application to show square polygon. This application uses libglut for window management and to start the opengl application.</description>
    </item>
    
    <item>
      <title>UVM Internals - uvm_pool</title>
      <link>/posts/2023/01/uvm-internals-uvm_pool/</link>
      <pubDate>Thu, 26 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/01/uvm-internals-uvm_pool/</guid>
      <description>This post is about one of UVM utility uvm_pool which is wrapper around Systemverilog associative array. UVM defines singletons from uvm_pool as well.
Starting with some internal inside uvm_pool, poolassoc array is delatred as protected as there couple of setters and getter defines anyway.
typedef uvm_pool #(KEY,T) this_type; static protected this_type m_global_pool; protected T pool[KEY]; get and setare defined as follows. Easy enough!
virtual function T get (KEY key); if (!</description>
    </item>
    
    <item>
      <title>Irish tax calculation using Python Jupyter notebook</title>
      <link>/posts/2023/01/irish-tax-calculation-using-python-jupyter-notebook/</link>
      <pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/01/irish-tax-calculation-using-python-jupyter-notebook/</guid>
      <description>For few years now I have using google sheets to keep track of taxes and check payroll tax calculations (trust but verify, Right?). Anyway, I decided to move to Jupyter notebook/python combo to do the calculations. This is small code to calculate the Irish tax (PAYE, USC, PRSI). I have a bigger dashboard with ESPP, RSU and bonus but I thought it would be an overkill here.
Jupyter  Link to heading   To start a Jupyter notebook:</description>
    </item>
    
    <item>
      <title>UVM Internals - uvm_barrier</title>
      <link>/posts/2023/01/uvm-internals-uvm_barrier/</link>
      <pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/01/uvm-internals-uvm_barrier/</guid>
      <description>This post is about one of UVM synchronization. Well, we all use phases which is implicitly one way to synchronize tasks(build, connect, run). Anyway, barriers is not a new thing it is used a lot in multi-thread/kernel development.
The most import method is wait_for. The processes call it at the point where it wants other processes. In this example, both process will continue after 20 delay.
uvm_barrier b = new(&amp;#39;b_test&amp;#39; , 2); initial begin #10; b.</description>
    </item>
    
    <item>
      <title>How to read network tunnel packets in verilog using VPI</title>
      <link>/posts/2023/01/how-to-read-network-tunnel-packets-in-verilog-using-vpi/</link>
      <pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/01/how-to-read-network-tunnel-packets-in-verilog-using-vpi/</guid>
      <description>In previous post, I went through example how to get raw IP packets instead of going to link/phy layer. So, in this post, I thought what if i have IP stack in verilog and i want to get actual IP packets from the interface instead of creating packets myself? why not?! It&amp;rsquo;s slow sunday after all.
So, the idea is using VPI to get the packets and pass it back to verilog.</description>
    </item>
    
    <item>
      <title>WireGuard and Linux kernel</title>
      <link>/posts/2023/01/wireguard-and-linux-kernel/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/01/wireguard-and-linux-kernel/</guid>
      <description>This post is hello world into vpn technologies (which i am not an expert in), technologies like openVPN and WireGuard and other good stuff.
Back story  Link to heading   Over the years, I mentained my own openVPN server on VPS machine and that setup was working for me. There were several advantages, well, it was cheap (actually free!) considering I was hosting my blog on that machine. But now that i am too old for sh!</description>
    </item>
    
    <item>
      <title>Python package highlight: Easy progress bar - tqdm</title>
      <link>/posts/2022/12/python-package-highlight-easy-progress-bar-tqdm/</link>
      <pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/12/python-package-highlight-easy-progress-bar-tqdm/</guid>
      <description>tqdm is nice package to show progress bar for loops. tqdm() takes iterable and returns another iterable with updating the bar. This is the comments from the tqdm class in tqdm/std.py
  &amp;quot;&amp;quot;&amp;quot; Decorate an iterable object, returning an iterator which acts exactly like the original iterable, but prints a dynamically updating progressbar every time a value is requested. &amp;quot;&amp;quot;&amp;quot;   Quick example of tqdm iterable in a loop.</description>
    </item>
    
    <item>
      <title>Python package of the week: colorama</title>
      <link>/posts/2022/12/python-package-of-the-week-colorama/</link>
      <pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/12/python-package-of-the-week-colorama/</guid>
      <description>colorama is nice little package to add color to console messages. It make the logs look better where you can spot important messages quickly.
I usually add the argument to disable coloring if i need to.
from colorama import Fore,Style import config if not config.batch: class DummyFore: BLACK=RED=GREEN=YELLOW=BLUE=MAGENTA=CYAN=WHITE=RESET=&amp;#39;&amp;#39; class DummyStyle: RESET_ALL = &amp;#34;&amp;#34; saved_Fore, Fore = Fore, DummyFore saved_Style, Style = Style, DummyStyle Then use my package instead using of using colorama directly.</description>
    </item>
    
    <item>
      <title>Cocotb - writing toggle coverage collctor in 20 lines</title>
      <link>/posts/2022/12/cocotb-writing-toggle-coverage-collctor-in-20-lines/</link>
      <pubDate>Mon, 26 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/12/cocotb-writing-toggle-coverage-collctor-in-20-lines/</guid>
      <description>This post is about poor man&amp;rsquo;s toggle coverage collector written purely in cocotb. You may ask why? and i will simply reply by with &amp;ldquo;why not?!&amp;rdquo;.
First thing is getting design signals through cocotb infrastructure. I know that signals would be of type ModifiableObject so i use dir to everything and register monitors on signal objects.
for i in dir(tb.top): o = getattr(tb.top,i) if (isinstance(o, ModifiableObject)): S = SignalToggleCov(o) sigs.append(S) cocotb.</description>
    </item>
    
    <item>
      <title>SAWD - the fun version</title>
      <link>/posts/2022/12/sawd-the-fun-version/</link>
      <pubDate>Fri, 23 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/12/sawd-the-fun-version/</guid>
      <description>Disclaimer: I am writing this post while recovering from 3-day covid-y fever. So, there is a chance that memes to technical details ratio is alarmingly high. If you want the boring technical stuff, read the paper :^)
This post is about dvcon paper titled SAWD: Systemverilog Assertions waveform based development tool which was a weekend project that escalated quickly.
Problem statement  Link to heading   Starting with problem statement, I will just use this xkcd joke that I am big fan of :)</description>
    </item>
    
    <item>
      <title>TP-Link TL-WN722N adapter - Linux driver - Part1</title>
      <link>/posts/2022/12/tp-link-tl-wn722n-adapter-linux-driver-part1/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/12/tp-link-tl-wn722n-adapter-linux-driver-part1/</guid>
      <description>This is the first post in a series about TP-link TL-WN722N wifi adapter. it&amp;rsquo;s a cool little gadget that provides wifi over USB. This post is about usb registration from the linux driver.
Let&amp;rsquo;s dive into the deep end which is the USB driver.The usb interface would eventually register network device and cfg80211 devices for ioctl
starting with entry point in the driver
module_init(rtw_drv_entry); module_exit(rtw_drv_halt); rtw_drv_entry calls usb_register to register this driver (short and sweet).</description>
    </item>
    
    <item>
      <title>DWARF primer for fun and fun</title>
      <link>/posts/2022/12/dwarf-primer-for-fun-and-fun/</link>
      <pubDate>Sat, 10 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/12/dwarf-primer-for-fun-and-fun/</guid>
      <description>If you used GDB before, This means you used some kind of debuggin info in the ELF. one of the famous ones is DWARF. Wiki one-liner is
 DWARF is a widely used, standardized debugging data format. DWARF was originally designed along with Executable and Linkable Format (ELF), although it is independent of object file formats
 Dwarf information is divided into several ELF sections and described with Debugging Information Entry (DIE).</description>
    </item>
    
    <item>
      <title>DVcon random thoughts - Multiple discovery!</title>
      <link>/posts/2022/12/dvcon-random-thoughts-multiple-discovery/</link>
      <pubDate>Fri, 09 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/12/dvcon-random-thoughts-multiple-discovery/</guid>
      <description>Have you ever read a paper or while talking to someone, and you think this is a good idea. It&amp;rsquo;s really good that you had it before.
During DVcon this year, I attended a lot of presentations and had great discussions with awesome people. It is really weird how we sometimes have the same idea at the same time. Like exactly the same idea!
Apparently, This has a name &amp;ldquo;Multiple discovery&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>Python: bisect</title>
      <link>/posts/2022/11/python-bisect/</link>
      <pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/python-bisect/</guid>
      <description>bisect_left is documented by link. Basically, it returns the index to of sorted list to keep the list sorted.
 bisect.bisect_left(a, x, lo=0, hi=len(a), *, key=None) Locate the insertion point for x in a to maintain sorted order. The parameters lo and hi may be used to specify a subset of the list which should be considered; by default the entire list is used. If x is already present in a, the insertion point will be before (to the left of) any existing entries.</description>
    </item>
    
    <item>
      <title>force-riscv hello world</title>
      <link>/posts/2022/11/force-riscv-hello-world/</link>
      <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/force-riscv-hello-world/</guid>
      <description>This post is force-riscv which is framework to generate random sequences of riscv instructions. I still need to dig deeper into the docs/code to understand the full feature list, but it seems very powerful with option to constraint the generation.
Building  Link to heading   Building force-riscv as simple as calling make
git clone https://github.com/openhwgroup/force-riscv cd force-riscv source setenv.bash make Smoke test  Link to heading   In README.</description>
    </item>
    
    <item>
      <title>Levenshtein similarity matrix and Affinity Propagation clustering</title>
      <link>/posts/2022/11/levenshtein-similarity-matrix-and-affinity-propagation-clustering/</link>
      <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/levenshtein-similarity-matrix-and-affinity-propagation-clustering/</guid>
      <description>This post is a breakdown of the code in link which uses levenshtein and affinity propagation to cluster string list.
In previous post, I wrote simple levenshtein implementation to calculate the similarity between strings. And it turns out to be a good metric for clustering. Basically, affinity propagation and distance similarity matrix is match made in heaven.
distance.levenshtein is called with each word in the wordlist to calculate the distance.</description>
    </item>
    
    <item>
      <title>Forget Schrodinger&#39;s cat, Let me tell you about Schrodinger&#39;s visa</title>
      <link>/posts/2022/11/forget-schrodingers-cat-let-me-tell-you-about-schrodingers-visa/</link>
      <pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/forget-schrodingers-cat-let-me-tell-you-about-schrodingers-visa/</guid>
      <description>We all know about Schrodinger&amp;rsquo;s cat, Well, At least whatever I remember from that undergrad physics. It&amp;rsquo;s a thought experiment that goes as follows:
 He imagined a box containing a radioactive atom, a vial of poison and a cat. Governed by quantum rules, the radioactive atom can either decay or not at any given moment. There’s no telling when the moment will come, but when it does decay, it breaks the vial, releases the poison and kills the cat.</description>
    </item>
    
    <item>
      <title>PyQt5 hello world</title>
      <link>/posts/2022/11/pyqt5-hello-world/</link>
      <pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/pyqt5-hello-world/</guid>
      <description>GUI can be fun but choosing the right library for the job can be daunting task. I recently evaluated several libraries GTK,wxWidgets and other libraries. and finally settled on Qt. and PyQt5 is great because it is easy to integrate with python application.
This is hello world and explanation to create and populate PyQt5 widgets.
Starting with QApplication instantiated from QtWidgets. The typical PyQt5 skelton uses and class from QMainWindow. In this example, it&amp;rsquo;s called MainWindow.</description>
    </item>
    
    <item>
      <title>Python: Higher order functions - reduce</title>
      <link>/posts/2022/11/python-higher-order-functions-reduce/</link>
      <pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/python-higher-order-functions-reduce/</guid>
      <description>This post is about reduce. It&amp;rsquo;s higher order function part of functool package.
The documentation describes it as
 Apply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value.
 combing lambda and reduce can be save a lot of time while processing bunch of lists. It recently saved me some time to and all expressions in list of objects.</description>
    </item>
    
    <item>
      <title>Using aircrack to get wifi password</title>
      <link>/posts/2022/11/using-aircrack-to-get-wifi-password/</link>
      <pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/using-aircrack-to-get-wifi-password/</guid>
      <description>It&amp;rsquo;s Thursday evening and I can&amp;rsquo;t think of something to do. So, decided to write about cracking my own wifi using airmon/aircrack. I had a README written long time ago, so i had to clean it up and publish.
first, we need to know the network interface, lets call it intf. We need to switch the interface to monitoring mode (if hardware supports of course).
sudo airmon-ng start intf The above command will remove that interface and add another with adding mon at the end.</description>
    </item>
    
    <item>
      <title>Latex - The minimal paper abstract</title>
      <link>/posts/2022/11/latex-the-minimal-paper-abstract/</link>
      <pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/latex-the-minimal-paper-abstract/</guid>
      <description>I recently submitted a paper abstract but the conference didn&amp;rsquo;t specify the format for the abstract. Obviously, I didn&amp;rsquo;t use word, This is minimal template for paper abstract i used instead.
\documentclass[a4paper]{article} \usepackage{amsmath} \usepackage{amsfonts} \usepackage{amssymb} \usepackage{graphicx} \usepackage{float} \usepackage{caption} \usepackage{subcaption} \usepackage{listings} \usepackage{xcolor} \usepackage[margin=0.5in]{geometry} \usepackage{tikz} \usepackage{pdfpages} \begin{document} \pagenumbering{arabic} \Large \begin{center} Title\\ %\hspace{10pt}  \large Author$^1$ \\ %\hspace{10pt}  \small $^1$company\\ email \end{center} %\hspace{10pt}  \normalsize \section{Related Work} Test \end{document} </description>
    </item>
    
    <item>
      <title>Python packages of the week: Jinja2 and pystache</title>
      <link>/posts/2022/11/python-packages-of-the-week-jinja2-and-pystache/</link>
      <pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/python-packages-of-the-week-jinja2-and-pystache/</guid>
      <description>Let&amp;rsquo;s start with an important question: what is the plural of Hello world? Is it Hello worlds? Anyway, I recently used pystache because I wanted something simpler than Jinja2. So, Thought it would be nice to compare small hello world for both engines.
pystache  Link to heading   pystche is very simple to use. Just render and passing template and variable dict.
import pystache template = &amp;#34;Hello World and {{ person }}&amp;#34; template_txt = pystache.</description>
    </item>
    
    <item>
      <title>Cocotb Internals - xunit Reporter</title>
      <link>/posts/2022/11/cocotb-internals-xunit-reporter/</link>
      <pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/cocotb-internals-xunit-reporter/</guid>
      <description>cocotb generates results.xml file which xunit format (XML). I didn&amp;rsquo;t look that long for standard xunit schema because it doesn&amp;rsquo;t seem to exist. So, I analysed the xunit_reporter.py instead. Well, I can&amp;rsquo;t sleep anyway. so why not?!
I have to start by saying &amp;ldquo;xml.. ugh!&amp;rdquo;&amp;hellip; writing the IPXACT parser made me hate xml forever.
The xunit report from simple_dff would look like this:
&amp;lt;testsuites name=&amp;#34;results&amp;#34;&amp;gt; &amp;lt;testsuite name=&amp;#34;all&amp;#34; package=&amp;#34;all&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;random_seed&amp;#34; value=&amp;#34;1667509785&amp;#34; /&amp;gt; &amp;lt;testcase name=&amp;#34;dff_simple_test&amp;#34; classname=&amp;#34;test_dff&amp;#34; file=&amp;#34;~/examples/simple_dff/test_dff.</description>
    </item>
    
    <item>
      <title>Cocotb Internals - wavedrom dumper</title>
      <link>/posts/2022/11/cocotb-internals-wavedrom-dumper/</link>
      <pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/cocotb-internals-wavedrom-dumper/</guid>
      <description>One of the things I love about reading open source is randomly finding unused features. There are many reasons a part of the code is not used, It could can experimental, untested or it is only there because the developer had too much fun writing it :) Anyway, It&amp;rsquo;s interesting when i find these bits..
In cocotb,I found built-in utility to generate wavedrom. It&amp;rsquo;s defined in cocotb/wavedrom.py. From comments, I modified dff_simple_test to dump dut.</description>
    </item>
    
    <item>
      <title>The gamification of unfinished side projects</title>
      <link>/posts/2022/10/the-gamification-of-unfinished-side-projects/</link>
      <pubDate>Sun, 30 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/the-gamification-of-unfinished-side-projects/</guid>
      <description>Probably, you are wondering what that title means and what Bojack Horseman is doing here. Actually, This started as a serious question.
How to finish something when the reason to do that is elusive?
The thing is I have this bad habit of starting things purely for intellectual curiosity,So, I ended up with hundreds of README, dozens of git repos, half-written paper abstracts and earmarked books lurking around for years. There is too much to read and learn with very little time to do it.</description>
    </item>
    
    <item>
      <title>Cocotb Internals - python runner</title>
      <link>/posts/2022/10/cocotb-internals-python-runner/</link>
      <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/cocotb-internals-python-runner/</guid>
      <description>In older post, I went through cocotb Makefile and i wished if there python runner. Well, I should have wished for something better because I found there is already a runner. I just didn&amp;rsquo;t see it :)
The runner is called as follows to build and run test
runner = get_runner(sim)() runner.build( verilog_sources=verilog_sources, vhdl_sources=vhdl_sources, toplevel=&amp;#34;dff&amp;#34; ) runner.test(toplevel=&amp;#34;dff&amp;#34;, py_module=&amp;#34;test_dff&amp;#34;) Build  Link to heading   In runner.py, get_runner returns the runner depending on simulator string.</description>
    </item>
    
    <item>
      <title>verilator - Hello World and Beyond</title>
      <link>/posts/2022/10/verilator-hello-world-and-beyond/</link>
      <pubDate>Sun, 23 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/verilator-hello-world-and-beyond/</guid>
      <description>verilator is, well, I will just paste the wiki one-liner here
 Verilator is a free and open-source software tool which converts Verilog to a cycle-accurate behavioral model in C++ or SystemC.
 Similar to iverilog, It compiles verilog to a different language but verilator generates C++ not the iverilog-specific commands.
Installation  Link to heading   git clone https://github.com/verilator/verilator autoconf ./configure --prefix=`pwd`/build make install Or we can use the pre-built packages.</description>
    </item>
    
    <item>
      <title>Longest common sequence</title>
      <link>/posts/2022/10/longest-common-sequence/</link>
      <pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/longest-common-sequence/</guid>
      <description>In previous post, I wrote about Levenshtein distance which is a good distance metric for sequences with different length. This post is about Longest common sub sequence (LCS)
 The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).
 The thing about LCS is that the common subsequence is not consecutive positions within the sequences.</description>
    </item>
    
    <item>
      <title>Cocotb Deepdive - Edge Trigger and cocotb trampoline</title>
      <link>/posts/2022/10/cocotb-deepdive-edge-trigger-and-cocotb-trampoline/</link>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/cocotb-deepdive-edge-trigger-and-cocotb-trampoline/</guid>
      <description>I wrote a previous post about clock and Timer triggers in cocotb. Considering that all triggers yield to core scheduler, I thought to do another trigger (Posedge) and the trampoline.
Class hierarchy  Link to heading   Starting with FallingEdge where it takes the signal handle, In this example, dut.clk is passed to FallingEdge
await FallingEdge(dut.clk) FallingEdge sets the edge type for generic _EdgeBase
class FallingEdge(_EdgeBase): &amp;#34;&amp;#34;&amp;#34;Fires on the falling edge of *signal*, on a transition from ``1`` to ``0``.</description>
    </item>
    
    <item>
      <title>python asyncio - user-defined await-able object</title>
      <link>/posts/2022/10/python-asyncio-user-defined-await-able-object/</link>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/python-asyncio-user-defined-await-able-object/</guid>
      <description>__await__ method defines the behavior of class with await is called on class object.
 The await() magic method defines the behavior of an awaitable object. An awaitable object is used to implement asynchronous behavior in Python.
 __await__ is not async method but it returns closure __await__ from a closure method.
import asyncio from collections.abc import Awaitable class Trigger(Awaitable): def __init__(self): pass def __await__(self): async def c(): print(&amp;#34;Do async stuff here&amp;#34;) return self return c().</description>
    </item>
    
    <item>
      <title>Cocotb Deepdive - start vs start_soon and scheduler implementation</title>
      <link>/posts/2022/10/cocotb-deepdive-start-vs-start_soon-and-scheduler-implementation/</link>
      <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/cocotb-deepdive-start-vs-start_soon-and-scheduler-implementation/</guid>
      <description>cocotb provides couple of routines to start concurrent coroutine. The implementation shows that start calls start_soon and yield for the forked process to start right now. That&amp;rsquo;s a big deal because start_soon doesn&amp;rsquo;t star the coro until the parent coro yields control (ie await from something).
def start_soon(coro: Union[Task, Coroutine]) -&amp;gt; Task: &amp;#34;&amp;#34;&amp;#34; Schedule a coroutine to be run concurrently. Note that this is not an async function, and the new task will not execute until the calling task yields control.</description>
    </item>
    
    <item>
      <title>elliptical curve crypto key exchange</title>
      <link>/posts/2022/10/elliptical-curve-crypto-key-exchange/</link>
      <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/elliptical-curve-crypto-key-exchange/</guid>
      <description>In previous post, I wrote simple Diffie-Hellman key exchange algorithm, so I wanted to do elliptical curve key exchange as well. Again, The math is there in crypto book. but the algorithm is simple(strangely simple).
The trick is calculating aP where P is point on the elliptical curve that satisfies y^2 = x^3+ a.x + y. The following algorithm calculates the addition (and incase 2 points are the same, it is doubling).</description>
    </item>
    
    <item>
      <title>Portable Stimulus Standard for fun and profit</title>
      <link>/posts/2022/10/portable-stimulus-standard-for-fun-and-profit/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/portable-stimulus-standard-for-fun-and-profit/</guid>
      <description>These are my notes while reading the Portable Stimulus Standard. I will keep updating on the go.
The specs define PSS as:
 The Portable Test and Stimulus Standard defines a specification for creating a single representation of stimulus and test scenarios, usable by a variety of users across different levels of integration under different configurations, enabling the generation of different implementations of a scenario that run on a variety of execution platforms, including, but not necessarily limited to, simulation, emulation, FPGA prototyping, and post-silicon.</description>
    </item>
    
    <item>
      <title>That time I found a typo in Portable Stimulus Standard</title>
      <link>/posts/2022/10/that-time-i-found-a-typo-in-portable-stimulus-standard/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/that-time-i-found-a-typo-in-portable-stimulus-standard/</guid>
      <description>For few weeks, I was obsessed(for the lack of better word) with PSS and naturally I decided to write the BNF in LARK and I even stared on AST transformations. Anyway, while I am copying parts of BNF I noticed an error with type_identifier. When i looked at the rule, I noticed it is saying type_identifer_elem. See the issue there?
type_identifier: [ &amp;#34;::&amp;#34; ] type_identifer_elem ( &amp;#34;::&amp;#34; type_identifer_elem )* Now, i saw the glitch in the matrix, I have no idea how to report it.</description>
    </item>
    
    <item>
      <title>The short(pun intended) story of ELF and to parse them</title>
      <link>/posts/2022/10/the-shortpun-intended-story-of-elf-and-to-parse-them/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/the-shortpun-intended-story-of-elf-and-to-parse-them/</guid>
      <description>This post is about ELF(Executable and Linkable Format) python parser but I will briefly go through ELF specs first. Funny story, I once gave couple of presentations about DPI and I thought it&amp;rsquo;s funny to have few slides about GCC and ELF. I called it &amp;ldquo;The short sort of ELF&amp;rdquo; and as expected, the joke didn&amp;rsquo;t land. Good thing I am a not comedian :)
The ELF  Link to heading   ELF is UNIX standard for executable format supported by toolchains(compilers/linkers) and loaders.</description>
    </item>
    
    <item>
      <title>PCIE TLP Header python serializer</title>
      <link>/posts/2022/10/pcie-tlp-header-python-serializer/</link>
      <pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/pcie-tlp-header-python-serializer/</guid>
      <description>I always wanted to write scapy-like framework for PCIE TLP serialization and This is a quick and dirty prototype I wrote at 1 AM. So, Don&amp;rsquo;t judge me.
The final output of the serializer would be as follows. basically, something similar to scapy or wireshark breakdown of header fields.
name:memwr32 size:96 0000000000000000000000100000000000000000100000001100000001111111100000000000000010010000000000000 name:hdr size:32 000000000000000000000010000000000 name:RESERVED size:1 0 name:FMT size:2 00 name:TYPE size:5 00000 name:RESERVED size:1 0 name:TC size:3 000 name:RESERVED size:4 0000 name:TD size:1 0 name:EP size:1 0 name:ATTR size:2 00 name:AT size:2 00 name:LENGTH size:10 10000000000 name:requestID size:16 0000000100000001 name:BUS size:8 00000001 name:DEVICE size:4 0000 name:FUNCTION size:4 0001 name:TAG size:8 10000000 name:LASTDWBE size:4 1111 name:STDWBE size:4 1111 name:ADDR size:32 00000000000000010010000000000000 The PCIE TLP (Tranaction Layer Packet) header depends on type of transaction: Memory, I/O, Configuration, and Messages.</description>
    </item>
    
    <item>
      <title>AIG - And Inverter graph</title>
      <link>/posts/2022/10/aig-and-inverter-graph/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/aig-and-inverter-graph/</guid>
      <description>An and-inverter graph (AIG) is a directed, acyclic graph that represents a structural implementation of the logical functionality of a circuit or network. An AIG consists of two-input nodes representing logical conjunction, terminal nodes labeled with variable names, and edges optionally containing markers indicating logical negation. This representation of a logic function is rarely structurally efficient for large circuits, but is an efficient representation for manipulation of boolean functions. Typically, the abstract graph is represented as a data structure in software.</description>
    </item>
    
    <item>
      <title>The diffie hellman Key Exchange</title>
      <link>/posts/2022/10/the-diffie-hellman-key-exchange/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/the-diffie-hellman-key-exchange/</guid>
      <description>This post is about Diffie-Hellman exchange key protocol to be used for symmetric crypto protocol like AES. From Wiki:
 Diffie–Hellman key exchange[nb 1] is a method of securely exchanging cryptographic keys over a public channel and was one of the first public-key protocols as conceived by Ralph Merkle and named after Whitfield Diffie and Martin Hellman.
 Same as RSA, i am not going to go through the math, but the algorithm defines how Alice and Bob create the their keys and eventually create the common key.</description>
    </item>
    
    <item>
      <title>Wavedrom to SVA generator</title>
      <link>/posts/2022/10/wavedrom-to-sva-generator/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/wavedrom-to-sva-generator/</guid>
      <description>WaveDrom is really great tool to generate timing diagram. It provide nice features to annotate the diagrams with arrows to link between edges. So, it was fun to invent simple convention using WaveDrom to generate simple SVA expressions.
I thought to start with 2 assertions:
 -~&amp;gt; Horizontal arrow between nodes -|&amp;gt; Vertical arrow between nodes  The first step is defining the nodes to anchor the arrows(Horizontal and Vertical).</description>
    </item>
    
    <item>
      <title>The slowest RSA implementation</title>
      <link>/posts/2022/09/the-slowest-rsa-implementation/</link>
      <pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/the-slowest-rsa-implementation/</guid>
      <description>This post is about the slowest and worst-ish implementation of RSA, RSA is an important public key encryption algorithm. From wiki:
 RSA (Rivest–Shamir–Adleman) is a public-key cryptosystem that is widely used for secure data transmission. It is also one of the oldest. The acronym &amp;ldquo;RSA&amp;rdquo; comes from the surnames of Ron Rivest, Adi Shamir and Leonard Adleman, who publicly described the algorithm in 1977
 The math behind RSA requires more mental calories than i can afford on Saturday morning.</description>
    </item>
    
    <item>
      <title>UVM Internals - objections</title>
      <link>/posts/2022/09/uvm-internals-objections/</link>
      <pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/uvm-internals-objections/</guid>
      <description>This post is a deep dive into UVM objections implementation. Objections are UVM mechanism to control test shutdown(or stopping shutdown really).. It basically keeps things running until all important things stops running(ie objections are dropped).
raise_objection and drop_objection are used at the start and end of run_phase as follows
55 class test extends test_base; 56 `uvm_component_utils(test) 57 61 62 task run_phase(uvm_phase phase); 65 66 phase.raise_objection(this); ... ... 87 phase.drop_objection(this); 88 endtask RANT: Before I started this, It seemed simple enough but it turned out to be more complicated than I thought.</description>
    </item>
    
    <item>
      <title>python asyncio - not-so-deep dive into asyncio and cpython</title>
      <link>/posts/2022/09/python-asyncio-not-so-deep-dive-into-asyncio-and-cpython/</link>
      <pubDate>Fri, 23 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/python-asyncio-not-so-deep-dive-into-asyncio-and-cpython/</guid>
      <description>This post is about python asyncio. asyncio is python asynchronous implementation providing event loop functionality. From &amp;ldquo;event loop&amp;rdquo; wiki:
 In computer science, the event loop is a programming construct or design pattern that waits for and dispatches events or messages in a program. The event loop works by making a request to some internal or external &amp;ldquo;event provider&amp;rdquo; (that generally blocks the request until an event has arrived), then calls the relevant event handler (&amp;ldquo;dispatches the event&amp;rdquo;).</description>
    </item>
    
    <item>
      <title>10 years - Now what?</title>
      <link>/posts/2022/09/10-years-now-what/</link>
      <pubDate>Sat, 17 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/10-years-now-what/</guid>
      <description>2 AM Saturday 17 Sep 2022 Cork City
This might be the bad pizza I had earlier talking (BOOM Jerry Maguire reference!),but This year marks ten years since I graduated and I find myself thinking about this question, Should i retire, move to Peru, change my name to Javier, grow a ponytail, start Alpaca farm and never touch a computer never again? Probably Not. I could pull off a ponytail though.</description>
    </item>
    
    <item>
      <title>Cocotb Deepdive - Makefiles</title>
      <link>/posts/2022/09/cocotb-deepdive-makefiles/</link>
      <pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/cocotb-deepdive-makefiles/</guid>
      <description>This post is about the Makefile shipped with cocotb. I will trace Makefiles targets for iverilog but most of the target are generic.
Startin with final outupt with &amp;ldquo;make -n&amp;rdquo; when running one of the examples examples/adder/tests/
cd cocotb/examples/adder/tests export PYTHONPATH=$PWD/../model:$PYTHONPATH echo &amp;#34;+timescale+1ns/1ps&amp;#34; &amp;gt; sim_build/cmds.f iverilog -o sim_build/sim.vvp -D COCOTB_SIM=1 -s adder -f sim_build/cmds.f -g2012 ../hdl/adder.sv MODULE=test_adder TESTCASE= TOPLEVEL=adder TOPLEVEL_LANG=verilog vvp -M ../../../.venv/lib/python3.8/site-packages/cocotb/libs -m libcocotbvpi_icarus sim_build/sim.vvp So, How do we get here?</description>
    </item>
    
    <item>
      <title>Recruiting - My 2cents </title>
      <link>/posts/2022/09/recruiting-my-2cents/</link>
      <pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/recruiting-my-2cents/</guid>
      <description>I have been seeing a lot hate towards recruiters these days and i can&amp;rsquo;t really understand why. really Why?
The more I think about it, recruiting is a hard job. I know it may sound simplistic(and I may be totally wrong here), It is a sales job but it is about selling the idea of candidate to a company and selling the idea of company to a candidate. It is about finding the perfect person for the perfect job at the perfect time.</description>
    </item>
    
    <item>
      <title>Cocotb Deepdive - Clock and Timer Trigger</title>
      <link>/posts/2022/09/cocotb-deepdive-clock-and-timer-trigger/</link>
      <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/cocotb-deepdive-clock-and-timer-trigger/</guid>
      <description>cocob provides a periodic clock class Clock which depends on Timer trigger. I will start with an examples of Clock usage.
clock = Clock(dut.clk, 10, units=&amp;#34;us&amp;#34;) cocotb.start_soon(clock.start()) Note That start_soon is just starting cocotb coroutine after the current routines yields. Any let&amp;rsquo;s focus on Clock
In Clock, The initialization __init__ sets some local vars (most importantly period and half_period)
118 BaseClock.__init__(self, signal) 126 self.period = get_sim_steps(period, units) 127 self.half_period = get_sim_steps(period / 2.</description>
    </item>
    
    <item>
      <title>Solving Magic Square using Systemverilog Constraints</title>
      <link>/posts/2022/09/solving-magic-square-using-systemverilog-constraints/</link>
      <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/solving-magic-square-using-systemverilog-constraints/</guid>
      <description>This is probably the last post in this series, at least until i find an interesting problem.
Magic square is an interesting one problem indeed. From wiki:
 In recreational mathematics, a square array of numbers, usually positive integers, is called a magic square if the sums of the numbers in each row, each column, and both main diagonals are the same
 It&amp;rsquo;s interesting because constraints span across rows, columns and diagonals.</description>
    </item>
    
    <item>
      <title>Commentary on Jerry Maguire mission statement</title>
      <link>/posts/2022/09/commentary-on-jerry-maguire-mission-statement/</link>
      <pubDate>Mon, 05 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/commentary-on-jerry-maguire-mission-statement/</guid>
      <description>Jerry Maguire is one of my all-time favourite movies. I find the mission statement Jerry wrote in his Miami hotel room the most interesting part. The idea of having a moment of clarity (breakhthrough not a breakdown) is life-changing. He (i know Jerry is not real :) ) wrote a genius document that applies to any profession really not just sports agents.
Cameron Crowe released the full mission statement on the 20th anniversary at link.</description>
    </item>
    
    <item>
      <title>Linux tap interface - Hello World</title>
      <link>/posts/2022/09/linux-tap-interface-hello-world/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/linux-tap-interface-hello-world/</guid>
      <description>tap network interface is a way to forward data layer packets (ethernet) to user space. it is very similar to tun(actually they share command and /dev). note that run works on network layer (forwards IP packets to user space).
We will use 3 shells in this examples
Shell 1  Link to heading   Create interface and start a ping
sudo ip tuntap add mode tap dev tap0 sudo ip addr add 10.</description>
    </item>
    
    <item>
      <title>Solving No-three-in-line puzzle using SV constraints</title>
      <link>/posts/2022/09/solving-no-three-in-line-puzzle-using-sv-constraints/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/solving-no-three-in-line-puzzle-using-sv-constraints/</guid>
      <description>Continuing the series on solving puzzles using SV constraints, This post is about no-three-in-line puzzle. From Wiki,
 The no-three-in-line problem in discrete geometry asks how many points can be placed in the NxN grid so that no three points lie on the same line.
 It&amp;rsquo;s nice problem because it&amp;rsquo;s more complicated than n-queen. Why more complicated? mainly because we need to include more than just 2 cells in the constraints.</description>
    </item>
    
    <item>
      <title>systemd service - hello world</title>
      <link>/posts/2022/09/systemd-service-hello-world/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/systemd-service-hello-world/</guid>
      <description>In previous posts, I found a workaround for the iwlwifi crashing driver. In this post, I wrote small script to detect the crash and apply the workaround. Also, I installed systemd service to run the script on boot so i don&amp;rsquo;t have to.
Starting with the script. It&amp;rsquo;s basically while(1) to monitor the crash
found=0 while [ $found -eq 0 ] do rm -f /tmp/d.log dmesg &amp;gt; /tmp/d.log if tail -n 5 /tmp/d.</description>
    </item>
    
    <item>
      <title>Wireshark protocol dissector</title>
      <link>/posts/2022/09/wireshark-protocol-dissector/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/wireshark-protocol-dissector/</guid>
      <description>Wireshark is popular protocol analyzer used for network or other packet based protocols. It uses dissectors for each protocol. The protocols are builtin but wireshark provides lua interface to define and register new dissectors.
Generating pcap with scapy  Link to heading   I am using scapy to generate pcap for made-up protocol with two fields name and len. In this example, I am generating 2 packets in pcap.</description>
    </item>
    
    <item>
      <title>iwlwifi driver crash - The problem and workaround</title>
      <link>/posts/2022/08/iwlwifi-driver-crash-the-problem-and-workaround/</link>
      <pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/08/iwlwifi-driver-crash-the-problem-and-workaround/</guid>
      <description>iwlwifi has been crashing a lot on me recently and it is driving me crazy because the only way to fix it is rebooting. The errors indicate that crash happens while NIC is waking up. I am currently using 5.4 kernel and i will see if updating the new version fixes it. At this point, I managed to produce the crash and test a workaround without rebooting.
The problem  Link to heading   Starting with dmesg errors</description>
    </item>
    
    <item>
      <title>PCIe SRIOV linux initialization</title>
      <link>/posts/2022/08/pcie-sriov-linux-initialization/</link>
      <pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/08/pcie-sriov-linux-initialization/</guid>
      <description>single root input/output virtualization (SR-IOV) is PCIe specifications that provide virtual function (in this context, the usual PCIe function would be physical function). virtual function is used VM for better performance. It allows flow the data like physical function with limited capabilities.
Finding SRIOV capabilities space  Link to heading   897 int pci_iov_init(struct pci_dev *dev) 898 { 899 int pos; 900 901 if (!pci_is_pcie(dev)) 902 return -ENODEV; 903 904 pos = pci_find_ext_capability(dev, PCI_EXT_CAP_ID_SRIOV); 905 if (pos) 906 return sriov_init(dev, pos); 907 908 return -ENODEV; 909 } pos is found by pci_find_ext_capability which calls pci_find_next_ext_capability to get the extended configuration capabilities with SRIOV ID.</description>
    </item>
    
    <item>
      <title>iwlwifi - Not The Hitchhiker&#39;s guide to intel wireless driver</title>
      <link>/posts/2022/08/iwlwifi-not-the-hitchhikers-guide-to-intel-wireless-driver/</link>
      <pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/08/iwlwifi-not-the-hitchhikers-guide-to-intel-wireless-driver/</guid>
      <description>This is the second post in a series about iwlwifi the linux intel wireless controller driver. Unlucky(or luck) me, this driver crashes randomly on my machine. I decided to debug the crash before giving up and bump up kernel and modules version. iwlwifi is basically PCIe driver but it also interacts with network stack and network configuration stack.
PCIe driver  Link to heading   Starting with PCIe side, Drivers have to register with the PCIe subsystem and the PCIe core will iterate devices and match drivers to the devices.</description>
    </item>
    
    <item>
      <title>A 5 minute tour of my PCI wireless controller sysfs</title>
      <link>/posts/2022/08/a-5-minute-tour-of-my-pci-wireless-controller-sysfs/</link>
      <pubDate>Tue, 23 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/08/a-5-minute-tour-of-my-pci-wireless-controller-sysfs/</guid>
      <description>It started with me trying to debug iwlwifi kernel panic which brings down the network interface. So, I thought to write some stuff about the controller itself.
Starting with lspci output which basically reads sysfs (that would be /sys, more about sysfs in another post).
$ lspci -s 0000:03:00.0 -v 03:00.0 Network controller: Intel Corporation Dual Band Wireless-AC 3165 Plus Bluetooth (rev 99) Subsystem: Intel Corporation Dual Band Wireless-AC 3165 Plus Bluetooth Flags: bus master, fast devsel, latency 0, IRQ 125 Memory at 91000000 (64-bit, non-prefetchable) [size=8K] Capabilities: &amp;lt;access denied&amp;gt; Kernel driver in use: iwlwifi Kernel modules: iwlwifi Well, I can see all the information at /sys/bus/pci/devices/0000:03:00.</description>
    </item>
    
    <item>
      <title>Python package of the week: vcdvcd</title>
      <link>/posts/2022/08/python-package-of-the-week-vcdvcd/</link>
      <pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/08/python-package-of-the-week-vcdvcd/</guid>
      <description>This post is about VCD parsing library called vcdvcd. It&amp;rsquo;s great way to load up vcd and do some processing instead of losing my mind looking at gtkwave. Honestly, The API documentation is not that great but there is an examples.py which helped a little.
So, I wrote this example which should be good enough to get started. It iterates the design hierarchy and gets tv (time and value) tuples for each signal.</description>
    </item>
    
    <item>
      <title>Python classmethod vs static method</title>
      <link>/posts/2022/08/python-classmethod-vs-static-method/</link>
      <pubDate>Fri, 12 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/08/python-classmethod-vs-static-method/</guid>
      <description>classmethod and staticmethod are very similar. both are called by class but classmethod get passed class object as first argument(convention is to call it cls)
class c: @staticmethod def stmethod(arg): print(arg) @classmethod def clsmethod(cls, args): print(cls, args) c.stmethod(&amp;#34;static method&amp;#34;) c.clsmethod(&amp;#34;class method&amp;#34;) </description>
    </item>
    
    <item>
      <title>Python Ellipsis</title>
      <link>/posts/2022/08/python-ellipsis/</link>
      <pubDate>Fri, 12 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/08/python-ellipsis/</guid>
      <description>I was today years old when i knew ellipsis can be used as empty body. handy if you want to define something but not sure what to write there. It&amp;rsquo;s basically same as pass.
class s: ... </description>
    </item>
    
    <item>
      <title>POSIX C client and server examples</title>
      <link>/posts/2022/08/posix-c-client-and-server-examples/</link>
      <pubDate>Mon, 08 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/08/posix-c-client-and-server-examples/</guid>
      <description>Funny story, 7 years ago, I accidentally built RCE(remove code execution protocol) between systemverilog and Matlab. The project died long time ago but still one the most fun project i have worked on. At the time, I started with a simple TCP client/server implementation and build binary parsers above it. Anyway,This post is about that simple TCP client/server sockets.
Posix sockets is the de-facto standard for network stack implementation. It evolved from BSD sockets (more details in wiki).</description>
    </item>
    
    <item>
      <title>OpenGL Hello world</title>
      <link>/posts/2022/07/opengl-hello-world/</link>
      <pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/07/opengl-hello-world/</guid>
      <description>I have been playing with some opengl examples from the graphics bible Computer graphics Principles and Practice. The first step is getting hello world to work.
Hello World  Link to heading   This example shows polygon by defining 4 points.
#include &amp;lt;GL/glut.h&amp;gt; void displayMe(void) { glClear(GL_COLOR_BUFFER_BIT); glBegin(GL_POLYGON); glVertex3f(0.0, 0.0, 0.0); glVertex3f(0.5, 0.0, 0.0); glVertex3f(0.5, 0.5, 0.0); glVertex3f(0.0, 0.5, 0.0); glEnd(); glFlush(); } int main(int argc, char **argv) { glutInit(&amp;amp;argc, argv); glutInitDisplayMode(GLUT_SINGLE); glutInitWindowSize(300, 300); glutInitWindowPosition(100, 100); glutCreateWindow(&amp;#34;Hello world&amp;#34;); glutDisplayFunc(displayMe); glutMainLoop(); return 0; } The generated graphics would be</description>
    </item>
    
    <item>
      <title>Latex - Adding bib ref files</title>
      <link>/posts/2022/06/latex-adding-bib-ref-files/</link>
      <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/06/latex-adding-bib-ref-files/</guid>
      <description>Adding references in Latex  Link to heading   \begin{filecontents}{references.bib} @ARTICLE{KG:2022, author = {A1}, title = {FDA}, booktitle = {conf}, year = 2021 } \end{filecontents} Then add bib file
\bibliographystyle{ieeetr} \bibliography{references} \end{document} Then, pdflatex needs to run 3 times to generates references.bib first
pdflatex document.tex bibtex document.aux pdflatex document.tex pdflatex document.tex Count number of words in latex document  Link to heading   untex file.tex | wc -w </description>
    </item>
    
    <item>
      <title>Latex - The minimal Resume</title>
      <link>/posts/2022/06/latex-the-minimal-resume/</link>
      <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/06/latex-the-minimal-resume/</guid>
      <description>I have been using Latex to write documents including my resume for few years now. In this post, I am going through a minimal template i found online years ago and it has been working great for me.
\documentclass[margin, 10pt]{res} \usepackage{helvet} \setlength{\textwidth}{5.1in} \pagestyle{plain} \usepackage{hyperref} \begin{document} \moveleft.5\hoffset\centerline{\large\bf Name} \moveleft.5\hoffset\centerline{Email: EMAIL} \moveleft.5\hoffset\centerline{Linkedin: {LINK}} \moveleft.5\hoffset\centerline{Phone: } \moveleft.5\hoffset\centerline{Address: } \begin{resume} \section{ABOUT} \section{EDUCATION} \textbf{DEGREE} \hfill \textbf{DATE}\\ UNIVERSITY \\ \section{EXPERIENCE} {\sl \textbf{POSITION}} \hfill \textbf{DATE} \\ LOCATION \begin{itemize} \itemsep -2pt \item POINT ONE \end{itemize} \section{TECHNICAL \\ SKILLS} {\sl \textbf{SKILL1}} SKILL1 DETAILS \\ \section{PERSONAL \\ SKILLS} excessive blogger \end{resume} \end{document} res.</description>
    </item>
    
    <item>
      <title>RGB to YCbCr and DCT/IDCT effects</title>
      <link>/posts/2022/06/rgb-to-ycbcr-and-dct/idct-effects/</link>
      <pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/06/rgb-to-ycbcr-and-dct/idct-effects/</guid>
      <description>I started this post with a attempt to show the difference between RGB and YCbCr. but that was easy enough so i added one round of dct/idct to see the effects on grey scale(if any).
 Link to heading   The main difference between RGB and YCbCr is that instead using Red/green/blue, YCbCr is using gray(luminance) and Red/Blue differences. It&amp;rsquo;s mainly due to the fact human eye detects gray scale better than color scale which allows more aggressive compression for color components.</description>
    </item>
    
    <item>
      <title>Arithmetic Coding</title>
      <link>/posts/2022/06/arithmetic-coding/</link>
      <pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/06/arithmetic-coding/</guid>
      <description>In previous post, I wrote quick post about Huffman Coding. Apparently, Arithmetic Coding is replaces Huffman. It&amp;rsquo;s optional in MPEG and it&amp;rsquo;s part VP9 specs.
wiki describes it as
 Arithmetic coding (AC) is a form of entropy encoding used in lossless data compression.
 The encoding works by sending a value in range of probability [0,1](as fixed-point). Basically, It is decision tree on steroids. I really like the diagram on the wiki.</description>
    </item>
    
    <item>
      <title>Discrete Fourier Transform - DFT</title>
      <link>/posts/2022/06/discrete-fourier-transform-dft/</link>
      <pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/06/discrete-fourier-transform-dft/</guid>
      <description>DFT is one of most important transformation ever invented.It&amp;rsquo;s used in almost every application(compression, filters, etc). From wiki,
 In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.
 Basically, FT represents sum of basis frequencies (2pik/N) scaled with coefficients. DFT calculates these coefficients using the following equation</description>
    </item>
    
    <item>
      <title>Discrete Cosine Transform - DCT</title>
      <link>/posts/2022/06/discrete-cosine-transform-dct/</link>
      <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/06/discrete-cosine-transform-dct/</guid>
      <description>DCT is frequency domain transform with cosine frequencies. Wiki says it all:
 A discrete cosine transform (DCT) expresses a finite sequence of data points in terms of a sum of cosine functions oscillating at different frequencies
 The equation to calculate g[u][v] DCT coefficients for 8x8 matrix (used for JPEG).
Brute force calculation can be done with next loops. It sure can be better with caching cosine multiplication or better butterfly implementation.</description>
    </item>
    
    <item>
      <title>Huffman Coding</title>
      <link>/posts/2022/06/huffman-coding/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/06/huffman-coding/</guid>
      <description>Huffman code is one of the lossless compression algos. The idea is using a coding where more frequent symbols have shorter encoding and less frequent symbols with longer encoding(variable length encoding). A variant of Huffman is used for JPEG standard, so apparently it&amp;rsquo;s a big deal.
The simple algorithm on wiki is described as follows:
 Create a leaf node for each symbol and add it to the priority queue. While there is more than one node in the queue: Remove the two nodes of highest priority (lowest probability) from the queue Create a new internal node with these two nodes as children and with probability equal to the sum of the two nodes&#39; probabilities.</description>
    </item>
    
    <item>
      <title>Solving N-Queen using Systemverilog Constraints</title>
      <link>/posts/2022/06/solving-n-queen-using-systemverilog-constraints/</link>
      <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/06/solving-n-queen-using-systemverilog-constraints/</guid>
      <description>This time I will try to solve N-Queen problem using Systemverilog solver constraint. They really need to add systemverilog to leetcode. Kidding! All the cool kids use python these days :).
The Rules are simple:
 Queens can&amp;rsquo;t be on the same rows Queens can&amp;rsquo;t be on the same columns Queens can&amp;rsquo;t be on diagonal (this really expands to +ve and -ve diagonals)  // square can be 0 or 1 (1 means queen) constraint a01 {foreach(grid[i][j]) grid[i][j] inside {[0:1]};} // Each row can have one queen constraint rows {foreach(grid[i][j]) grid[i].</description>
    </item>
    
    <item>
      <title>Ethernet MDIO Primer</title>
      <link>/posts/2022/06/ethernet-mdio-primer/</link>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/06/ethernet-mdio-primer/</guid>
      <description>This post is about MDIO which is a part of MIIM (interface between MAC and PHY in ethernet 802 standard).
wiki provide some details (but the main reference is 802 spec)
 Management Data Input/Output (MDIO), also known as Serial Management Interface (SMI) or Media Independent Interface Management (MIIM), is a serial bus defined for the Ethernet family of IEEE 802.3 standards for the Media Independent Interface, or MII. The MII connects Media Access Control (MAC) devices with Ethernet physical layer (PHY) circuits.</description>
    </item>
    
    <item>
      <title>Systemc Hello world</title>
      <link>/posts/2022/06/systemc-hello-world/</link>
      <pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/06/systemc-hello-world/</guid>
      <description>Compiling Systemc  Link to heading   systemc library can be found on accellera. There are two ways to build it. CMake and good old autoconf. autoconf will do the job just fine.
cd systemc-2.3.3 ./configure --prefix=`pwd`/local make make install export SC_INSTALL=`pwd`/local And we are good to go.
Compiling application  Link to heading   I got an example from systemc examples. Again there are several ways to build it But I am going for the minimal compilation command.</description>
    </item>
    
    <item>
      <title>Solving Sudoku using Systemverilog Constraints</title>
      <link>/posts/2022/06/solving-sudoku-using-systemverilog-constraints/</link>
      <pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/06/solving-sudoku-using-systemverilog-constraints/</guid>
      <description>In previous post, I used python SAT solver to solve sudoku. Naturally, SV constraints are perfect to solve suduko once we figure out the correct constraints.
For Wiki, Sudoku is:
 In classic Sudoku, the objective is to fill a 9 × 9 grid with digits so that each column, each row, and each of the nine 3 × 3 subgrids that compose the grid (also called &amp;ldquo;boxes&amp;rdquo;, &amp;ldquo;blocks&amp;rdquo;, or &amp;ldquo;regions&amp;rdquo;) contain all of the digits from 1 to 9.</description>
    </item>
    
    <item>
      <title>hash based message authentication HMAC</title>
      <link>/posts/2022/06/hash-based-message-authentication-hmac/</link>
      <pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/06/hash-based-message-authentication-hmac/</guid>
      <description>HMAC(wiki) is hash-based message authentication code which verifies data integrity and authenticity of a message. Basically, it ensure sender is really who they are and whatever they sent wasn&amp;rsquo;t changed.
The algorithm can be found on wiki which is easy enough to write(i am using sha256 from hashlib :)).
function hmac is input: key: Bytes // Array of bytes message: Bytes // Array of bytes to be hashed hash: Function // The hash function to use (e.</description>
    </item>
    
    <item>
      <title>RISCV riscv python model deepdive</title>
      <link>/posts/2022/05/riscv-riscv-python-model-deepdive/</link>
      <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/05/riscv-riscv-python-model-deepdive/</guid>
      <description>This post is about riscv python model. The doc describes it as:
 This is a python model of the RISC-V ISA. It is intended to be a resource for Python-based automated testing and verification. It is under development and not very useful yet, but can be used to generate random assembler codeThis is a python model of the RISC-V ISA. It is intended to be a resource for Python-based automated testing and verification.</description>
    </item>
    
    <item>
      <title>Network layers dissection using scapy</title>
      <link>/posts/2022/05/network-layers-dissection-using-scapy/</link>
      <pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/05/network-layers-dissection-using-scapy/</guid>
      <description>This post goes through network layers(ethernet, IP, TCP) of a packet using scapy. scapy is a package to create, send and sniff packets. Well, scapy docs say it all:
 Scapy is a Python program that enables the user to send, sniff and dissect and forge network packets. This capability allows construction of tools that can probe, scan or attack networks.
 Packet fields  Link to heading   Starting with IP, RFC describes packets fields as follows</description>
    </item>
    
    <item>
      <title>Levenshtein Distance</title>
      <link>/posts/2022/05/levenshtein-distance/</link>
      <pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/05/levenshtein-distance/</guid>
      <description>Levenshtein distance defines the distance between strings. It is used for spell checking and suggestions (among other applications). It is interesting as it reminded me of Hamming distance (I am looking at you, undergrad information theory course!) which led me the rabbit hole of string distance functions.
Well, wiki says it all
 In information theory, linguistics, and computer science, the Levenshtein distance is a string metric for measuring the difference between two sequences.</description>
    </item>
    
    <item>
      <title>Simple recursive solution to Maze path finding</title>
      <link>/posts/2022/05/simple-recursive-solution-to-maze-path-finding/</link>
      <pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/05/simple-recursive-solution-to-maze-path-finding/</guid>
      <description>Maze path finding is an interesting problem to find if there path(and the path) between start and dest points on grid. More details on wiki. There many solutions some of them are more complicate than others. I am looking at backtracking or A* search. Normally simple solution is model the grid (open cells) as graph nodes and try to find shorted path between two nodes.
In this instance of this problem, there is an extra requirement.</description>
    </item>
    
    <item>
      <title>Waveforms and WaveJSON - wavedrom and wavedrompy</title>
      <link>/posts/2022/05/waveforms-and-wavejson-wavedrom-and-wavedrompy/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/05/waveforms-and-wavejson-wavedrom-and-wavedrompy/</guid>
      <description>Wavedrom is a tool to render SVG of waveforms using WaveJSON. WaveJSON is JSON based format docs to documents signal values with labels and annotations. wavedrom is written in javascript but there is wavedrompy which is the python implementation.
Example  Link to heading   { &amp;#34;signal&amp;#34;: [ {&amp;#34;name&amp;#34;: &amp;#34;clk&amp;#34;, &amp;#34;wave&amp;#34;: &amp;#34;P............&amp;#34;, &amp;#34;node&amp;#34;:&amp;#34;.............&amp;#34;}, {&amp;#34;name&amp;#34;: &amp;#34;req&amp;#34;, &amp;#34;wave&amp;#34;: &amp;#34;01..0........&amp;#34;, &amp;#34;node&amp;#34;:&amp;#34;.a..b.C...D..&amp;#34;}, {&amp;#34;name&amp;#34;: &amp;#34;ack&amp;#34;, &amp;#34;wave&amp;#34;: &amp;#34;0.....1...0..&amp;#34;, &amp;#34;node&amp;#34;:&amp;#34;.A..B.c...d..&amp;#34;} ], &amp;#34;edge&amp;#34; : [ &amp;#34;b-~&amp;gt;c 1:N&amp;#34;, &amp;#34;a-~&amp;gt;b 5&amp;#34;, &amp;#34;c-~&amp;gt;d 8&amp;#34;, &amp;#34;a-|&amp;gt;A&amp;#34;, &amp;#34;b-|&amp;gt;B&amp;#34;, &amp;#34;c-|&amp;gt;C&amp;#34;, &amp;#34;d-|&amp;gt;D&amp;#34; ], &amp;#34;config&amp;#34;: {&amp;#34;hscale&amp;#34;:2,&amp;#34;scale&amp;#34;:2} } And output should be something like</description>
    </item>
    
    <item>
      <title>Linux tun device - Hello World</title>
      <link>/posts/2022/05/linux-tun-device-hello-world/</link>
      <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/05/linux-tun-device-hello-world/</guid>
      <description>tun device is virtual network interface that can send raw IP packets to user space instead of link/phy layer. tun/tap devices are used with IPSec application like OpenVPN. more details in the wiki. This is a write up based on the answer in SO
in this example, we will use 3 to create tun, run application and capture pacp.
Shell 1 - How to create tun device  Link to heading   create the tun0 interface and update the route table for that device.</description>
    </item>
    
    <item>
      <title>Book review - Open Verification Methodology Cookbook</title>
      <link>/posts/2022/05/book-review-open-verification-methodology-cookbook/</link>
      <pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/05/book-review-open-verification-methodology-cookbook/</guid>
      <description>The Open verification Methodology Cookbook is one my favorite books. I actually bought a hardcover and it&amp;rsquo;s small book so I always bring it with me while i am travelling :).
The book starts from very basic introduction to verification, then language features and eventually explaining few of the important features of OVM library. I really like the way it starts with basic non-ovm testbench and build up to OVM based TB.</description>
    </item>
    
    <item>
      <title>My assumptions (pun intended) about SymbiYosys - part1 </title>
      <link>/posts/2022/05/my-assumptions-pun-intended-about-symbiyosys-part1/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/05/my-assumptions-pun-intended-about-symbiyosys-part1/</guid>
      <description>I wanted to try yosys for long time. I played around with SAT solvers before but didn&amp;rsquo;t try full-blown formal proof before. I thought formal is complex to do. Finally, I proved myself wrong (again, pun intended).
SymbiYosys is open source formal engine based on Yosys. It&amp;rsquo;s easy and most importantly it&amp;rsquo;s free.
Installation  Link to heading   This is summary for steps in official doc.
One caveat, installation requires root to copy scripts.</description>
    </item>
    
    <item>
      <title>UVM Internals - set_drain_time</title>
      <link>/posts/2022/04/uvm-internals-set_drain_time/</link>
      <pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/04/uvm-internals-set_drain_time/</guid>
      <description>Set up  Link to heading   In run_phase, set_drain_time is called from phase.phase_done which uvm_objection.
task run_phase(uvm_phase phase); phase.phase_done.set_drain_time(this, 10); endtask The set_drain_time sets drain in m_drain_time which is called m_forked_drain.
function void set_drain_time (uvm_object obj=null, time drain); if (obj==null) obj = m_top; m_drain_time[obj] = drain; m_set_hier_mode(obj); endfunction objection timeout  Link to heading   In m_execute_scheduled_forks(), m_forked_drain is called
objection.m_forked_drain(ctxt.obj, ctxt.source_obj, ctxt.description, ctxt.count, 1); and m_forked_drain calls uvm_delay</description>
    </item>
    
    <item>
      <title>Systemverilog functional cheat-sheet</title>
      <link>/posts/2022/04/systemverilog-functional-cheat-sheet/</link>
      <pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/04/systemverilog-functional-cheat-sheet/</guid>
      <description>basic  Link to heading   enum {r,d} color,color1; covergroup cg @(posedge clk); cp : coverpoint color; cp1 : coverpoint color1; xp : cross cp, cp; endgroup cg cg_i = new; embedded coverpoint  Link to heading   class foo; enum {r,d} color,color1; covergroup cg @(posedge clk); cp : coverpoint color; cp1 : coverpoint color1; xp : cross cp, cp; endgroup function new(); cg =new; // embedded cg above instance is created automatically as cg is defined in class endfunction endclass implicit coverpoint  Link to heading   color1 in cross create a coverpoint there.</description>
    </item>
    
    <item>
      <title>UVM Internals - UVM_TIMEOUT</title>
      <link>/posts/2022/04/uvm-internals-uvm_timeout/</link>
      <pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/04/uvm-internals-uvm_timeout/</guid>
      <description>This posts explains how +UVM_TIMEOUT works.
Starting with how it is used
&amp;lt;sim command&amp;gt; +UVM_TIMEOUT=200000,NO UVM_TIMEOUT is read in uvm_root.svh which parses the value and override strings and calls set_timeout.
timeout_count = clp.get_arg_values(&amp;#34;+UVM_TIMEOUT=&amp;#34;, timeout_settings); if (timeout_count == 0) return; else begin timeout = timeout_settings[0]; if (timeout_count &amp;gt; 1) begin string timeout_list; string sep; for (int i = 0; i &amp;lt; timeout_settings.size(); i++) begin if (i != 0) sep = &amp;#34;; &amp;#34;; timeout_list = {timeout_list, sep, timeout_settings[i]}; end uvm_report_warning(&amp;#34;MULTTIMOUT&amp;#34;, $sformatf(&amp;#34;Multiple (%0d) +UVM_TIMEOUT arguments provided on the command line.</description>
    </item>
    
    <item>
      <title>Systemverilog constrainted randomization cheat-sheet</title>
      <link>/posts/2022/04/systemverilog-constrainted-randomization-cheat-sheet/</link>
      <pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/04/systemverilog-constrainted-randomization-cheat-sheet/</guid>
      <description>This posts lists small snippets from LRM 1800.
set membership - inside  Link to heading   class b; rand logic [2:0] x; constraint x_c1 {x inside {1,2};} constraint x_c2 {x inside {[0:3]};} // constraint x_c2 {!(x inside {[0:3]});} // negation endclass Distribution  Link to heading   class b; rand logic [2:0] x; constraint x_c1 {x dist {1:=1 ,2 := 2};} // 1,2 constraint x_c1 {x dist {[1:2]:=1 ,3 := 2};} // 1, 1, 2 constraint x_c1 {x dist {[1:2]/=1 ,3 := 2};} // 1/2,1/2,2 endclass unique  Link to heading   unique says x and y shouldn&amp;rsquo;t take the same value.</description>
    </item>
    
    <item>
      <title>UVM Internals - UVM 2020-2.0 Early release diff Part1 - m_uvm_core_state</title>
      <link>/posts/2022/03/uvm-internals-uvm-2020-2.0-early-release-diff-part1-m_uvm_core_state/</link>
      <pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/03/uvm-internals-uvm-2020-2.0-early-release-diff-part1-m_uvm_core_state/</guid>
      <description>UVM 2020-2.0 early release is out and i thought it would be fun to deep dive into one of the differences and try to understand why that change was made.
I thought that was an interesting one!
&amp;lt; // we use a queue here only to avoid any problems on writing to variables &amp;lt; // inside an always_comb/latch/ff in case those call UVM &amp;lt; uvm_core_state m_uvm_core_state[$]; --- &amp;gt; uvm_core_state m_uvm_core_state = UVM_CORE_UNINITIALIZED; So, what does this comment mean?</description>
    </item>
    
    <item>
      <title>Python package of the week: tempfile</title>
      <link>/posts/2022/03/python-package-of-the-week-tempfile/</link>
      <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/03/python-package-of-the-week-tempfile/</guid>
      <description>tempfile is a useful to create files and directories under system temp path whatever that is.
To create a temp directory, tempfile.TemporaryDirectory returns a full path to temp directory.
In [8]: x = tempfile.TemporaryDirectory() In [9]: x.name Out[9]: &amp;#39;/tmp/tmp_olncqa8&amp;#39; To create a file, tempfile.NamedTemporaryFile does exactly that.
In [5]: x = tempfile.NamedTemporaryFile() In [6]: x.name Out[6]: &amp;#39;/tmp/tmpn7oud6l_&amp;#39; PS. the directory path is determined with following rules
 If dir is not None, the file will be created in that directory; otherwise, a default directory is used.</description>
    </item>
    
    <item>
      <title>UVM Internals - Sequence to Sequencer connection</title>
      <link>/posts/2022/03/uvm-internals-sequence-to-sequencer-connection/</link>
      <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/03/uvm-internals-sequence-to-sequencer-connection/</guid>
      <description>This post answers the following question &amp;ldquo;How the typical sequencer to sequence coonection works?!&amp;rdquo;
An example  Link to heading    Create sequencer class handle from vanilla uvm_sequencer  uvm_sequencer #(foo_req, foo_rsp) sqr;  Connect it to driver port in connect phase  drv.seq_item_port.connect(sqr.seq_item_export);  Define uvm_sequence with body  class foo_sequence extends uvm_sequence#(foo_seq_item); virtual task body(); start_item(item); // Create the seq item  ... finish_item(item); endtask endclass  Call the sequence with sequencer instance.</description>
    </item>
    
    <item>
      <title>Ireland Rental Price Analysis</title>
      <link>/posts/2022/03/ireland-rental-price-analysis/</link>
      <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/03/ireland-rental-price-analysis/</guid>
      <description>While the world is on fire, I wanted something light to do to get my mind off the news. So, I decided to look at another crisis. Ireland Housing Crisis :)
Anyone who is familiar with Ireland knows about the housing shortage. So, Like everyone here, I check daft on daily basis(several times a day actually).
I thought it would be fun to scrap Daft.ie and do basic analysis on the data(nothing fancy!</description>
    </item>
    
    <item>
      <title>Python package of the week: argparse</title>
      <link>/posts/2022/02/python-package-of-the-week-argparse/</link>
      <pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/02/python-package-of-the-week-argparse/</guid>
      <description>argparse is a great library to write CLI application with clean consistent interface. The main features are
 Sub-parsers Positional arguments Options arguments  Full docs can found at link
It&amp;rsquo;s definitely better than DIY parsing sys.argv.
An example  Link to heading   This is an examples that shows the most important features. It even prints nifty help message like this
import argparse parser = argparse.ArgumentParser() subparsers = parser.</description>
    </item>
    
    <item>
      <title>Python package of the week: Lark</title>
      <link>/posts/2022/02/python-package-of-the-week-lark/</link>
      <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/02/python-package-of-the-week-lark/</guid>
      <description>Do you know the ancient proverb that says &amp;ldquo;If you want to really understand something, parse or generate it!&amp;rdquo;. Just kidding :) I made that up. But doesn&amp;rsquo;t make less true through.
This post briefly explains BNF and how Lark uses it to build AST(Abstract syntax tree) which is basically the biggest computer science-y part of the job.
BNF  Link to heading   BNF is used to define formal specifications of context-free grammars using Production Rules and Terminal symbols.</description>
    </item>
    
    <item>
      <title>UVM Internals - How do p_sequencer and m_sequencer work?</title>
      <link>/posts/2022/02/uvm-internals-how-do-p_sequencer-and-m_sequencer-work/</link>
      <pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/02/uvm-internals-how-do-p_sequencer-and-m_sequencer-work/</guid>
      <description>One of the most iconic DV interview questions is &amp;ldquo;What are m_sequencer and p_sequencer?&amp;rdquo;. So, A good way to impress the interviewer is to answer the question by explaining how they work :)
What are p_sequencer and m_sequencer?  Link to heading   p_sequencer is declared using uvm_declare_p_sequencer in the sequence to have access to the correct specialization of uvm_sequencer.
class my_sequence extends uvm_sequence; ... ... `uvm_declare_p_sequencer(ubus_slave_sequencer) Which expands to the following where $cast will only work if m_sequencer can be cast to p_sequencer(ie cast from base class to parameterized derived class)</description>
    </item>
    
    <item>
      <title>UVM Internals - Transaction Recording Infrastructure</title>
      <link>/posts/2022/02/uvm-internals-transaction-recording-infrastructure/</link>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/02/uvm-internals-transaction-recording-infrastructure/</guid>
      <description>UVM has a builtin transaction recorder as part of uvm_transaciton. This is deepdive into how it works.
How to use transaction recorder  Link to heading   First, The recording should be enabled. In this example, this is part of sequence body where enable_recording is called with stream name.
pkt = apb_rw::type_id::create(&amp;#34;apb_rw&amp;#34;); pkt.enable_recording(&amp;#34;packet_stream&amp;#34;); start_item(pkt); pkt.randomize(); finish_item(pkt); Next, run_phase can call accpet_tr, begin_tr and end_tr to log the transactions in the stream.</description>
    </item>
    
    <item>
      <title>UVM Internals - Register model callbacks</title>
      <link>/posts/2022/01/uvm-internals-register-model-callbacks/</link>
      <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/01/uvm-internals-register-model-callbacks/</guid>
      <description>UVM register model defines several callback hooks. This is deepdive into how it works.
pre_read example  Link to heading   First, we need to define callback class extending uvm_reg_cbs. I am using pre_read in this case.
class mycb extends uvm_reg_cbs; `uvm_object_utils(mycb) function new(string name=&amp;#34;&amp;#34;); super.new(name); endfunction virtual task pre_read(uvm_reg_item rw); $display(&amp;#34;cb called&amp;#34;); endtask endclass Then register the callback with required uvm register(not confusing at all!).
mycb m_mycb; virtual function void build_phase(uvm_phase phase); .</description>
    </item>
    
    <item>
      <title>Python bits - PEP0380 Delegating to a Subgenerator - yield from</title>
      <link>/posts/2022/01/python-bits-pep0380-delegating-to-a-subgenerator-yield-from/</link>
      <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/01/python-bits-pep0380-delegating-to-a-subgenerator-yield-from/</guid>
      <description>This post is about PEP-0380
 A syntax is proposed for a generator to delegate part of its operations to another generator. This allows a section of code containing &amp;lsquo;yield&amp;rsquo; to be factored out and placed in another generator. Additionally, the subgenerator is allowed to return with a value, and the value is made available to the delegating generator.
 Basically, It&amp;rsquo;s a way to chain generators(generator is routine that yield to immediate caller.</description>
    </item>
    
    <item>
      <title>VIM for fun and profit</title>
      <link>/posts/2022/01/vim-for-fun-and-profit/</link>
      <pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/01/vim-for-fun-and-profit/</guid>
      <description>Not to start a editor war or anything, but VIM is and always will be the best editor (emacs are vscode are okey).
I used different setups (.vimrc and plugins) over the years but for the last couple of years i found cool a setup that i like. Here is breakdown of some useful plugins and VIM built-in features that i use every day.
windows vs buffers vs tabs  Link to heading   Probably everyone using vim used these feature in a way or another.</description>
    </item>
    
    <item>
      <title>Cocotb Internals - Cocotb Startup VPI bootstrap to Python</title>
      <link>/posts/2022/01/cocotb-internals-cocotb-startup-vpi-bootstrap-to-python/</link>
      <pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/01/cocotb-internals-cocotb-startup-vpi-bootstrap-to-python/</guid>
      <description>This post complements an earlier post about test discovery. This should close the gap between simulation start and actual cocotb test call.
cocotb hello-world in 2 minutes  Link to heading   I will write down the basic commands to run the adder example that ships with cocotb. I am assuming latest iverilog is installed already.
virtualenv .venv source .venv/bin/activate cd cocotb pip install . cd examples/adder/tests make You will probably see something like this</description>
    </item>
    
    <item>
      <title>riscv picorv32 hello demystified</title>
      <link>/posts/2022/01/riscv-picorv32-hello-demystified/</link>
      <pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/01/riscv-picorv32-hello-demystified/</guid>
      <description>This is a post about hello test in piscorv32. I am not going to dig deep into picorv32 itself. Just the firmware.
Where to start  Link to heading   As usual, It makes sense to start with Makefile and work backward.
make -n test After removing verilog related commands and tests, We have the following commands for the firmware.
/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi=ilp32 -march=rv32imc -o firmware/start.o firmware/start.S /opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi=ilp32 -march=rv32ic -Os --std=c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic -ffreestanding -nostdlib -o firmware/irq.</description>
    </item>
    
    <item>
      <title>RISCV Memory Consistency Model Basics</title>
      <link>/posts/2022/01/riscv-memory-consistency-model-basics/</link>
      <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/01/riscv-memory-consistency-model-basics/</guid>
      <description>The memory consistency model is an important (and complicated) topic that defines how memory loads/stores work in multi-thread(Hart in rv lingo) environment. More detailed explanation of memory consistency can be found in A Primer on Memory Consitency and Cache Coherency
There are several chapters in the spec related to memory model. Listed here for reference
 Chapter 2: Fence instruction Chapter 3: Zifencei Instruction-Fetch Fence Chapter 8: A Standard Extension for Atomic Instructions Chapter 14: RVWMO Memory Consistency Modeal Chapter 22: Zam Standard Extension for Misaligned Atomics Chapter 23: Ztso Standard Extension for Total Store Ordering  RVWMO  Link to heading   The following sections define instructions used for explicit sync of RISCV memory model RVWMO.</description>
    </item>
    
    <item>
      <title>RISCV Privileged Specification and Linux Kernel Deep-ish Dive</title>
      <link>/posts/2022/01/riscv-privileged-specification-and-linux-kernel-deep-ish-dive/</link>
      <pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/01/riscv-privileged-specification-and-linux-kernel-deep-ish-dive/</guid>
      <description>This is a deep-ish dive into the riscv privileged specifications and Linux kernel syscall implementation.
Privileged specification tour  Link to heading   To keep it short, There are 3 privilege levels
 U (user) : 0 S (supervisor) : 1 Reserved M (Machine) : 3  And specs describes them as
 At any time, a RISC-V hardware thread (hart) is running at some privilege level encoded as a mode in one or more CSRs (control and status registers).</description>
    </item>
    
    <item>
      <title>Reviving old project - IPXACT to UVM RAL Generator - ipxactral</title>
      <link>/posts/2022/01/reviving-old-project-ipxact-to-uvm-ral-generator-ipxactral/</link>
      <pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/01/reviving-old-project-ipxact-to-uvm-ral-generator-ipxactral/</guid>
      <description>This was a weekend project back in 2020 to build IPXACT parser and UVM register Model generator. As an example of the lack of imagination at that time, I decided to call it &amp;lsquo;ipaxctral&amp;rsquo;. Creative?! I know!
IPXACT  Link to heading   I will just copy/paste the wiki here. But full Spec is on Accellera website
 IP-XACT is an XML format that defines and describes individual, re-usable electronic circuit designs (individual pieces of intellectual property, or IPs) to facilitate their use in creating integrated circuits (i.</description>
    </item>
    
    <item>
      <title>How much riscv verilog I can write in 5 hours</title>
      <link>/posts/2022/01/how-much-riscv-verilog-i-can-write-in-5-hours/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/01/how-much-riscv-verilog-i-can-write-in-5-hours/</guid>
      <description>While I was waiting for my weekly chicken roast to cook, I had this really bad idea for a challenge. how much riscv verilog i can write from scratch in the next 2 hours until the chicken is done?
So, yeah that&amp;rsquo;s what I did on the last day of new year vacation.
2 hours to V hours  Link to heading   I thought to start with a skeleton for single-cycle (See [H and H][1]) and try to build the blocks bottom up style.</description>
    </item>
    
    <item>
      <title>Blog setup</title>
      <link>/posts/2022/01/blog-setup/</link>
      <pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/01/blog-setup/</guid>
      <description>This is write-up explaining how to setup a blog with Hugo, Markdown and github pages.
Hugo setup  Link to heading   I am using Hugo which is an easy and fast static site generator. I use Markdown for content.
 Create a new Hugo site  hugo new site blog  Install a theme Personally, I like this theme.  git submodule add https://github.com/rhazdon/hugo-theme-hello-friend-ng.git themes/hello-friend-ng/ Then configure the theme in config.</description>
    </item>
    
    <item>
      <title>Why I blog</title>
      <link>/posts/2022/01/why-i-blog/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/01/why-i-blog/</guid>
      <description>A friend asked me why I am more active with blog posts recently and It&amp;rsquo;s only fitting to reply with blog post( found it funny too).
The thing is, since my undergrad years, I am used to take notes on everything. Lecture notes, project notes, problem sets notes. Probably all engineering students do.
I was introduced to the concept of a README(it has a wiki and everyhthing) back in 2011 and I was hooked.</description>
    </item>
    
    <item>
      <title>Langton Ant game</title>
      <link>/posts/2021/12/langton-ant-game/</link>
      <pubDate>Fri, 31 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/12/langton-ant-game/</guid>
      <description>This is post is about Langton&amp;rsquo;s ant. Like Conway&amp;rsquo;s game of life, It&amp;rsquo;s considered Cellular automaton.
 A cellular automaton consists of a regular grid of cells, each in one of a finite number of states, such as on and off (in contrast to a coupled map lattice). The grid can be in any finite number of dimensions. For each cell, a set of cells called its neighborhood is defined relative to the specified cell.</description>
    </item>
    
    <item>
      <title>RISCV Simple Assembler - Part1</title>
      <link>/posts/2021/12/riscv-simple-assembler-part1/</link>
      <pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/12/riscv-simple-assembler-part1/</guid>
      <description>This is write-up about a work-in-progress simple riscv assembler in python. The riscv ISA is simple enough to implement in few 100s LOC. Besides,it looked like a good enough project for nice evening.
The following items are on my todo list:
 define all rv32i instructions handle the ABI naming convention(a0-a31, sp, etc) handle pseudoinstruction defined in chapter 25 write tkinter gui for the assembler  riscv rv32i ISA  Link to heading   It&amp;rsquo;s risc isa (duh!</description>
    </item>
    
    <item>
      <title>RISCV Assembly rv64</title>
      <link>/posts/2021/12/riscv-assembly-rv64/</link>
      <pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/12/riscv-assembly-rv64/</guid>
      <description>This is a write-up about riscv rv64 and the assembly generated by GCC.
The example  Link to heading   I am using a pre-built rv64 toolchain from the package gcc-riscv64-linux-gnu
apt install gcc-riscv64-linux-gnu riscv64-linux-gnu-gcc -v The example i am using is very simple. Basically setting a variable on the stack (will see later why we need this) then return that variable.
int main(){ int x; x = 0; return x; } riscv64-linux-gnu-gcc is used with a twist.</description>
    </item>
    
    <item>
      <title>libusb Hello-World</title>
      <link>/posts/2021/12/libusb-hello-world/</link>
      <pubDate>Sat, 25 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/12/libusb-hello-world/</guid>
      <description>I first heard about libusb back in 2011 when I was working on USRP1. At the time, USRP had a really good C++ abstraction library called UHD, which did the heavy lifting talking to libusb. Hopefully, it takes me less than a decade to do a second example.
What is libusb?  Link to heading   libusb website says it all
 libusb is a C library that provides generic access to USB devices.</description>
    </item>
    
    <item>
      <title>Cocotb Deepdive - Test discovery</title>
      <link>/posts/2021/11/cocotb-deepdive-test-discovery/</link>
      <pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/11/cocotb-deepdive-test-discovery/</guid>
      <description>This is a write-up of Cocotb test discovery mechanism including the decorator and regression runner infrastructure.
Part1: Discovery with regression runner  Link to heading   Starting with __init__.py where from_discovery is called to lookup the tests.
# start Regression Manager global regression_manager regression_manager = RegressionManager.from_discovery(top) regression_manager.execute() And from_discorvery calls _discover_tests (static class method in RegressionManager)
tests = cls._discover_tests() _discover_tests loads test module (or modules) and detects classes derived from Test</description>
    </item>
    
    <item>
      <title>UVM Internals - TLM analysis port</title>
      <link>/posts/2021/11/uvm-internals-tlm-analysis-port/</link>
      <pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/11/uvm-internals-tlm-analysis-port/</guid>
      <description>This is write-up about the internals of UVM 1800.2 analysis_port rabbit hole.
Starting with uvm_analysis_port.svh, where the doc has small snippet of uvm_analysis_port object.
//------------------------------------------------------------------------------ // Class -- NODOCS -- uvm_analysis_port // // Broadcasts a value to all subscribers implementing a &amp;lt;uvm_analysis_imp&amp;gt;. // //| class mon extends uvm_component; //| uvm_analysis_port#(trans) ap; //| //| function new(string name = &amp;#34;sb&amp;#34;, uvm_component parent = null); //| super.new(name, parent); //| ap = new(&amp;#34;ap&amp;#34;, this); //| endfunction //| //| task run_phase(uvm_phase phase); //| trans t; //| .</description>
    </item>
    
    <item>
      <title>Python Descriptor Protocol</title>
      <link>/posts/2021/10/python-descriptor-protocol/</link>
      <pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/10/python-descriptor-protocol/</guid>
      <description>First Example  Link to heading   This is write-up based on link for python descriptors.
Descriptors are described as
 Descriptors let objects customize attribute lookup, storage, and deletion.
 lets start with simplest example
class Age: def __get__(self, instance, owner): return instance.age_years * 12 def __set__(self, instance, value): instance.age_years = value / 12 class Person3: age_months = Age() def __init__(self, age): self.age_years = age p3 = Person3(2) print(p3.</description>
    </item>
    
    <item>
      <title>Python class registration decorator</title>
      <link>/posts/2021/10/python-class-registration-decorator/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/10/python-class-registration-decorator/</guid>
      <description>Flask used decorators to register routes handlers. I have another post about flask internal to match function to specific URI.
@app.route(&amp;#34;/&amp;#34;) def hello_world(): return &amp;#34;&amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;&amp;#34; That said, I wanted to implement similar registration but for classes.
class Block(): def __init__(self) -&amp;gt; None: pass class Env(): _blocks = [] def __init__(self) -&amp;gt; None: pass @classmethod def register(cls): def decorator(fn): cls._blocks.append(fn) return fn return decorator @Env.register() class block1(Block): pass env = Env() print(env.</description>
    </item>
    
    <item>
      <title>Python Pandas cheat sheet</title>
      <link>/posts/2021/10/python-pandas-cheat-sheet/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/10/python-pandas-cheat-sheet/</guid>
      <description>Basics  Link to heading   Create DataFrame
df = pd.DataFrame([[1,0],[4,5]], columns=[&amp;#39;A&amp;#39;,&amp;#39;B&amp;#39;]) df = df.append(pd.DataFrame([[6,9]], columns=list(df.columns))) # df = pd.read_csv(&amp;#34;File.csv&amp;#34;) #  df.shape df.info() df.head() df.tail() Get all row with one column. This returns Series
df[&amp;#34;col1&amp;#34;] df[&amp;#34;col1&amp;#34;].value_counts() return multiple columns. This returns Dataframe
df[[&amp;#34;col1&amp;#34;,&amp;#34;col2&amp;#34;]] This returns pandas.core.indexes.base.Index.
df.columns list(df.columns) #pandas.core.series.Series df.iloc[0] df.iloc[0][&amp;#34;col1&amp;#34;] df.iloc[ [0,1] ] df.iloc[ [0,1] , [0,1] ] df.loc[ [0,1] , [&amp;#34;col1&amp;#34;,&amp;#34;col2&amp;#34;] ] df.loc[ 0:1 , &amp;#34;col1&amp;#34;:&amp;#34;col2&amp;#34; ] df.</description>
    </item>
    
    <item>
      <title>Python sequence slicing</title>
      <link>/posts/2021/09/python-sequence-slicing/</link>
      <pubDate>Sun, 19 Sep 2021 20:13:02 +0100</pubDate>
      
      <guid>/posts/2021/09/python-sequence-slicing/</guid>
      <description>Basic index slicing  Link to heading   python defines slicing with [start:stop:step] to access elements of sequences(list, seq, str).
&amp;gt;&amp;gt;&amp;gt; x = list(range(10)) &amp;gt;&amp;gt;&amp;gt; x [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &amp;gt;&amp;gt;&amp;gt; x[1:8:2] [1, 3, 5, 7] &amp;gt;&amp;gt;&amp;gt; x[:3] [0, 1, 2] &amp;gt;&amp;gt;&amp;gt; x[5:] [5, 6, 7, 8, 9] Named slice  Link to heading   for readability, index range can be names with slice object and used to index sequences.</description>
    </item>
    
    <item>
      <title>Python sequence unpacking</title>
      <link>/posts/2021/09/python-sequence-unpacking/</link>
      <pubDate>Sun, 19 Sep 2021 20:13:02 +0100</pubDate>
      
      <guid>/posts/2021/09/python-sequence-unpacking/</guid>
      <description>Python defines unpacking for sequences(lists, tuple for example). RHS length has to match seq.len
&amp;gt;&amp;gt;&amp;gt; x = [1,2] &amp;gt;&amp;gt;&amp;gt; a , b = x also, there is star expression for unpacking in pep-3132.
&amp;gt;&amp;gt;&amp;gt; a, *b, c = range(5) &amp;gt;&amp;gt;&amp;gt; a 0 &amp;gt;&amp;gt;&amp;gt; c 4 &amp;gt;&amp;gt;&amp;gt; b [1, 2, 3] Also, useful trick for unpacking while calling a function. where is two types list unpack (one star) and names unpack(double star).</description>
    </item>
    
    <item>
      <title>Python Template String</title>
      <link>/posts/2021/09/python-template-string/</link>
      <pubDate>Wed, 15 Sep 2021 18:02:53 +0100</pubDate>
      
      <guid>/posts/2021/09/python-template-string/</guid>
      <description>Template strings (as define in PEP292)
 We propose the addition of a new class, called Template, which will live in the string module. The Template class supports new rules for string substitution; its value contains placeholders, introduced with the $ character. The following rules for $-placeholders apply:
$$ is an escape; it is replaced with a single $
$identifier names a substitution placeholder matching a mapping key of &amp;ldquo;identifier&amp;rdquo;. By default, &amp;ldquo;identifier&amp;rdquo; must spell a Python identifier as defined in [2].</description>
    </item>
    
    <item>
      <title>Python Install without root</title>
      <link>/posts/2021/05/python-install-without-root/</link>
      <pubDate>Wed, 05 May 2021 20:13:02 +0100</pubDate>
      
      <guid>/posts/2021/05/python-install-without-root/</guid>
      <description>This post documents the steps to install python without root.
libffi  Link to heading   libffi is required by ctypes module which is an important module for python/c interface.
./autogen.sh ./configure --prefix=$LOCAL make make install sqlite3  Link to heading   sqlite3 required by sqlite3 module. Python can compile without it but it is good module to have. So worth the trouble.
./configure --prefix=$LOCAL make make install python  Link to heading   env  Link to heading   Note that LDFLAGS below is need for compiling ctypes with local libffi and be removed after compilation.</description>
    </item>
    
    <item>
      <title>Python Pep 503</title>
      <link>/posts/2021/05/python-pep-503/</link>
      <pubDate>Sat, 01 May 2021 13:09:31 +0100</pubDate>
      
      <guid>/posts/2021/05/python-pep-503/</guid>
      <description>pep 503 defines the python package repo api used py pypi.org. I thought it was fun to create small repo using Flask (to host Flask) :)
The spec require two urls
 root url project url  root url return html listing available project page. the anchor tags has the following requirements
 The text of the anchor tag MUST be the name of the project and the href attribute MUST link to the URL for that particular project.</description>
    </item>
    
    <item>
      <title>Python Wheels</title>
      <link>/posts/2021/05/python-wheels/</link>
      <pubDate>Sat, 01 May 2021 10:00:20 +0100</pubDate>
      
      <guid>/posts/2021/05/python-wheels/</guid>
      <description>Python wheels is zip file with package content as opposed to source distribution. It&amp;rsquo;s faster to install than the normal tar(or whatever).
The article has really good description for wheels.
For me, wheels are most helpful for installing packages on air-gapped machines. I can just copy the wheels and install. These are the steps based on SO.
export PD=/var/tmp/python-deps mkdir $PD python -m pip download wheel setuptools cocotb setuptools_scm -d $PD And to install on another machine</description>
    </item>
    
    <item>
      <title>Python Context Manager</title>
      <link>/posts/2021/05/python-context-manager/</link>
      <pubDate>Sat, 01 May 2021 08:53:49 +0100</pubDate>
      
      <guid>/posts/2021/05/python-context-manager/</guid>
      <description>Intro  Link to heading   pep-343 describes the context(pun intended) of context managers.
 PEP 340, Anonymous Block Statements, combined many powerful ideas: using generators as block templates, adding exception handling and finalization to generators, and more
 Basically pep 340 introduced the concept of anonymous blocks. which means that something
block EXPR1 as VAR1: BLOCK1 is the same as
itr = EXPR1 # The iterator ret = False # True if a return statement is active val = None # Return value, if ret == True exc = None # sys.</description>
    </item>
    
    <item>
      <title>Python int/hex and bytes</title>
      <link>/posts/2021/04/python-int/hex-and-bytes/</link>
      <pubDate>Thu, 22 Apr 2021 22:15:10 +0100</pubDate>
      
      <guid>/posts/2021/04/python-int/hex-and-bytes/</guid>
      <description>few years ago, i tried to write ELF parser in python and it was fun to write hacky code to parse and manipulate binary/hex (not easy though). This is quick write-up to decribe python bin/hex methods.
ord and chr  Link to heading   ord takes string of one char and returns ascii code. The doc descibes it as:
 Given a string representing one Unicode character, return an integer representing the Unicode code point of that character.</description>
    </item>
    
    <item>
      <title>Python Decorators</title>
      <link>/posts/2021/04/python-decorators/</link>
      <pubDate>Mon, 19 Apr 2021 12:08:54 +0100</pubDate>
      
      <guid>/posts/2021/04/python-decorators/</guid>
      <description>pep describes decorators as better way for method transformation.
 The current method of applying a transformation to a function or method places the actual transformation after the function body. For large functions this separates a key component of the function&amp;rsquo;s behavior from the definition of the rest of the function&amp;rsquo;s external interface
 the pep mentions an example or the function transformation:
def foo(self): perform method operation foo = classmethod(foo) Syntax  Link to heading   syntax</description>
    </item>
    
    <item>
      <title>Python Threading</title>
      <link>/posts/2021/04/python-threading/</link>
      <pubDate>Sun, 18 Apr 2021 16:01:24 +0100</pubDate>
      
      <guid>/posts/2021/04/python-threading/</guid>
      <description>python threading module provides a way to start python callable in a thread of execution
class threading.Thread(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None) This constructor should always be called with keyword arguments. Arguments are: group should be None; reserved for future extension when a ThreadGroup class is implemented. target is the callable object to be invoked by the run() method. Defaults to None, meaning nothing is called. name is the thread name.</description>
    </item>
    
    <item>
      <title>Python Subprocess</title>
      <link>/posts/2021/04/python-subprocess/</link>
      <pubDate>Sun, 18 Apr 2021 14:44:43 +0100</pubDate>
      
      <guid>/posts/2021/04/python-subprocess/</guid>
      <description>subprocess.run  Link to heading   python 3.5 provided new interface to replace older os.system to call programs and shell commands. doc
run() is wrapper around the lower interface Popen which provides finer and more complicated control. Also, run waits until process is done but popen will continue execution and user needs to check for process termination.
subprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, capture_output=False, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None, text=None, env=None, universal_newlines=None, **other_popen_kwargs) as docs mentions these are the most important options.</description>
    </item>
    
    <item>
      <title>Python filter/map</title>
      <link>/posts/2021/04/python-filter/map/</link>
      <pubDate>Sun, 18 Apr 2021 12:39:44 +0100</pubDate>
      
      <guid>/posts/2021/04/python-filter/map/</guid>
      <description>filter()  Link to heading   Define in docs,
 Construct an iterator from those elements of iterable for which function returns true. iterable may be either a sequence, a container which supports iteration, or an iterator. If function is None, the identity function is assumed, that is, all elements of iterable that are false are removed
 This is very similar to filter and map from other languages like javascript</description>
    </item>
    
    <item>
      <title>Python zip()</title>
      <link>/posts/2021/04/python-zip/</link>
      <pubDate>Sun, 18 Apr 2021 12:08:54 +0100</pubDate>
      
      <guid>/posts/2021/04/python-zip/</guid>
      <description>zip iterable collections  Link to heading   zip is a way to iterate several iterable collections in the same loop. from docs
 Make an iterator that aggregates elements from each of the iterables. Returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables. The iterator stops when the shortest input iterable is exhausted. With a single iterable argument, it returns an iterator of 1-tuples.</description>
    </item>
    
    <item>
      <title>Python dict.items and enumerate</title>
      <link>/posts/2021/04/python-dict.items-and-enumerate/</link>
      <pubDate>Sun, 18 Apr 2021 11:49:07 +0100</pubDate>
      
      <guid>/posts/2021/04/python-dict.items-and-enumerate/</guid>
      <description>Python provides several iteration API over collections(specially dictionary). In python2, there was dict.iteritems() for key/value iteration. Starting from python3, iteritems was replaced by items()i (see SO). and there is also enumerate which works with all collections not just dict.
dict.items()  Link to heading   Defined in pep, items() returns key/value iterator over dict. Although, items behaves the same in python2 and 3. but there is a difference in return type.</description>
    </item>
    
    <item>
      <title>Python Generator vs Iterator</title>
      <link>/posts/2021/04/python-generator-vs-iterator/</link>
      <pubDate>Sat, 17 Apr 2021 15:15:17 +0100</pubDate>
      
      <guid>/posts/2021/04/python-generator-vs-iterator/</guid>
      <description>This is quick write-up about python iterators and generators.
Iterator objects  Link to heading   docs defines iter functions
&amp;quot;&amp;quot;&amp;quot; Return an iterator object. The first argument is interpreted very differently depending on the presence of the second argument. Without a second argument, object must be a collection object which supports the iteration protocol (the iter() method) &amp;quot;&amp;quot;&amp;quot;
This is an example of built-in iterators where iter() and next() are called to get iterator object and get next element in the list.</description>
    </item>
    
    <item>
      <title>UVM Internals - TLM port to imp Connection</title>
      <link>/posts/2021/01/uvm-internals-tlm-port-to-imp-connection/</link>
      <pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/01/uvm-internals-tlm-port-to-imp-connection/</guid>
      <description>This is a write-up about the Internals of TLM connection port-to-imp. I am using uvm_blocking_put_port but others shouldn&amp;rsquo;t be different.
Producer/Consumer example  Link to heading   The producer creates port and calls put with the transaction
class producer extesnds uvm_component; ... ... uvm_blocking_put_port #(transaction) put_port; function build_phase(...); put_port = new(&amp;#34;foo&amp;#34;, this); endfunction function run_phase(....); .... put_port.put(t); endfunction endclass The consumer creates imp and providesput method that gets called eventually.</description>
    </item>
    
    <item>
      <title>sshd with fail2ban</title>
      <link>/posts/2021/01/sshd-with-fail2ban/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/01/sshd-with-fail2ban/</guid>
      <description>fail2ban is an important to harden any server exposed to the internet. mainly to stop bots from smashing the ssh service.
Installation  Link to heading   apt install fail2ban systemctl enable fail2ban.service systemctl start fail2ban.service configuration  Link to heading   there are several default configuration but we can override with with fail2ban.local
cp /etc/fail2ban/jail.conf /etc/fail2ban.local fail2ban.local already has section for sshd. we just need to enable it and configure it as needed.</description>
    </item>
    
    <item>
      <title>UVM Internals - transaction id</title>
      <link>/posts/2021/01/uvm-internals-transaction-id/</link>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/01/uvm-internals-transaction-id/</guid>
      <description>Have you ever wondered what set_id_info does? If you have, read on.
UVM docs describe set_id_info as:
 function void set_id_info(	uvm_sequence_item item	)
Copies the sequence_id and transaction_id from the referenced item into the calling item. This routine should always be used by drivers to initialize responses for future compatibility.
 Basically, set_id_info is called as a part of req/rsp protocol. driver can have something like the following
seq_item_port.get(req); rsp = new(); rsp.</description>
    </item>
    
    <item>
      <title>UVM Internals - uvm_create and uvm_send</title>
      <link>/posts/2021/01/uvm-internals-uvm_create-and-uvm_send/</link>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/01/uvm-internals-uvm_create-and-uvm_send/</guid>
      <description>Typical pattern for sequence body does 3 things:
 Create object Configure and randomize Object Send Object  req = req::type_id::create(&amp;#34;req&amp;#34;); start_item(req); // Do something here with req  finish_item(req); UVM provide two macros to do less typing&amp;hellip; and confuse everyone (always bonus for UVM people). these macros are uvm_create and uvm_send
uvm_create  Link to heading   Starting with uvm_create which calls uvm_create_on
`uvm_create() // Do something here with req  `uvm_send(req) `define uvm_create(SEQ_OR_ITEM) \ `uvm_create_on(SEQ_OR_ITEM, m_sequencer)  uvm_create uses uvm_create_on macro</description>
    </item>
    
    <item>
      <title>Reading List</title>
      <link>/reading-list/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/reading-list/</guid>
      <description>2023  Link to heading    Funamentals of Computer Graphics Language Hacking Italian history of philosophy  2022  Link to heading    USB System Architecture - Mindshare Inc, Don Anderson The Cathedral and Bazaar &amp;ndash; Reread. A Little History of Philosophy  2021  Link to heading    Fluent Python pride and prejudice(reread) Philosophy: The Great Thinkers Python cookbook  2020  Link to heading    Learn to earn - Peter Lynch Assertions and Functional coverage By Ashok Mehta Computer organization and design (Reread) FPGA Prototyping by Verilog Examples: Xilinx Spartan-3 Version.</description>
    </item>
    
    <item>
      <title>rustlang - Hello world</title>
      <link>/posts/2020/12/rustlang-hello-world/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/12/rustlang-hello-world/</guid>
      <description>Cargo  Link to heading   cargo package manager can be used to create standard structure for rust application.
cargo ini To build
cargo build To build opt binary:
cargo build --release We can build and run binary with
cargo run Creating first rust module  Link to heading   To create a module, create file under src/. For this example, the module name is print.rs
pub fn run(){ println!</description>
    </item>
    
    <item>
      <title>Not the hitchhiker&#39;s guide to UPF</title>
      <link>/posts/2020/12/not-the-hitchhikers-guide-to-upf/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/12/not-the-hitchhikers-guide-to-upf/</guid>
      <description>There are my notes while reading the UPF standard (IEEE Std 1801). The standard is short and concise document and required several re-reads to understand the UPF semantics (Exactly as painful as reading the 1800 LRM).
Domains  Link to heading   This is summary of section 4.2(just in points)
 domain is a collection of design elements. Unless otherwise specified, elements of a power domain share a common primary supply set (see 4.</description>
    </item>
    
    <item>
      <title>Graphviz - Hello world</title>
      <link>/posts/2020/12/graphviz-hello-world/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/12/graphviz-hello-world/</guid>
      <description>Garphviz is very useful package to visualize data. They define their own &amp;ldquo;language&amp;rdquo; to render the graphs. More details about the dot language.
Example  Link to heading   This is example i found on SO and i think it&amp;rsquo;s great way to quickly visualize diagrams.
digraph G { graph [rankdir = LR]; node[shape=record]; Bar[label=&amp;quot;{ \&amp;quot;Bar\&amp;quot;|{&amp;lt;p1&amp;gt;pin 1|&amp;lt;p2&amp;gt; 2|&amp;lt;p3&amp;gt; 3|&amp;lt;p4&amp;gt; 4|&amp;lt;p5&amp;gt; 5} }&amp;quot;]; Foo[label=&amp;quot;{ {&amp;lt;data0&amp;gt;data0|&amp;lt;data1&amp;gt;data1|&amp;lt;data2&amp;gt;data2|&amp;lt;data3&amp;gt;data3|&amp;lt;data4&amp;gt;data4}|\&amp;quot;Foo\&amp;quot; |{&amp;lt;out0&amp;gt;out0|&amp;lt;out1&amp;gt;out1|&amp;lt;out2&amp;gt;out2|&amp;lt;GND&amp;gt;gnd|&amp;lt;ex0&amp;gt;ex0|&amp;lt;hi&amp;gt;hi|&amp;lt;lo&amp;gt;lo} }&amp;quot;]; Bew[label=&amp;quot;{ {&amp;lt;clk&amp;gt;clk|&amp;lt;syn&amp;gt;syn|&amp;lt;mux0&amp;gt;mux0|&amp;lt;mux1&amp;gt;mux1|&amp;lt;signal&amp;gt;signal}|\&amp;quot;Bew\&amp;quot; |{&amp;lt;out0&amp;gt;out0|&amp;lt;out1&amp;gt;out1|&amp;lt;out2&amp;gt;out2} }&amp;quot;]; Bar:p1 -&amp;gt; Foo:data0; Bar:p2 -&amp;gt; Foo:data1; Bar:p3 -&amp;gt; Foo:data2; Bar:p4 -&amp;gt; Foo:data3; Bar:p5 -&amp;gt; Foo:data4; Foo:out0 -&amp;gt; Bew:mux0; Foo:out1 -&amp;gt; Bew:mux1; Bew:clk -&amp;gt; Foo:ex0; Gate[label=&amp;quot;{ {&amp;lt;a&amp;gt;a|&amp;lt;b&amp;gt;b}|OR|{&amp;lt;ab&amp;gt;a\|b} }&amp;quot;]; Foo:hi -&amp;gt; Gate:a; Foo:lo -&amp;gt; Gate:b; Gate:ab -&amp;gt; Bew:signal; } dot program (part of graphviz) is used to generate png</description>
    </item>
    
    <item>
      <title>TCL And C interface</title>
      <link>/posts/2020/12/tcl-and-c-interface/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/12/tcl-and-c-interface/</guid>
      <description>Calling TCL from C  Link to heading   Starting with working example, we can see that Tcl_CreateInterp and Tcl_Eval are the only two Tcl calls.
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;tcl.h&amp;gt; main (int argc, char *argv[]) { Tcl_Interp *myinterp; char *action = &amp;#34;set a [expr 5 * 8]; puts $a&amp;#34;; int status; printf (&amp;#34;Your Program will run ... \n&amp;#34;); myinterp = Tcl_CreateInterp(); status = Tcl_Eval(myinterp,action); printf (&amp;#34;Your Program has completed\n&amp;#34;); } And compilation command</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - Scoped enum</title>
      <link>/posts/2020/12/c-scoped-enum/</link>
      <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/12/c-scoped-enum/</guid>
      <description>C defined a way to declare enum(or enum type) and enum constants. but the problem here is namespace pollution due to enum constants. I guess that why they came up with scoped enum to make enum behave like class types and enum constants are scoped with ::
#include &amp;lt;iostream&amp;gt;#include &amp;lt;utility&amp;gt; using namespace std; enum { ONE, TWO } e1; enum class senum { ONES, TWOS }; int main() { e1 = ONE; senum e2 = senum::ONES; } </description>
    </item>
    
    <item>
      <title>C&#43;&#43; - std::array</title>
      <link>/posts/2020/12/c-stdarray/</link>
      <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/12/c-stdarray/</guid>
      <description>Starting c++11, std::array can be used for fixed size array. As opposed to std::vector with variable length array. note that length is fixed with aggregate initialization and other
std::array&amp;lt;int, 3&amp;gt; a2 = {1, 2, 3}; I think the biggest advantage over the vanilla array [] is preventing pointer decay. where array pointers can assigned to compatible pointer. For more details why this is bad see SO
Beside that, there are cool methods like fill and size and of course operator overload [] same as vanilla array.</description>
    </item>
    
    <item>
      <title>Stock Market Definitions</title>
      <link>/posts/2020/12/stock-market-definitions/</link>
      <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/12/stock-market-definitions/</guid>
      <description>52 week Range  Link to heading   invest Define it as
 The 52-week range is a data point traditionally reported by printed financial news media, but more modernly included in data feeds from financial information sources online. The data point includes the lowest and highest price at which a stock has traded during the previous 52 weeks.
 Volume  Link to heading    Volume is the amount of an asset or security that changes hands over some period of time, often over the course of a day.</description>
    </item>
    
    <item>
      <title>Systemverilog Assertions(SVA) - part1 - 5-minute tour</title>
      <link>/posts/2020/12/systemverilog-assertionssva-part1-5-minute-tour/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/12/systemverilog-assertionssva-part1-5-minute-tour/</guid>
      <description>Introduction  Link to heading   There are two types of assertions: immediate and concurrent. I will omit immediate here because they are simple and straightforward for anyone who wrote an assertions in any language.
concurrent assertions provide temporal(over time) semantics to check the deign &amp;ldquo;intent&amp;rdquo;. Basically, They describe behavior that spans over time. Unlike immediate assertions, the evaluation model is based on a clock so that a concurrent assertion is evaluated only at the occurrence of a clock tick.</description>
    </item>
    
    <item>
      <title>Abridged guide to Systemverilog Functional coverage</title>
      <link>/posts/2020/12/abridged-guide-to-systemverilog-functional-coverage/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/12/abridged-guide-to-systemverilog-functional-coverage/</guid>
      <description>Coverage is big part of &amp;ldquo;CRV&amp;rdquo; (constrained random verification). If randomization answers the question &amp;ldquo;does it work?&amp;rdquo;, Something needs to say when to stop &amp;ldquo;randomizing&amp;rdquo; and answer the question &amp;ldquo;are done?&amp;rdquo;.
SV Standard define combine several Semantics languages (mixed bag) for OOP, SVA, Randomization and most importantly Functional Coverage. This is small(or abridged if you like fancy words) intro to Coverage semantics. So, LRM reading is a must to understand all features and details about functional coverage semantics.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; -is_copy_constructible and is_copy_assignable templates</title>
      <link>/posts/2020/11/c-is_copy_constructible-and-is_copy_assignable-templates/</link>
      <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/11/c-is_copy_constructible-and-is_copy_assignable-templates/</guid>
      <description>c++11 defines several templates utilities that can evaluate if class has copy_constructor or assignment operator.
there are several variants but this example uses std::is_copy_constructible and std::is_copy_assignable.
for more details, see is_copy_assignable and is_copy_constructible
#include &amp;lt;iostream&amp;gt;#include &amp;lt;type_traits&amp;gt;using namespace std; class cls { public: cls(const cls &amp;amp;) = default; cls &amp;amp;operator=(const cls &amp;amp;other) = default; }; class cls1 { public: cls1(const cls1 &amp;amp;) = delete; cls1 &amp;amp;operator=(const cls1 &amp;amp;other) = delete; }; int main() { cout &amp;lt;&amp;lt; std::is_copy_constructible&amp;lt;cls&amp;gt;::value &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; std::is_copy_assignable&amp;lt;cls&amp;gt;::value &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; std::is_copy_constructible&amp;lt;cls1&amp;gt;::value &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; std::is_copy_assignable&amp;lt;cls1&amp;gt;::value &amp;lt;&amp;lt; endl; } </description>
    </item>
    
    <item>
      <title>C&#43;&#43; - smart pointer - unique_ptr</title>
      <link>/posts/2020/11/c-smart-pointer-unique_ptr/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/11/c-smart-pointer-unique_ptr/</guid>
      <description>before c++11, smart pointer can be used from boost library but now it&amp;rsquo;s part of std. This post documents some small example how to create and use unique_ptr.
Hello world  Link to heading   This is the first example of unique_ptr, note how sp is used same as raw pointer. namely using -&amp;gt; or .. from program output, It&amp;rsquo;s clear how unique_ptr is different. ~cls() is called for unique_ptr object but not for raw pointer.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - std::pair</title>
      <link>/posts/2020/11/c-stdpair/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/11/c-stdpair/</guid>
      <description>std::pair is class template to store two elements(special case of std::tuple)
according to cpp reference, the elements are accessible through first and second member objects.
there are several ways to create pair according to link. i am listing the 3 obvious ones here:
 default constructor if both types std;:is_default_constuctible_v for both types is true constructor (x,y) which initializes first and second to x and y copy contructor from another pain.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - std::tie and std::ignore</title>
      <link>/posts/2020/11/c-stdtie-and-stdignore/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/11/c-stdtie-and-stdignore/</guid>
      <description>c++11 defines utility tie to return tuple that can be used in lvalue.
c++ reference has have one line definition
 Creates a tuple of lvalue references to its arguments or instances of std::ignore.
 in plain English, this works like unpack tuple in python or destructing in javascript. So, in the following example, func return tuple of two elements and using tie and unpacking it in x and y variables</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - std::tuple</title>
      <link>/posts/2020/11/c-stdtuple/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/11/c-stdtuple/</guid>
      <description>std::tuple was added in c++11 fixed sized heterogeneous values It is a generalization of std::pair. full details at cpp reference
get&amp;lt;index&amp;gt;(tuple) is used to get the values at index.
what is interesting about tuple though is using make_tuple and auto to create tuples without specifying types. auto type deduction will figure it out.
#include &amp;lt;iostream&amp;gt;#include &amp;lt;utility&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;tuple&amp;gt; // for tupleusing namespace std; int main() { std::tuple&amp;lt;int, int, string&amp;gt; p; p = make_tuple(1, 2, &amp;#34;fff&amp;#34;); cout &amp;lt;&amp;lt; get&amp;lt;0&amp;gt;(p) &amp;lt;&amp;lt; endl; auto p1 = make_tuple(&amp;#34;1dd&amp;#34;, 1.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - explicit</title>
      <link>/posts/2020/11/c-explicit/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/11/c-explicit/</guid>
      <description>by default, compiler can do implicit type conversion if there is a constructor that matches the argument. For example, func returns int and return type is cls which has a constructor with int.
#include &amp;lt;iostream&amp;gt; using namespace std; class cls { public: cls(int i) { cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl; } }; cls func() { return 230; } int main() { int i; cls c(1); c = func(); } cpreference describes explicit as was to disable the implicit conversion and force compile error when that happens.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - const method</title>
      <link>/posts/2020/11/c-const-method/</link>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/11/c-const-method/</guid>
      <description>const method specifier stop the method from writing to class members. It throws compile time error for writes.
Example  Link to heading   class cls { public: int x; void func() const { x = 0; } }; int main() { } const.cc:8:11: error: assignment of member ‘cls::x’ in read-only object 8 | x = 0; | ~~^~~ Note that const methods can only call constant methods.
Work around const-ness  Link to heading   To force write inside const method, const_cast can be used to remove const-ness.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - default and delete</title>
      <link>/posts/2020/11/c-default-and-delete/</link>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/11/c-default-and-delete/</guid>
      <description>Default  Link to heading   if class defines constructor, compiler won&amp;rsquo;t generate default constructor.
#include &amp;lt;iostream&amp;gt;using namespace std; class child { public: int x; child(int x) { cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; endl; } // child() = default; }; int main() { child c; return 0; } so, this will fail with compile error
default_delete.cc:24:11: error: no matching function for call to ‘child::child()’ 24 | child c; | ^ But if still want default constructor, we can define the default constructor same as we don&amp;rsquo;t have the custom constructor</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - final keyword</title>
      <link>/posts/2020/11/c-final-keyword/</link>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/11/c-final-keyword/</guid>
      <description>final keyword was added in C++11 to stop virtual functional override or base class inheritance.
 When used in a virtual function declaration or definition, final specifier ensures that the function is virtual &amp;gt; and specifies that it may not be overridden by derived classes. The program is ill-formed (a compile-time error &amp;gt; is generated) otherwise.
When used in a class definition, final specifies that this class may not appear in the base-specifier-list of &amp;gt; another class definition (in other words, cannot be derived from).</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - noexpect</title>
      <link>/posts/2020/11/c-noexpect/</link>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/11/c-noexpect/</guid>
      <description>noexept is c++11 specifier to mark method as exception non-throwing. the best explanation i found is on MSF.
 Unary conditional operator noexcept(constant_expression) where constant_expression yields true, and its unconditional synonym noexcept, specify that the set of potential exception types that can exit a function is empty. That is, the function never throws an exception and never allows an exception to be propagated outside its scope.
 and after i tried it out, g++ doesn&amp;rsquo;t error out when that happen.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - override</title>
      <link>/posts/2020/11/c-override/</link>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/11/c-override/</guid>
      <description>override keyword to make sure that class method &amp;ldquo;overrides&amp;rdquo; base class method. If there is not virtual in a parent class, it will throw compile error.
Example  Link to heading   #include &amp;lt;iostream&amp;gt; using namespace std; class parent { public: int x; // virtual void func()  // {  // cout &amp;lt;&amp;lt; &amp;#34;parent&amp;#34; &amp;lt;&amp;lt; endl;  // } }; class child : public parent { public: int x; void func() override { cout &amp;lt;&amp;lt; &amp;#34;child&amp;#34; &amp;lt;&amp;lt; endl; } }; int main() { child c; c.</description>
    </item>
    
    <item>
      <title>Setup openvpn on VPS</title>
      <link>/posts/2020/11/setup-openvpn-on-vps/</link>
      <pubDate>Sun, 08 Nov 2020 19:46:08 +0200</pubDate>
      
      <guid>/posts/2020/11/setup-openvpn-on-vps/</guid>
      <description>Creating openvpn server  Link to heading   I used the script from github. which is very easy to follow to generate the server and config
curl -O https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh chmod +x openvpn-install.sh ./openvpn-install.sh and to make sure the port 1194 is open, I used ufw to allow traffic on it
ufw allow 1194/udp Fixing the issue with linux openvpn connection  Link to heading   with generated ovpn, we can connect to the openvpn server</description>
    </item>
    
    <item>
      <title>Encrypt Hard drive with cryptsetup</title>
      <link>/posts/2020/11/encrypt-hard-drive-with-cryptsetup/</link>
      <pubDate>Sun, 08 Nov 2020 15:46:08 +0200</pubDate>
      
      <guid>/posts/2020/11/encrypt-hard-drive-with-cryptsetup/</guid>
      <description>prerequisite  Link to heading   sudo apt install cryptsetup parted export DRIVE=sdc Create partition  Link to heading   sudo dd if=/dev/zero of=/dev/$DRIVE bs=512 count=1 conv=notrunc sudo parted /dev/$DRIVE (parted) mkpart primary ext4 0% 100% (parted) print (parted) quit Encrypt partition  Link to heading   # Encrypt the partition with password sudo cryptsetup --verbose --verify-passphrase luksFormat /dev/${DRIVE}1 # Open luks with password above sudo cryptsetup luksOpen /dev/${DRIVE}1 ${DRIVE}1 # Create ext4 filesystem sudo mkfs.</description>
    </item>
    
    <item>
      <title>UVM Internals - Structural Components</title>
      <link>/posts/2020/11/uvm-internals-structural-components/</link>
      <pubDate>Sat, 07 Nov 2020 00:13:06 +0200</pubDate>
      
      <guid>/posts/2020/11/uvm-internals-structural-components/</guid>
      <description>Components  Link to heading   UVM defines set of standard building blocks to build test hierarchy. All components inherit from uvm_component. but some components have more bells and whistles than others.
uvm_comps.svh  Link to heading   starting with src/comps/uvm_comps.svh where components live, we can see there are two types
 Utility components Structural components  `include &amp;#34;comps/uvm_pair.svh&amp;#34; `include &amp;#34;comps/uvm_policies.svh&amp;#34; `include &amp;#34;comps/uvm_in_order_comparator.svh&amp;#34; `include &amp;#34;comps/uvm_algorithmic_comparator.svh&amp;#34; `include &amp;#34;comps/uvm_random_stimulus.svh&amp;#34; `include &amp;#34;comps/uvm_subscriber.</description>
    </item>
    
    <item>
      <title>Device Tree hello world</title>
      <link>/posts/2020/09/device-tree-hello-world/</link>
      <pubDate>Sun, 06 Sep 2020 16:05:18 +0200</pubDate>
      
      <guid>/posts/2020/09/device-tree-hello-world/</guid>
      <description>Device Tree is defined as
 In computing, a device tree (also written devicetree) is a data structure describing the hardware components of a particular computer so that the operating system&amp;rsquo;s kernel can use and manage those components, including the CPU or CPUs, the memory, the buses and the peripherals.
 Basically, device tree defines SOC architecture for operating system or boot-loader. This is widely used in embedded systems where the system is not configurable and not going to change.</description>
    </item>
    
    <item>
      <title>UVM Report Server</title>
      <link>/posts/2020/09/uvm-report-server/</link>
      <pubDate>Fri, 04 Sep 2020 03:13:06 +0200</pubDate>
      
      <guid>/posts/2020/09/uvm-report-server/</guid>
      <description>UVM Class reference manual define uvm_report_server
 uvm_report_handler. None of its methods are intended to be called by normal testbench uvm_report_server is a global server that processes all of the reports generated by an code, although in some circumstances the virtual methods process_report and/or compose_uvm_info may be overloaded in a subclass.
 Define uvm_report_server  Link to heading   To change the message format, say CSV, compase_message can be used to return re-formatted message.</description>
    </item>
    
    <item>
      <title>UVM Report Catcher</title>
      <link>/posts/2020/09/uvm-report-catcher/</link>
      <pubDate>Tue, 01 Sep 2020 03:13:06 +0200</pubDate>
      
      <guid>/posts/2020/09/uvm-report-catcher/</guid>
      <description>How to use UVM report catcher to change message attributes. Report catcher can&amp;rsquo;t change the message format. Report server can be used to change the format.
Report Catcher  Link to heading   first we need to sub-class uvm_report_catcher and override catch. in this example,get_severity and get_id are used to filter messages. Then THROW is returned which passes the modified message.
class catcher extends uvm_report_catcher; function new(string name=&amp;#34;catcher&amp;#34;); super.new(name); endfunction function action_e catch(); if(get_severity() == UVM_WARNING&amp;amp;&amp;amp; get_id() == &amp;#34;MYID&amp;#34;) set_severity(UVM_ERROR); return THROW; endfunction endclass All getters and setters can be found at UVM report cat catcher</description>
    </item>
    
    <item>
      <title>UVM Sequencer grab()</title>
      <link>/posts/2020/08/uvm-sequencer-grab/</link>
      <pubDate>Mon, 31 Aug 2020 03:13:06 +0200</pubDate>
      
      <guid>/posts/2020/08/uvm-sequencer-grab/</guid>
      <description>Hierarchical sequences  Link to heading   Big part of sequencer functionality( ie. complexity) is sequence arbitration. That&amp;rsquo;s why we have the whole start_item and get_next_item thing AKA driver-sequence protocol.
In this example, I am using 2 sequences with p_sequencer. By default, the priority of all items from sequences are equal and default arbitration algorithm is fifo.
class my_sequence extends uvm_sequence#(my_transaction); `uvm_object_utils(my_sequence) `uvm_declare_p_sequencer(my_sequencer) function new(string name=&amp;#34;&amp;#34;); super.new(name); endfunction m_seq1 s1; m_seq2 s2; task body(); s1 = m_seq1::type_id::create(&amp;#34;s1&amp;#34;); s2 = m_seq2::type_id::create(&amp;#34;s2&amp;#34;); fork s1.</description>
    </item>
    
    <item>
      <title>uvm_config_db spellchecker</title>
      <link>/posts/2020/08/uvm_config_db-spellchecker/</link>
      <pubDate>Mon, 31 Aug 2020 03:13:06 +0200</pubDate>
      
      <guid>/posts/2020/08/uvm_config_db-spellchecker/</guid>
      <description>Fun trivia i didn&amp;rsquo;t know about UVM config DB. It has build-in spell checker for resource lookup. Who Knew!
The class for spell checker is uvm_spell_chkr. grep&amp;rsquo;ing trough UVM-1.1d, i found it&amp;rsquo;s used once inside uvm_resource.svh
function bit spell_check(string s); return uvm_spell_chkr#(uvm_resource_types::rsrc_q_t)::check(rtab, s); endfunction looking at check, It seems like poorman&amp;rsquo;s spell checker for resource names.
[.........] $display(&amp;#34;%s not located&amp;#34;, s); // if (min == max) then the string table is empty  if(min == max) begin $display(&amp;#34; no alternatives to suggest&amp;#34;); return 0; end // dump all the alternatives with the minimum distance  foreach(min_key[i]) begin $display(&amp;#34; did you mean %s?</description>
    </item>
    
    <item>
      <title>WE API reverse engineering</title>
      <link>/posts/2020/08/we-api-reverse-engineering/</link>
      <pubDate>Sat, 29 Aug 2020 21:39:25 +0200</pubDate>
      
      <guid>/posts/2020/08/we-api-reverse-engineering/</guid>
      <description>Background  Link to heading   My ISP has a &amp;ldquo;modern&amp;rdquo; web app using Angular and REST backend. that said, their website sucks because their login form breaks my password manager. So, I have to login manually every time.
Obviously, they don&amp;rsquo;t have a documented API. so, i have to trace the xhr requests in the browser. This is a 3 hour journey to reverse engineer their login API including deepdive into their weird password encryption!</description>
    </item>
    
    <item>
      <title>Wake on LAN</title>
      <link>/posts/2020/08/wake-on-lan/</link>
      <pubDate>Sat, 29 Aug 2020 15:46:08 +0200</pubDate>
      
      <guid>/posts/2020/08/wake-on-lan/</guid>
      <description>There is a cool protocol to boot machine remotely called Wake on LAN. Considering i am using RPI as gateway, This allows me to start my machine remotely and poweroff if not needed.
Enable WOL in BIOS/UEFI  Link to heading   This has to be supported by hardware and it&amp;rsquo;s usually disabled by default. On my mobo, It&amp;rsquo;s named &amp;ldquo;Power On by PCIE&amp;rdquo;. So, that has to be enabled first.</description>
    </item>
    
    <item>
      <title>UVM user defined phase</title>
      <link>/posts/2020/08/uvm-user-defined-phase/</link>
      <pubDate>Sat, 29 Aug 2020 00:13:06 +0200</pubDate>
      
      <guid>/posts/2020/08/uvm-user-defined-phase/</guid>
      <description>UVM provide a weird pattern to define user defined phases. Usually, it&amp;rsquo;s useful for adding phases for VIP&amp;rsquo;s
User defined phase boiler-plate  Link to heading   According to UVM class reference manual, we need to extends on of the class
class my_PHASE_phase extends uvm_task_phase; class my_PHASE_phase extends uvm_topdown_phase; class my_PHASE_phase extends uvm_bottomup_phase; then override exec_task or exec_func
task exec_task(uvm_component comp, uvm_phase schedule); function void exec_func(uvm_component comp, uvm_phase schedule); the important part about exec method that it calls the phase from the component</description>
    </item>
    
    <item>
      <title>UVM Hearbeat</title>
      <link>/posts/2020/08/uvm-hearbeat/</link>
      <pubDate>Fri, 28 Aug 2020 02:28:49 +0200</pubDate>
      
      <guid>/posts/2020/08/uvm-hearbeat/</guid>
      <description>Example of UVM hearbeat based on example and UVM heartbeat docs
Introduction  Link to heading   UVM reference manual defines Heart Beat as
 Heartbeats provide a way for environments to easily ensure that their descendants are alive. A uvm_heartbeat is associated with a specific objection object. A component that is being tracked by the heartbeat object must raise (or drop) the synchronizing objection during the heartbeat window. The synchronizing objection must be a uvm_callbacks_objection type.</description>
    </item>
    
    <item>
      <title>Setting up VNC</title>
      <link>/posts/2020/08/setting-up-vnc/</link>
      <pubDate>Fri, 21 Aug 2020 14:24:17 +0200</pubDate>
      
      <guid>/posts/2020/08/setting-up-vnc/</guid>
      <description>Install server  Link to heading   Install tigervnc server
apt install tigervnc-standalone-server Install desktop
apt install xfce4 xfce4-goodies Set up xstartup script
touch ~/.vnc/xstartup chmod 700 ~/.vnc/xstartup #!/bin/sh unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS [ -x /etc/vnc/xstartup ] &amp;amp;&amp;amp; exec /etc/vnc/xstartup [ -r $HOME/.Xresources ] &amp;amp;&amp;amp; xrdb $HOME/.Xresources xsetroot -solid grey vncconfig -iconic &amp;amp; xfce4-session &amp;amp; Finally, create the session and set password
vncserver systemd service  Link to heading   create service file</description>
    </item>
    
    <item>
      <title>UVM Basics - Reporting</title>
      <link>/posts/2020/08/uvm-basics-reporting/</link>
      <pubDate>Sun, 16 Aug 2020 00:54:35 +0200</pubDate>
      
      <guid>/posts/2020/08/uvm-basics-reporting/</guid>
      <description>A previous post went into the UVM Reporting implementation, But i thought UVM reporting is important enough topic to have overview.
UVM Reporting  Link to heading   UVM Reporting Macros provide 4 severity level Info, Warning, Error,Fatal
`uvm_info `uvm_warning `uvm_error `uvm_fatal `uvm_info_context `uvm_warning_context `uvm_error_context `uvm_fatal_context starting with uvm_info,
`uvm_info(ID,MSG,VERBOSITY) ID: Unique string for the message. MSG: message string VERBOSITY:
Hello world  Link to heading   `include &amp;#34;uvm_macros.</description>
    </item>
    
    <item>
      <title>Mysql cheat sheet</title>
      <link>/posts/2020/08/mysql-cheat-sheet/</link>
      <pubDate>Fri, 14 Aug 2020 10:23:57 +0200</pubDate>
      
      <guid>/posts/2020/08/mysql-cheat-sheet/</guid>
      <description>This is a small sql cheat sheet i keep. It contains super basic operations (create, select, delete). I am using Mysql for demo here but there would be some difference with sqlite or postgresql.
Start Mysql  Link to heading   to connect to server for first time, you need to connect as root
sudo mysql Create user and add privileges  Link to heading   CREATE USER &#39;user&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39; mysql&amp;gt; GRANT ALL PRIVILEGES ON *.</description>
    </item>
    
    <item>
      <title>SSH jump server on Raspberry pi</title>
      <link>/posts/2020/08/ssh-jump-server-on-raspberry-pi/</link>
      <pubDate>Sun, 02 Aug 2020 18:46:08 +0200</pubDate>
      
      <guid>/posts/2020/08/ssh-jump-server-on-raspberry-pi/</guid>
      <description>Introduction  Link to heading   These are the steps to setup Raspberry pi as ssh jump server. Well, It&amp;rsquo;s not exactly Fort Knox but it&amp;rsquo;s better than exposing my machine directly to internet. This way i can ssh into RPI first then ssh into a machine on local network.
Get Dynamic DNS  Link to heading   The first step is getting dynamic DNS. The problem is ISP can change my real IP any time(usually when router reboots).</description>
    </item>
    
    <item>
      <title>Yosys Nextpnr Flow</title>
      <link>/posts/2020/07/yosys-nextpnr-flow/</link>
      <pubDate>Thu, 23 Jul 2020 18:10:09 +0200</pubDate>
      
      <guid>/posts/2020/07/yosys-nextpnr-flow/</guid>
      <description>I came across this riscv core. I was more interested in the setup to run Yosys and nextpnr all the way to bitstream.
The default target is board with ICE40 FPGA. These are steps the Makefile used to build bitstream.
Pre-synthesis  Link to heading   starting with icepll, it&amp;rsquo;s part of icestorm project to reverse-engineer the binary format for ICE40 fpga.
icepll -q -i 12 -o 48 -m -f pll.</description>
    </item>
    
    <item>
      <title>APB Tutorial</title>
      <link>/posts/2020/07/apb-tutorial/</link>
      <pubDate>Thu, 23 Jul 2020 14:36:41 +0200</pubDate>
      
      <guid>/posts/2020/07/apb-tutorial/</guid>
      <description>This is walk through in APB specification AMBA 3 APB Protocol. The spec is short but i thought to document my notes anyway.
Introduction  Link to heading   APB is AMBA low-speed bus that provide basic write/read transfer. no pipelines with minimum access time of 2 cycles.
Transfers  Link to heading   Chapter 2 explains write and read transfer with 2 variants
 no wait ( exactly 2 cycles) wait (more that 2 cycles)  I will go through the write transfer and how that related to FSM in chapter 2.</description>
    </item>
    
    <item>
      <title>Nginx Configuration</title>
      <link>/posts/2020/07/nginx-configuration/</link>
      <pubDate>Wed, 15 Jul 2020 20:52:51 +0200</pubDate>
      
      <guid>/posts/2020/07/nginx-configuration/</guid>
      <description>apt install nginx allow HTTP and HTTPS ports  Link to heading   sudo ufw allow https sudo ufw allow http Add nginx configuration  Link to heading   touch /etc/nginx/sites-available/foobar.com.conf ln -s /etc/nginx/sites-available/foobar.com.conf /etc/nginx/sites-enable server { listen 80; listen [::]:80; server_name foobar.com www.foobar.com; root /var/www/example.com; index index.html; location / { try_files $uri $uri/ =404; } } then reload nginx
service nginx reload Change DNS on domain and DNS provider  Link to heading   Change the domain to point to your VPS provider.</description>
    </item>
    
    <item>
      <title>Stm32f4 Discovery - Part1 - ARM Cortex M4 Initialization</title>
      <link>/posts/2020/07/stm32f4-discovery-part1-arm-cortex-m4-initialization/</link>
      <pubDate>Sat, 11 Jul 2020 17:48:31 +0200</pubDate>
      
      <guid>/posts/2020/07/stm32f4-discovery-part1-arm-cortex-m4-initialization/</guid>
      <description>Introduction  Link to heading   This post will explain the linker script and assembly initialization before jumping to main using stm32f4 board and Hello world example from github.
The end  Link to heading   I will describe this the same way i gone through it. Starting with the linking command.
arm-none-eabi-gcc -g -O2 -Wall -Tstm32_flash.ld -mlittle-endian -mthumb -mcpu=cortex-m4 -mthumb-interwork -mfloat-abi=hard -mfpu=fpv4-sp-d16 -Iinc -Ilib -Ilib/inc -Ilib/inc/core -Ilib/inc/peripherals src/main.</description>
    </item>
    
    <item>
      <title>Golang Part1</title>
      <link>/posts/2020/07/golang-part1/</link>
      <pubDate>Fri, 10 Jul 2020 01:59:51 +0200</pubDate>
      
      <guid>/posts/2020/07/golang-part1/</guid>
      <description>These are notes i document while learning Go.
Go package  Link to heading   the core of GO is packages. the main package contains one main function which is entry point for the build elf. The ways i can run this file
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) func main() { fmt.Println(os.Args) }  Passing the file directory  go build main.go  Passing the directory. In this case, the files in that directory will be compiled to generate the elf binary.</description>
    </item>
    
    <item>
      <title>Golang Part2</title>
      <link>/posts/2020/07/golang-part2/</link>
      <pubDate>Fri, 10 Jul 2020 01:59:51 +0200</pubDate>
      
      <guid>/posts/2020/07/golang-part2/</guid>
      <description>Maps  Link to heading   map has to initialized with make
package main import &amp;#34;fmt&amp;#34; func main() { var m map[string]string m = make(map[string]string) m[&amp;#34;a&amp;#34;] = &amp;#34;a1&amp;#34; fmt.Println(m) } Structure  Link to heading   type struct to create a container for variables. in this example, b1 variable of type Book. b2 is the same with initialized.
package main import &amp;#34;fmt&amp;#34; type Book struct { title string pages int } func main() { var b1 Book b1.</description>
    </item>
    
    <item>
      <title>Bitbake Tutorial</title>
      <link>/posts/2020/07/bitbake-tutorial/</link>
      <pubDate>Fri, 03 Jul 2020 16:47:59 +0200</pubDate>
      
      <guid>/posts/2020/07/bitbake-tutorial/</guid>
      <description>Introdction  Link to heading   Bitbake is make-like build system. It was a part of openembedded project but split at some point to function as task runner.
This is small working exaple of bitbake layer. I extracted it from docs and Yocto-poky repo.
Installation  Link to heading   Download git repo from git. and set PATH to bitbake/bin. that&amp;rsquo;s it :)
Basic concepts  Link to heading   Bitbake uses recipes to control how to build software packages.</description>
    </item>
    
    <item>
      <title>Starting With Wordpress</title>
      <link>/posts/2020/06/starting-with-wordpress/</link>
      <pubDate>Thu, 25 Jun 2020 19:14:05 +0200</pubDate>
      
      <guid>/posts/2020/06/starting-with-wordpress/</guid>
      <description>Dependencies  Link to heading   sudo apt install wordpress php libapache2-mod-php mysql-server php-mysql This will install some important files at /usr/share/wordpress. If this is the first time to install mysql you may be asked to set root user password.
Apache setup  Link to heading   First we need to setup Apache to serve php files from /usr/share/wordpress. Edit /etc/apache2/sites-available/wordpress.conf with the following content
Alias /blog /usr/share/wordpress &amp;lt;Directory /usr/share/wordpress&amp;gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.</description>
    </item>
    
    <item>
      <title>Breadth-first and Depth-first Graph Searches</title>
      <link>/posts/2020/06/breadth-first-and-depth-first-graph-searches/</link>
      <pubDate>Fri, 12 Jun 2020 19:04:24 +0200</pubDate>
      
      <guid>/posts/2020/06/breadth-first-and-depth-first-graph-searches/</guid>
      <description>Introduction  Link to heading   DFS and BFS are probably first topic to do when doing anything related to graphs. I started with things like Dijkstra and prim which could be extension of DFS and BFS.
DFS and BFS can be used for several application like shortest path and detecting cycles and connected components.
Breadth first search  Link to heading   wiki says that BFS visits the nodes of a graph by visiting the neighbour nodes first then move to the next level of neighbours.</description>
    </item>
    
    <item>
      <title>Prim&#39;s Minimum Spanning Tree</title>
      <link>/posts/2020/06/prims-minimum-spanning-tree/</link>
      <pubDate>Fri, 12 Jun 2020 00:56:05 +0200</pubDate>
      
      <guid>/posts/2020/06/prims-minimum-spanning-tree/</guid>
      <description>Introduction  Link to heading   prim&amp;rsquo;s Algorithm find minimum spanning tree for weighted undirected graph.
basically, Minimum spanning tree is sub-graph (in this case tree) that connect all vertices of weight graph. This requires that original graph is connected.
MST is useful for network distribution problems.
The algorithm  Link to heading   From the wiki:
 Initialize a tree with a single vertex, chosen arbitrarily from the graph.</description>
    </item>
    
    <item>
      <title>Dijkstra Algorithm</title>
      <link>/posts/2020/06/dijkstra-algorithm/</link>
      <pubDate>Wed, 10 Jun 2020 22:04:46 +0200</pubDate>
      
      <guid>/posts/2020/06/dijkstra-algorithm/</guid>
      <description>Introduction  Link to heading   Dijkstra&amp;rsquo;s algorithm says it is an algorithm for finding the shortest paths between nodes in a graph.
Dijkstra is big deal because it&amp;rsquo;s used to find the best way (based on weight function) between points A and B on a graph. It works well on graphs with non-negative edges.
Considering the instance of the problem where A and B is connected and graph and required to calculate minimum cost for that path.</description>
    </item>
    
    <item>
      <title>Merkle Tree</title>
      <link>/posts/2020/05/merkle-tree/</link>
      <pubDate>Fri, 29 May 2020 23:04:23 +0200</pubDate>
      
      <guid>/posts/2020/05/merkle-tree/</guid>
      <description>Merkle tree is hash tree (usually binary tree) where each node is hash function of children nodes. i used binary tree with sha256 from hashlib.
Building the tree  Link to heading   i choose to start from the leafs and build up the tree bottom-to-top. _buildTree does that by the recursively building parent nodes. for uniformity, i chose to add padding node to the tree (with empty hash string).</description>
    </item>
    
    <item>
      <title>Xilinx Vivado - Part1 The Flow</title>
      <link>/posts/2020/05/xilinx-vivado-part1-the-flow/</link>
      <pubDate>Thu, 28 May 2020 20:14:08 +0200</pubDate>
      
      <guid>/posts/2020/05/xilinx-vivado-part1-the-flow/</guid>
      <description>This post explains the simple vivado non-project flow for synthesis and implementation. The advantage of non-project mode is full control over the flow and reports generated. Note that non-project runs in-memory (no file generated).So, It does need some extra work to create checkpoints and reports as needed.
Invoking Vivado  Link to heading   vivado takes -mode as one of gui, tcl, batch
 gui: default. start vivado in gui mode tcl: starts vivado in tcl (interactive mode) batch: starts vivado and exit after executing commands (regression mode)  Also, -source run.</description>
    </item>
    
    <item>
      <title>Percolation Union find</title>
      <link>/posts/2020/05/percolation-union-find/</link>
      <pubDate>Tue, 26 May 2020 18:08:00 +0200</pubDate>
      
      <guid>/posts/2020/05/percolation-union-find/</guid>
      <description>Wiki says that Percolation is
 refers to the movement and filtering of fluids through porous materials
 To put this in CS/Math terms:
 Starting with N*N grid with and open and closed cells, is there a path from top row to bottom row?
 This is an example from link that shows how system percolates or not. Percolation is a problem that shows up in chemistry and physics. Also, in network connectivity or Maze connectivity.</description>
    </item>
    
    <item>
      <title>Sudoku SAT Solution</title>
      <link>/posts/2020/05/sudoku-sat-solution/</link>
      <pubDate>Sun, 24 May 2020 20:49:37 +0200</pubDate>
      
      <guid>/posts/2020/05/sudoku-sat-solution/</guid>
      <description>This one is about two things Sudoku and SAT (obviously!). Let&amp;rsquo;s start with definitions:
Sudoku  Link to heading   Sudoku is a puzzle with the objective to fill 9x9 grid with numbers between 1 and 9. There are few rules
 All cells must have one number between 1 and 9 Rows and columns must contain unique numbers 1 to 9 (no repeated digits) each 3x3 sub-grid (AKA box) must contain unique numbers 1 to 9 (to repeated digits)  Check out the wiki</description>
    </item>
    
    <item>
      <title>Conway Game of Life</title>
      <link>/posts/2020/05/conway-game-of-life/</link>
      <pubDate>Sat, 23 May 2020 15:23:40 +0200</pubDate>
      
      <guid>/posts/2020/05/conway-game-of-life/</guid>
      <description>Conway&amp;rsquo;s Game of Life is a zero-player game introduced by the mathematician John Horton Conway in 1970. Well, It has it&amp;rsquo;s own wiki and all.
The rules are simple. You start with a grid of cells with initial state of either living or dead. Cells interact with neighbors to define the next generation of cells.
 Any live cell with fewer than two live neighbors dies, as if by under-population. Any live cell with two or three live neighbors lives on to the next generation.</description>
    </item>
    
    <item>
      <title>MD5 python implementation</title>
      <link>/posts/2020/05/md5-python-implementation/</link>
      <pubDate>Fri, 15 May 2020 23:04:19 +0200</pubDate>
      
      <guid>/posts/2020/05/md5-python-implementation/</guid>
      <description>I thought it would be fun to implement MD5 from scratch. it was indeed fun but with few Gotchas. so, after shaking off PTSD, i wrote this post.
The rfc1321 defines MD5 digest algorithm. It also has reference C implementation which is nice (and needlessly complicated). That said, I don&amp;rsquo;t think Python is really the best language for bit manipulations of binary files. but that is part of the fun, right?</description>
    </item>
    
    <item>
      <title>UVM Internals - Configuration database</title>
      <link>/posts/2020/05/uvm-internals-configuration-database/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/05/uvm-internals-configuration-database/</guid>
      <description>The White Rabbit  Link to heading   Configuration database is used to pass around configuration parameters through centralized database. one of the famous patterns is storing the virtual interface.
uvm_config_db#(virtual v_if)::set(null,&amp;#34;*&amp;#34;,&amp;#34;v_if&amp;#34;,intf); Then any component(driver/monitor) can get the virtual interface
uvm_config_db#(virtual v_if)::get(null,&amp;#34;*&amp;#34;,&amp;#34;v_if&amp;#34;,vintf); ::set  Link to heading   Starting with ::set, it is defined in src/base/uvm_config_db.svh as static method of class uvm_class_db
class uvm_config_db#(type T=int) extends uvm_resource_db#(T); ... .</description>
    </item>
    
    <item>
      <title>UVM Internals - Reporting</title>
      <link>/posts/2020/05/uvm-internals-reporting/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/05/uvm-internals-reporting/</guid>
      <description>The White Rabbit  Link to heading   uvm reporting is the mechanism to control which/how messages are printed to the logs. In this post, i am going to trace one of the macro down to IO system task.
Starting with an example of uvm_warning macro
`uvm_warning(&amp;#34;MYWARN1&amp;#34;, &amp;#34;This is a warning&amp;#34;) uvm_warning  Link to heading   starting with macro expansion
`define uvm_warning(ID,MSG) \ begin \ if (uvm_report_enabled(UVM_NONE,UVM_WARNING,ID)) \ uvm_report_warning (ID, MSG, UVM_NONE, `uvm_file, `uvm_line); \ end  in uvm_globals.</description>
    </item>
    
    <item>
      <title>UVM Internals - Factory</title>
      <link>/posts/2020/05/uvm-internals-factory/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/05/uvm-internals-factory/</guid>
      <description>The White Rabbit  Link to heading   The factory is a way to dynamically construct objects(see wiki). For UVM, Factory can be used to override the objected created which allow injection of new functionality into already existing sequences.
It requires registering the class first then using create to get an object
 registration  class env extends uvm_env; `uvm_component_utils(uvm_env)  Creation  env = uvm_env::type_id::create(&amp;#34;env&amp;#34;,this); Registration  Link to heading   uvm_component_utils is defined in src/macros/uvm_object_defines.</description>
    </item>
    
    <item>
      <title>UVM Internals - run_test</title>
      <link>/posts/2020/04/uvm-internals-run_test/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/04/uvm-internals-run_test/</guid>
      <description>Hello World  Link to heading   The simplest UVM testbench starts with run_test.
initial begin run_test(&amp;quot;test01&amp;quot;); end run_test is defined on src/base/uvm_globals.svh where it constructs uvm_root and run run_test from top.run_test()
task run_test (string test_name=&amp;quot;&amp;quot;); uvm_root top; top = uvm_root::get(); top.run_test(test_name); endtask Creating uvm_root  Link to heading   uvm_root is created by calling uvm_root::get static method. Beside creating the singelton uvm_root, it creates the uvm_domain which is also a singelton.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - member initializer lists  </title>
      <link>/posts/2020/03/c-member-initializer-lists/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/03/c-member-initializer-lists/</guid>
      <description>c++11 feature to initialize public members without using constructor using c1{1, 2};
#include &amp;lt;iostream&amp;gt; class cls { public: int x; int y; }; int main() { cls c1{1, 2}; std::cout &amp;lt;&amp;lt; c1.x &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; c1.y &amp;lt;&amp;lt; std::endl; } most GNU toolchains support 11 by default. so, it works as expected
$ ./a.out 12 when compiled with std=c++98, it prints
member-class-init.cpp:12:8: warning: extended initializer lists only available with -std=c++11 or -std=gnu++11 cls c1{1, 2}; ^ </description>
    </item>
    
    <item>
      <title>C&#43;&#43; - Type alias</title>
      <link>/posts/2020/03/c-type-alias/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/03/c-type-alias/</guid>
      <description>for template classes, alias can be used to declare specialization of template class. I guess it can used to define default configuration of the template class.
#include &amp;lt;iostream&amp;gt; template &amp;lt;unsigned T&amp;gt; class cls { public: cls() { std::cout &amp;lt;&amp;lt; T &amp;lt;&amp;lt; std::endl; } }; // The alias with T=32 using alias = cls&amp;lt;32&amp;gt;; int main() { alias c; } </description>
    </item>
    
    <item>
      <title>C&#43;&#43; -initializer_list</title>
      <link>/posts/2020/03/c-initializer_list/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/03/c-initializer_list/</guid>
      <description>initializer_list is wrapper (proxy) to allow passing arrays as curly braces. according to link, it can be used for class constructor to initialize class with arrays.
#include &amp;lt;initializer_list&amp;gt;#include &amp;lt;iostream&amp;gt;using namespace std; class cls { public: void func(std::initializer_list&amp;lt;int&amp;gt; ins) { for (auto in : ins) cout &amp;lt;&amp;lt; in &amp;lt;&amp;lt; endl; } }; int main() { cls c; c.func({1, 2, 3}); return 0; } </description>
    </item>
    
    <item>
      <title>Building OSS FPGA Toolchain</title>
      <link>/posts/2020/02/building-oss-fpga-toolchain/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/02/building-oss-fpga-toolchain/</guid>
      <description>Introduction  Link to heading   I used yosys occasionally but never tried the whole yosys-nexpnr-icestorm toolchain. This post documents the steps to compile the toolchain. Spoiler alert, the order is important.
Setup  Link to heading   export BASRPATH=$PWD export OSSFPGA=$BASRPATH/opt export MAKEPARALLEL=&amp;#34;-j4&amp;#34; sudo apt-get install build-essential clang bison flex \  libreadline-dev gawk tcl-dev libffi-dev git \  graphviz xdot pkg-config python3 libboost-system-dev \  libboost-python-dev libboost-filesystem-dev zlib1g-dev \  libboost-program-options-dev libboost-thread-dev libboost-iostreams-dev \  libftdi-dev libeigen3-dev qtbase5-dev Building Yosys  Link to heading   git clone https://github.</description>
    </item>
    
    <item>
      <title>Setup Git without server</title>
      <link>/posts/2020/01/setup-git-without-server/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/01/setup-git-without-server/</guid>
      <description>I recently had to setup a git repo on nfs path. So, there are the steps i used to setup it up (and Gotcha)
To do that, bare repo must be used. basically, bare repo is shared repo. You can&amp;rsquo;t work directly on it because it doesn&amp;rsquo;t have the source code. It contains whatever .git has.
Create bare repo
git init --bare myrepo.git Then set your remote to the bare repo.</description>
    </item>
    
    <item>
      <title>Solve Vscode extension download errors</title>
      <link>/posts/2019/10/solve-vscode-extension-download-errors/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/10/solve-vscode-extension-download-errors/</guid>
      <description>This is write-up about how i solved a problem with vscode where i couldn&amp;rsquo;t download/update any extensions.
well, if you see an error like this, read on.
&amp;quot;Failed to update &#39;ms-python.python&#39;.&amp;quot; After spending hours reading github issues on vscode repo, it turned out to simple (but stupid) problem. So, I am documenting it for future me when i forget how i solved it.
The problem  Link to heading   The vscode code marketplace (where all extensions live) can&amp;rsquo;t be resolved unless i have cloudflare 1.</description>
    </item>
    
    <item>
      <title>Flask Internals Part1</title>
      <link>/posts/2019/09/flask-internals-part1/</link>
      <pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/09/flask-internals-part1/</guid>
      <description>Introduction  Link to heading   I have been playing around with flask for few weeks now. It&amp;rsquo;s definitely leaner than Django but still there are some parts that look like black magic (I am looking at you, g).
So, Starting with&amp;hellip;
Hello world  Link to heading   This looks like a good to place to start. This is the smallest functional flask app, I guess.
Basically, there are two things happening here:</description>
    </item>
    
    <item>
      <title>VPS Configuration</title>
      <link>/posts/2019/09/vps-configuration/</link>
      <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/09/vps-configuration/</guid>
      <description>Steps to setup VPS machine.
Change default Hostname  Link to heading   hostnamectl set-hostname VPS Add sudo user  Link to heading   adduser admin usermod -aG sudo admin Setup up strict Firewall  Link to heading   ufw app list ufw allow OpenSSH ufw status ufw enable ufw status Harden sshd  Link to heading   $ vi /etc/ssh/sshd_config Disable Root ssh access
PermitRootLogin no Disable empty passwords</description>
    </item>
    
    <item>
      <title> Book review - The Pragmatic Programmer</title>
      <link>/posts/2019/08/book-review-the-pragmatic-programmer/</link>
      <pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/08/book-review-the-pragmatic-programmer/</guid>
      <description>The Pragmatic Programmer is a small book about the best practices to be a &amp;ldquo;Pragmatic&amp;rdquo; Programmer. It talks about handling software projects with large teams, changing requirements and complex environments.
I liked the first chapter where it goes through the philosophy of pragmatic engineers. I have been following these practices for years but i haven&amp;rsquo;t see them actually written somewhere. things, like investing in personal portofolio, are the best investment an engineer can do.</description>
    </item>
    
    <item>
      <title>vscode Tips and Tricks</title>
      <link>/posts/2019/06/vscode-tips-and-tricks/</link>
      <pubDate>Sun, 02 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/06/vscode-tips-and-tricks/</guid>
      <description>Recovering deleted files  Link to heading   If you deleted something through vscode, you can find at
&amp;lt;mounted_disk&amp;gt;/.Trash-1000/files/&amp;lt;deleted_file_name&amp;gt;
I found the solution at github issue
Spelling checks  Link to heading   I use spell-right vscode extension for spelling suggestions.
sudo apt-get install hunspell-en-us ln -s /usr/share/hunspell/* ~/.config/Code/Dictionaries then Alt-Shift-p to choose spellRight: Select Dictionary and it works!.</description>
    </item>
    
    <item>
      <title>Web scraping with python</title>
      <link>/posts/2019/06/web-scraping-with-python/</link>
      <pubDate>Sun, 02 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/06/web-scraping-with-python/</guid>
      <description>This post is about the fetch and crawl of html pages using requests and BeautifulSoup
I came across an interesting forum and i was looking for posts with some keywords. The forum did have a search form but didn&amp;rsquo;t support any kind of regex. I think it uses some kind OR&amp;rsquo;ing logic for search keywords and returns any post that has any of the words. It was built in early 00&amp;rsquo;s using PHP, lucky for me.</description>
    </item>
    
    <item>
      <title>Boot linux in Qemu</title>
      <link>/posts/2019/05/boot-linux-in-qemu/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/05/boot-linux-in-qemu/</guid>
      <description>This is quick guide to compile linux kernel and minimal boot in Qemu.
Compiling linux kernel  Link to heading   To compile linux kernel, you will need .config to configure the build. To generate default .config:
make defconfig if you are planning to upgrade the kernel version on your machine, you need to use the current config to generate compatible configuration
cp /boot/config-`kernel version` ./config make oldconfig Creating busybox initramfs  Link to heading   mkinitramfs creates minimal busybox file system with busybox unix commands.</description>
    </item>
    
    <item>
      <title>Console boot options in linux</title>
      <link>/posts/2019/05/console-boot-options-in-linux/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/05/console-boot-options-in-linux/</guid>
      <description>Introduction  Link to heading   I was trying to boot linux with qemu and it didn&amp;rsquo;t work until i added console=ttyS0.So, I decided to take a deep dive into the kernel boot sequence to understand it.
I looked into kernel docs,and found console supports several console types like ttyS, tty, ttyUSB and few others. but i was interested in ttyS0 only for now.
Boot options registration  Link to heading   Linux has infrastructure to register boot options and parsers will iterate boot options and call the registered functions.</description>
    </item>
    
  </channel>
</rss>
