<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Techiedeepdive</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Techiedeepdive</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 04 Aug 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Surelog and UHDM Primer</title>
      <link>/posts/2025/08/surelog-and-uhdm-primer/</link>
      <pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/08/surelog-and-uhdm-primer/</guid>
      <description>&lt;p&gt;&lt;code&gt;Surelog&lt;/code&gt; is a super interesting project for parsing and elaborating SystemVerilog. Here is the blurb from their GitHub:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;SystemVerilog 2017 Pre-processor, Parser, Elaborator, UHDM Compiler. Provides IEEE Design/TB C/C++ VPI and Python AST API.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;What I found most interesting is that Surelog can dump &lt;code&gt;UHDM&lt;/code&gt;, which is a standard database representation (think SNPS KDB)&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Linter, Simulator, Synthesis tool, Formal tools can use this front-end. They either can be developed as plugins (linked with) or use this front-end as an intermediate step of their compilation flows using the on-disk serialized models (UHDM).&lt;/p&gt;</description>
    </item>
    <item>
      <title>VFIO Primer</title>
      <link>/posts/2025/08/vfio-primer/</link>
      <pubDate>Sun, 03 Aug 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/08/vfio-primer/</guid>
      <description>&lt;p&gt;VFIO is an important technology to give user space (applications or virtual machines) access to devices such as NICs or GPUs. Here is the blurb from the Linux kernel documentation:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Many modern systems now provide DMA and interrupt remapping facilities to help ensure I/O devices behave within the boundaries they’ve been allotted. This includes x86 hardware with AMD-Vi and Intel VT-d, POWER systems with Partitionable Endpoints (PEs), and embedded PowerPC systems such as Freescale PAMU. The VFIO driver is an IOMMU/device-agnostic framework for exposing direct device access to userspace, in a secure, IOMMU-protected environment. In other words, this allows safe [2], non-privileged, userspace drivers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - execute_item</title>
      <link>/posts/2025/07/uvm-internals-execute_item/</link>
      <pubDate>Sun, 27 Jul 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/07/uvm-internals-execute_item/</guid>
      <description>&lt;p&gt;I came across &lt;code&gt;execute_item&lt;/code&gt;, which seems like a shorthand for sending transaction items directly to a sequencer (and subsequently to the driver). According to the &lt;code&gt;uvm_sequencer&lt;/code&gt; documentation, a temporary sequence is created and run on the transaction item.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// Task: execute_item&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// Executes the given transaction ~item~ directly on this sequencer. A temporary&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// parent sequence is automatically created for the ~item~. There is no capability to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// retrieve responses. If the driver returns responses, they will accumulate in the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// sequencer, eventually causing response overflow unless&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// &amp;lt;set_response_queue_error_report_disabled&amp;gt; is called.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  extern virtual &lt;span style=&#34;color:#ff7b72&#34;&gt;task&lt;/span&gt; execute_item(uvm_sequence_item item);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Naturally, I had to look at the &lt;code&gt;execute_item&lt;/code&gt; implementation to see it in action. It does exactly what is described in the documentation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb Internals - ReadWrite and ReadOnly</title>
      <link>/posts/2025/07/cocotb-internals-readwrite-and-readonly/</link>
      <pubDate>Sat, 26 Jul 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/07/cocotb-internals-readwrite-and-readonly/</guid>
      <description>&lt;p&gt;This is a quick write-up about cocotb &lt;code&gt;ReadWrite&lt;/code&gt; and &lt;code&gt;ReadOnly&lt;/code&gt;. Starting with the cocotb documentation for &lt;code&gt;cocotb.triggers&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class cocotb.triggers.ReadOnly[source]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Fires when the current simulation timestep moves to the read-only phase.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The read-only phase is entered when the current timestep no longer has any further delta steps. This will be a point where all the signal values are stable as there are no more RTL events scheduled for the timestep. The simulator will not allow scheduling of more events in this timestep. Useful for monitors which need to wait for all processes to execute (both RTL and cocotb) to ensure sampled signal values are final.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class cocotb.triggers.ReadWrite[source]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Fires when the read-write portion of the simulation cycles is reached.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is a small example of how to use those triggers in a cocotb coroutine.&lt;/p&gt;</description>
    </item>
    <item>
      <title>BeagleV-Fire Gateware Walkthrough</title>
      <link>/posts/2025/07/beaglev-fire-gateware-walkthrough/</link>
      <pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/07/beaglev-fire-gateware-walkthrough/</guid>
      <description>&lt;p&gt;This is a walkthrough of the Microchip &lt;a href=&#34;https://openbeagle.org/beaglev-fire/gateware.git&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;repo&lt;/a&gt; for building an FPGA image for the &lt;code&gt;BeagleV-Fire&lt;/code&gt; Polarfire fabric.&lt;/p&gt;&#xA;&lt;h1 id=&#34;environment-setup&#34;&gt;&#xA;  Environment Setup&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#environment-setup&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In &lt;a href=&#34;https://openbeagle.org/beaglev-fire/Microchip-FPGA-Tools-Setup.git&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;repo&lt;/a&gt;, there is a script to export some environment variables used by other scripts:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Libero&lt;/li&gt;&#xA;&lt;li&gt;SoftConsole (SC)&lt;/li&gt;&#xA;&lt;li&gt;License server&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#!/bin/bash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#===============================================================================&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Edit the following section with the location where the following tools are&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# installed:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#   - SoftConsole (SC_INSTALL_DIR)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#   - Libero (LIBERO_INSTALL_DIR)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#   - Licensing daemon for Libero (LICENSE_DAEMON_DIR)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#===============================================================================&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#79c0ff&#34;&gt;SC_INSTALL_DIR&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;/home/&lt;span style=&#34;color:#79c0ff&#34;&gt;$USER&lt;/span&gt;/Microchip/SoftConsole-v2022.2-RISC-V-747&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#79c0ff&#34;&gt;LIBERO_INSTALL_DIR&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;/home/&lt;span style=&#34;color:#79c0ff&#34;&gt;$USER&lt;/span&gt;/Microchip/Libero_SoC_v2023.2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#79c0ff&#34;&gt;LICENSE_DAEMON_DIR&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;/home/&lt;span style=&#34;color:#79c0ff&#34;&gt;$USER&lt;/span&gt;/Microchip/Linux_Licensing_Daemon&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#79c0ff&#34;&gt;LICENSE_FILE_DIR&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;/home/&lt;span style=&#34;color:#79c0ff&#34;&gt;$USER&lt;/span&gt;/Microchip/license&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#===============================================================================&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# The following was tested on Ubuntu 20.04 with:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#   - Libero 2023.2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#   - SoftConsole 2022.2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#===============================================================================&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# SoftConsole&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#79c0ff&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$PATH&lt;/span&gt;:&lt;span style=&#34;color:#79c0ff&#34;&gt;$SC_INSTALL_DIR&lt;/span&gt;/riscv-unknown-elf-gcc/bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#79c0ff&#34;&gt;FPGENPROG&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$LIBERO_INSTALL_DIR&lt;/span&gt;/Libero/bin64/fpgenprog&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Libero&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#79c0ff&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$PATH&lt;/span&gt;:&lt;span style=&#34;color:#79c0ff&#34;&gt;$LIBERO_INSTALL_DIR&lt;/span&gt;/Libero/bin:&lt;span style=&#34;color:#79c0ff&#34;&gt;$LIBERO_INSTALL_DIR&lt;/span&gt;/Libero/bin64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#79c0ff&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$PATH&lt;/span&gt;:&lt;span style=&#34;color:#79c0ff&#34;&gt;$LIBERO_INSTALL_DIR&lt;/span&gt;/Synplify/bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#79c0ff&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$PATH&lt;/span&gt;:&lt;span style=&#34;color:#79c0ff&#34;&gt;$LIBERO_INSTALL_DIR&lt;/span&gt;/Model/modeltech/linuxacoem&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#79c0ff&#34;&gt;LOCALE&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;C&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#79c0ff&#34;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;/usr/lib/i386-linux-gnu:&lt;span style=&#34;color:#79c0ff&#34;&gt;$LD_LIBRARY_PATH&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Libero License daemon&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#79c0ff&#34;&gt;LM_LICENSE_FILE&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;1702@localhost&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#79c0ff&#34;&gt;SNPSLMD_LICENSE_FILE&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;1702@localhost&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$LICENSE_DAEMON_DIR&lt;/span&gt;/lmgrd -c &lt;span style=&#34;color:#79c0ff&#34;&gt;$LICENSE_FILE_DIR&lt;/span&gt;/License.dat -l &lt;span style=&#34;color:#79c0ff&#34;&gt;$LICENSE_FILE_DIR&lt;/span&gt;/license.log&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;software&#34;&gt;&#xA;  Software&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#software&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In &lt;a href=&#34;https://openbeagle.org/beaglev-fire/gateware.git&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;repo&lt;/a&gt;, the top script &lt;code&gt;build-bitstream.py&lt;/code&gt; calls the flow to build both software then bitstream&lt;/p&gt;</description>
    </item>
    <item>
      <title>Digital Design and Verification Topics</title>
      <link>/posts/2025/07/digital-design-and-verification-topics/</link>
      <pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/07/digital-design-and-verification-topics/</guid>
      <description>&lt;p&gt;As design/verification engineers, we have to create or deal with a lot technologies, languages, concepts, tools and documentation. This is my attempts for list of topics we need to know about&lt;/p&gt;&#xA;&lt;h1 id=&#34;de&#34;&gt;&#xA;  DE&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#de&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Sequential/comb logic&lt;/li&gt;&#xA;&lt;li&gt;Counters and clock dividers&lt;/li&gt;&#xA;&lt;li&gt;FSM&lt;/li&gt;&#xA;&lt;li&gt;FIFOs&lt;/li&gt;&#xA;&lt;li&gt;Valid/ready (skid buffers)&lt;/li&gt;&#xA;&lt;li&gt;Arbiters&lt;/li&gt;&#xA;&lt;li&gt;Pipelining&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;dv&#34;&gt;&#xA;  DV&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#dv&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;VHDL/Verilog/Systeverilog&lt;/li&gt;&#xA;&lt;li&gt;UVM&lt;/li&gt;&#xA;&lt;li&gt;SystemC&lt;/li&gt;&#xA;&lt;li&gt;C++&lt;/li&gt;&#xA;&lt;li&gt;Python&lt;/li&gt;&#xA;&lt;li&gt;TCL/Makefile&lt;/li&gt;&#xA;&lt;li&gt;UPF&lt;/li&gt;&#xA;&lt;li&gt;IPXACT&lt;/li&gt;&#xA;&lt;li&gt;SVA&lt;/li&gt;&#xA;&lt;li&gt;Formal (VC Formal, Jasper)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;fpga&#34;&gt;&#xA;  FPGA&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#fpga&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Constraints&lt;/li&gt;&#xA;&lt;li&gt;STA&lt;/li&gt;&#xA;&lt;li&gt;CDC&lt;/li&gt;&#xA;&lt;li&gt;Reset&lt;/li&gt;&#xA;&lt;li&gt;Optimization (power, area, latency)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;technologies&#34;&gt;&#xA;  Technologies&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#technologies&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Computer Architecture&lt;/li&gt;&#xA;&lt;li&gt;Protocols (PCIE, Ethernet, AXI,  etc)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;[1] &lt;a href=&#34;http://www.sunburst-design.com/papers/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.sunburst-design.com/papers/&lt;/a&gt;&#xA;[2] &lt;a href=&#34;https://zipcpu.com&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://zipcpu.com&lt;/a&gt;&#xA;[3] &lt;a href=&#34;https://thedatabus.in/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://thedatabus.in/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chess Linux clients</title>
      <link>/posts/2025/07/chess-linux-clients/</link>
      <pubDate>Sun, 20 Jul 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/07/chess-linux-clients/</guid>
      <description>&lt;p&gt;This is a quick writeup about chess GUI clients.  All clients can use UCI eninge (stockfish) for move evaluation but they have to keep board state and GUI interactions.&lt;/p&gt;&#xA;&lt;p&gt;TLDR; I like pychess the most but chessx seems have to most features which means it is most complicated.&lt;/p&gt;&#xA;&lt;h1 id=&#34;stockfish&#34;&gt;&#xA;  Stockfish&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#stockfish&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Stockfish is an open-source chess engine used by several chess websites such as Chess.com. from their github page:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chisel primer</title>
      <link>/posts/2025/07/chisel-primer/</link>
      <pubDate>Sat, 19 Jul 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/07/chisel-primer/</guid>
      <description>&lt;p&gt;This post is about getting started with Chisel which is scala based design library.&lt;/p&gt;&#xA;&lt;h1 id=&#34;scala-hello-world&#34;&gt;&#xA;  Scala Hello world&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#scala-hello-world&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;First we need to install some packages. Most important one is probably java.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install openjdk-8-jdk git make gtkwave&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I found the apt &lt;code&gt;scala&lt;/code&gt; version is too old and it fails on Mint 12. So i got the &lt;a href=&#34;https://github.com/scala/scala3/releases/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;binaries&lt;/a&gt; for scala. Now, we can run hello world&lt;/p&gt;</description>
    </item>
    <item>
      <title>Libcudd Primer</title>
      <link>/posts/2025/07/libcudd-primer/</link>
      <pubDate>Fri, 18 Jul 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/07/libcudd-primer/</guid>
      <description>&lt;p&gt;&lt;code&gt;libcudd&lt;/code&gt; is cool library to build and manipulate BDD in C. It&amp;rsquo;s used in several application in digital design such formal verification or synthsis (timing and power).&lt;/p&gt;&#xA;&lt;p&gt;The following snipper from libcudd github repo&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The CUDD package is a package written in C for the manipulation of&#xA;decision diagrams.  It supports binary decision diagrams (BDDs),&#xA;algebraic decision diagrams (ADDs), and Zero-Suppressed BDDs (ZDDs).&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;For chatgpt, we get this nice one-liner&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenSTA Primer</title>
      <link>/posts/2025/07/opensta-primer/</link>
      <pubDate>Thu, 17 Jul 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/07/opensta-primer/</guid>
      <description>&lt;p&gt;OpenSTA is part openROAD project for RTL-GDS open source flow&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;OpenSTA is a gate level static timing verifier. As a stand-alone executable it can be used to verify the timing of a design using standard file formats.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;installation&#34;&gt;&#xA;  Installation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#installation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;cudd&#34;&gt;&#xA;  CUDD&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#cudd&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;OpenSTA needs CUDD to deal with BDDs under the hood.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The CUDD package is a package written in C for the manipulation of&#xA;decision diagrams.  It supports binary decision diagrams (BDDs),&#xA;algebraic decision diagrams (ADDs), and Zero-Suppressed BDDs (ZDDs).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python-chess: Chess library for fun</title>
      <link>/posts/2025/07/python-chess-chess-library-for-fun/</link>
      <pubDate>Sat, 05 Jul 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/07/python-chess-chess-library-for-fun/</guid>
      <description>&lt;p&gt;I recently got into chess and thought it would be fun to look at chess programming while i am it. This post is about &lt;code&gt;python-chess&lt;/code&gt; library which provides data structures and APIs for chess board.&lt;/p&gt;&#xA;&lt;h1 id=&#34;board&#34;&gt;&#xA;  Board&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#board&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The standard board positions is represented with &lt;code&gt;Forsyth–Edwards Notation&lt;/code&gt; or &lt;code&gt;FEN&lt;/code&gt;. The main class is &lt;code&gt;Board&lt;/code&gt; which have the initial FEN as show below.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Piece placement data: Each rank is described, starting with rank 8 and ending with rank 1, with a &amp;ldquo;/&amp;rdquo; between each one; within each rank, the contents of the squares are described in order from the a-file to the h-file. Each piece is identified by a single letter taken from the standard English names in algebraic notation (pawn = &amp;ldquo;P&amp;rdquo;, knight = &amp;ldquo;N&amp;rdquo;, bishop = &amp;ldquo;B&amp;rdquo;, rook = &amp;ldquo;R&amp;rdquo;, queen = &amp;ldquo;Q&amp;rdquo; and king = &amp;ldquo;K&amp;rdquo;). White pieces are designated using uppercase letters (&amp;ldquo;PNBRQK&amp;rdquo;), while black pieces use lowercase letters (&amp;ldquo;pnbrqk&amp;rdquo;). A set of one or more consecutive empty squares within a rank is denoted by a digit from &amp;ldquo;1&amp;rdquo; to &amp;ldquo;8&amp;rdquo;, corresponding to the number of squares.&lt;/p&gt;</description>
    </item>
    <item>
      <title>BeagleV-Fire Walkthrough: Linux Repo</title>
      <link>/posts/2025/07/beaglev-fire-walkthrough-linux-repo/</link>
      <pubDate>Fri, 04 Jul 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/07/beaglev-fire-walkthrough-linux-repo/</guid>
      <description>&lt;p&gt;This is a walkthrough of the &lt;a href=&#34;https://openbeagle.org/beaglev-fire/BeagleV-Fire-ubuntu&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microchip repo&lt;/a&gt; to build U-Boot and Linux for the BeagleV-Fire.&lt;/p&gt;&#xA;&lt;h1 id=&#34;linux-build-flow&#34;&gt;&#xA;  Linux Build Flow&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#linux-build-flow&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In &lt;a href=&#34;https://openbeagle.org/beaglev-fire/BeagleV-Fire-ubuntu&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1&lt;/a&gt;, the repo has scripts to build all software components, including U-Boot and Linux. Let&amp;rsquo;s dig deeper into what is there. This is the main script that calls some smaller scripts:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# Building Microchip Linux tree&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./01_git_sync.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./02_build_hss.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./03_build_u-boot.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./04_build_linux.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./05_generate_payload.bin.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ./06_generate_debian_console_root.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ./07_create_sdcard_img.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;01-clone-git-repos&#34;&gt;&#xA;  01 Clone Git Repos&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#01-clone-git-repos&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;First, the scripts clone the required repos: Linux, U-Boot, and DeviceTree.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vortex - An open-source GPGPU - Code base</title>
      <link>/posts/2025/07/vortex-an-open-source-gpgpu-code-base/</link>
      <pubDate>Wed, 02 Jul 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/07/vortex-an-open-source-gpgpu-code-base/</guid>
      <description>&lt;p&gt;This is a deep(ish) dive into the Vortex open-source GPU. This is a very interesting codebase with both software and hardware components to get things up and running.&lt;/p&gt;&#xA;&lt;h1 id=&#34;hello-world&#34;&gt;&#xA;  Hello-world&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#hello-world&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with installation, if needed, modify the &lt;code&gt;configure&lt;/code&gt; script to add your distribution. In my case, I was running &lt;code&gt;Mint&lt;/code&gt;, so I had to add this branch in the &lt;code&gt;configure&lt;/code&gt; script:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone --depth&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt; --recursive https://github.com/vortexgpgpu/vortex.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd vortex&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff --git a/configure b/configure&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index fbcd3f1..3d5898b &lt;span style=&#34;color:#a5d6ff&#34;&gt;100755&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--- a/configure&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+++ b/configure&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@@ -37,6 +37,7 @@ detect_osversion&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Add new versions as needed&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#ff7b72&#34;&gt;esac&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 ;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+           linuxmint&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;osversion&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;ubuntu/focal&amp;#34;&lt;/span&gt;;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#ff7b72&#34;&gt;esac&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#ff7b72&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     echo &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$osversion&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then build dependencies and toolchain with &lt;code&gt;install_dependencies.sh&lt;/code&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Formal - hw-cbmc : Open source formal verification tool</title>
      <link>/posts/2025/06/formal-hw-cbmc-open-source-formal-verification-tool/</link>
      <pubDate>Sat, 28 Jun 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/06/formal-hw-cbmc-open-source-formal-verification-tool/</guid>
      <description>&lt;p&gt;Formal verification is a vast and interesting topic. One of the biggest issues is tools to support SVA. I recently found &lt;code&gt;hw-cbmc&lt;/code&gt;, an open source tool to run SVA or SMV on Verilog. This is a deep dive into &lt;code&gt;hw-cbmc&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h1 id=&#34;hello-world&#34;&gt;&#xA;  Hello World&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#hello-world&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This is a summary of commands to build &lt;code&gt;hw-cbmc&lt;/code&gt;. This is based on COMPILING.md and Dockerfile.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt-get install g++ gcc flex bison make git curl patch&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/diffblue/hw-cbmc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule init; git submodule update&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make -C lib/cbmc/src minisat2-download&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make -C src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To run hello world, &lt;code&gt;ebmc&lt;/code&gt; is called with &lt;code&gt;--top&lt;/code&gt; and &lt;code&gt;--bound&lt;/code&gt; with 3.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb AVL primer</title>
      <link>/posts/2025/06/cocotb-avl-primer/</link>
      <pubDate>Thu, 26 Jun 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/06/cocotb-avl-primer/</guid>
      <description>&lt;p&gt;&lt;code&gt;AVL - Apheleia Verification Library&lt;/code&gt; is a cool library to implement SV (coverage and randomization) and UVM API (similar to pyuvm). This is a deep dive into an AVL example and implementation. Probably this would be the first post about AVL as I read more of the core modules.&lt;/p&gt;&#xA;&lt;h1 id=&#34;sequence-and-sequenceitem&#34;&gt;&#xA;  Sequence and SequenceItem&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#sequence-and-sequenceitem&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with &lt;code&gt;SequenceItem&lt;/code&gt; and &lt;code&gt;Sequence&lt;/code&gt;, which look a lot like SV and UVM combo. The sequence &lt;code&gt;body&lt;/code&gt; looks exactly like the UVM body.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cryptography - AES ECB for fun</title>
      <link>/posts/2025/06/cryptography-aes-ecb-for-fun/</link>
      <pubDate>Fri, 20 Jun 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/06/cryptography-aes-ecb-for-fun/</guid>
      <description>&lt;p&gt;This is a quick write-up about AES ECB 128 bits simple python implementation. As usual, the goal is understanding the specs not the math behind it(I am too old for this) nor the efficient implementation.&lt;/p&gt;&#xA;&lt;p&gt;The NIST &lt;a href=&#34;https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197-upd1.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1&lt;/a&gt; specification defines AES algorithm as follows. The Algorithm uses ADDROUNDKEY, SUBBYTES, SHIFTROWS,MIXCOLUMNS operations to mix the key with message block.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; Algorithm 1 Pseudocode for CIPHER()&#xA;&amp;gt; 1: procedure CIPHER(in, Nr, w)&#xA;&amp;gt; 2: state ← in . See Sec. 3.4&#xA;&amp;gt; 3: state ← ADDROUNDKEY(state,w[0..3]) . See Sec. 5.1.4&#xA;&amp;gt; 4: for round from 1 to Nr −1 do&#xA;&amp;gt; 5: state ← SUBBYTES(state) . See Sec. 5.1.1&#xA;&amp;gt; 6: state ← SHIFTROWS(state) . See Sec. 5.1.2&#xA;&amp;gt; 7: state ← MIXCOLUMNS(state) . See Sec. 5.1.3&#xA;&amp;gt; 8: state ← ADDROUNDKEY(state,w[4 ∗ round..4 ∗ round +3])&#xA;&amp;gt; 9: end for&#xA;&amp;gt; 10: state ← SUBBYTES(state)&#xA;&amp;gt; 11: state ← SHIFTROWS(state)&#xA;&amp;gt; 12: state ← ADDROUNDKEY(state,w[4 ∗Nr..4 ∗Nr +3])&#xA;&amp;gt; 13: return state . See Sec. 3.4&#xA;&amp;gt; 14: end procedure &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;key-expansion&#34;&gt;&#xA;  Key expansion&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#key-expansion&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Basically, the KEYEXPANSION operation expands the key from 16B (in 128b AES) to block of 4x4x4 bytes. It also uses s-box transaction and &lt;code&gt;Rcon&lt;/code&gt;  which is called the round constant.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HFT - OUCH protocol primer</title>
      <link>/posts/2025/06/hft-ouch-protocol-primer/</link>
      <pubDate>Sat, 14 Jun 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/06/hft-ouch-protocol-primer/</guid>
      <description>&lt;p&gt;This is primer about OUCH protocol which is Nasdaq low latency protocol for trading companies to send trading orders to the exchange. These are snippets from the specification document:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;NASDAQ accepts limit orders from system participants and executes matching orders when possible. Non-matching orders&#xA;may be added to the NASDAQ Limit Order Book, a database of available limit orders, where they wait to be matched in price-&#xA;time priority.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;OUCH is a simple protocol that allows NASDAQ participants to enter, replace, and cancel orders and receive executions. It is&#xA;intended to allow participants and their software developers to integrate NASDAQ into their proprietary trading systems or to&#xA;build custom front ends.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HFT - ITCH protocol primer</title>
      <link>/posts/2025/06/hft-itch-protocol-primer/</link>
      <pubDate>Thu, 12 Jun 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/06/hft-itch-protocol-primer/</guid>
      <description>&lt;p&gt;I have been dabbling with HFT for few weeks now. So, I thought to go through of the protocols such ITCH and OUCH. This post is about &lt;a href=&#34;https://www.nasdaqtrader.com/content/technicalsupport/specifications/dataproducts/NQTVITCHSpecification.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ITCH&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Nasdaq TotalView ITCH is a direct data feed product offered by The Nasdaq Stock Market, LLC. This specification covers&#xA;both the software and hardware (FPGA) versions of the feed.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Nasdaq will broadcast the TotalView ITCH FPGA feed from the U.S. primary data center facility in Carteret,&#xA;New Jersey in the MoldUDP64 protocol option only. Given the unshaped network traffic, Nasdaq is requiring firms to&#xA;have 10 Gb or 40 Gb network connection into the Carteret, NJ data center to obtain the TotalView ITCH FPGA feed.&#xA;As with the software version of the feed, the TotalView ITCH FPGA feed will be comprised of a series of sequenced&#xA;order messages. Outside of the fact that the FPGA data delivery is unthrottled or unshaped at the network level, the&#xA;TotalView-•-ITCH payload will be the same for both versions of the TotalView-•-ITCH 5.0 data formats. TotalView ITCH&#xA;FPGA product is guaranteed to disseminate payload messages in the same exact order as the software-•-based version&#xA;of the TotalView ITCH feed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LLM - MCP integration with cline</title>
      <link>/posts/2025/06/llm-mcp-integration-with-cline/</link>
      <pubDate>Mon, 09 Jun 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/06/llm-mcp-integration-with-cline/</guid>
      <description>&lt;p&gt;Cline is a great agent that integrates with VSCode (I guess VSCode has agents now). It&amp;rsquo;s still worth a look, especially with a lot of folks playing around with MCP.&lt;/p&gt;&#xA;&lt;p&gt;The first server is hello-world MCP tool which should be simple enough with &lt;code&gt;mcp&lt;/code&gt; package.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;mcp.server.fastmcp&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; FastMCP&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mcp &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; FastMCP(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;mix_server&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;@mcp.tool&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;say_hello&lt;/span&gt;(name: str) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; str:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    Say hello to the user.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    Args:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;        name: Name of the user&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    Returns:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;        A greeting message.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Hello, &lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;!&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;__name__&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mcp&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;run()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;in cline, click on &amp;ldquo;manage MCP servers&amp;rdquo; and then &amp;ldquo;configure MCP servers&amp;rdquo; which opens the server configuration file shown in the snippet. Just add the full path to script and venv if used.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Qemu - Create VM image</title>
      <link>/posts/2025/06/qemu-create-vm-image/</link>
      <pubDate>Sat, 07 Jun 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/06/qemu-create-vm-image/</guid>
      <description>&lt;p&gt;This is a quick write-up about creating qemu image. The plan was to create an image for microchip libero tools to make it image for all FPGA tools(more about that later).&lt;/p&gt;&#xA;&lt;h1 id=&#34;installation&#34;&gt;&#xA;  Installation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#installation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Install some packages&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install -y qemu qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virt-manager&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;create-vm&#34;&gt;&#xA;  Create VM&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#create-vm&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Create the &lt;code&gt;qcow2&lt;/code&gt; images with 80G&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qemu-img create -f qcow2 fpga.qcow2 80G&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run the ISO and and install it&lt;/p&gt;</description>
    </item>
    <item>
      <title>LLM - smolagents - Deep dive into the smolest agent</title>
      <link>/posts/2025/06/llm-smolagents-deep-dive-into-the-smolest-agent/</link>
      <pubDate>Fri, 06 Jun 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/06/llm-smolagents-deep-dive-into-the-smolest-agent/</guid>
      <description>&lt;p&gt;&lt;code&gt;smolagents&lt;/code&gt; is an interesting agent-based library by Huggingface. I like how simple and small it is. So, this is a deep dive into how smolagent works.&lt;/p&gt;&#xA;&lt;h1 id=&#34;hello-world---ollama&#34;&gt;&#xA;  Hello world - Ollama&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#hello-world---ollama&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with Ollama, This is a small example using Ollama and LiteLLM.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install smolagents&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;[&lt;/span&gt;litellm&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;smolagents&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; CodeAgent, LiteLLMModel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; LiteLLMModel(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    model_id&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;ollama_chat/llama3.2&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    api_base&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;http://localhost:11434&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    api_key&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;YOUR_API_KEY&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    num_ctx&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;8192&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;agent &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; CodeAgent(tools&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;[], model&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;model, add_base_tools&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;True&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;agent&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;run(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Could you give me the 118th number in the Fibonacci sequence?&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;hello-world---openai&#34;&gt;&#xA;  Hello world - OpenAI&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#hello-world---openai&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Next, the smallest example using OpenAI API.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Qemu - Network Networking interface -nic</title>
      <link>/posts/2025/06/qemu-network-networking-interface-nic/</link>
      <pubDate>Sun, 01 Jun 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/06/qemu-network-networking-interface-nic/</guid>
      <description>&lt;p&gt;This post is about Qemu &lt;code&gt;-nic&lt;/code&gt;. Qemu uses several networking options such as SLIRP, TAP or bridge (those the ones I tried anyway).&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;-nic&lt;/code&gt; replaces &lt;code&gt;-net&lt;/code&gt; and combines the functionality of &lt;code&gt;-device&lt;/code&gt; and &lt;code&gt;-netdev&lt;/code&gt;. &lt;code&gt;-nic&lt;/code&gt; takes the backend and device type to choose the network configuration between host and guest.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-nic &amp;lt;backend&amp;gt;,&amp;lt;parameters&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;user-mode&#34;&gt;&#xA;  User mode&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#user-mode&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Also known as SLIRP. This allows VM to access the internet through NAT provided by the host. In this mode, the gust is not accessible from the host (unless port forwarding is enabled).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chisel Study Notes</title>
      <link>/posts/2025/05/chisel-study-notes/</link>
      <pubDate>Fri, 30 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/05/chisel-study-notes/</guid>
      <description>&lt;p&gt;The basic types are &lt;code&gt;Bits&lt;/code&gt;, &lt;code&gt;UInt&lt;/code&gt; and &lt;code&gt;SInt&lt;/code&gt; which can be defined with width &lt;code&gt;n.W&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scala&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;chisel3._&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;chisel3._&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scala&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Bits&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;val&lt;/span&gt; res0&lt;span style=&#34;color:#ff7b72&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;chisel3.Bits.&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; chisel3&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;package$Bits$&lt;span style=&#34;color:#ff7b72&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;185&lt;/span&gt;a2b97&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scala&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;4.&lt;/span&gt;W&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;val&lt;/span&gt; res1&lt;span style=&#34;color:#ff7b72&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;chisel3.internal.firrtl.Width&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scala&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Bits&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;8.&lt;/span&gt;W&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;val&lt;/span&gt; res2&lt;span style=&#34;color:#ff7b72&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;chisel3.UInt&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scala&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;5.&lt;/span&gt;W&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;val&lt;/span&gt; res3&lt;span style=&#34;color:#ff7b72&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;chisel3.UInt&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scala&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;SInt&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;8.&lt;/span&gt;W&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;val&lt;/span&gt; res4&lt;span style=&#34;color:#ff7b72&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;chisel3.SInt&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;SInt&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;constants is converted to chisel type with &lt;code&gt;.U&lt;/code&gt; and &lt;code&gt;.S&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scala&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0.&lt;/span&gt;U&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;val&lt;/span&gt; res3&lt;span style=&#34;color:#ff7b72&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;chisel3.UInt&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scala&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1.&lt;/span&gt;S&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;val&lt;/span&gt; res4&lt;span style=&#34;color:#ff7b72&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;chisel3.SInt&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;SInt&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;(-&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scala&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1.&lt;/span&gt;S&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;4.&lt;/span&gt;W&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;val&lt;/span&gt; res5&lt;span style=&#34;color:#ff7b72&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;chisel3.SInt&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;SInt&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;(-&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One possible issue is&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scala&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;1.&lt;/span&gt;U&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;^&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       warning&lt;span style=&#34;color:#ff7b72&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;Passing&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;an&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;.U&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;usually&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;mistake:&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;It&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;does&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;*not*&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;width&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;but&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;does&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;bit&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;extract.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#ff7b72&#34;&gt;Did&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;you&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;mean&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;.U&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f85149&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;.W&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;If&lt;/span&gt; you &lt;span style=&#34;color:#ff7b72&#34;&gt;do&lt;/span&gt; want bit extraction&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;,&lt;/span&gt; use &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;U&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;extract&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; instead&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;val&lt;/span&gt; res7&lt;span style=&#34;color:#ff7b72&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;chisel3.Bool&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Bool&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Hardcaml primer</title>
      <link>/posts/2025/05/hardcaml-primer/</link>
      <pubDate>Fri, 30 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/05/hardcaml-primer/</guid>
      <description>&lt;p&gt;This is first (hopefully not the last) on Hardcaml&lt;a href=&#34;https://github.com/janestreet/hardcaml&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1&lt;/a&gt; which seems like interesting project by Janesteet which seem into Ocaml for both hardware and software (well, based on the public github repos)&lt;/p&gt;&#xA;&lt;h1 id=&#34;install&#34;&gt;&#xA;  Install&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#install&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Just in case opam is not install, we need to install opam at &lt;code&gt;~/.opam&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install opam&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;opam init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eval &lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;opam env&lt;span style=&#34;color:#ff7b72&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then install hardcaml stuff&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;opam install hardcaml hardcaml_waveterm ppx_hardcaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;hello-world&#34;&gt;&#xA;  Hello world&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#hello-world&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Getting the example for &lt;code&gt;hardcaml&lt;/code&gt; repo for half adder to work wasn&amp;rsquo;t easy. I kept getting error about Hardcaml module not found. It took some time to figure out &lt;code&gt;use&lt;/code&gt; and &lt;code&gt;require&lt;/code&gt; at the ttop of file.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ocaml primer</title>
      <link>/posts/2025/05/ocaml-primer/</link>
      <pubDate>Fri, 30 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/05/ocaml-primer/</guid>
      <description>&lt;p&gt;I have been interested in functional languages for some time now. It started with Lisp which i can do crash course to deal with &lt;code&gt;WAL&lt;/code&gt;. Scala was on my list to play more with &lt;code&gt;chisel&lt;/code&gt;.&#xA;Now, I know about &lt;code&gt;Hardcaml&lt;/code&gt;, I need to to do some Ocaml to get started. This is quick and small primer about &lt;code&gt;Ocaml&lt;/code&gt; documenting bits while i learn stuff&lt;/p&gt;&#xA;&lt;h1 id=&#34;install-ocaml&#34;&gt;&#xA;  Install Ocaml&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#install-ocaml&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Obviously starting with &lt;code&gt;Ocaml&lt;/code&gt; compiler and shell&lt;/p&gt;</description>
    </item>
    <item>
      <title>Surfer - Primer</title>
      <link>/posts/2025/05/surfer-primer/</link>
      <pubDate>Tue, 27 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/05/surfer-primer/</guid>
      <description>&lt;p&gt;I have been GTKWave user for long until i stumbled on Surfer. funny enough, I knew about it reading cocotb commits which added support for starting Surfer or gtkwave on generated vcd.&lt;/p&gt;&#xA;&lt;h1 id=&#34;installation&#34;&gt;&#xA;  Installation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#installation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;We need Cargo and rustc obviously to build surfer as it is written in rust. That said, this is needed if you are building from source. There are Surfer binaries for all platforms if you just want to use it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Brownian Motion</title>
      <link>/posts/2025/05/brownian-motion/</link>
      <pubDate>Sat, 24 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/05/brownian-motion/</guid>
      <description>&lt;p&gt;Continuing math topics, This is walk through Brownian motion which is good example if stochastic process&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Brownian motion is the random motion of particles suspended in a medium (a liquid or a gas).[2] The traditional mathematical formulation of Brownian motion is that of the Wiener process, which is often called Brownian motion, even in mathematical sources.&lt;/p&gt;&#xA;&lt;p&gt;In mathematics, Brownian motion is described by the Wiener process, a continuous-time stochastic process named in honor of Norbert Wiener.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Random walk</title>
      <link>/posts/2025/05/random-walk/</link>
      <pubDate>Fri, 23 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/05/random-walk/</guid>
      <description>&lt;p&gt;This is the first post of a series on some random(pun intended) topics related to random partial differential equations. Starting with random walk process (i have to start somewhere).&lt;/p&gt;&#xA;&lt;p&gt;Disclaimer, I am doing this to understand and visualize the random experiments not doing any math. I am literally too old for this.&lt;/p&gt;&#xA;&lt;p&gt;Starting with wiki blurb:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;In mathematics, a random walk, sometimes known as a drunkard&amp;rsquo;s walk, is a stochastic process that describes a path that consists of a succession of random steps on some mathematical space.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LLM - MCP Hello world</title>
      <link>/posts/2025/05/llm-mcp-hello-world/</link>
      <pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/05/llm-mcp-hello-world/</guid>
      <description>&lt;p&gt;From &lt;a href=&#34;https://modelcontextprotocol.io/introduction&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1&lt;/a&gt;, The one-liner for MCP as follows&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The Model Context Protocol is an open standard that enables developers to build secure, two-way connections between their data sources and AI-powered tools.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;MCP sounds like a good approach for extendible agentic tools&lt;/p&gt;&#xA;&lt;h1 id=&#34;first-example&#34;&gt;&#xA;  First example&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#first-example&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Step 1, First install &lt;code&gt;mcp&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install mcp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Step 2, The server with a tool and resource&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# server.py&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;mcp.server.fastmcp&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; FastMCP&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Create an MCP server&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mcp &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; FastMCP(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Demo&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Add an addition tool&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;@mcp.tool&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;add&lt;/span&gt;(a: int, b: int) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; int:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Add two numbers&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;+&lt;/span&gt; b&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Add a dynamic greeting resource&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;@mcp.resource&lt;/span&gt;(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;greeting://&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;{name}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;get_greeting&lt;/span&gt;(name: str) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; str:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Get a personalized greeting&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Hello, &lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;!&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Step 3, Run the dev server&lt;/p&gt;</description>
    </item>
    <item>
      <title>Corundum - Open source NIC - Hello World</title>
      <link>/posts/2025/05/corundum-open-source-nic-hello-world/</link>
      <pubDate>Thu, 15 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/05/corundum-open-source-nic-hello-world/</guid>
      <description>&lt;p&gt;&lt;code&gt;Corundum&lt;/code&gt; is very interesting project because somehow it managed to include implementations of Ethernet, PCIe and AXI-S. This is my attempt to deconstruct the source code and understand the the engineering miracle that Corundum is.&lt;/p&gt;&#xA;&lt;h1 id=&#34;installation&#34;&gt;&#xA;  Installation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#installation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s start by installing some dependencies&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install -y &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;    git make gcc g++ clang &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;    python3 python3-pip python3-venv &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;    verilator &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;    iverilog &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;    gtkwave &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;    libpcap-dev &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;    libelf-dev&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then in a &lt;code&gt;.venv&lt;/code&gt;, We need to install &lt;code&gt;cocotb&lt;/code&gt; and some other libraries&lt;/p&gt;</description>
    </item>
    <item>
      <title>PyEDA - primer</title>
      <link>/posts/2025/05/pyeda-primer/</link>
      <pubDate>Thu, 15 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/05/pyeda-primer/</guid>
      <description>&lt;h1 id=&#34;installation&#34;&gt;&#xA;  Installation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#installation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I am using MacOS, So, I needed to install clang first (from &lt;code&gt;llvm&lt;/code&gt; brew).&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install llvm&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, we install &lt;code&gt;pyeda&lt;/code&gt; but then again, on MacOS, I got compilation error. Asking chatgpt, it said to modify the code or add the following &lt;code&gt;CFLAGS&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#79c0ff&#34;&gt;CFLAGS&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;-Wno-incompatible-function-pointer-types&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install pyeda&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;first-example&#34;&gt;&#xA;  First example&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#first-example&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The first example uses truth table to get an expression.&lt;/p&gt;</description>
    </item>
    <item>
      <title>tiny-gpu - Weekend Fun</title>
      <link>/posts/2025/05/tiny-gpu-weekend-fun/</link>
      <pubDate>Fri, 09 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/05/tiny-gpu-weekend-fun/</guid>
      <description>&lt;p&gt;For my weekly github scan for interesting projects, I stumbled on &lt;code&gt;tiny-gpu&lt;/code&gt; which seems like an educational project to learn how to write a simple GPU hardware (the key word here is simple).&lt;/p&gt;&#xA;&lt;h1 id=&#34;installation&#34;&gt;&#xA;  Installation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#installation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;First we need &lt;code&gt;sv2v&lt;/code&gt; as it&amp;rsquo;s written in SV. Add sv2v to the &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install haskell-stack&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/zachjs/sv2v.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd sv2c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then clone and cocotb install. Boom!&lt;/p&gt;</description>
    </item>
    <item>
      <title>X86 assembly carry-less multiplication instruction</title>
      <link>/posts/2025/05/x86-assembly-carry-less-multiplication-instruction/</link>
      <pubDate>Fri, 09 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/05/x86-assembly-carry-less-multiplication-instruction/</guid>
      <description>&lt;p&gt;This is quick write-up about carry-less multiplication &lt;code&gt;clmul&lt;/code&gt; and example running with x86 assembly. It implement useful function for cryptography specs such as AES-GSM, CRC, and error correction.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/carry_less_mutl.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;x86-assembly&#34;&gt;&#xA;  X86 Assembly&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#x86-assembly&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This example uses 128 SSE instructions and registers:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;moves the the values to registers xmm0 and xmm1&lt;/li&gt;&#xA;&lt;li&gt;pclmulqdq does carry-less multiplication&lt;/li&gt;&#xA;&lt;li&gt;Move 64 bits to lo&lt;/li&gt;&#xA;&lt;li&gt;shift 128 bits xmm and store the hi 64 bits&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;__attribute__&lt;/span&gt;((always_inline)) &lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;clmul64&lt;/span&gt;(&lt;span style=&#34;color:#ff7b72&#34;&gt;uint64_t&lt;/span&gt; a, &lt;span style=&#34;color:#ff7b72&#34;&gt;uint64_t&lt;/span&gt; b, &lt;span style=&#34;color:#ff7b72&#34;&gt;uint64_t&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;hi, &lt;span style=&#34;color:#ff7b72&#34;&gt;uint64_t&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;lo) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __asm__ &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;__volatile__&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;movq %[a], %%xmm0&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;           &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;movq %[b], %%xmm1&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;           &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;pclmulqdq $0x00, %%xmm1, %%xmm0&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;movq %%xmm0, %[lo]&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;          &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;psrldq $8, %%xmm0&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;           &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;movq %%xmm0, %[hi]&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; [hi] &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;=r&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;hi), [lo] &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;=r&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;lo)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; [a] &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt; (a), [b] &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt; (b)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;xmm0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;xmm1&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    );&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;uint64_t&lt;/span&gt; a &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0x0123456789ABCDEF&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;uint64_t&lt;/span&gt; b &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0xFEDCBA9876543210&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;uint64_t&lt;/span&gt; hi, lo;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;clmul64&lt;/span&gt;(a, b, &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;hi, &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;lo);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Input A:  0x%016lX&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;, a);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Input B:  0x%016lX&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;, b);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Result Hi: 0x%016lX&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;, hi);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Result Lo: 0x%016lX&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;, lo);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Macbook Setup</title>
      <link>/posts/2025/05/macbook-setup/</link>
      <pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/05/macbook-setup/</guid>
      <description>&lt;p&gt;I recently got a Macbook Air (a very expensive birthday gift for myself). It was fun getting to know MacOS and how Darwin works (at least, the bits I can see).&lt;/p&gt;&#xA;&lt;h1 id=&#34;built-in-tools&#34;&gt;&#xA;  Built-in tools&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#built-in-tools&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;MacOS comes with built-in &lt;code&gt;unix&lt;/code&gt; (Darwin is Unix-based anyway) mainly at &lt;code&gt;/usr/bin/&lt;/code&gt;. There is also a terminal emulator conveniently named &lt;code&gt;Terminal&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h1 id=&#34;command-line-tools&#34;&gt;&#xA;  Command Line tools&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#command-line-tools&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Xcode is Apple&amp;rsquo;s toolchain to develop all of their applications, but there is something called &amp;ldquo;Command Line Tools&amp;rdquo; that can be installed separately with &lt;code&gt;xcode-select&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LLM - llamaindex - demystifying the magic</title>
      <link>/posts/2025/05/llm-llamaindex-demystifying-the-magic/</link>
      <pubDate>Sat, 03 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/05/llm-llamaindex-demystifying-the-magic/</guid>
      <description>&lt;p&gt;LlamaIndex is a python library for LLM applications. It provides several abstractions/utilities to make LLM RAG application easier. This is deepdive into the stages of Llamaindex and the source code.&lt;/p&gt;&#xA;&lt;h2 id=&#34;loading&#34;&gt;&#xA;  Loading&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#loading&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Starting with LlamaIndex readers. I will dig deeper into &lt;code&gt;SimpleDirectoryReader&lt;/code&gt; which, as name suggest, a simple reader but powerful enough to handle several file types.&lt;/p&gt;&#xA;&lt;h3 id=&#34;document&#34;&gt;&#xA;  Document&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#document&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;The docs have a simple example to load one document using &lt;code&gt;SimpleDirectoryReader&lt;/code&gt;. Note that reader returns &lt;code&gt;Document&lt;/code&gt; object (or array of them).&lt;/p&gt;</description>
    </item>
    <item>
      <title>LLM - Aider Hello world</title>
      <link>/posts/2025/04/llm-aider-hello-world/</link>
      <pubDate>Sat, 26 Apr 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/04/llm-aider-hello-world/</guid>
      <description>&lt;p&gt;This is a hello-world for &lt;code&gt;aider&lt;/code&gt; which is a nice tool to generate code with AI using command line&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Aider is AI pair programming in your terminal&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;install&#34;&gt;&#xA;  Install&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#install&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The installation uses &lt;code&gt;uv&lt;/code&gt; which seems like a new python package manager. Cool! will circle back later.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python -m pip install aider-install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aider-install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we have aider in &lt;code&gt;PATH&lt;/code&gt; which will point &lt;code&gt;$HOME/.local/bin/aider&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb Internals - Event and Queue</title>
      <link>/posts/2025/04/cocotb-internals-event-and-queue/</link>
      <pubDate>Sat, 19 Apr 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/04/cocotb-internals-event-and-queue/</guid>
      <description>&lt;p&gt;Cocotb provides sync/communication between cocotb coroutines. In this post, I will go through &lt;code&gt;Event&lt;/code&gt; and &lt;code&gt;Queue&lt;/code&gt;. They are similar to SystemVerilog events and queues.&lt;/p&gt;&#xA;&lt;h1 id=&#34;event&#34;&gt;&#xA;  Event&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#event&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;Event&lt;/code&gt; provides &lt;code&gt;wait&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; methods for coroutines to wait and trigger. This is an example of the &lt;code&gt;Event&lt;/code&gt; code.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Event&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#79c0ff&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;A way to signal an event across :class:`~cocotb.task.Task`\ s.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    :keyword:`await`\ ing the result of :meth:`wait()` will block the :keyword:`await`\ ing :class:`~cocotb.task.Task`&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    until :meth:`set` is called.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    Args:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;        name: Name for the Event.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    Usage:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;        .. code-block:: python&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;            e = Event()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;            async def task1():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;                await e.wait()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;                print(&amp;#34;resuming!&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;            cocotb.start_soon(task1())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;            # do stuff&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;            e.set()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;            await NullTrigger()  # allows task1 to execute&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;            # resuming!&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    .. versionremoved:: 2.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;        Removed the undocumented *data* attribute and argument to :meth:`set`.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;wait&lt;/code&gt; returns &lt;code&gt;NullTrigger&lt;/code&gt; which means the calls will run immediately, otherwise it will return &lt;code&gt;_Event&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb Internals - BinaryValue and new Logic and LogicArray</title>
      <link>/posts/2025/04/cocotb-internals-binaryvalue-and-new-logic-and-logicarray/</link>
      <pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/04/cocotb-internals-binaryvalue-and-new-logic-and-logicarray/</guid>
      <description>&lt;p&gt;In cocotb 2.0, one big change is the new &lt;code&gt;Logic&lt;/code&gt; and &lt;code&gt;LogicArray&lt;/code&gt; to replace &lt;code&gt;BinaryValue&lt;/code&gt;. It&amp;rsquo;s now easier and more consistent to handle values. I have been using &lt;code&gt;BinaryValue&lt;/code&gt; (and now &lt;code&gt;LogicArray&lt;/code&gt;) as standalone utilities. So, it is always nice to understand how things work (or change).&lt;/p&gt;&#xA;&lt;h1 id=&#34;binaryvalue&#34;&gt;&#xA;  BinaryValue&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#binaryvalue&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Pre-2.0 &lt;code&gt;BinaryValue&lt;/code&gt; was used to represent and operate on values. You can convert, assign, and convert between integer, binary string, and hex.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Crypto - SHA Hashing</title>
      <link>/posts/2025/04/crypto-sha-hashing/</link>
      <pubDate>Sat, 05 Apr 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/04/crypto-sha-hashing/</guid>
      <description>&lt;p&gt;SHA256 is hashing function used by many internet standard such as TLS and SSL. form &lt;a href=&#34;https://en.wikipedia.org/wiki/SHA-2&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt;, It one of SHA2 family of hash functions&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;SHA-2 includes significant changes from its predecessor, SHA-1. The SHA-2 family consists of six hash functions with digests (hash values) that are 224, 256, 384 or 512 bits:[5] SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, SHA-512/256. SHA-256 and SHA-512 are hash functions whose digests are eight 32-bit and 64-bit words, respectively. They use different shift amounts and additive constants, but their structures are otherwise virtually identical, differing only in the number of rounds. SHA-224 and SHA-384 are truncated versions of SHA-256 and SHA-512 respectively, computed with different initial values. SHA-512/224 and SHA-512/256 are also truncated versions of SHA-512, but the initial values are generated using the method described in Federal Information Processing Standards (FIPS) PUB 180-4.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Galois Fields arithmetic - Hello World</title>
      <link>/posts/2025/03/galois-fields-arithmetic-hello-world/</link>
      <pubDate>Sat, 29 Mar 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/03/galois-fields-arithmetic-hello-world/</guid>
      <description>&lt;p&gt;This is short intro to &lt;code&gt;Galois fields&lt;/code&gt; which is important for cryptography. For example, AES uses in section 4&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;each byte in the state array is interpreted as one of the 256 elements of a fnite feld, also known as a Galois Field, denoted by GF(28). 1&lt;/p&gt;&#xA;&lt;p&gt;In order to defne addition and multiplication in GF(28), each byte {b7 b6 b5 b4 b3 b2 b1 b0} is interpreted as a polynomial, denoted by b(x), as follows:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visualization of verilog design with yosys and netlistsvg</title>
      <link>/posts/2025/03/visualization-of-verilog-design-with-yosys-and-netlistsvg/</link>
      <pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/03/visualization-of-verilog-design-with-yosys-and-netlistsvg/</guid>
      <description>&lt;p&gt;This is super small post about generating a block diagram from verilog design.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;yosys -s vis.ys &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-yosys&#34; data-lang=&#34;yosys&#34;&gt;read_verilog *.v&#xA;prep -top top&#xA;write_json top.elaborated.json&#xA;write_verilog top.elaborated.v&#xA;show -format png -prefix top&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To generate SVG then PNG from json, we can use &lt;code&gt;netlistsvg&lt;/code&gt; to process the generated yosys json.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm install -g netlistsvg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;netlistsvg  elaborated.json -o elaborated.svg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;convert elaborated.svg elaborated.png&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There first diagram is the one generated by yosys.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/yosys.vis.top.png&#34; alt=&#34;Example image&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>LLM - LiteLLM One LLM proxy to rule them all</title>
      <link>/posts/2025/03/llm-litellm-one-llm-proxy-to-rule-them-all/</link>
      <pubDate>Sat, 22 Mar 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/03/llm-litellm-one-llm-proxy-to-rule-them-all/</guid>
      <description>&lt;p&gt;The tagline for LiteLLM is simple and awesome&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Call 100+ LLMs using the same Input/Output Format&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;hello-world&#34;&gt;&#xA;  Hello world&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#hello-world&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This is a small example from LiteLLM docs using Ollama. I have Ollama running locally, so that was easy.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;litellm&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; completion&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;response &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; completion(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    model&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;ollama/llama2&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    messages&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;[{ &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;respond in 20 words. who are you?&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;role&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt; }],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    api_base&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;http://localhost:11434&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(response)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;ModelResponse(id=&amp;lsquo;chatcmpl-d1c86df4-5feb-419d-8e8a-fd876ad46085&amp;rsquo;, choices=[Choices(finish_reason=&amp;lsquo;stop&amp;rsquo;, index=0, message=Message(content=&amp;ldquo;I&amp;rsquo;m just an AI assistant, here to help!&amp;rdquo;, role=&amp;lsquo;assistant&amp;rsquo;))], created=1716627590, model=&amp;lsquo;ollama/llama2&amp;rsquo;, object=&amp;lsquo;chat.completion&amp;rsquo;, system_fingerprint=None, usage=Usage(prompt_tokens=31, completion_tokens=14, total_tokens=45))&lt;/p&gt;</description>
    </item>
    <item>
      <title>LLM - What are Langchain Runnables</title>
      <link>/posts/2025/03/llm-what-are-langchain-runnables/</link>
      <pubDate>Sat, 15 Mar 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/03/llm-what-are-langchain-runnables/</guid>
      <description>&lt;h1 id=&#34;runnable-interface&#34;&gt;&#xA;  Runnable Interface&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#runnable-interface&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;From Langchain documentation, there are a few abstractions that provide a consistent API for applications. For example, &lt;code&gt;ChatModel&lt;/code&gt; takes a list of strings (or a list of chat messages, PromptValue) and generates ChatMessage.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Prompt Dictionary PromptValue&#xA;ChatModel Single string, list of chat messages or a PromptValue ChatMessage&#xA;LLM Single string, list of chat messages or a PromptValue String&#xA;OutputParser The output of an LLM or ChatModel Depends on the parser&#xA;Retriever Single string List of Documents&#xA;Tool Single string or dictionary, depending on the tool Depends on the tool&lt;/p&gt;</description>
    </item>
    <item>
      <title>BeagleV-Fire Walkthrough: FPGA Programming</title>
      <link>/posts/2025/03/beaglev-fire-walkthrough-fpga-programming/</link>
      <pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/03/beaglev-fire-walkthrough-fpga-programming/</guid>
      <description>&lt;p&gt;This is a quick guide on how to program the FPGA fabric on Microchip Polarfire, more specifically the BeagleV-Fire board.&lt;/p&gt;&#xA;&lt;h1 id=&#34;programming&#34;&gt;&#xA;  Programming&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#programming&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In &lt;a href=&#34;https://docs.beagleboard.org/boards/beaglev/fire/demos-and-tutorials/gateware/customize-cape-gateware-verilog.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;4&lt;/a&gt;, we need to get the bitstream directory generated by gateware first. In this example, it&amp;rsquo;s called &lt;code&gt;my_custom_fpga_design&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;change-gateway&#34;&gt;&#xA;  Change-Gateway&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#change-gateway&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;So, what is there? We need the bitstream and DTB overlay.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;mpfs_bitstream.spi&lt;/code&gt;: SPI bitstream&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;mpfs_dtbo.spi&lt;/code&gt;: Overlay device tree&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Then we call the &lt;code&gt;change-gateway&lt;/code&gt; script with &lt;code&gt;my_custom_fpga_design&lt;/code&gt; to copy the files above.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git - Rebase vs Merge</title>
      <link>/posts/2025/03/git-rebase-vs-merge/</link>
      <pubDate>Fri, 07 Mar 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/03/git-rebase-vs-merge/</guid>
      <description>&lt;p&gt;This is a quick post to remind myself the differences between git merge and rebase.&lt;/p&gt;&#xA;&lt;h1 id=&#34;merge&#34;&gt;&#xA;  Merge&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#merge&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s start with merge. merge keeps branch history across branches. Considering a scenario where &lt;code&gt;feature1&lt;/code&gt; branch is 2 commits ahead of master.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* f77205c (HEAD -&amp;gt; master) repo 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| * 1656afc (feature1) feature1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| * dc14156 feature1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|/  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* cb3e096 repo 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* a387011 repo 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Merging master to feature1 branch creates a commit on &lt;code&gt;feature1&lt;/code&gt; branch.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Slang SystemVerilog Language Services - Hello World</title>
      <link>/posts/2025/03/slang-systemverilog-language-services-hello-world/</link>
      <pubDate>Sat, 01 Mar 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/03/slang-systemverilog-language-services-hello-world/</guid>
      <description>&lt;p&gt;This is a quick hello-world about &lt;code&gt;slang&lt;/code&gt;. &lt;code&gt;slang&lt;/code&gt; is a really interesting library (it has a CLI too) to parse, process, and check SystemVerilog. This is a snippet from &lt;a href=&#34;https://sv-lang.com/index.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;doc&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;slang is a software library that provides various components for lexing, parsing, type checking, and elaborating SystemVerilog code. It comes with an executable tool that can compile and lint any SystemVerilog project, but it is also intended to be usable as a front end for synthesis tools, simulators, linters, code editors, and refactoring tools.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python package manager written in rust - UV</title>
      <link>/posts/2025/02/python-package-manager-written-in-rust-uv/</link>
      <pubDate>Fri, 28 Feb 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/02/python-package-manager-written-in-rust-uv/</guid>
      <description>&lt;p&gt;I stumbled on &lt;code&gt;uv&lt;/code&gt; installing &lt;code&gt;aider&lt;/code&gt; so i had to have a look. The README.md on &lt;code&gt;uv&lt;/code&gt; repo describes it as:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A single tool to replace pip, pip-tools, pipx, poetry, pyenv, twine, virtualenv, and more.&lt;/li&gt;&#xA;&lt;li&gt;10-100x faster than pip.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;installation&#34;&gt;&#xA;  Installation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#installation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;rust&#34;&gt;&#xA;  Rust&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#rust&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;First, We need to make sure &lt;code&gt;rustup&lt;/code&gt; and install latest &lt;code&gt;rustc&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install rustup&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rustup update stable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;uv&#34;&gt;&#xA;  uv&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#uv&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Now we have &lt;code&gt;rustc&lt;/code&gt; installed, we build uv from git repo with cargo:&lt;/p&gt;</description>
    </item>
    <item>
      <title>LLM - FAISS Hello world</title>
      <link>/posts/2025/02/llm-faiss-hello-world/</link>
      <pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/02/llm-faiss-hello-world/</guid>
      <description>&lt;p&gt;These are my comments about FAISS vector indexing library from &lt;a href=&#34;https://medium.com/loopio-tech/how-to-use-faiss-to-build-your-first-similarity-search-bf0f708aa772&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;post&lt;/a&gt;. The idea is simple really. FAISS is an index used for storing and search for vector embedding. AFAIK, it&amp;rsquo;s made for large scale applications. so, maybe that&amp;rsquo;s advantage over the llamaIndex vectorIndex storage. Maybe.&lt;/p&gt;&#xA;&lt;p&gt;First, we create vector encoding using SentenceTransformer. in this example, it&amp;rsquo;s using &lt;code&gt;paraphrase-mpnet-base-v2&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;encoder &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; SentenceTransformer(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;paraphrase-mpnet-base-v2&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vectors &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; encoder&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;encode(text)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then create index, and store these vector in FAISS index.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blake2 Cryptographic Hash and Message Authentication Code</title>
      <link>/posts/2025/02/blake2-cryptographic-hash-and-message-authentication-code/</link>
      <pubDate>Sun, 02 Feb 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/02/blake2-cryptographic-hash-and-message-authentication-code/</guid>
      <description>&lt;p&gt;This is a quick write-up about blake2b which defined as follows (from &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7693&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The BLAKE2 cryptographic hash function [BLAKE2] was designed by Jean-&#xA;Philippe Aumasson, Samuel Neves, Zooko Wilcox-O&amp;rsquo;Hearn, and Christian&#xA;Winnerlein.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;And from &lt;a href=&#34;https://en.wikipedia.org/wiki/BLAKE_%28hash_function%29&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2&lt;/a&gt;, We get the definition from Blake&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;BLAKE is a cryptographic hash function based on Daniel J. Bernstein&amp;rsquo;s ChaCha stream cipher, but a permuted copy of the input block, XORed with round constants, is added before each ChaCha round. Like SHA-2, there are two variants differing in the word size.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ChaCha20 Stream Cipher</title>
      <link>/posts/2025/02/chacha20-stream-cipher/</link>
      <pubDate>Sun, 02 Feb 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/02/chacha20-stream-cipher/</guid>
      <description>&lt;p&gt;I am here because I was looking into Blake which is a variant of &lt;a href=&#34;https://en.wikipedia.org/wiki/BLAKE_%28hash_function%29&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ChaCha&lt;/a&gt; stream cipher. I guess we will start with &lt;code&gt;ChaCha&lt;/code&gt; first.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;BLAKE is a cryptographic hash function based on Daniel J. Bernstein&amp;rsquo;s ChaCha stream cipher, but a permuted copy of the input block, XORed with round constants, is added before each ChaCha round.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;chachar-and-salsa20&#34;&gt;&#xA;  ChaChar and Salsa20&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#chachar-and-salsa20&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;According to &lt;a href=&#34;https://en.wikipedia.org/wiki/Salsa20#ChaCha_variant&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Salsa20&lt;/a&gt;, Chacha is a variant of cipher called Salsa20.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Intel GPU One API drivers - A journey</title>
      <link>/posts/2025/01/intel-gpu-one-api-drivers-a-journey/</link>
      <pubDate>Thu, 30 Jan 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/01/intel-gpu-one-api-drivers-a-journey/</guid>
      <description>&lt;p&gt;This is all stated when i thought to try Ollama running on Intel iGPU on laptop. This took me into the rabbit hole and back.&lt;/p&gt;&#xA;&lt;h1 id=&#34;installation-and-running-in-gpu-mode&#34;&gt;&#xA;  Installation and running in GPU mode&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#installation-and-running-in-gpu-mode&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I initially got &amp;ldquo;no GPU detected&amp;rdquo; from Ollama, So I had to dig deeper into the source. Based on the code, I needed to install &lt;code&gt;libze_intel_gpu.so&lt;/code&gt; from the following packages.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install libze-intel-gpu-dev libze-intel-gpu1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, enable Intel GPU env vars&lt;/p&gt;</description>
    </item>
    <item>
      <title>Graphics - Displayport DRM driver deepdive</title>
      <link>/posts/2025/01/graphics-displayport-drm-driver-deepdive/</link>
      <pubDate>Sun, 26 Jan 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/01/graphics-displayport-drm-driver-deepdive/</guid>
      <description>&lt;h1 id=&#34;tldr&#34;&gt;&#xA;  TL;DR&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tldr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This is a deepdive into xilinx Zynq displayport DRM driver.&lt;/p&gt;&#xA;&lt;p&gt;DRM is Linux kernel replacement for &lt;code&gt;framebuf&lt;/code&gt; with ioctl interfaces to user-space. As mentioned in the documentation, Hardware specific drivers register themselves with DRM and DRM does it thing with ioctl.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The Direct Rendering Manager (DRM) is a subsystem of the Linux kernel responsible for interfacing with GPUs of modern video cards.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux kernel debug - nvme timeout</title>
      <link>/posts/2025/01/linux-kernel-debug-nvme-timeout/</link>
      <pubDate>Sun, 26 Jan 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/01/linux-kernel-debug-nvme-timeout/</guid>
      <description>&lt;p&gt;This is deep dive into NVME &lt;a href=&#34;https://www.netapp.com/data-storage/nvme/what-is-nvme/#:~:text=NVMe%20%28nonvolatile%20memory%20express%29%20is,all%20types%20of%20enterprise%20workloads.&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1&lt;/a&gt; kernel to try to debug timeout on my machine after i upgraded to Mint 22.&lt;/p&gt;&#xA;&lt;h1 id=&#34;smart&#34;&gt;&#xA;  SMART&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#smart&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with the issue here, &lt;code&gt;dmesg&lt;/code&gt; showed the timeout and where the kernel stalled booting.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;[&lt;/span&gt;    0.817343&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;]&lt;/span&gt; nvme nvme0: pci &lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; 10000:e1:00.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;[&lt;/span&gt;    0.817353&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;]&lt;/span&gt; pcieport 10000:e0:1c.4: can&lt;span style=&#34;color:#f85149&#34;&gt;&amp;#39;&lt;/span&gt;t derive routing &lt;span style=&#34;color:#ff7b72&#34;&gt;for&lt;/span&gt; PCI INT A&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;[&lt;/span&gt;    0.817356&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;]&lt;/span&gt; nvme 10000:e1:00.0: PCI INT A: not connected&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;[&lt;/span&gt;    0.834306&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;]&lt;/span&gt; nvme nvme0: 8/0/0 default/read/poll queues&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;[&lt;/span&gt;    0.839964&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;]&lt;/span&gt;  nvme0n1: p1 p2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;[&lt;/span&gt;   31.777624&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;]&lt;/span&gt; nvme nvme0: I/O tag &lt;span style=&#34;color:#a5d6ff&#34;&gt;641&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;c281&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; opcode 0x1 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;I/O Cmd&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; QID &lt;span style=&#34;color:#a5d6ff&#34;&gt;8&lt;/span&gt; timeout, aborting req_op:WRITE&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; size:4096&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;[&lt;/span&gt;   61.985629&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;]&lt;/span&gt; nvme nvme0: I/O tag &lt;span style=&#34;color:#a5d6ff&#34;&gt;641&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;c281&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; opcode 0x1 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;I/O Cmd&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; QID &lt;span style=&#34;color:#a5d6ff&#34;&gt;8&lt;/span&gt; timeout, reset controller&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;[&lt;/span&gt;  123.940522&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;]&lt;/span&gt; nvme nvme0: Abort status: 0x371&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My first step was to do SMART on drive &lt;a href=&#34;https://en.wikipedia.org/wiki/Self-Monitoring,_Analysis_and_Reporting_Technology&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2&lt;/a&gt; which didn&amp;rsquo;t show any issues from the NVME. So, Let&amp;rsquo;s move on.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LLM - AgentVerse</title>
      <link>/posts/2025/01/llm-agentverse/</link>
      <pubDate>Thu, 23 Jan 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/01/llm-agentverse/</guid>
      <description>&lt;p&gt;&lt;code&gt;AgentVerse&lt;/code&gt; is yet another agent framework but this one is interesting because:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;It has game-like UI. UI is implemented with &lt;code&gt;Phaser&lt;/code&gt; which is HTML game development framework(live and learn)&lt;/li&gt;&#xA;&lt;li&gt;This is very thing LLamaIndex agent I can find (see &lt;code&gt;ToolAgent&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;AgentVerse provides 3 top level classes and CLI programs:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Simulation CLI&lt;/li&gt;&#xA;&lt;li&gt;Simulation GUI&lt;/li&gt;&#xA;&lt;li&gt;Task Solving&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I will look deeper into task solving &lt;code&gt;TaskSolving&lt;/code&gt; because it looks the most relevant at the moment. Starting with &lt;code&gt;agentverse_command/main_tasksolving_cli.py&lt;/code&gt; which is really simple, just parsing task and task directory and creating &lt;code&gt;TaskSolving&lt;/code&gt; object and &lt;code&gt;run()&lt;/code&gt; it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - Callbacks</title>
      <link>/posts/2024/12/uvm-internals-callbacks/</link>
      <pubDate>Mon, 23 Dec 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/12/uvm-internals-callbacks/</guid>
      <description>&lt;p&gt;This is a deepdive how UVM implements callbacks. It&amp;rsquo;s useful to notifiy user code with specific conditions deep inside a UVC.&lt;/p&gt;&#xA;&lt;h1 id=&#34;callback-use-model&#34;&gt;&#xA;  Callback use-model&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#callback-use-model&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with the callback definition where it extends &lt;code&gt;uvm_callback&lt;/code&gt; and define callback task.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class my_callback extends uvm_callback;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  virtual &lt;span style=&#34;color:#ff7b72&#34;&gt;task&lt;/span&gt; my_callback_task(); &lt;span style=&#34;color:#ff7b72&#34;&gt;endtask&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then instrument the code with calls to &lt;code&gt;uvm_do_callbacks&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class my_uvm_component;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_register_cb&lt;/span&gt;(my_uvm_component,my_callback)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;task&lt;/span&gt; run_phase(uvm_phase phase);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_do_callbacks&lt;/span&gt;(my_uvm_component,my_callback,my_callback_task());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;endtask&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;encclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally use code can extends the callback defined above &lt;code&gt;my_callback&lt;/code&gt; and implement the callback task &lt;code&gt;my_callback_task&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Build and install linux kernel from source</title>
      <link>/posts/2024/12/build-and-install-linux-kernel-from-source/</link>
      <pubDate>Sun, 22 Dec 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/12/build-and-install-linux-kernel-from-source/</guid>
      <description>&lt;p&gt;I have been getting weird NVME errors while boot and I thought to try updating to latest kernel and see if it&amp;rsquo;s resolved.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install git fakeroot build-essential ncurses-dev xz-utils libssl-dev bc flex libelf-dev bison&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd linux&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp -v /boot/config-&lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;uname -r&lt;span style=&#34;color:#ff7b72&#34;&gt;)&lt;/span&gt; .config&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make oldconfig &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Keep saying yes&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# To work around compilation errors on ubunutu-based distro&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#make[1]: *** No rule to make target &amp;#39;debian/certs/debian-uefi-certs.pem&amp;#39;, needed by &amp;#39;certs/x509_certificate_list&amp;#39;.  Stop.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scripts/config --disable SYSTEM_TRUSTED_KEYS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scripts/config --disable SYSTEM_REVOCATION_KEYS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make -j4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Install kernel and modules&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo make install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo make modules_install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Update Grub&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo update-initramfs -c -k 6.12.6&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo update-grub&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>UVM_CONFIG_DB_TRACE and UVM_OBJECTION_TRACE</title>
      <link>/posts/2024/12/uvm_config_db_trace-and-uvm_objection_trace/</link>
      <pubDate>Sun, 22 Dec 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/12/uvm_config_db_trace-and-uvm_objection_trace/</guid>
      <description>&lt;p&gt;This is a short one about  how UVM handle plusargs UVM UVM_CONFIG_DB_TRACE and UVM_OBJECTION_TRACE. The reason I here is I am tying to document some stuff while going though UVM 1.2.&lt;/p&gt;&#xA;&lt;h1 id=&#34;uvm_config_db_trace&#34;&gt;&#xA;  UVM_CONFIG_DB_TRACE&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#uvm_config_db_trace&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with &lt;code&gt;base/uvm_config_db.svh&lt;/code&gt;, command line parses &lt;code&gt;UVM_CONFIG_DB_TRACE&lt;/code&gt; and sets &lt;code&gt;tracing&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     clp &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; uvm_cmdline_processor&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;get_inst();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt; (clp.get_arg_matches(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;+UVM_CONFIG_DB_TRACE&amp;#34;&lt;/span&gt;, trace_args)) &lt;span style=&#34;color:#ff7b72&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       tracing &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#ff7b72&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is a getter function &lt;code&gt;is_tracing&lt;/code&gt; to get that &lt;code&gt;tracing&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LLM - Deep dive into AGENTS Framework</title>
      <link>/posts/2024/12/llm-deep-dive-into-agents-framework/</link>
      <pubDate>Sat, 14 Dec 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/12/llm-deep-dive-into-agents-framework/</guid>
      <description>&lt;p&gt;There are several frameworks that support multi-agent communication. For example, autogen, crewai, or AGENTS. The problem here each framework implements its own infra for LLM and don&amp;rsquo;t play nice with llamaIndex. This is deep dive into how &lt;code&gt;agents&lt;/code&gt; framework works and how they design multi-agent env.&lt;/p&gt;&#xA;&lt;h1 id=&#34;initialization&#34;&gt;&#xA;  Initialization&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#initialization&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with the code from examples directory where it calls &lt;code&gt;init&lt;/code&gt; and &lt;code&gt;run&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;agents,sop,environment &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; init(args&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;agent)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prepare(agents, sop, environment)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;run(agents,sop,environment)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;init&lt;/code&gt; creates env, agents and SOP from config files. And connect them together.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LLM - Ollama - Hello world</title>
      <link>/posts/2024/12/llm-ollama-hello-world/</link>
      <pubDate>Mon, 02 Dec 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/12/llm-ollama-hello-world/</guid>
      <description>&lt;p&gt;This is a quick hello world to run local model with Ollama.&lt;/p&gt;&#xA;&lt;h1 id=&#34;ollama-docker&#34;&gt;&#xA;  Ollama docker&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#ollama-docker&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The simplest way is running Ollama docker. To create the container, we just to fire up 2 commands.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker exec -it ollama ollama run llama2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You also can open a shell that container with&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker exec -it ollama bash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Side note, Sometimes the containers can linger around, so we need to clean up the containers before restarting a new one.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Video4Linux deepdive - Part 1</title>
      <link>/posts/2024/12/video4linux-deepdive-part-1/</link>
      <pubDate>Sun, 01 Dec 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/12/video4linux-deepdive-part-1/</guid>
      <description>&lt;p&gt;I have video4Linux on my TODO list for some time. Now i have some down time, Let&amp;rsquo;s have a look.&lt;/p&gt;&#xA;&lt;h1 id=&#34;user-land-fun&#34;&gt;&#xA;  User Land fun&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#user-land-fun&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with something fun. Detecting your camera and taking picture/video on CLI. This is mostly from the following answer &lt;a href=&#34;https://askubuntu.com/questions/348838/how-to-check-available-webcams-from-the-command-line&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ v4l2-ctl --list-devices&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Integrated Camera: Integrated C &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;usb-0000:00:14.0-5&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;/dev/video0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;/dev/video1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;/dev/media0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we can get more info on both interfaces. &lt;code&gt;video0&lt;/code&gt; is the actual camera interface. The other one is just metadata.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LLM - Deep dive into openDevin</title>
      <link>/posts/2024/11/llm-deep-dive-into-opendevin/</link>
      <pubDate>Fri, 29 Nov 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/11/llm-deep-dive-into-opendevin/</guid>
      <description>&lt;h1 id=&#34;tldr&#34;&gt;&#xA;  TL;DR&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tldr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This is a deconstruction of Opendevin user-to-agent development assistant framework.&lt;/p&gt;&#xA;&lt;p&gt;I will jump around a lot because I have no idea what is going on but this the TL;DR&lt;/p&gt;&#xA;&lt;p&gt;Opendevin uses the following abstraction to manage data from client to Agents and back using websocket and internal &lt;em&gt;steam&lt;/em&gt; and &lt;em&gt;subscribers&lt;/em&gt; to these streams.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SessionManager -&amp;gt; Session -&amp;gt; AgentSession -&amp;gt; AgentController -&amp;gt; Agent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;starting-opendevin-with-ollama&#34;&gt;&#xA;  Starting opendevin with Ollama&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#starting-opendevin-with-ollama&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The simplest way to run it using docker and Ollama running locally. Here is the command that worked for me&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb deepdive - 2024 - TestFactory vs parameterize</title>
      <link>/posts/2024/11/cocotb-deepdive-2024-testfactory-vs-parameterize/</link>
      <pubDate>Mon, 25 Nov 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/11/cocotb-deepdive-2024-testfactory-vs-parameterize/</guid>
      <description>&lt;p&gt;&lt;code&gt;TestFactory&lt;/code&gt; is cocotb-y way for test sweep with different configuration (ie parameters). As part of Cocotb 2.0, &lt;code&gt;TestFactory&lt;/code&gt; is deprecated and &lt;code&gt;parameterize&lt;/code&gt; is recommended instead.&lt;/p&gt;&#xA;&lt;p&gt;Starting with the deprecation messages for &lt;code&gt;TestFactory&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;__init__&lt;/span&gt;(self, test_function: F, &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;args: Any, &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;**&lt;/span&gt;kwargs: Any) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;None&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        warnings&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;warn(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;TestFactory is deprecated, use `@cocotb.parameterize` instead&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;DeprecationWarning&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            stacklevel&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Jumping to &lt;code&gt;parameterize&lt;/code&gt; decorator where the documentation pretty much sums it up. The test takes the parameters which is cross combination of &lt;code&gt;arg1&lt;/code&gt; and &lt;code&gt;arg2&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;17 - Aggregate Initialization extension</title>
      <link>/posts/2024/11/c-17-aggregate-initialization-extension/</link>
      <pubDate>Sat, 09 Nov 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/11/c-17-aggregate-initialization-extension/</guid>
      <description>&lt;p&gt;In c++11, aggregate initialization was introduced to use initializer_list to init class types.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;D&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    string name;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; v;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    D d{&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;dd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;4&lt;/span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d.i&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The trick it didn&amp;rsquo;t allow inheritance for the initialization. In c++17, that was resolved by using nested aggregate extension&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;D&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    string name;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; v;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;DD&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; D&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;float&lt;/span&gt; f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DD d{{&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;dd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;4&lt;/span&gt;}, &lt;span style=&#34;color:#a5d6ff&#34;&gt;1.1&lt;/span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d.f &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;17 - Structure binding</title>
      <link>/posts/2024/11/c-17-structure-binding/</link>
      <pubDate>Sat, 09 Nov 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/11/c-17-structure-binding/</guid>
      <description>&lt;p&gt;structure binding is a way to decompose structure/array similar to python unpacking.&lt;/p&gt;&#xA;&lt;p&gt;In this example, u and v types are aliases for the structure elements i and s of anonymous variable that copied structure m.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;namespace&lt;/span&gt; std;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Mystruct&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;string s;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;Mystruct m;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;auto&lt;/span&gt; [u, v] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; m;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When using reference, now u and v are reference  to m1.i and and  m1.s&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker Installation</title>
      <link>/posts/2024/08/docker-installation/</link>
      <pubDate>Thu, 15 Aug 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/08/docker-installation/</guid>
      <description>&lt;p&gt;This is summary of Docker installation on linux.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chmod a+r /etc/apt/keyrings/docker.asc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo   &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;deb [arch=&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;dpkg --print-architecture&lt;span style=&#34;color:#ff7b72&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt; signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;$(&lt;/span&gt;. /etc/os-release &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; echo &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$VERSION_CODENAME&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt; stable&amp;#34;&lt;/span&gt; |   sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Update the distro for ubuntu if you are not running ubunutu&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# I went with jammy distro&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo vim  /etc/apt/sources.list.d/docker.list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo usermod -aG docker &lt;span style=&#34;color:#79c0ff&#34;&gt;$USER&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run hello-world&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Cocotb deepdive - 2024 - C&#43;&#43; to python Bootstrap</title>
      <link>/posts/2024/06/cocotb-deepdive-2024-c-to-python-bootstrap/</link>
      <pubDate>Fri, 07 Jun 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/06/cocotb-deepdive-2024-c-to-python-bootstrap/</guid>
      <description>&lt;p&gt;There have been a refactor going on in Cocotb in the last few months. So, a quick write-up would be good.&lt;/p&gt;&#xA;&lt;h1 id=&#34;c-bootstrap&#34;&gt;&#xA;  C++ bootstrap&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c-bootstrap&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with entry point to python in file &lt;code&gt;src/pygpi/entry.pysrc/pygpi/entry.py&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;load_entry&lt;/code&gt; loads &lt;code&gt;cocotb:_initialise_testbench&lt;/code&gt; but will get back to that later.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;load_entry&lt;/span&gt;() &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; Tuple[ModuleType, Callable]:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Gather entry point information by parsing :envvar:`PYGPI_ENTRY_POINT`.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    entry_point_str &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;environ&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;get(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;PYGPI_ENTRY_POINT&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;cocotb:_initialise_testbench&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;in&lt;/span&gt; entry_point_str:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff7b72&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Invalid PYGPI_ENTRY_POINT, missing entry function (no colon).&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        entry_module_str, entry_func_str &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; entry_point_str&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        entry_module &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; importlib&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;import_module(entry_module_str)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        entry_func &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; reduce(getattr, entry_func_str&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;), entry_module)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;as&lt;/span&gt; e:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;RuntimeError&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#79c0ff&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Failure to parse PYGPI_ENTRY_POINT (&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;{&lt;/span&gt;entry_point_str&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;)&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ) &lt;span style=&#34;color:#ff7b72&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;e&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;else&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; entry_module, entry_func&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Tracing who calls first, &lt;code&gt;load_entry&lt;/code&gt; is called from &lt;code&gt;_embed_sim_init&lt;/code&gt; and rest of call trace all the way to VPI bootstrap.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Relearning React in 2024</title>
      <link>/posts/2024/05/relearning-react-in-2024/</link>
      <pubDate>Fri, 31 May 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/05/relearning-react-in-2024/</guid>
      <description>&lt;p&gt;I had to learn React few years to do some simple UI for some skunkworks project. But i didn&amp;rsquo;t use it for years, So it is about time to revive it.&lt;/p&gt;&#xA;&lt;p&gt;The first step is to install &lt;code&gt;yarn&lt;/code&gt; to use as package manager and runner.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm install -g yarn&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run vite to create app. Vite is new packager to replace react-create-app.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ yarn create vite&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;yarn create v1.22.22&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;[&lt;/span&gt;1/4&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;]&lt;/span&gt; Resolving packages...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;[&lt;/span&gt;2/4&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;]&lt;/span&gt; Fetching packages...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;[&lt;/span&gt;3/4&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;]&lt;/span&gt; Linking dependencies...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;[&lt;/span&gt;4/4&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;]&lt;/span&gt; Building fresh packages...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;success Installed &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;create-vite@5.2.3&amp;#34;&lt;/span&gt; with binaries:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - create-vite&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - cva&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;✔ Project name: … test-project&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;✔ Select a framework: › React&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;✔ Select a variant: › JavaScript&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Done. Now run:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cd test-project&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  yarn&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  yarn dev&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Done in 89.57s.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we can install dependency packages&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python - package of the week - fastapi </title>
      <link>/posts/2024/05/python-package-of-the-week-fastapi/</link>
      <pubDate>Wed, 29 May 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/05/python-package-of-the-week-fastapi/</guid>
      <description>&lt;p&gt;fastapi is quick way to develop REST API. It can be done with flask or Django but fastapi can do a lot of stuff out of the box. For example, fastapi creates openapi SWAGGER UI on &lt;code&gt;/docs&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; Union&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;fastapi&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; FastAPI&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;app &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; FastAPI()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;@app.get&lt;/span&gt;(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;read_root&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; {&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;@app.get&lt;/span&gt;(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;/items/&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;{item_id}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;read_item&lt;/span&gt;(item_id: int, q: Union[str, &lt;span style=&#34;color:#79c0ff&#34;&gt;None&lt;/span&gt;] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;None&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; {&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;item_id&amp;#34;&lt;/span&gt;: item_id, &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt;: q}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To start the server, we can use dev server from the application &lt;code&gt;app.py&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python - pip cheatsheet</title>
      <link>/posts/2024/05/python-pip-cheatsheet/</link>
      <pubDate>Sun, 26 May 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/05/python-pip-cheatsheet/</guid>
      <description>&lt;p&gt;pip is python package manager. We will use virtualenv to play around with pip&lt;/p&gt;&#xA;&lt;h1 id=&#34;create-virtualenv&#34;&gt;&#xA;  Create virtualenv&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#create-virtualenv&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;we can use venv module to create virtualenv. You many need to install for the required python version.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt install python3.10-venv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python 3.10 -m venv venv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source venv/bin/activate&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;which pip&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;install&#34;&gt;&#xA;  install&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#install&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ pip install requests&#xA;$ pip list&#xA;Package            Version&#xA;------------------ --------&#xA;certifi            2024.2.2&#xA;charset-normalizer 3.3.2&#xA;idna               3.7&#xA;pip                22.0.2&#xA;requests           2.32.2&#xA;setuptools         59.6.0&#xA;urllib3            2.2.1&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ pip show requests&#xA;Name: requests&#xA;Version: 2.32.2&#xA;Summary: Python HTTP for Humans.&#xA;Home-page: https://requests.readthedocs.io&#xA;Author: Kenneth Reitz&#xA;Author-email: me@kennethreitz.org&#xA;License: Apache-2.0&#xA;Requires: certifi, charset-normalizer, idna, urllib3&#xA;Required-by:&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;we can ask pip to look for difference pypi with &lt;code&gt;-i&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Qemu riscv emulation - spike machine</title>
      <link>/posts/2024/05/qemu-riscv-emulation-spike-machine/</link>
      <pubDate>Sat, 25 May 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/05/qemu-riscv-emulation-spike-machine/</guid>
      <description>&lt;p&gt;This is a deepdive into how qemu does riscv spike board emulation . Starting with &lt;code&gt;spike_machine_class_init&lt;/code&gt; registers &lt;code&gt;spike_board_init&lt;/code&gt; with the machine type.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;spike_machine_class_init&lt;/span&gt;(ObjectClass &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;oc, &lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;data)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    MachineClass &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;mc &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;MACHINE_CLASS&lt;/span&gt;(oc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mc&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;desc &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;RISC-V Spike board&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mc&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;init &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; spike_board_init;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mc&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;max_cpus &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; SPIKE_CPUS_MAX;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mc&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;is_default &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; true;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mc&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;default_cpu_type &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; TYPE_RISCV_CPU_BASE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mc&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;possible_cpu_arch_ids &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; riscv_numa_possible_cpu_arch_ids;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mc&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;cpu_index_to_instance_props &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; riscv_numa_cpu_index_to_props;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mc&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;get_default_cpu_node_id &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; riscv_numa_get_default_cpu_node_id;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mc&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;numa_mem_supported &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; true;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mc&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;default_ram_id &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;riscv.spike.ram&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;const&lt;/span&gt; TypeInfo spike_machine_typeinfo &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .name       &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;MACHINE_TYPE_NAME&lt;/span&gt;(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;spike&amp;#34;&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .parent     &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; TYPE_MACHINE,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .class_init &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; spike_machine_class_init,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .instance_init &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; spike_machine_instance_init,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .instance_size &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;sizeof&lt;/span&gt;(SpikeState),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In &lt;code&gt;spike_board_init&lt;/code&gt;, the board are create&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - uvm_root</title>
      <link>/posts/2024/05/uvm-internals-uvm_root/</link>
      <pubDate>Fri, 24 May 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/05/uvm-internals-uvm_root/</guid>
      <description>&lt;p&gt;This is a quick one about &lt;code&gt;uvm_root&lt;/code&gt; class. This is uvm1.1d BTW. Things may be different in 1.2&lt;/p&gt;&#xA;&lt;h1 id=&#34;uvm_top&#34;&gt;&#xA;  uvm_top&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#uvm_top&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;There is singelton of &lt;code&gt;uvm_root&lt;/code&gt; class in &lt;code&gt;uvm_root.svh&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class uvm_root extends uvm_component;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// Function: get()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// Get the factory singleton&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  extern static &lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; uvm_root get();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;const&lt;/span&gt; uvm_root uvm_top &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; uvm_root&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;get();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;public-apis&#34;&gt;&#xA;  public APIs&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#public-apis&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;There are few public API that can be called on the singelton object of &lt;code&gt;uvm_root&lt;/code&gt;. Most famous one is probably &lt;code&gt;run_test&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python - package of the week - Pydantic</title>
      <link>/posts/2024/05/python-package-of-the-week-pydantic/</link>
      <pubDate>Thu, 23 May 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/05/python-package-of-the-week-pydantic/</guid>
      <description>&lt;p&gt;Pydantic is python library for data validation and parsing. It provides classes and API to validate, serialize, de-serialize class attributes. It&amp;rsquo;s similar to python dataclass.&lt;/p&gt;&#xA;&lt;h1 id=&#34;models&#34;&gt;&#xA;  Models&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#models&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;One of the primary ways of defining schema in Pydantic is via models. Models are simply classes which inherit from pydantic.BaseModel and define fields as annotated attributes.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; List, Optional&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;pydantic&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; BaseModel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Model&lt;/span&gt;(BaseModel):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    v: str&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id : int &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    size: Optional[float] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;None&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bars: List[int]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; Model(v&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;, bars&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(m)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;v=&amp;lsquo;hello&amp;rsquo; id=0&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python - type hints  typing</title>
      <link>/posts/2024/05/python-type-hints-typing/</link>
      <pubDate>Thu, 23 May 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/05/python-type-hints-typing/</guid>
      <description>&lt;p&gt;Python is, by design, dynamic typing language. which means you don&amp;rsquo;t have define types for variable. but that can be confusing for liners and IDE. This is from the offical docs&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Note The Python runtime does not enforce function and variable type annotations. They can be used by third party tools such as type checkers, IDEs, linters, etc.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;There are simple &lt;em&gt;types&lt;/em&gt; that can be used to hint&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; Dict, List, Tuple&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; names: List[str] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Guido&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Jukka&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Ivan&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; version: Tuple[int, int, int] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; options: Dict[str, bool] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;centered&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#79c0ff&#34;&gt;False&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;capitalize&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#79c0ff&#34;&gt;True&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are more complicated things like &lt;code&gt;Protocol&lt;/code&gt; which is used for type hints/checks for callable objects with &lt;code&gt;__call__&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>websocket - Hello World</title>
      <link>/posts/2024/05/websocket-hello-world/</link>
      <pubDate>Thu, 23 May 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/05/websocket-hello-world/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;websocket is a cool protocol used for bi-directional communication like notifications or chat applications. From wiki, it says&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;WebSocket is a computer communications protocol, providing a simultaneous two-way communication channel over a single Transmission Control Protocol (TCP) connection.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;WebSocket is distinct from HTTP used to serve most webpages. Although they are different, RFC 6455 states that WebSocket &amp;ldquo;is designed to work over HTTP ports 443 and 80 as well as to support HTTP proxies and intermediaries&amp;rdquo;, thus making it compatible with HTTP. To achieve compatibility, the WebSocket handshake uses the HTTP Upgrade header[3] to change from the HTTP protocol to the WebSocket protocol.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Graphics stack - Linux Kernel</title>
      <link>/posts/2024/04/graphics-stack-linux-kernel/</link>
      <pubDate>Sun, 07 Apr 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/04/graphics-stack-linux-kernel/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Graphics stack has long history in the linux kernel. The modern graphics stack consists of the following layers. Starting with user-space libraries(libdrm and libmesa) and then to kernel graphics modules (KMS, DRM)&lt;/p&gt;&#xA;&lt;p&gt;An ASCII art would be something like:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;application -&amp;gt; opengl Mesa -&amp;gt; libdrm -&amp;gt; Linux Kernel (DRM) -&amp;gt; GPU&lt;/p&gt;&#xA;&lt;p&gt;game -&amp;gt; opengl Mesa -&amp;gt; libdrm -&amp;gt; Linux Kernel (DRM) -&amp;gt; GPU(framebuffer)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python - package of the week - pluggy</title>
      <link>/posts/2024/04/python-package-of-the-week-pluggy/</link>
      <pubDate>Fri, 05 Apr 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/04/python-package-of-the-week-pluggy/</guid>
      <description>&lt;p&gt;pluggy provides a way to register plugins with a manager and call the registered hooks with the same arguments. This is an example from the github README.&lt;/p&gt;&#xA;&lt;p&gt;First, we need to create 2 decorators:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;hookspec: used by base method definition that will be implemented with plugins as well&lt;/li&gt;&#xA;&lt;li&gt;hookimpl: used by the plugin to register the actual hooks&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hookspec &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; pluggy&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;HookspecMarker(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;myproject&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hookimpl &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; pluggy&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;HookimplMarker(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;myproject&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then define the base hook&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;MySpec&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;A hook specification namespace.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;@hookspec&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;myhook&lt;/span&gt;(self, arg1, arg2):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;My special little hook that you can customize.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;write a pluging and decorate the method with hookimpl&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python Entry points</title>
      <link>/posts/2024/04/python-entry-points/</link>
      <pubDate>Fri, 05 Apr 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/04/python-entry-points/</guid>
      <description>&lt;p&gt;From &lt;a href=&#34;https://packaging.python.org/en/latest/specifications/entry-points/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docs&lt;/a&gt;, entry points are used to define things that installers know about for example, cli main scripts or plugins&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Entry points are a mechanism for an installed distribution to advertise components it provides to be discovered and used by other code. For example:&lt;/p&gt;&#xA;&lt;p&gt;Distributions can specify console_scripts entry points, each referring to a function. When pip (or another console_scripts aware installer) installs the distribution, it will create a command-line wrapper for each entry point.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Latex - The minimal presentation latex beamer</title>
      <link>/posts/2023/10/latex-the-minimal-presentation-latex-beamer/</link>
      <pubDate>Fri, 20 Oct 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/10/latex-the-minimal-presentation-latex-beamer/</guid>
      <description>&lt;p&gt;This is a post about template for Latex beamer presentation. Actually it&amp;rsquo;s really fun to use (better than powerpoint for sure)&#xA;There are many options for theme but the moist important is to sort the aspect ratio.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\documentclass&lt;/span&gt;[&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;11pt, &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;% Set the default font size, options include: 8pt, 9pt, 10pt, 11pt, 12pt, 14pt, 17pt, 20pt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&#x9;t, &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;% Uncomment to vertically align all slide content to the top of the slide, rather than the default centered&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&#x9;aspectratio=169, &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;% Uncomment to set the aspect ratio to a 16:9 ratio which matches the aspect ratio of 1080p and 4K screens and projectors&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;]{beamer}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\usepackage&lt;/span&gt;{booktabs} &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;% Allows the use of \toprule, \midrule and \bottomrule for better rules in tables&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{default}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{AnnArbor}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Antibes}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Bergen}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Berkeley}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Berlin}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Boadilla}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{CambridgeUS}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Copenhagen}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Darmstadt}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Dresden}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Frankfurt}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Goettingen}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Hannover}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Ilmenau}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{JuanLesPins}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Luebeck}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\usetheme&lt;/span&gt;{Madrid}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Malmoe}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Marburg}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Montpellier}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{PaloAlto}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Pittsburgh}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Rochester}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Singapore}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Szeged}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usetheme{Warsaw}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usecolortheme{albatross}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usecolortheme{beaver}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usecolortheme{beetle}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usecolortheme{crane}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usecolortheme{dolphin}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usecolortheme{dove}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usecolortheme{fly}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usecolortheme{lily}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usecolortheme{monarca}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usecolortheme{seagull}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usecolortheme{seahorse}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usecolortheme{spruce}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usecolortheme{whale}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usecolortheme{wolverine}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\usefonttheme&lt;/span&gt;{default} &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;% Typeset using the default sans serif font&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usefonttheme{serif} % Typeset using the default serif font (make sure a sans font isn&amp;#39;t being set as the default font if you use this option!)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usefonttheme{structurebold} % Typeset important structure text (titles, headlines, footlines, sidebar, etc) in bold&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usefonttheme{structureitalicserif} % Typeset important structure text (titles, headlines, footlines, sidebar, etc) in italic serif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usefonttheme{structuresmallcapsserif} % Typeset important structure text (titles, headlines, footlines, sidebar, etc) in small caps serif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usepackage{mathptmx} % Use the Times font for serif text&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\usepackage&lt;/span&gt;{palatino} &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;% Use the Palatino font for serif text&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usepackage{helvet} % Use the Helvetica font for sans serif text&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\usepackage&lt;/span&gt;[default]{opensans} &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;% Use the Open Sans font for sans serif text&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usepackage[default]{FiraSans} % Use the Fira Sans font for sans serif text&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\usepackage[default]{lato} % Use the Lato font for sans serif text&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\useinnertheme{default}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\useinnertheme&lt;/span&gt;{circles}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\useinnertheme{rectangles}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\useinnertheme{rounded}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\useinnertheme{inmargin}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\useoutertheme{default}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\useoutertheme{infolines}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\useoutertheme{miniframes}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\useoutertheme{smoothbars}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\useoutertheme{sidebar}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\useoutertheme{split}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\useoutertheme{shadow}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\useoutertheme{tree}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\useoutertheme{smoothtree}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\setbeamertemplate&lt;/span&gt;{footline}[frame number]{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\setbeamertemplate&lt;/span&gt;{navigation symbols}{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;% \setbeamertemplate{footline}{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\title&lt;/span&gt;[FOO]{something something}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\subtitle&lt;/span&gt;{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\author&lt;/span&gt;[]{Hero}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\institute&lt;/span&gt;[]{Disney land}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\date&lt;/span&gt;[\today]{today}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\begin&lt;/span&gt;{document}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\begin&lt;/span&gt;{frame}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;\titlepage&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\end&lt;/span&gt;{frame}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\end&lt;/span&gt;{document}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>UVM Internals - Auto configuration</title>
      <link>/posts/2023/10/uvm-internals-auto-configuration/</link>
      <pubDate>Sun, 15 Oct 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/10/uvm-internals-auto-configuration/</guid>
      <description>&lt;p&gt;This is follow-up post about automatic setting of a variable in UVM component after being set in config_db. Like anything in UVM,there are 2 parts. The registration and actual call. Let&amp;rsquo;s do the registration first.&lt;/p&gt;&#xA;&lt;p&gt;For a component, you can define fields using &lt;code&gt;uvm_field_*&lt;/code&gt; macros between &lt;code&gt;uvm_component_utils_begin&lt;/code&gt; and &lt;code&gt;uvm_component_utils_end&lt;/code&gt;. In this example, I will trace &lt;code&gt;uvm_field_int&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_component_utils_begin&lt;/span&gt;(foobar)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_field_int&lt;/span&gt;      (addr, UVM_ALL_ON)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_component_utils_end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In &lt;code&gt;src/macros/uvm_object_defines.svh&lt;/code&gt;, these macros are defined as follows.&#xA;&lt;code&gt;uvm_field_utils_begin&lt;/code&gt; defines  &lt;code&gt;__m_uvm_field_automation&lt;/code&gt; which calls &lt;code&gt;super.__m_uvm_field_automation()&lt;/code&gt; before the fields macros expand to switch-case for each of the operations.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - set_config_int and set_config_string</title>
      <link>/posts/2023/09/uvm-internals-set_config_int-and-set_config_string/</link>
      <pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/09/uvm-internals-set_config_int-and-set_config_string/</guid>
      <description>&lt;p&gt;UVM provides several command line utils to change config. Two of these command line knobs are &lt;code&gt;set_config_int&lt;/code&gt; and &lt;code&gt;set_config_string&lt;/code&gt;. This is a deepdive into how they work.&lt;/p&gt;&#xA;&lt;p&gt;Starting with src/base/uvm_root.svh, where &lt;code&gt;m_do_config_settings&lt;/code&gt; is called in the build_phase of the uvm_root.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt; uvm_root&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;build_phase(uvm_phase phase);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  super.build_phase(phase);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m_set_cl_msg_args();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m_do_verbosity_settings();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m_do_timeout_settings();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m_do_factory_settings();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m_do_config_settings();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m_do_max_quit_settings();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m_do_dump_args();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the same file, &lt;code&gt;m_do_config_settings&lt;/code&gt; matches command line option with uvm_set_config_int and uvm_set_config_string and call &lt;code&gt;m_process_config&lt;/code&gt; with &lt;code&gt;is_bit&lt;/code&gt;argument to set to 1 with int.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Kernel crypto Utilities</title>
      <link>/posts/2023/04/linux-kernel-crypto-utilities/</link>
      <pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/04/linux-kernel-crypto-utilities/</guid>
      <description>&lt;h1 id=&#34;keyring&#34;&gt;&#xA;  Keyring&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#keyring&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;keyring a safe way to work with sensitive data in memory. From &lt;a href=&#34;https://www.kernel.org/doc/html/v6.0/security/keys/core.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;, It&amp;rsquo;s described as follows:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;This service allows cryptographic keys, authentication tokens, cross-domain user mappings, and similar to be cached in the kernel for the use of filesystems and other kernel services.&lt;/p&gt;&#xA;&lt;p&gt;In this context, keys represent units of cryptographic data, authentication tokens, keyrings, etc.. These are represented in the kernel by struct key.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PKCS 1: RSA Cryptography Specifications</title>
      <link>/posts/2023/04/pkcs-1-rsa-cryptography-specifications/</link>
      <pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/04/pkcs-1-rsa-cryptography-specifications/</guid>
      <description>&lt;h1 id=&#34;rsa-signing&#34;&gt;&#xA;  RSA Signing&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#rsa-signing&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc8017&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFV8017&lt;/a&gt; defines the standard for PKCS RSA which is an update over 1.5 version from 2003. In that spec, &lt;code&gt;RSASSA-PSS&lt;/code&gt; algorithm is defines as:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Encoding: converting the message to encoded message&lt;/li&gt;&#xA;&lt;li&gt;Covert encoded message to octet string&lt;/li&gt;&#xA;&lt;li&gt;Octet to Integer&lt;/li&gt;&#xA;&lt;li&gt;Sign Octet with private key&lt;/li&gt;&#xA;&lt;li&gt;convert signature from int to Octet&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This is the copy from the [RFV8017][spec]&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;8.1.1.  Signature Generation Operation&lt;/p&gt;</description>
    </item>
    <item>
      <title>X509 with openssl</title>
      <link>/posts/2023/04/x509-with-openssl/</link>
      <pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/04/x509-with-openssl/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc5280&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;x509&lt;/a&gt; defines the format for public key based certificate.&lt;/p&gt;&#xA;&lt;h1 id=&#34;openssl-with-local-ca&#34;&gt;&#xA;  openssl with local CA&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#openssl-with-local-ca&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In this section, I will use openssl to generates CA cert and key. And use that CA to sign the cert.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Generate private key&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl genrsa -out server.key &lt;span style=&#34;color:#a5d6ff&#34;&gt;2048&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Generate csr&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl req -new -key server.key -out server.csr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Create CA&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl req -x509 &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;            -sha256 -days &lt;span style=&#34;color:#a5d6ff&#34;&gt;356&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;            -nodes &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;            -newkey rsa:2048 &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;            -subj &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;/CN=demo.com/C=US/L=San Fransisco&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;            -keyout rootCA.key -out rootCA.crt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Sign cert with CA&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl x509 -req &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;    -in server.csr &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;    -CA rootCA.crt -CAkey rootCA.key &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;    -CAcreateserial -out server.crt &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;    -days &lt;span style=&#34;color:#a5d6ff&#34;&gt;365&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;    -sha256&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s clear that issuer is the CA but the subject is different (it&amp;rsquo;s the default)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Qemu - Data object exchange DOE</title>
      <link>/posts/2023/04/qemu-data-object-exchange-doe/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/04/qemu-data-object-exchange-doe/</guid>
      <description>&lt;p&gt;This is a quick write-up about Qemu DOE emulation. DOE is part of PCIe and CXL extended capabilities. Technically, It&amp;rsquo;s optional but is important part of IDE starting gen5.&lt;/p&gt;&#xA;&lt;p&gt;Starting with &lt;code&gt;cxl_usp_read_config&lt;/code&gt; is one of the places where &lt;code&gt;pcie_doe_read_config&lt;/code&gt; is called. It seems it&amp;rsquo;s only supported with CXL which kinda matches what kernel implements. If it&amp;rsquo;s DOE extended address, it will fall back to &lt;code&gt;pci_default_read_config&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;uint32_t&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;cxl_usp_read_config&lt;/span&gt;(PCIDevice &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;d, &lt;span style=&#34;color:#ff7b72&#34;&gt;uint32_t&lt;/span&gt; address, &lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; len)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CXLUpstreamPort &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;usp &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;CXL_USP&lt;/span&gt;(d);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;uint32_t&lt;/span&gt; val;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;pcie_doe_read_config&lt;/span&gt;(&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;usp&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;doe_cdat, address, len, &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;val)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; val;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;pci_default_read_config&lt;/span&gt;(d, address, len);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;pcie_doe_read_config&lt;/code&gt; reads the fields when address matches the DW in DOW extended configuration address space. Other than configuration access, The important thing here is reading/writing from &lt;code&gt;read_mbox&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Qemu - PCIe SRIOV and virtual function</title>
      <link>/posts/2023/04/qemu-pcie-sriov-and-virtual-function/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/04/qemu-pcie-sriov-and-virtual-function/</guid>
      <description>&lt;p&gt;This is a quick write-up about SRIOV and virtual functions emulation in Qemu. From &lt;a href=&#34;https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.vsphere.networking.doc/GUID-CC021803-30EA-444D-BCBE-618E0D836B9F.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;SR-IOV is a specification that allows a single Peripheral Component Interconnect Express (PCIe) physical device under a single root port to appear as multiple separate physical devices to the hypervisor or the guest operating system.&lt;/p&gt;&#xA;&lt;p&gt;SR-IOV uses physical functions (PFs) and virtual functions (VFs) to manage global functions for the SR-IOV devices. PFs are full PCIe functions that are capable of configuring and managing the SR-IOV functionality. It is possible to configure or control PCIe devices using PFs, and the PF has full ability to move data in and out of the device. VFs are lightweight PCIe functions that support data flowing but have a restricted set of configuration resources.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Qemu riscv emulation - virt machine</title>
      <link>/posts/2023/03/qemu-riscv-emulation-virt-machine/</link>
      <pubDate>Fri, 31 Mar 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/03/qemu-riscv-emulation-virt-machine/</guid>
      <description>&lt;p&gt;This is a quick write-up on qemu riscv emulation. Qemu provides several APIs to create user defined boards(in qemu lingo, it&amp;rsquo;s called machine) and devices in this board.&lt;/p&gt;&#xA;&lt;h1 id=&#34;risc-virt-board&#34;&gt;&#xA;  risc virt Board&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#risc-virt-board&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;virt&lt;/code&gt; machine is a basic machine to run riscv code with VIRTIO MMIO&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;RISC-V machine with 16550a UART and VirtIO MMIO&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;In &lt;code&gt;hw/riscv/virt.c&lt;/code&gt;, The initialization code for the virt machine. &lt;code&gt;virt_machine_typeinfo&lt;/code&gt; registers the type with qemu QOM using function &lt;code&gt;virt_machine_class_init&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Misc useful commands</title>
      <link>/posts/2023/03/misc-useful-commands/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/03/misc-useful-commands/</guid>
      <description>&lt;p&gt;These are misc useful commands using linux command line&lt;/p&gt;&#xA;&lt;h1 id=&#34;spliting-and-combing-pdf&#34;&gt;&#xA;  spliting and combing PDF&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#spliting-and-combing-pdf&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pdfseparate -f &lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;  original.pdf  output-page%d.pdf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qpdf --empty --pages &lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;cat l&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt; -- all.pdf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;hp-printer&#34;&gt;&#xA;  HP printer&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#hp-printer&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;These are some commands to document &lt;code&gt;hplip&lt;/code&gt; linux HP printer utils.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install hplip&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&lt;/span&gt;gui hplip&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hp-scan&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;network-manager&#34;&gt;&#xA;  Network manager&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#network-manager&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nmcli&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;bluetooth&#34;&gt;&#xA;  Bluetooth&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#bluetooth&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bluetoothctl&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;agent on&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scan on  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# wait for your device&amp;#39;s address to show up here&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scan off&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;trust MAC_ADDRESS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pair MAC_ADDRRESS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;connect MAC_ADDRESS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;fresh-linux-essentials&#34;&gt;&#xA;  Fresh linux essentials&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#fresh-linux-essentials&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install htop ripgrep vim ncdu python3-virtualenv acpi&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;reduce-desk-space&#34;&gt;&#xA;  Reduce desk space&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#reduce-desk-space&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;These few things to do to reduce the file system usage.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PCIE IDE Linux upcoming support</title>
      <link>/posts/2023/03/pcie-ide-linux-upcoming-support/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/03/pcie-ide-linux-upcoming-support/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;IDE is part of pcie starting PCIe and CXL. The transport channel for SPDM(the protocol used for IDE) is Data Object Exchange (DOE). Although DOE is supported already as an optional mailbox communication protocol, IDE/SPDM is not supported in mainline kernel yet.&lt;/p&gt;&#xA;&lt;p&gt;IDE is based on SPDM (CMA defines how SPDM applies to PCIE) and IDE defines the vendor specific messages after SPDM standard authentication protocol.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Qemu PCIe Emulation</title>
      <link>/posts/2023/03/qemu-pcie-emulation/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/03/qemu-pcie-emulation/</guid>
      <description>&lt;p&gt;This post is about how qemu emulates PCI devices for guest Kernel. Honestly, I took the scenic road here which is reading the code and setting breakpoints in GDB at interesting places and work my way through the stack trace. Disclaimer, This is a very short post on a complicated topic and huge code base(Qemu). But It&amp;rsquo;s a good start to dig deeper into qemu code (more specifically PCI emulation in qemu)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Crypto - big Picture</title>
      <link>/posts/2023/03/crypto-big-picture/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/03/crypto-big-picture/</guid>
      <description>&lt;p&gt;This post describes the cryptography algorithms and their applications (As I understand them). Over the years, I read bits of &amp;ldquo;Understanding cryptography&amp;rdquo; by Cristof Paar and these are my notes which kinda match the chapters of the book. I also, added links to related posts for each section.&lt;/p&gt;&#xA;&lt;p&gt;The crypto provides several goals (the technical name is &lt;code&gt;services&lt;/code&gt;)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;confidentiality: Stop people from seeing the message&lt;/li&gt;&#xA;&lt;li&gt;Integrity: Make sure the message is correct(no tampering)&lt;/li&gt;&#xA;&lt;li&gt;Message Authentication (The message is coming from the right person)&lt;/li&gt;&#xA;&lt;li&gt;Nonrepudiation: prove that some person signed a message&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;symmetric-algorithms&#34;&gt;&#xA;  symmetric algorithms&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#symmetric-algorithms&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;symmetric algorithms provide confidentiality by using &lt;code&gt;shared key&lt;/code&gt; known by the Bob and Alice.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Crypto - DH key exchange</title>
      <link>/posts/2023/03/crypto-dh-key-exchange/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/03/crypto-dh-key-exchange/</guid>
      <description>&lt;p&gt;In most Crypto algorithms, we assumed the keys are already known by Alice and Bob. But we need a way to exchange the keys on securely first&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;symmertic exchange (not common)&lt;/li&gt;&#xA;&lt;li&gt;Asymmetric exchange (very popular)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In Asymmetric exchange, Both sides share public keys and the other side uses the public key and private key, to calculate secret key.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Alice  ------ A -----&amp;gt; Bob&#xA;      &amp;lt;-------B------&#xA;&#xA;At Alice&#xA;Kab = Fun(a, B)&#xA;&#xA;At Bob&#xA;Kab = Fun(b, A)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;diffiehellman-key-exchange-dhke&#34;&gt;&#xA;  Diffie–Hellman key exchange (DHKE)&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#diffiehellman-key-exchange-dhke&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The problem how make sure is that Bob is Bob?&#xA;The good solution using digital signature to sign the public key and Identity. and send &lt;code&gt;certificate&lt;/code&gt; which &amp;lt;message, sign(message)&amp;gt;. In this case, &lt;code&gt; sign_Kpr,a(&amp;lt;Kpub,a  IDa&amp;gt;)&lt;/code&gt; where Kpr is Alice&amp;rsquo;s private key.  This way the receiver needs Kpub to verify the certificate first&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb Deepdive - Force and release</title>
      <link>/posts/2023/03/cocotb-deepdive-force-and-release/</link>
      <pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/03/cocotb-deepdive-force-and-release/</guid>
      <description>&lt;p&gt;A really nice feature of cocotb is force and release which map to RTL force and release depending on the language (and simulator). This is example how to use &lt;code&gt;Force&lt;/code&gt; and &lt;code&gt;Release&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;cocotb.handle&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; Force, Release, Deposit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;cocotb.binary&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; BinaryValue&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;value &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sig  &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;....&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sig&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; Force(BinaryValue(len(sig) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt; value)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sig&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; Release()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Force&lt;/code&gt; and &lt;code&gt;Release&lt;/code&gt; are defines in &lt;code&gt;handle.py&lt;/code&gt; and defines &lt;code&gt;_as_gpi_args_for&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;_SetValueAction&lt;/span&gt;(_SetAction):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#79c0ff&#34;&gt;__slots__&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;,)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Base class representing the type of action used while write-accessing a handle with a value.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;__init__&lt;/span&gt;(self, value):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; value&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Force&lt;/span&gt;(_SetValueAction):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Action used to force a handle to a given value until a release is applied.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;_as_gpi_args_for&lt;/span&gt;(self, hdl):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;value, &lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# GPI_FORCE&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Release&lt;/span&gt;(_SetAction):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Action used to stop the effects of a previously applied force/freeze action.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;_as_gpi_args_for&lt;/span&gt;(self, hdl):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# GPI_RELEASE&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, Let&amp;rsquo;s look what happens when testbench calls &lt;code&gt;sig.value = Force(v)&lt;/code&gt;. Starting with &lt;code&gt;setter&lt;/code&gt; function which calls &lt;code&gt;_set_value&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Yosys Python bindings pyosys - Hello world and deepdive</title>
      <link>/posts/2023/03/yosys-python-bindings-pyosys-hello-world-and-deepdive/</link>
      <pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/03/yosys-python-bindings-pyosys-hello-world-and-deepdive/</guid>
      <description>&lt;p&gt;I think Yosys is one most important open sources projects ever created, at least for hardware development. It enabled so much research and innovation in FPGA and ASIC area. It did what gcc did for software development.&lt;/p&gt;&#xA;&lt;h1 id=&#34;building-and-installation&#34;&gt;&#xA;  Building and installation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#building-and-installation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;These are the steps to build yosys with pyosys(python bindings). It&amp;rsquo;s not enabled by default. So you have to pass &lt;code&gt;ENABLE_PYOSYS&lt;/code&gt;. Also, I am using virtualenv as I don&amp;rsquo;t want to install anything with root.&lt;/p&gt;</description>
    </item>
    <item>
      <title>IPXACT parser To Tree -- One way to avoid XML</title>
      <link>/posts/2023/03/ipxact-parser-to-tree--one-way-to-avoid-xml/</link>
      <pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/03/ipxact-parser-to-tree--one-way-to-avoid-xml/</guid>
      <description>&lt;p&gt;In older post, I went through &lt;code&gt;ipxactral&lt;/code&gt; (poor man&amp;rsquo;s RAL generator). It seems only logical to extract the part where i process XML and make dedicated module for that. I hear someone shouting, isn&amp;rsquo;t XML a tree already?&#xA;My answer is &lt;code&gt;I HATE XML&lt;/code&gt;, So I will do whatever to avoid dealing with XML.&lt;/p&gt;&#xA;&lt;p&gt;Jumping right into it, &lt;code&gt;IPXACTTree&lt;/code&gt; just takes path to ixact file.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; IPXACTTree(args&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;ipxactfile)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The heavy lifting is done here to create the tree starting from root and recursively going through the nodes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Parsing UPF - Embedding TCL interpreter with python</title>
      <link>/posts/2023/03/parsing-upf-embedding-tcl-interpreter-with-python/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/03/parsing-upf-embedding-tcl-interpreter-with-python/</guid>
      <description>&lt;p&gt;This post is about quirky idea to parse UPF for fun and profit. I started with writing Lark BNF, To a man with a hammer, everything looks like a nail :)&#xA;But gave up on the idea as i will end up writing frontend for TCL. So, I was mentally blocked for some time.&lt;/p&gt;&#xA;&lt;p&gt;Then it hit me, I can use full-blown TCL interpreter to parse the actual UPF and pass it back to python for processing. The problem how to do it?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Portable Stimulus Standard - Part 1</title>
      <link>/posts/2023/02/portable-stimulus-standard-part-1/</link>
      <pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/portable-stimulus-standard-part-1/</guid>
      <description>&lt;p&gt;Portable stimulus standard (PSS) is very interesting. That said, It&amp;rsquo;s surprising simple.&lt;/p&gt;&#xA;&lt;p&gt;These are important abstraction units specific by the spec:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;component&lt;/li&gt;&#xA;&lt;li&gt;action&lt;/li&gt;&#xA;&lt;li&gt;Activity&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;component&#34;&gt;&#xA;  Component&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#component&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Component is a way to encapsulate other elements (mainly actions)&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Components serve as a mechanism to encapsulate and reuse elements of functionality in a portable stimulus&#xA;model. Typically, a model is broken down into parts that correspond to roles played by different actors&#xA;during test execution. Components often align with certain structural elements of the system and execution&#xA;environment, such as hardware engines, software packages, or testbench agents.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Liberty - Hello World</title>
      <link>/posts/2023/02/liberty-hello-world/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/liberty-hello-world/</guid>
      <description>&lt;p&gt;Liberty format defines delays and power of cells. It&amp;rsquo;s important part of ASIC flow for delay calculation and power estimation.&lt;/p&gt;&#xA;&lt;h1 id=&#34;syntax&#34;&gt;&#xA;  Syntax&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#syntax&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Liberty defines 3 types statements&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;group statement&lt;/li&gt;&#xA;&lt;li&gt;attribute statement&lt;/li&gt;&#xA;&lt;li&gt;define statement&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;group-statements&#34;&gt;&#xA;  Group Statements&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#group-statements&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A group is a named collection of statements that defines a library, a cell, a pin, a timing arc,&#xA;and so forth. Braces ({}), which are used in pairs, enclose the contents of the group.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Weekend project - Python Hardware Description Language - PHDL</title>
      <link>/posts/2023/02/weekend-project-python-hardware-description-language-phdl/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/weekend-project-python-hardware-description-language-phdl/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s Saturday night and I have been cleaning up my github repos. And I found this old defunct project I wrote few years ago. So, I thought to write this post about it.&lt;/p&gt;&#xA;&lt;p&gt;This is a quick prototype for Python Hardware Description Language(Ironically, Named PHDL). Basically, I wanted to figure out semantics to specify verilog design programmatically. I started with defining components I need to generate a module.  The snippet below shows &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;Parameter&lt;/code&gt;. I am using python templates to generate fragments of texts after full tree is build.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generating sequence diagram using planuml</title>
      <link>/posts/2023/02/generating-sequence-diagram-using-planuml/</link>
      <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/generating-sequence-diagram-using-planuml/</guid>
      <description>&lt;p&gt;This post is about generating sequence diagram using a tool called &lt;code&gt;plantuml&lt;/code&gt;. It can be used for a lot of things, but I use it mainly for sequence diagram generation.&lt;/p&gt;&#xA;&lt;p&gt;Sequence diagram is used to describe message-based protocols (like network TCP/UDP). That said, I have used it to visualize a lot of things. For example:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Bus transaction (write/read)&lt;/li&gt;&#xA;&lt;li&gt;side-band signals (interrupts)&lt;/li&gt;&#xA;&lt;li&gt;req/ack handshakes&lt;/li&gt;&#xA;&lt;li&gt;power sequence&lt;/li&gt;&#xA;&lt;li&gt;FSM state changes&lt;/li&gt;&#xA;&lt;li&gt;UVM messages&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Basically, Anything I can parse from logs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Haiku </title>
      <link>/posts/2023/02/haiku/</link>
      <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/haiku/</guid>
      <description>&lt;p&gt;These are some  haiku about random stuff. In case you are wondering what is haiku, here is one-liner from wiki:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A Japanese poem in three lines, the first and last consisting of five morae, and the second consisting of seven morae, usually with an emphasis on the season or a naturalistic theme.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;gate-level-simulation&#34;&gt;&#xA;  Gate level simulation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#gate-level-simulation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This one is about the existential pain everyone gets while debugging GLS failures. I think i will be a happier person if i don&amp;rsquo;t touch GLS never again.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The one books everyone should read</title>
      <link>/posts/2023/02/the-one-books-everyone-should-read/</link>
      <pubDate>Tue, 21 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/the-one-books-everyone-should-read/</guid>
      <description>&lt;p&gt;You may think there is a typo in the title. It is not! This post is about The one book I like the most in each topic. I mean if you have to read just one book in computer Architecture, What would it be?&lt;/p&gt;&#xA;&lt;p&gt;Disclaimer, This is purely personal preference so don&amp;rsquo;t fight me if you don&amp;rsquo;t like these books.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Computer Organization: Digital Design and Computer Architecture, David Harris.&lt;/li&gt;&#xA;&lt;li&gt;Computer Architecture: Computer Architecture: A Quantitative Approach&lt;/li&gt;&#xA;&lt;li&gt;Cryptography: Understanding Cryptography&lt;/li&gt;&#xA;&lt;li&gt;Computer Graphics: Computer Graphics Principles Practice&lt;/li&gt;&#xA;&lt;li&gt;USB: Mindshare&lt;/li&gt;&#xA;&lt;li&gt;PCIE: Again Mindshare&lt;/li&gt;&#xA;&lt;li&gt;Graph Theory: Introduction to Graph Theory&lt;/li&gt;&#xA;&lt;li&gt;Linux Kernel: Understanding The Linux Kernel&lt;/li&gt;&#xA;&lt;li&gt;C : The C programming Language.&lt;/li&gt;&#xA;&lt;li&gt;C++: Modern C++ Design&lt;/li&gt;&#xA;&lt;li&gt;Python: Programming Python&lt;/li&gt;&#xA;&lt;li&gt;Computation Theory: Introduction to the Theory of Computation&lt;/li&gt;&#xA;&lt;li&gt;UVM: Advanced UVM&lt;/li&gt;&#xA;&lt;li&gt;Systemverilog: systemverilog for verification&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Security Protocol and Data Model(SPDM) primer</title>
      <link>/posts/2023/02/security-protocol-and-data-modelspdm-primer/</link>
      <pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/security-protocol-and-data-modelspdm-primer/</guid>
      <description>&lt;p&gt;SPDM defines the messages exchange protocol to do the following tasks&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The specification-defined message exchanges enable Requesters to:&#xA;Discover and negotiate the security capabilities of a Responder.&#xA;Authenticate or provision an identity of a Responder.&#xA;Retrieve the measurements of a Responder.&#xA;Securely establish cryptographic session keys to construct a secure communication channel for the transmission&#xA;or reception of application data.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;In English, SPDM allows requester to know the capability of responder, encrypt/decrypt stuff.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AES-GCM Galois-Counter Mode</title>
      <link>/posts/2023/02/aes-gcm-galois-counter-mode/</link>
      <pubDate>Sat, 18 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/aes-gcm-galois-counter-mode/</guid>
      <description>&lt;p&gt;AES is one most important block ciphers used right now. AES has several modes of operation like CBC, ECB. This post is about GCM (Galois Counter Mode). This is used in several specifications. For example, This is I and E in PCIe IDE :)&lt;/p&gt;&#xA;&lt;p&gt;GCM provides authenticated encryption. Basically, It keeps things secret and makes sure nobody played around with these secret. I read the NIST document for GCM but I think the best resource I found is &lt;a href=&#34;https://luca-giuzzi.unibs.it/corsi/Support/papers-cryptography/gcm-spec.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;paper&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deepdive - DOE CXL Linux driver</title>
      <link>/posts/2023/02/deepdive-doe-cxl-linux-driver/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/deepdive-doe-cxl-linux-driver/</guid>
      <description>&lt;p&gt;This post is about DOE which is Data Object Exchange which is used by CMA to implement SPDM for PCI/CXL IDE specification(starting Gen5, I think).&#xA;I can&amp;rsquo;t download ENC on PCI SIG, So the next best thing is reading the Linux kernel driver that uses DOE. Luckily, CXL driver uses it.  win-win!&lt;/p&gt;&#xA;&lt;h1 id=&#34;entry-point-the-probe&#34;&gt;&#xA;  Entry point the probe&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#entry-point-the-probe&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with &lt;code&gt;drivers/cxl/pci.c&lt;/code&gt;, &lt;code&gt;.probe&lt;/code&gt; is called with devices by PCI core.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PCIe IDE - Integrity and Data Encryption</title>
      <link>/posts/2023/02/pcie-ide-integrity-and-data-encryption/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/pcie-ide-integrity-and-data-encryption/</guid>
      <description>&lt;p&gt;The security components are divided 3 components&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SPDM - Security Protocol and Data Model: A standard defined by [2][DMTF] for key management&lt;/li&gt;&#xA;&lt;li&gt;CMA  - Component Measurement and Authentication: defined by PCI SIG and It&amp;rsquo;s adaptation of SPDM&lt;/li&gt;&#xA;&lt;li&gt;DOE  - Data Object Exchange: defines by PCI SIG, CMA defines DOE to transport SPDM messages between requester and responder for key/cert exchange.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Note that CMA and SPDM are lumped together in the spec as I see it CMA is basically SPDM with extra requirement or rules.  DOE is just extended capability in the configuration address space where it allows the host and device to exchange messages using 2 mailboxes registers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PCIe physical layer 8b/10b encoder</title>
      <link>/posts/2023/02/pcie-physical-layer-8b/10b-encoder/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/pcie-physical-layer-8b/10b-encoder/</guid>
      <description>&lt;p&gt;This is a quick post about 8b/10b encoder in PCIE Gen1/2. Not that change in Gen3.&lt;/p&gt;&#xA;&lt;p&gt;From Mindeshare PCIe book, encoder balances out the&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Maintaining DC Balance. PCIe uses an AC‐coupled link, placing a capaci‐&#xA;tor serially in the path to isolate the DC part of the signal from the other end&#xA;of the Link. This allows the Transmitter and Receiver to use different com‐&#xA;mon‐mode voltages and makes the electrical design easier for cases where&#xA;the path between them is long enough that they’re less likely to have exactly&#xA;the same reference voltages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Root of trust primer</title>
      <link>/posts/2023/02/root-of-trust-primer/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/root-of-trust-primer/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://csrc.nist.gov/Projects/Hardware-Roots-of-Trust&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NIST&lt;/a&gt; defines Root of trust (RoT) as follows&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Roots of trust are highly reliable hardware, firmware, and software components that perform specific, critical security functions. Because roots of trust are inherently trusted, they must be secure by design.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Basically, It&amp;rsquo;s hardware implementation of security functions like&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;key management(generation and storage)&lt;/li&gt;&#xA;&lt;li&gt;cryptographygraphic functions(Block ciphers, Asymmetric key crypto, Hash)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The hardware is designed with security threat model in mind. &lt;a href=&#34;https://csrc.nist.gov/CSRC/media/Publications/sp/800-164/draft/documents/sp800_164_draft.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NIST Guidelines on Hardware Rooted Security in Mobile Devices&lt;/a&gt; states 3 important guidelines for RoT&lt;/p&gt;</description>
    </item>
    <item>
      <title>New computer! Who dis?</title>
      <link>/posts/2023/02/new-computer-who-dis/</link>
      <pubDate>Thu, 16 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/new-computer-who-dis/</guid>
      <description>&lt;p&gt;People talk about the smell of a new car, but nobody talks about the smell of new computer. The smell of plastic and potential :)&lt;/p&gt;&#xA;&lt;p&gt;I recently retired my veteran Ideapad after battery, battery socket and eventually screen failed. safe to say, I got my money worth out of it. Honestly, I am surprised it lasted 7 years!&lt;/p&gt;&#xA;&lt;p&gt;Reset in peace(RIP), my friend!&lt;/p&gt;&#xA;&lt;p&gt;I decided to get another Ideapad. After research for few days, I found what I am looking for. I3 and decent RAM and It&amp;rsquo;s not going to break the bank.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PCIe Galois LSFR scrambler - one way to do it!</title>
      <link>/posts/2023/02/pcie-galois-lsfr-scrambler-one-way-to-do-it/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/pcie-galois-lsfr-scrambler-one-way-to-do-it/</guid>
      <description>&lt;p&gt;This is a quick post about PCIe scrambler as part of the physical layer. The polynomial is&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;X^16 + X^5 + X^4 + X^3 + 1.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/pcie_scrambler.png&#34; alt=&#34;Example image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;From &lt;a href=&#34;https://en.wikipedia.org/wiki/Linear-feedback_shift_register&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wiki&lt;/a&gt;, This type of LSFR is called &lt;code&gt;Galois LSFR&lt;/code&gt; where bits at taps(xor) is inverted when bit is 1.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Named after the French mathematician Évariste Galois, an LFSR in Galois configuration, which is also known as modular, internal XORs, or one-to-many LFSR, is an alternate structure that can generate the same output stream as a conventional LFSR (but offset in time).[5] In the Galois configuration, when the system is clocked, bits that are not taps are shifted one position to the right unchanged. The taps, on the other hand, are XORed with the output bit before they are stored in the next position. The new output bit is the next input bit. The effect of this is that when the output bit is zero, all the bits in the register shift to the right unchanged, and the input bit becomes zero. When the output bit is one, the bits in the tap positions all flip (if they are 0, they become 1, and if they are 1, they become 0), and then the entire register is shifted to the right and the input bit becomes 1.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AES Rijndael S-box explained</title>
      <link>/posts/2023/02/aes-rijndael-s-box-explained/</link>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/aes-rijndael-s-box-explained/</guid>
      <description>&lt;p&gt;This post is about Rijndael S-box which the first stage of AES encryption. It&amp;rsquo;s substitution lookup table. AES implementation usually uses pre-computed table. I thought it would be fun to calculate it in python to see it action.&lt;/p&gt;&#xA;&lt;p&gt;From Wiki&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;the input is mapped to its multiplicative inverse in GF(28) = GF(2) [x]/(x8 + x4 + x3 + x + 1), Rijndael&amp;rsquo;s finite field. Zero, as the identity, is mapped to itself. This transformation is known as the Nyberg S-box after its inventor Kaisa Nyberg.[2] The multiplicative inverse is then transformed using the following affine transformation:&lt;/p&gt;</description>
    </item>
    <item>
      <title>SVA Req/Ack Assertions</title>
      <link>/posts/2023/02/sva-req/ack-assertions/</link>
      <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/sva-req/ack-assertions/</guid>
      <description>&lt;p&gt;This is a micro post about an example of a handshake SystemVerilog assertion. This is more of a diary thing, so take it with a grain of salt.&lt;/p&gt;&#xA;&lt;h1 id=&#34;assertion-details&#34;&gt;&#xA;  Assertion Details&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#assertion-details&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;After a &lt;code&gt;req&lt;/code&gt; edge, &lt;code&gt;req&lt;/code&gt; should be stable and &lt;code&gt;ack&lt;/code&gt; should be low until &lt;code&gt;ack&lt;/code&gt; goes high between 0:11.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$rose(req) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;|-&amp;gt;&lt;/span&gt; (req &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;!&lt;/span&gt;ack)[&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;11&lt;/span&gt;] ##&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt; (req &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ack)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When &lt;code&gt;ack&lt;/code&gt; goes high, &lt;code&gt;req&lt;/code&gt; should be high as well.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM cheatsheet - Sequencer to driver connection</title>
      <link>/posts/2023/02/uvm-cheatsheet-sequencer-to-driver-connection/</link>
      <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/uvm-cheatsheet-sequencer-to-driver-connection/</guid>
      <description>&lt;h1 id=&#34;sequence&#34;&gt;&#xA;  sequence&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#sequence&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;task&lt;/span&gt; body();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;pkt t &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; pkt&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;type_id&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;create(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;start_item(t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;tx.randomize();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;finish_item(t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;get_response(r);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;endtask&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;driver&#34;&gt;&#xA;  driver&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#driver&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class mydriver extends uvm_driver #(pkt);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;seq_item_port.get_next_item(pkt);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;seq_item_port.item_done();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;for&lt;/span&gt; response&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f85149&#34;&gt;``&lt;/span&gt;&lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`verilog&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class mydriver extends uvm_driver;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;seq_item_port.get(req);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// create rsp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&#x9;rsp.set_id_info(req);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;seq_item_port.put(rsp);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;connection-in-agent&#34;&gt;&#xA;  Connection in Agent&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#connection-in-agent&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m_drv.seq_item_port.connect(m_seqr.seq_item_export)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>UVM Internals - deepdive into uvm_reg_predictor</title>
      <link>/posts/2023/02/uvm-internals-deepdive-into-uvm_reg_predictor/</link>
      <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/uvm-internals-deepdive-into-uvm_reg_predictor/</guid>
      <description>&lt;p&gt;I&#xA;&lt;code&gt;uvm_predictor&lt;/code&gt; is UVM way to determine the value of registers model by monitoring the bus in case someone other than reg model is changing the registers. The usual boilerplate code looks something like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        predict.map &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; regmodel.default_map;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        predict.adapter &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; reg2rw; &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// reg2rw is adapter&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;        bus.mon.ap.connect(predict.bus_in);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        regmodel.default_map.set_auto_predict(&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looking at the source code, The following important variables &lt;code&gt;bus_in&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;adapter&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_component_param_utils&lt;/span&gt;(uvm_reg_predictor#(BUSTYPE))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// Variable: bus_in&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// Observed bus transactions of type ~BUSTYPE~ are received from this&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// port and processed.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// For each incoming transaction, the predictor will attempt to get the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// register or memory handle corresponding to the observed bus address. &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// If there is a match, the predictor calls the register or memory&amp;#39;s&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// predict method, passing in the observed bus data. The register or&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// memory mirror will be updated with this data, subject to its configured&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// access behavior--RW, RO, WO, etc. The predictor will also convert the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// bus transaction to a generic &amp;lt;uvm_reg_item&amp;gt; and send it out the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// ~reg_ap~ analysis port.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// If the register is wider than the bus, the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// predictor will collect the multiple bus transactions needed to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// determine the value being read or written.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  uvm_analysis_imp #(BUSTYPE, uvm_reg_predictor #(BUSTYPE)) bus_in;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// Variable: map&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// The map used to convert a bus address to the corresponding register&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// or memory handle. Must be configured before the run phase.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  uvm_reg_map map;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// Variable: adapter&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// The adapter used to convey the parameters of a bus operation in &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// terms of a canonical &amp;lt;uvm_reg_bus_op&amp;gt; datum.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// The &amp;lt;uvm_reg_adapter&amp;gt; must be configured before the run phase.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  uvm_reg_adapter adapter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The class has one function &lt;code&gt;write&lt;/code&gt; connected to the &lt;code&gt;bus_in&lt;/code&gt; analysis imp above.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - Deepdive into uvm_reg_bit_bash_seq</title>
      <link>/posts/2023/02/uvm-internals-deepdive-into-uvm_reg_bit_bash_seq/</link>
      <pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/uvm-internals-deepdive-into-uvm_reg_bit_bash_seq/</guid>
      <description>&lt;p&gt;This is a deepdive into &lt;code&gt;uvm_reg_bit_bash_seq&lt;/code&gt;. It&amp;rsquo;s one of UVM RAL builtin sequences to test registers. &lt;code&gt;uvm_reg_bit_bash_seq&lt;/code&gt; can be used as by setting the &lt;code&gt;model&lt;/code&gt; and start the sequence and that&amp;rsquo;s it.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         seq &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; uvm_reg_bit_bash_seq&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;type_id&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;create(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;seq&amp;#34;&lt;/span&gt;,this);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         seq.model &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; env.regmodel;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         seq.start(null);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         seq.wait_for_sequence_state(FINISHED);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Starting with &lt;code&gt;body()&lt;/code&gt;, it seems &lt;code&gt;reset_blk&lt;/code&gt; is empty in &lt;code&gt;src/reg/sequences/uvm_reg_bit_bash_seq.svh&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      reg_seq &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; uvm_reg_single_bit_bash_seq&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;type_id&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;create(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;reg_single_bit_bash_seq&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      this.reset_blk(model);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      model.reset();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      do_block(model);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The loop works on all registers and calls &lt;code&gt;vm_reg_single_bit_bash_seq&lt;/code&gt; on each register&lt;/p&gt;</description>
    </item>
    <item>
      <title>Purpose lost in search of limelight, They said!</title>
      <link>/posts/2023/02/purpose-lost-in-search-of-limelight-they-said/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/purpose-lost-in-search-of-limelight-they-said/</guid>
      <description>&lt;p&gt;Disclaimer: This is a joke/rant post. If sarcasm is not your thing, Please, skip this one.&lt;/p&gt;&#xA;&lt;p&gt;I was told something that I didn&amp;rsquo;t know how to respond to. I didn&amp;rsquo;t say anything at the time, but it bugged me for few hours then I thought of something and didn&amp;rsquo;t think about since(Good will hunting?!).&lt;/p&gt;&#xA;&lt;p&gt;Anyway, someone said&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Your purpose is lost in search of limelight.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;It took me few seconds to parse and process the statement. English is my second language and the wording didn&amp;rsquo;t seem right to me. What in the name of google-translate does this mean?&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM cheatsheet - Misc snippets</title>
      <link>/posts/2023/02/uvm-cheatsheet-misc-snippets/</link>
      <pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/uvm-cheatsheet-misc-snippets/</guid>
      <description>&lt;h1 id=&#34;set_drain_time&#34;&gt;&#xA;  set_drain_time&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#set_drain_time&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class test extends uvm_test;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;task&lt;/span&gt; run_phase (uvm_phase phase);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   phase.raise_objection(this);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   my_seq.start(m_sequencer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   phase.phase_done.set_drain_time(this, &lt;span style=&#34;color:#a5d6ff&#34;&gt;20&lt;/span&gt;ns);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   phase.drop_objection(this);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;endtask&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; run_phase&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;function-for-uvm-names&#34;&gt;&#xA;  function for UVM names&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#function-for-uvm-names&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_full_name() returns hierarchy from uvm_top&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_type_name() returns class name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_name()  &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; UVM object name. passed to new()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;how-to-start-sequence&#34;&gt;&#xA;  How to start sequence&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#how-to-start-sequence&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class seq extends uvm_sequence;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;task&lt;/span&gt; body();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;start_item(obj);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;obj.randomize();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;finish_item(obj);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;endtask&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;seq sq;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sq.start(seqencer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;uvm_do &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;seq/item&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; On calling this macro, create, randomize and send to the driver will be executed&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;uvm_do_with &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;seq/item, constraints&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; It is the same as &lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;uvm_do but additionally, constraints can be defined &lt;span style=&#34;color:#ff7b72&#34;&gt;while&lt;/span&gt; randomizing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;uvm_do_pri&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;seq/item, priority&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; It is the same as &lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;uvm_do but additionally, the mentioned priority is considered.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;uvm_do_pri_with&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;seq/item, constraints, priority&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt;.  It is a combination of &lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;uvm_do_with and &lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;uvm_do_pri&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;uvm_create&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;seq/item&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; This creates a sequence or item.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;uvm_send&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;seq/item&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; It directly sends seq/item without creating and randomizing it. So, make sure the seq/item is created and randomized first.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;uvm_rand_send&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;seq/item&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; It directly sends a randomized seq/item without creating it. So, make sure the seq/item is created first.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;uvm_rand_send_with&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;seq/item&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; It directly sends a randomized seq/item with constraints but without creating it. So, make sure seq/item is created first&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;uvm_send_pri&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;seq/item, Priority&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; It is the same as &lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;uvm_send but additionally. priority is also considered.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;uvm_rand_send_pri&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;seq/item, Priority&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; It is combination of &lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;uvm_rand_send and &lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;uvm_send_pri&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;uvm_rand_send_pri_with&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;seq/item, Priority&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; It is a combination of &lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;uvm_rand_send_with and &lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;uvm_send_pri.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;uvm-messages&#34;&gt;&#xA;  UVM messages&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#uvm-messages&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;uvm info messages had the following levels&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM cheatsheet - TLM</title>
      <link>/posts/2023/02/uvm-cheatsheet-tlm/</link>
      <pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/uvm-cheatsheet-tlm/</guid>
      <description>&lt;h1 id=&#34;put-port-to-imp&#34;&gt;&#xA;  put port to imp&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#put-port-to-imp&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class A;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;uvm_blocking_put_port #(obj) m_port;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;task&lt;/span&gt; run_phase()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;m_port.put(pkt);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;endtask&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class B;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;uvm_blocking_put_export #(obj, comp) m_imp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;virtual &lt;span style=&#34;color:#ff7b72&#34;&gt;task&lt;/span&gt; put(pkt p);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;endtask&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a.m_port.connect(b.m_imp);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;get-portimp&#34;&gt;&#xA;  get port/imp&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#get-portimp&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class A;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;uvm_blocking_get_imp #(obj) m_imp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;virtual &lt;span style=&#34;color:#ff7b72&#34;&gt;task&lt;/span&gt; get(pkt p);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;endtask&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class B;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;uvm_blocking_get_port #(obj, comp) m_port;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;task&lt;/span&gt; run_phase()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;m_port.get(pkt);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;endtask&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b.m_port.connect(a.m_imp);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;port-to-port&#34;&gt;&#xA;  Port to Port&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#port-to-port&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m_subcompo.m_port.connect(this.m_port)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;imp-to-export&#34;&gt;&#xA;  imp to export&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#imp-to-export&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m_export.connect(subcomp.m_imp)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;port-to-export&#34;&gt;&#xA;  port to export&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#port-to-export&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;subcom.m_port.connect(comp.m_export)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;tlm_fifo&#34;&gt;&#xA;  tlm_fifo&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tlm_fifo&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvm_blocking_put_port #(pkt) m_put;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m_put(p);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvm_blocking_get_port #(pkt) m_get;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m_get(p)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvm_tlm_fifo #(pkt) m_tlm_fifo;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;comp1.m_put.connect(m_tlm_fifo.put_export);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;comp2.m_get.connect(m_tlm_fifo.get_export);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;uvm_analysis_port&#34;&gt;&#xA;  uvm_analysis_port&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#uvm_analysis_port&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvm_analysis_port #(pkt) ap;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ap.write(p)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;in uvm_subscriber&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  uvm_analysis_imp #(T, this_type) analysis_export;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class s extends uvm_subscriber #(pkt);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;virtual &lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt; write(pkt p1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c1.ap.connect(c2.analysis_export)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;tlm-analysis-fifo&#34;&gt;&#xA;  TLM analysis fifo&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tlm-analysis-fifo&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// declare fifo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt; uvm_tlm_analysis_fifo #(transaction) analy_fifo;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// on one side create ap&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt; uvm_analysis_port#(transaction) analysis_port; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// connect fifo to ap&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt; analysis_port.connect(analy_fifo.analysis_export);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// write to port&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;analysis_port.write(trans);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// get from fifo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;analy_fifo.get(trans);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;tlm-macros&#34;&gt;&#xA;  TLM macros&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tlm-macros&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_put_imp_decl&lt;/span&gt;(_1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_put_imp_decl&lt;/span&gt;(_2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvm_put_imp_2 #(pkt, my_put_compo#(pkt) ) put_imp2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvm_put_imp_1 #(pkt, my_put_compo#(pkt) ) put_imp1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt; put_1(&lt;span style=&#34;color:#ff7b72&#34;&gt;input&lt;/span&gt; pkt t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt; put_2(&lt;span style=&#34;color:#ff7b72&#34;&gt;input&lt;/span&gt; pkt t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvm_blocking_put_port #(pkt) put_port;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;put_port.put(p);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;compoS1.put_port.connect(compoR.put_imp1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;compoS2.put_port.connect(compoR.put_imp2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>UVM Internals - What happens when you call set_auto_predict</title>
      <link>/posts/2023/02/uvm-internals-what-happens-when-you-call-set_auto_predict/</link>
      <pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/uvm-internals-what-happens-when-you-call-set_auto_predict/</guid>
      <description>&lt;p&gt;This is a deepdive into how &lt;code&gt;set_auto_predict&lt;/code&gt; works.&lt;/p&gt;&#xA;&lt;p&gt;When called on reg_map, It updates the mirror values with write/read operation going through the reg model.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;blabla_reg_block_map.set_auto_predict(&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The function is defined in &lt;code&gt;uvm_reg_map.svh&lt;/code&gt; with the following comment&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// When ~on~ is ~TRUE~, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// the register model will automatically update its mirror&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// (what it thinks should be in the DUT) immediately after&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// any bus read or write operation via this map. Before a &amp;lt;uvm_reg::write&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// or &amp;lt;uvm_reg::read&amp;gt; operation returns, the register&amp;#39;s &amp;lt;uvm_reg::predict&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// method is called to update the mirrored value in the register.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// When ~on~ is ~FALSE~, bus reads and writes via this map do not&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// automatically update the mirror. For real-time updates to the mirror&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// in this mode, you connect a &amp;lt;uvm_reg_predictor&amp;gt; instance to the bus&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// monitor. The predictor takes observed bus transactions from the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// bus monitor, looks up the associated &amp;lt;uvm_reg&amp;gt; register given&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// the address, then calls that register&amp;#39;s &amp;lt;uvm_reg::predict&amp;gt; method.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// While more complex, this mode will capture all register read/write&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// activity, including that not directly descendant from calls to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// &amp;lt;uvm_reg::write&amp;gt; and &amp;lt;uvm_reg::read&amp;gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// By default, auto-prediction is turned off.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt; set_auto_predict(&lt;span style=&#34;color:#ff7b72&#34;&gt;bit&lt;/span&gt; on&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;); m_auto_predict &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; on; &lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;m_auto_predict&lt;/code&gt; is referenced only in &lt;code&gt;get_auto_predict&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Graphics stack - OpenGL libmesa</title>
      <link>/posts/2023/01/graphics-stack-opengl-libmesa/</link>
      <pubDate>Sat, 28 Jan 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/01/graphics-stack-opengl-libmesa/</guid>
      <description>&lt;p&gt;This post is deepdive into how OpenGL application interacts with underlying software stack which are OpenGL implementation and graphics drivers in the kernel. The stack is something like this.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;User Land ------------&amp;gt; OpenGL implementation &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;Mesa&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; -------------&amp;gt; Intel driver &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;i915&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; -----------&amp;gt; HW&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;userland1-application-and-glut&#34;&gt;&#xA;  Userland1: application and GLUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#userland1-application-and-glut&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with a simple application to show square polygon. This application uses &lt;code&gt;libglut&lt;/code&gt; for window management to show OpenGL application. Cool!&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - uvm_pool</title>
      <link>/posts/2023/01/uvm-internals-uvm_pool/</link>
      <pubDate>Thu, 26 Jan 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/01/uvm-internals-uvm_pool/</guid>
      <description>&lt;p&gt;This post is about one of UVM utility &lt;code&gt;uvm_pool&lt;/code&gt; which is wrapper around Systemverilog associative array. UVM defines singletons from uvm_pool as well.&lt;/p&gt;&#xA;&lt;p&gt;Starting with some internal inside uvm_pool, &lt;code&gt;pool&lt;/code&gt;assoc array is delatred as protected as there couple of setters and getter defines anyway.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;typedef&lt;/span&gt; uvm_pool #(KEY,T) this_type;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  static protected this_type m_global_pool;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  protected T pool[KEY];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;are defined as follows. Easy enough!&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  virtual &lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; T get (KEY key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;!&lt;/span&gt;pool.exists(key)) &lt;span style=&#34;color:#ff7b72&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      T default_value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pool[key] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; default_value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; pool[key];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  virtual &lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt; add (KEY key, T item);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pool[key] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; item;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the singleton, these methods can be used. Again easy enough! Not that global pool is created once the first time &lt;code&gt;get_global_pool&lt;/code&gt; is called.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Irish tax calculation using Python Jupyter notebook</title>
      <link>/posts/2023/01/irish-tax-calculation-using-python-jupyter-notebook/</link>
      <pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/01/irish-tax-calculation-using-python-jupyter-notebook/</guid>
      <description>&lt;p&gt;For few years now I have using google sheets to keep track of taxes and check payroll tax calculations (trust but verify, Right?).&#xA;Anyway, I decided to move to Jupyter notebook/python combo to do the calculations. This is small code to calculate the Irish tax (PAYE, USC, PRSI). I have a bigger dashboard with ESPP, RSU and bonus but I thought it would be an overkill here.&lt;/p&gt;&#xA;&lt;h1 id=&#34;jupyter&#34;&gt;&#xA;  Jupyter&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#jupyter&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;To start a Jupyter notebook:&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - uvm_barrier</title>
      <link>/posts/2023/01/uvm-internals-uvm_barrier/</link>
      <pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/01/uvm-internals-uvm_barrier/</guid>
      <description>&lt;p&gt;This post is about one of UVM synchronization. Well, we all use phases which is implicitly one way to synchronize tasks(build, connect, run). Anyway, barriers is not a new thing it is used a lot in multi-thread/kernel development.&lt;/p&gt;&#xA;&lt;p&gt;The most import method is &lt;code&gt;wait_for&lt;/code&gt;. The processes call it at the point where it wants other processes. In this example, both process will continue after &lt;code&gt;20&lt;/code&gt; delay.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvm_barrier b &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; new(&amp;#39;b_test&amp;#39; , &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;initial&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&lt;span style=&#34;color:#a5d6ff&#34;&gt;10&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b.wait_for();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;initial&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&lt;span style=&#34;color:#a5d6ff&#34;&gt;20&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b.wait_for();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s dig deeper into UVM implementation. Starting with &lt;code&gt;new&lt;/code&gt;, It is important &lt;code&gt;threashold&lt;/code&gt; is set there and some other init stuff happening there as well.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to read network tunnel packets in verilog using VPI</title>
      <link>/posts/2023/01/how-to-read-network-tunnel-packets-in-verilog-using-vpi/</link>
      <pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/01/how-to-read-network-tunnel-packets-in-verilog-using-vpi/</guid>
      <description>&lt;p&gt;In previous post, I went through example how to get raw IP packets instead of going to link/phy layer. So, in this post, I thought what if i have IP stack in verilog  and i want to get actual IP packets from the interface instead of creating packets myself? why not?! It&amp;rsquo;s slow sunday after all.&lt;/p&gt;&#xA;&lt;p&gt;So, the idea is using VPI to get the packets and pass it back to verilog. Simple, Right?&lt;/p&gt;</description>
    </item>
    <item>
      <title>WireGuard and Linux kernel</title>
      <link>/posts/2023/01/wireguard-and-linux-kernel/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/01/wireguard-and-linux-kernel/</guid>
      <description>&lt;p&gt;This post is hello world into vpn technologies (which i am not an expert in), technologies like openVPN and WireGuard and other good stuff.&lt;/p&gt;&#xA;&lt;h1 id=&#34;back-story&#34;&gt;&#xA;  Back story&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#back-story&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Over the years, I mentained my own openVPN server on VPS machine and that setup was working for me. There were several advantages, well, it was cheap (actually free!) considering I was hosting my blog on that machine. But now that i am too old for sh!t and gave up that machine, and After soe research, I got myself Nordvpn. So naturally, I wanted to check if they use openVPN or WireGuard. Let&amp;rsquo;s see.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python package highlight: Easy progress bar - tqdm</title>
      <link>/posts/2022/12/python-package-highlight-easy-progress-bar-tqdm/</link>
      <pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/12/python-package-highlight-easy-progress-bar-tqdm/</guid>
      <description>&lt;p&gt;&lt;code&gt;tqdm&lt;/code&gt; is nice package to show progress bar for loops. &lt;code&gt;tqdm()&lt;/code&gt; takes iterable and returns another iterable with updating the bar. This is the comments from the tqdm class in &lt;code&gt;tqdm/std.py&lt;/code&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;pre&gt;&lt;code&gt; &amp;quot;&amp;quot;&amp;quot;&#xA;Decorate an iterable object, returning an iterator which acts exactly&#xA;like the original iterable, but prints a dynamically updating&#xA;progressbar every time a value is requested.&#xA;&amp;quot;&amp;quot;&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Quick example of &lt;code&gt;tqdm&lt;/code&gt; iterable in a loop.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;time&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;tqdm&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; tqdm&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;in&lt;/span&gt; tqdm(range(&lt;span style=&#34;color:#a5d6ff&#34;&gt;100&lt;/span&gt;)):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    time&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#a5d6ff&#34;&gt;.25&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Python package of the week: colorama</title>
      <link>/posts/2022/12/python-package-of-the-week-colorama/</link>
      <pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/12/python-package-of-the-week-colorama/</guid>
      <description>&lt;p&gt;colorama is nice little package to add color to console messages. It make the logs look better where you can spot important messages quickly.&lt;/p&gt;&#xA;&lt;p&gt;I usually add the argument to disable coloring if i need to.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;colorama&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; Fore,Style&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;config&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;not&lt;/span&gt; config&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;batch:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;DummyFore&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        BLACK&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;RED&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;GREEN&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;YELLOW&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;BLUE&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;MAGENTA&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;CYAN&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;WHITE&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;RESET&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;DummyStyle&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        RESET_ALL &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    saved_Fore, Fore &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; Fore, DummyFore&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    saved_Style, Style &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; Style, DummyStyle&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then use my package instead using of using colorama directly. It&amp;rsquo;s also good idea to use colors combined with python built-in logging module.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb - writing toggle coverage collctor in 20 lines</title>
      <link>/posts/2022/12/cocotb-writing-toggle-coverage-collctor-in-20-lines/</link>
      <pubDate>Mon, 26 Dec 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/12/cocotb-writing-toggle-coverage-collctor-in-20-lines/</guid>
      <description>&lt;p&gt;This post is about poor man&amp;rsquo;s toggle coverage collector written purely in cocotb. You may ask why? and i will simply reply by with &amp;ldquo;why not?!&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;First thing is getting design signals through cocotb infrastructure. I know that signals would be of type &lt;code&gt;ModifiableObject&lt;/code&gt; so i use &lt;code&gt;dir&lt;/code&gt; to everything and register monitors on signal objects.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#ff7b72&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;in&lt;/span&gt; dir(tb&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;top):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         o &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; getattr(tb&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;top,i)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt; (isinstance(o, ModifiableObject)):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             S &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; SignalToggleCov(o)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             sigs&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;append(S)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             cocotb&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;start_soon(S&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;signal_mon())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, what is &lt;code&gt;SignalToggleCov&lt;/code&gt;? it&amp;rsquo;s just wrapper over cocotb handle with the &lt;code&gt;signal_mon&lt;/code&gt; waits on signal change and compare old and new values. Not the most efficient but good enough for what i am doing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SAWD - the fun version</title>
      <link>/posts/2022/12/sawd-the-fun-version/</link>
      <pubDate>Fri, 23 Dec 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/12/sawd-the-fun-version/</guid>
      <description>&lt;p&gt;Disclaimer: I am writing this post while recovering from 3-day covid-y fever. So, there is a chance that memes to technical details ratio is alarmingly high. If you want the boring technical stuff, read the paper :^)&lt;/p&gt;&#xA;&lt;p&gt;This post is about dvcon paper titled &lt;code&gt;SAWD: Systemverilog Assertions waveform based development tool&lt;/code&gt; which was a weekend project that escalated quickly.&lt;/p&gt;&#xA;&lt;h1 id=&#34;problem-statement&#34;&gt;&#xA;  Problem statement&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#problem-statement&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with problem statement, I will just use this xkcd joke that I am big fan of :)&lt;/p&gt;</description>
    </item>
    <item>
      <title>TP-Link TL-WN722N adapter - Linux driver - Part 1</title>
      <link>/posts/2022/12/tp-link-tl-wn722n-adapter-linux-driver-part-1/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/12/tp-link-tl-wn722n-adapter-linux-driver-part-1/</guid>
      <description>&lt;p&gt;This is the first post in a series about the TP-Link TL-WN722N WiFi adapter. It&amp;rsquo;s a cool little gadget that provides WiFi over USB. This post is about USB registration from the Linux driver.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s dive into the deep end, which is the USB driver. The USB interface would eventually register network devices and cfg80211 devices for ioctl.&lt;/p&gt;&#xA;&lt;p&gt;Starting with the entry point in the driver:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;module_init&lt;/span&gt;(rtw_drv_entry);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;module_exit&lt;/span&gt;(rtw_drv_halt);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;rtw_drv_entry&lt;/code&gt; calls &lt;code&gt;usb_register&lt;/code&gt; to register this driver (short and sweet).&lt;/p&gt;</description>
    </item>
    <item>
      <title>DWARF primer for fun and fun</title>
      <link>/posts/2022/12/dwarf-primer-for-fun-and-fun/</link>
      <pubDate>Sat, 10 Dec 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/12/dwarf-primer-for-fun-and-fun/</guid>
      <description>&lt;p&gt;If you used GDB before, This means you used some kind of debuggin info in the ELF. one of the famous ones is  DWARF. Wiki one-liner is&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;DWARF is a widely used, standardized debugging data format. DWARF was originally designed along with Executable and Linkable Format (ELF), although it is independent of object file formats&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Dwarf information is divided into several ELF sections and described with Debugging Information Entry (DIE).&lt;/p&gt;</description>
    </item>
    <item>
      <title>DVcon random thoughts - Multiple discovery!</title>
      <link>/posts/2022/12/dvcon-random-thoughts-multiple-discovery/</link>
      <pubDate>Fri, 09 Dec 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/12/dvcon-random-thoughts-multiple-discovery/</guid>
      <description>&lt;p&gt;Have you ever read a paper or while talking to someone, and you think this is a good idea. It&amp;rsquo;s really good that you had it before.&lt;/p&gt;&#xA;&lt;p&gt;During DVcon this year, I attended a lot of presentations and had great discussions with awesome people. It is really weird how we sometimes have the same idea at the same time. Like exactly the same idea!&lt;/p&gt;&#xA;&lt;p&gt;Apparently, This has a name &amp;ldquo;Multiple discovery&amp;rdquo;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python: bisect</title>
      <link>/posts/2022/11/python-bisect/</link>
      <pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/11/python-bisect/</guid>
      <description>&lt;p&gt;&lt;code&gt;bisect_left&lt;/code&gt; is documented by &lt;a href=&#34;https://docs.python.org/3/library/bisect.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;. Basically, it returns the index to of sorted list to keep the list sorted.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;bisect.bisect_left(a, x, lo=0, hi=len(a), *, key=None)&#xA;Locate the insertion point for x in a to maintain sorted order. The parameters lo and hi may be used to specify a subset of the list which should be considered; by default the entire list is used. If x is already present in a, the insertion point will be before (to the left of) any existing entries. The return value is suitable for use as the first parameter to list.insert() assuming that a is already sorted.&lt;/p&gt;</description>
    </item>
    <item>
      <title>force-riscv hello world</title>
      <link>/posts/2022/11/force-riscv-hello-world/</link>
      <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/11/force-riscv-hello-world/</guid>
      <description>&lt;p&gt;This post is &lt;a href=&#34;https://github.com/openhwgroup/force-riscv&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;force-riscv&lt;/a&gt; which is framework to generate random sequences of riscv instructions. I still need to dig deeper into the docs/code to understand the full feature list, but it seems very powerful with option to constraint the generation.&lt;/p&gt;&#xA;&lt;h1 id=&#34;building&#34;&gt;&#xA;  Building&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#building&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Building force-riscv as simple as calling make&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/openhwgroup/force-riscv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd force-riscv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source setenv.bash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;smoke-test&#34;&gt;&#xA;  Smoke test&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#smoke-test&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In &lt;code&gt;README.md&lt;/code&gt;, A smoke test is mentioned as first example to run&lt;/p&gt;</description>
    </item>
    <item>
      <title>Levenshtein Similarity Matrix and Affinity Propagation Clustering</title>
      <link>/posts/2022/11/levenshtein-similarity-matrix-and-affinity-propagation-clustering/</link>
      <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/11/levenshtein-similarity-matrix-and-affinity-propagation-clustering/</guid>
      <description>&lt;p&gt;This post is a breakdown of the code in &lt;a href=&#34;https://stats.stackexchange.com/questions/123060/clustering-a-long-list-of-strings-words-into-similarity-groups&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;, which uses Levenshtein and Affinity Propagation to cluster a string list.&lt;/p&gt;&#xA;&lt;p&gt;In a previous post, I wrote a simple Levenshtein implementation to calculate the similarity between strings. It turns out to be a good metric for clustering. Basically, Affinity Propagation and a distance similarity matrix are a match made in heaven.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;distance.levenshtein&lt;/code&gt; is called with each word in the wordlist to calculate the distance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Forget Schrodinger&#39;s cat, Let me tell you about Schrodinger&#39;s visa</title>
      <link>/posts/2022/11/forget-schrodingers-cat-let-me-tell-you-about-schrodingers-visa/</link>
      <pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/11/forget-schrodingers-cat-let-me-tell-you-about-schrodingers-visa/</guid>
      <description>&lt;p&gt;We all know about Schrodinger&amp;rsquo;s cat, Well, At least whatever I remember from that undergrad physics. It&amp;rsquo;s a thought experiment that goes as follows:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;He imagined a box containing a radioactive atom, a vial of poison and a cat. Governed by quantum rules, the radioactive atom can either decay or not at any given moment. There’s no telling when the moment will come, but when it does decay, it breaks the vial, releases the poison and kills the cat.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PyQt5 hello world</title>
      <link>/posts/2022/11/pyqt5-hello-world/</link>
      <pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/11/pyqt5-hello-world/</guid>
      <description>&lt;p&gt;GUI can be fun but choosing the right library for the job can be daunting task. I recently evaluated several libraries GTK,wxWidgets and other libraries. and finally settled on Qt. and PyQt5 is great because it is easy to integrate with python application.&lt;/p&gt;&#xA;&lt;p&gt;This is hello world and explanation to create and populate PyQt5 widgets.&lt;/p&gt;&#xA;&lt;p&gt;Starting with &lt;code&gt;QApplication&lt;/code&gt; instantiated from QtWidgets. The typical PyQt5 skelton uses and class from &lt;code&gt;QMainWindow&lt;/code&gt;. In this example, it&amp;rsquo;s called &lt;code&gt;MainWindow&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python: Higher order functions - reduce</title>
      <link>/posts/2022/11/python-higher-order-functions-reduce/</link>
      <pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/11/python-higher-order-functions-reduce/</guid>
      <description>&lt;p&gt;This post is about reduce. It&amp;rsquo;s higher order function part of &lt;code&gt;functool&lt;/code&gt; package.&lt;/p&gt;&#xA;&lt;p&gt;The documentation describes it as&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Apply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;combing lambda and reduce can be save a lot of time while processing bunch of lists. It recently saved me some time to and all expressions in list of objects. I guess it can be with list comprehension or something. who doesn&amp;rsquo;t love hight order functions! they just sound fancy.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using aircrack to get wifi password</title>
      <link>/posts/2022/11/using-aircrack-to-get-wifi-password/</link>
      <pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/11/using-aircrack-to-get-wifi-password/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s Thursday evening and I can&amp;rsquo;t think of something to do. So, decided to write about cracking my own wifi using airmon/aircrack. I had a README written long time ago, so i had to clean it up and publish.&lt;/p&gt;&#xA;&lt;p&gt;first, we need to know the network interface, lets call it intf. We need to switch the interface to monitoring mode (if hardware supports of course).&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo airmon-ng start intf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command will remove that interface and add another with adding &lt;code&gt;mon&lt;/code&gt; at the end.  The next step, is scanning the SSID around us and know the MAC and CH for that SSID&lt;/p&gt;</description>
    </item>
    <item>
      <title>Latex - The minimal paper abstract</title>
      <link>/posts/2022/11/latex-the-minimal-paper-abstract/</link>
      <pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/11/latex-the-minimal-paper-abstract/</guid>
      <description>&lt;p&gt;I recently submitted a paper abstract but the conference didn&amp;rsquo;t specify the format for the abstract. Obviously, I didn&amp;rsquo;t use word, This is minimal template for paper abstract i used instead.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\documentclass&lt;/span&gt;[a4paper]{article}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\usepackage&lt;/span&gt;{amsmath}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\usepackage&lt;/span&gt;{amsfonts}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\usepackage&lt;/span&gt;{amssymb}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\usepackage&lt;/span&gt;{graphicx}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\usepackage&lt;/span&gt;{float}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\usepackage&lt;/span&gt;{caption}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\usepackage&lt;/span&gt;{subcaption}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\usepackage&lt;/span&gt;{listings}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\usepackage&lt;/span&gt;{xcolor}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\usepackage&lt;/span&gt;[margin=0.5in]{geometry}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\usepackage&lt;/span&gt;{tikz}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\usepackage&lt;/span&gt;{pdfpages}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\begin&lt;/span&gt;{document}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\pagenumbering&lt;/span&gt;{arabic}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\Large&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\begin&lt;/span&gt;{center}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Title&lt;span style=&#34;color:#ff7b72&#34;&gt;\\&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\hspace{10pt}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;\large&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Author&lt;span style=&#34;color:#a5d6ff&#34;&gt;$&lt;/span&gt;^&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;\\&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\hspace{10pt}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;\small&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a5d6ff&#34;&gt;$&lt;/span&gt;^&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;$&lt;/span&gt;company&lt;span style=&#34;color:#ff7b72&#34;&gt;\\&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    email&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\end&lt;/span&gt;{center}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;%\hspace{10pt}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\normalsize&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\section&lt;/span&gt;{Related Work}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Test&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\end&lt;/span&gt;{document}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Python packages of the week: Jinja2 and pystache</title>
      <link>/posts/2022/11/python-packages-of-the-week-jinja2-and-pystache/</link>
      <pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/11/python-packages-of-the-week-jinja2-and-pystache/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s start with an important question: what is the plural of Hello world? Is it Hello worlds?&#xA;Anyway, I recently used pystache because I wanted something simpler than Jinja2. So, Thought it would be nice to compare small hello world for both engines.&lt;/p&gt;&#xA;&lt;h1 id=&#34;pystache&#34;&gt;&#xA;  pystache&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#pystache&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;pystche is very simple to use. Just &lt;code&gt;render&lt;/code&gt; and passing template and variable dict.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;pystache&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;template &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Hello World and {{ person }}&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;template_txt &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; pystache&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;render(template, {&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;person&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;foobar&amp;#39;&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(template_txt)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;jinja2&#34;&gt;&#xA;  Jinja2&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#jinja2&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Jinja2 is slightly more complicated even for text replacement. It gets even more complicated with template loaders.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb Internals - xunit Reporter</title>
      <link>/posts/2022/11/cocotb-internals-xunit-reporter/</link>
      <pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/11/cocotb-internals-xunit-reporter/</guid>
      <description>&lt;p&gt;cocotb generates &lt;code&gt;results.xml&lt;/code&gt; file which xunit format (XML). I didn&amp;rsquo;t look that long for standard xunit schema because it doesn&amp;rsquo;t seem to exist. So, I analysed the &lt;code&gt;xunit_reporter.py&lt;/code&gt; instead. Well, I can&amp;rsquo;t sleep anyway. so why not?!&lt;/p&gt;&#xA;&lt;p&gt;I have to start by saying &amp;ldquo;xml.. ugh!&amp;rdquo;&amp;hellip; writing the IPXACT parser made me hate xml forever.&lt;/p&gt;&#xA;&lt;p&gt;The xunit report from &lt;code&gt;simple_dff&lt;/code&gt; would look like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;testsuites &lt;span style=&#34;color:#79c0ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;results&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;testsuite &lt;span style=&#34;color:#79c0ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;all&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;package&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;all&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;property &lt;span style=&#34;color:#79c0ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;random_seed&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;1667509785&amp;#34;&lt;/span&gt; /&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;testcase &lt;span style=&#34;color:#79c0ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;dff_simple_test&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;classname&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;test_dff&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;~/examples/simple_dff/test_dff.py&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;lineno&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;20&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;0.11331820487976074&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;sim_time_ns&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;106000&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;ratio_time&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;935418.9833175886&amp;#34;&lt;/span&gt; /&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/testsuite&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/testsuites&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;the module uses the python standard xml to create tree and add nodes to it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb Internals - wavedrom dumper</title>
      <link>/posts/2022/11/cocotb-internals-wavedrom-dumper/</link>
      <pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/11/cocotb-internals-wavedrom-dumper/</guid>
      <description>&lt;p&gt;One of the things I love about reading open source is randomly finding unused features. There are many reasons a part of the code is not used, It could can experimental, untested or it is only there because the developer had too much fun writing it :) Anyway, It&amp;rsquo;s interesting when i find these bits..&lt;/p&gt;&#xA;&lt;p&gt;In cocotb,I found built-in utility to generate wavedrom. It&amp;rsquo;s defined in &lt;code&gt;cocotb/wavedrom.py&lt;/code&gt;. From comments, I modified &lt;code&gt;dff_simple_test&lt;/code&gt; to dump &lt;code&gt;dut.q&lt;/code&gt; and &lt;code&gt;dut.d&lt;/code&gt; sampled on &lt;code&gt;dut.clk&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The gamification of unfinished side projects</title>
      <link>/posts/2022/10/the-gamification-of-unfinished-side-projects/</link>
      <pubDate>Sun, 30 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/the-gamification-of-unfinished-side-projects/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/bojack.png&#34; alt=&#34;Example image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Probably, you are wondering what that title means and what Bojack Horseman is doing here. Actually, This started as a serious question.&lt;/p&gt;&#xA;&lt;p&gt;How to finish something when the reason to do that is elusive?&lt;/p&gt;&#xA;&lt;p&gt;The thing is I have this bad habit of starting things purely for intellectual curiosity,So, I ended up with hundreds of README, dozens of git repos, half-written paper abstracts and earmarked books lurking around for years. There is too much to read and learn with very little time to do it. Now, the problem how to finish all of these projects when there is no good reason to start them?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb Internals - python runner</title>
      <link>/posts/2022/10/cocotb-internals-python-runner/</link>
      <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/cocotb-internals-python-runner/</guid>
      <description>&lt;p&gt;In older post, I went through cocotb Makefile and i wished if there python runner. Well, I should have wished for something better because I found there is already a runner. I just didn&amp;rsquo;t see it :)&lt;/p&gt;&#xA;&lt;p&gt;The runner is called as follows to build and run test&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      runner &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; get_runner(sim)()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      runner&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;build(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          verilog_sources&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;verilog_sources, vhdl_sources&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;vhdl_sources, toplevel&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;dff&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      runner&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;test(toplevel&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;dff&amp;#34;&lt;/span&gt;, py_module&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;test_dff&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;build&#34;&gt;&#xA;  Build&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#build&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In &lt;code&gt;runner.py&lt;/code&gt;, &lt;code&gt;get_runner&lt;/code&gt; returns the runner depending on simulator string. In case of icarus, &lt;code&gt;Icarus&lt;/code&gt; is used&lt;/p&gt;</description>
    </item>
    <item>
      <title>verilator - Hello World and Beyond</title>
      <link>/posts/2022/10/verilator-hello-world-and-beyond/</link>
      <pubDate>Sun, 23 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/verilator-hello-world-and-beyond/</guid>
      <description>&lt;p&gt;verilator is, well, I will just paste the wiki one-liner here&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Verilator is a free and open-source software tool which converts Verilog to a cycle-accurate behavioral model in C++ or SystemC.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Similar to iverilog, It compiles verilog to a different language but verilator generates C++ not the iverilog-specific commands.&lt;/p&gt;&#xA;&lt;h1 id=&#34;installation&#34;&gt;&#xA;  Installation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#installation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/verilator/verilator&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;autoconf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./configure --prefix&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;pwd&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;/build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or we can use the pre-built packages. Whatever easier!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Longest common sequence</title>
      <link>/posts/2022/10/longest-common-sequence/</link>
      <pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/longest-common-sequence/</guid>
      <description>&lt;p&gt;In previous post, I wrote about Levenshtein distance which is a good distance metric for sequences with different length. This post is about Longest common sub sequence (LCS)&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;The thing about LCS is that the common subsequence is not consecutive positions within the sequences.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb Deepdive - Edge Trigger and cocotb trampoline</title>
      <link>/posts/2022/10/cocotb-deepdive-edge-trigger-and-cocotb-trampoline/</link>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/cocotb-deepdive-edge-trigger-and-cocotb-trampoline/</guid>
      <description>&lt;p&gt;I wrote a previous post about clock and Timer triggers in cocotb. Considering that all triggers yield to core scheduler, I thought to do another trigger (Posedge) and the trampoline.&lt;/p&gt;&#xA;&lt;h1 id=&#34;class-hierarchy&#34;&gt;&#xA;  Class hierarchy&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#class-hierarchy&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting  with &lt;code&gt;FallingEdge&lt;/code&gt; where it takes the signal handle, In this example, &lt;code&gt;dut.clk&lt;/code&gt; is passed to &lt;code&gt;FallingEdge&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;await&lt;/span&gt; FallingEdge(dut&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;clk)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;FallingEdge&lt;/code&gt; sets the edge type for generic &lt;code&gt;_EdgeBase&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;FallingEdge&lt;/span&gt;(_EdgeBase):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Fires on the falling edge of *signal*, on a transition from ``1`` to ``0``.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#79c0ff&#34;&gt;__slots__&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; ()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     _edge_type &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;_EdgeBase&lt;/code&gt; defines the &lt;code&gt;prime&lt;/code&gt; that registers &lt;code&gt;callback&lt;/code&gt; with the simulator.&lt;/p&gt;</description>
    </item>
    <item>
      <title>python asyncio - user-defined await-able object</title>
      <link>/posts/2022/10/python-asyncio-user-defined-await-able-object/</link>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/python-asyncio-user-defined-await-able-object/</guid>
      <description>&lt;p&gt;&lt;code&gt;__await__&lt;/code&gt; method defines the behavior of class with &lt;code&gt;await&lt;/code&gt; is called on class object.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The &lt;strong&gt;await&lt;/strong&gt;() magic method defines the behavior of an awaitable object. An awaitable object is used to implement asynchronous behavior in Python.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;__await__&lt;/code&gt; is not &lt;code&gt;async&lt;/code&gt; method but it returns closure &lt;code&gt;__await__&lt;/code&gt; from a closure method.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;asyncio&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;collections.abc&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; Awaitable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Trigger&lt;/span&gt;(Awaitable):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;__init__&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;__await__&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;c&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Do async stuff here&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; self&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; c()&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;__await__&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Edge&lt;/span&gt;(Trigger):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;await&lt;/span&gt; Edge()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;done&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;asyncio&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;run(main())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Cocotb - start vs start_soon and scheduler implementation</title>
      <link>/posts/2022/10/cocotb-start-vs-start_soon-and-scheduler-implementation/</link>
      <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/cocotb-start-vs-start_soon-and-scheduler-implementation/</guid>
      <description>&lt;p&gt;cocotb provides couple of routines to start concurrent coroutine. The implementation shows that &lt;code&gt;start&lt;/code&gt; calls &lt;code&gt;start_soon&lt;/code&gt; and yield for the forked process to start right now. That&amp;rsquo;s a big deal because &lt;code&gt;start_soon&lt;/code&gt; doesn&amp;rsquo;t star the coro until the parent coro yields control (ie await from something).&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;start_soon&lt;/span&gt;(coro: Union[Task, Coroutine]) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; Task:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    Schedule a coroutine to be run concurrently.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    Note that this is not an async function,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    and the new task will not execute until the calling task yields control.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    .. versionadded:: 1.6.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; scheduler&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;start_soon(coro)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;start&lt;/span&gt;(coro: Union[Task, Coroutine]) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; Task:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    Schedule a coroutine to be run concurrently, then yield control to allow pending tasks to execute.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    The calling task will resume execution before control is returned to the simulator.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    .. versionadded:: 1.6.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    task &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; scheduler&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;start_soon(coro)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;await&lt;/span&gt; cocotb&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;triggers&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;NullTrigger()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; task&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s jump into &lt;code&gt;start_soon&lt;/code&gt; into the scheduler&lt;/p&gt;</description>
    </item>
    <item>
      <title>elliptical curve crypto key exchange</title>
      <link>/posts/2022/10/elliptical-curve-crypto-key-exchange/</link>
      <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/elliptical-curve-crypto-key-exchange/</guid>
      <description>&lt;p&gt;In previous post, I wrote simple Diffie-Hellman key exchange algorithm, so I wanted to do elliptical curve key exchange as well. Again, The math is there in crypto book. but the algorithm is simple(strangely simple).&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/elliptical-curve-algo.png&#34; alt=&#34;Example image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;The trick is calculating &lt;code&gt;aP&lt;/code&gt; where P is point on the elliptical curve that satisfies &lt;code&gt;y^2 =  x^3+ a.x + y&lt;/code&gt;. The following algorithm calculates the addition (and incase 2 points are the same, it is doubling).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Portable Stimulus Standard for fun and profit</title>
      <link>/posts/2022/10/portable-stimulus-standard-for-fun-and-profit/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/portable-stimulus-standard-for-fun-and-profit/</guid>
      <description>&lt;p&gt;These are my notes while reading the Portable Stimulus Standard. I will keep updating on the go.&lt;/p&gt;&#xA;&lt;p&gt;The specs define PSS as:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The Portable Test and Stimulus Standard defines a specification for creating a single representation of&#xA;stimulus and test scenarios, usable by a variety of users across different levels of integration under different&#xA;configurations, enabling the generation of different implementations of a scenario that run on a variety of&#xA;execution platforms, including, but not necessarily limited to, simulation, emulation, FPGA prototyping, and&#xA;post-silicon. With this standard, users can specify a set of behaviors once, from which multiple&#xA;implementations may be derived.&lt;/p&gt;</description>
    </item>
    <item>
      <title>That time I found a typo in Portable Stimulus Standard</title>
      <link>/posts/2022/10/that-time-i-found-a-typo-in-portable-stimulus-standard/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/that-time-i-found-a-typo-in-portable-stimulus-standard/</guid>
      <description>&lt;p&gt;For few weeks, I was obsessed(for the lack of better word) with PSS and naturally I decided to write the BNF in LARK and I even stared on AST transformations. Anyway, while I am copying parts of BNF I noticed an error with &lt;code&gt;type_identifier&lt;/code&gt;. When i looked at the rule, I noticed it is saying &lt;code&gt;type_identifer_elem&lt;/code&gt;. See the issue there?&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type_identifier: &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;::&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;]&lt;/span&gt; type_identifer_elem &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;::&amp;#34;&lt;/span&gt; type_identifer_elem &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt;*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, i saw the glitch in the matrix, I have no idea how to report it. Back in the day, Systemverilog folks used Mantis to track standard issues, I wonder if Mantis is used with PSS as well.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The short(pun intended) story of ELF and to parse them</title>
      <link>/posts/2022/10/the-shortpun-intended-story-of-elf-and-to-parse-them/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/the-shortpun-intended-story-of-elf-and-to-parse-them/</guid>
      <description>&lt;p&gt;This post is about ELF(Executable and Linkable Format) python parser but I will briefly go through ELF specs first. Funny story, I once gave couple of presentations about DPI and I thought it&amp;rsquo;s funny to have few slides about GCC and ELF. I called it &amp;ldquo;The short sort of ELF&amp;rdquo; and as expected, the joke didn&amp;rsquo;t land. Good thing I am a not comedian :)&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-elf&#34;&gt;&#xA;  The ELF&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-elf&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;ELF is UNIX standard for executable format supported by toolchains(compilers/linkers) and loaders. The figure,is from the specs, shows the two different views of linking and execution(loader) of ELF.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PCIE TLP Header python serializer</title>
      <link>/posts/2022/10/pcie-tlp-header-python-serializer/</link>
      <pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/pcie-tlp-header-python-serializer/</guid>
      <description>&lt;p&gt;I always wanted to write scapy-like framework for PCIE TLP serialization and This is a quick and dirty prototype I wrote at 1 AM. So, Don&amp;rsquo;t judge me.&lt;/p&gt;&#xA;&lt;p&gt;The final output of the serializer would be as follows. basically, something similar to scapy or wireshark breakdown of header fields.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name:memwr32 size:96 &lt;span style=&#34;color:#a5d6ff&#34;&gt;0000000000000000000000100000000000000000100000001100000001111111100000000000000010010000000000000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name:hdr size:32 &lt;span style=&#34;color:#a5d6ff&#34;&gt;000000000000000000000010000000000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name:RESERVED size:1 &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name:FMT size:2 &lt;span style=&#34;color:#a5d6ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name:TYPE size:5 &lt;span style=&#34;color:#a5d6ff&#34;&gt;00000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name:RESERVED size:1 &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name:TC size:3 &lt;span style=&#34;color:#a5d6ff&#34;&gt;000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name:RESERVED size:4 &lt;span style=&#34;color:#a5d6ff&#34;&gt;0000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name:TD size:1 &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name:EP size:1 &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name:ATTR size:2 &lt;span style=&#34;color:#a5d6ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name:AT size:2 &lt;span style=&#34;color:#a5d6ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name:LENGTH size:10 &lt;span style=&#34;color:#a5d6ff&#34;&gt;10000000000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name:requestID size:16 &lt;span style=&#34;color:#a5d6ff&#34;&gt;0000000100000001&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name:BUS size:8 &lt;span style=&#34;color:#a5d6ff&#34;&gt;00000001&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name:DEVICE size:4 &lt;span style=&#34;color:#a5d6ff&#34;&gt;0000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name:FUNCTION size:4 &lt;span style=&#34;color:#a5d6ff&#34;&gt;0001&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name:TAG size:8 &lt;span style=&#34;color:#a5d6ff&#34;&gt;10000000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name:LASTDWBE size:4 &lt;span style=&#34;color:#a5d6ff&#34;&gt;1111&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name:STDWBE size:4 &lt;span style=&#34;color:#a5d6ff&#34;&gt;1111&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name:ADDR size:32 &lt;span style=&#34;color:#a5d6ff&#34;&gt;00000000000000010010000000000000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The PCIE TLP (Tranaction Layer Packet) header depends on type of transaction: Memory, I/O, Configuration, and Messages. Also, there is routing type which depends on type of transaction:&lt;/p&gt;</description>
    </item>
    <item>
      <title>AIG - And Inverter Graph</title>
      <link>/posts/2022/10/aig-and-inverter-graph/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/aig-and-inverter-graph/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;An And-Inverter Graph (AIG) is a directed, acyclic graph that represents a structural implementation of the logical functionality of a circuit or network. An AIG consists of two-input nodes representing logical conjunction, terminal nodes labeled with variable names, and edges optionally containing markers indicating logical negation. This representation of a logic function is rarely structurally efficient for large circuits but is an efficient representation for manipulation of Boolean functions. Typically, the abstract graph is represented as a data structure in software.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The diffie hellman Key Exchange</title>
      <link>/posts/2022/10/the-diffie-hellman-key-exchange/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/the-diffie-hellman-key-exchange/</guid>
      <description>&lt;p&gt;This post is about Diffie-Hellman exchange key protocol to be used for symmetric crypto protocol like AES. From Wiki:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Diffie–Hellman key exchange[nb 1] is a method of securely exchanging cryptographic keys over a public channel and was one of the first public-key protocols as conceived by Ralph Merkle and named after Whitfield Diffie and Martin Hellman.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Same as RSA, i am not going to go through the math, but the algorithm defines how Alice and Bob create the their keys and eventually create the common key.&#xA;&lt;img src=&#34;/dh.png&#34; alt=&#34;Example image&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wavedrom to SVA generator</title>
      <link>/posts/2022/10/wavedrom-to-sva-generator/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/wavedrom-to-sva-generator/</guid>
      <description>&lt;p&gt;WaveDrom is really great tool to generate timing diagram. It provide nice features to annotate the diagrams with arrows to link between edges. So, it was fun to invent simple convention using WaveDrom to generate simple SVA expressions.&lt;/p&gt;&#xA;&lt;p&gt;I thought to start with 2 assertions:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;-~&amp;gt;&lt;/code&gt; Horizontal arrow between nodes&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-|&amp;gt;&lt;/code&gt; Vertical arrow between nodes&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The first step is defining the nodes to anchor the arrows(Horizontal and  Vertical).&lt;/p&gt;&#xA;&lt;p&gt;The horizontal specifies &lt;code&gt;delayed&lt;/code&gt; between the events.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The slowest RSA implementation</title>
      <link>/posts/2022/09/the-slowest-rsa-implementation/</link>
      <pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/09/the-slowest-rsa-implementation/</guid>
      <description>&lt;p&gt;This post is about the  slowest and worst-ish implementation of RSA, RSA is an important public key encryption algorithm. From wiki:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;RSA (Rivest–Shamir–Adleman) is a public-key cryptosystem that is widely used for secure data transmission. It is also one of the oldest. The acronym &amp;ldquo;RSA&amp;rdquo; comes from the surnames of Ron Rivest, Adi Shamir and Leonard Adleman, who publicly described the algorithm in 1977&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;The math behind RSA requires more mental calories than i can afford on Saturday morning. Anyway, The algorithm is simple (simple-ish). These are steps to calculate integer public and private keys&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - objections</title>
      <link>/posts/2022/09/uvm-internals-objections/</link>
      <pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/09/uvm-internals-objections/</guid>
      <description>&lt;p&gt;This post is a deep dive into UVM objections implementation. Objections are a UVM mechanism to control test shutdown (or stopping shutdown really). It basically keeps things running until all important things stop running (i.e., objections are dropped).&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;raise_objection&lt;/code&gt; and &lt;code&gt;drop_objection&lt;/code&gt; are used at the start and end of run_phase as follows&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;55&lt;/span&gt; class test extends test_base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;56&lt;/span&gt;    &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_component_utils&lt;/span&gt;(test)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;61&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;62&lt;/span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;task&lt;/span&gt; run_phase(uvm_phase phase);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;65&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;66&lt;/span&gt;       phase.raise_objection(this);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;87&lt;/span&gt;       phase.drop_objection(this);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;88&lt;/span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;endtask&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;RANT: Before I started this, it seemed simple enough, but it turned out to be more complicated than I thought. Actually, this is my third time trying to write this.&lt;/p&gt;</description>
    </item>
    <item>
      <title>python asyncio - not-so-deep dive into asyncio and cpython</title>
      <link>/posts/2022/09/python-asyncio-not-so-deep-dive-into-asyncio-and-cpython/</link>
      <pubDate>Fri, 23 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/09/python-asyncio-not-so-deep-dive-into-asyncio-and-cpython/</guid>
      <description>&lt;p&gt;This post is about python asyncio. asyncio is python asynchronous implementation providing event loop functionality. From &amp;ldquo;event loop&amp;rdquo; wiki:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;In computer science, the event loop is a programming construct or design pattern that waits for and dispatches events or messages in a program. The event loop works by making a request to some internal or external &amp;ldquo;event provider&amp;rdquo; (that generally blocks the request until an event has arrived), then calls the relevant event handler (&amp;ldquo;dispatches the event&amp;rdquo;). The event loop is also sometimes referred to as the message dispatcher, message loop, message pump, or run loop.&lt;/p&gt;</description>
    </item>
    <item>
      <title>10 years - Now what?</title>
      <link>/posts/2022/09/10-years-now-what/</link>
      <pubDate>Sat, 17 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/09/10-years-now-what/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/now_what.png&#34; alt=&#34;Example image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;2 AM Saturday 17 Sep 2022&#xA;Cork City&lt;/p&gt;&#xA;&lt;p&gt;This might be the bad pizza I had earlier talking (BOOM Jerry Maguire reference!),but This year marks ten years since I graduated and I find myself thinking about this question, Should i retire, move to Peru, change my name to Javier, grow a ponytail, start Alpaca farm and never touch a computer never again?  Probably Not. I could pull off a ponytail though.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb Deepdive - Makefiles</title>
      <link>/posts/2022/09/cocotb-deepdive-makefiles/</link>
      <pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/09/cocotb-deepdive-makefiles/</guid>
      <description>&lt;p&gt;This post is about the Makefile shipped with cocotb. I will trace Makefiles targets for iverilog but most of the target are generic.&lt;/p&gt;&#xA;&lt;p&gt;Startin with final outupt with &amp;ldquo;make -n&amp;rdquo; when running one of the examples &lt;code&gt;examples/adder/tests/&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd cocotb/examples/adder/tests&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#79c0ff&#34;&gt;PYTHONPATH&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$PWD&lt;/span&gt;/../model:&lt;span style=&#34;color:#79c0ff&#34;&gt;$PYTHONPATH&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;+timescale+1ns/1ps&amp;#34;&lt;/span&gt; &amp;gt; sim_build/cmds.f&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iverilog -o sim_build/sim.vvp -D &lt;span style=&#34;color:#79c0ff&#34;&gt;COCOTB_SIM&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt; -s adder -f sim_build/cmds.f -g2012   ../hdl/adder.sv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;MODULE&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;test_adder &lt;span style=&#34;color:#79c0ff&#34;&gt;TESTCASE&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;TOPLEVEL&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;adder &lt;span style=&#34;color:#79c0ff&#34;&gt;TOPLEVEL_LANG&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;verilog       vvp -M ../../../.venv/lib/python3.8/site-packages/cocotb/libs -m libcocotbvpi_icarus   sim_build/sim.vvp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, How do we get here? Starting with  &lt;code&gt;examples/adder/tests/Makefile&lt;/code&gt;, where &lt;code&gt;Makefile.sim&lt;/code&gt; is included.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Recruiting - My 2cents </title>
      <link>/posts/2022/09/recruiting-my-2cents/</link>
      <pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/09/recruiting-my-2cents/</guid>
      <description>&lt;p&gt;I have been seeing a lot hate towards recruiters these days and i can&amp;rsquo;t really understand why. really Why?&lt;/p&gt;&#xA;&lt;p&gt;The more I think about it, recruiting is a hard job. I know it may sound simplistic(and I may be totally wrong here), It is a sales job but it is about selling the idea of candidate to a company and selling the idea of company to a candidate. It is about finding the perfect person for the perfect job at the perfect time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb Deepdive - Clock and Timer Trigger</title>
      <link>/posts/2022/09/cocotb-deepdive-clock-and-timer-trigger/</link>
      <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/09/cocotb-deepdive-clock-and-timer-trigger/</guid>
      <description>&lt;p&gt;cocob provides a periodic clock class &lt;code&gt;Clock&lt;/code&gt; which depends on &lt;code&gt;Timer&lt;/code&gt; trigger. I will start with an examples of &lt;code&gt;Clock&lt;/code&gt; usage.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clock &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; Clock(dut&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;clk, &lt;span style=&#34;color:#a5d6ff&#34;&gt;10&lt;/span&gt;, units&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;us&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cocotb&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;start_soon(clock&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;start())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note That &lt;code&gt;start_soon&lt;/code&gt; is just starting cocotb coroutine after the current routines yields. Any let&amp;rsquo;s focus on &lt;code&gt;Clock&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;In &lt;code&gt;Clock&lt;/code&gt;, The initialization &lt;code&gt;__init__&lt;/code&gt; sets some local vars (most importantly period and half_period)&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;118&lt;/span&gt;         BaseClock&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;__init__&lt;/span&gt;(self, signal)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;126&lt;/span&gt;         self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;period &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; get_sim_steps(period, units)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;127&lt;/span&gt;         self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;half_period &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; get_sim_steps(period &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;2.0&lt;/span&gt;, units)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;128&lt;/span&gt;         self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;frequency &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;1.0&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;/&lt;/span&gt; get_time_from_sim_steps(self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;period, units&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;us&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;130&lt;/span&gt;         self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;signal &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; signal&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Side note, &lt;code&gt;get_sim_steps&lt;/code&gt; calculates steps from real time passed to &lt;code&gt;Clock&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solving Magic Square using Systemverilog Constraints</title>
      <link>/posts/2022/09/solving-magic-square-using-systemverilog-constraints/</link>
      <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/09/solving-magic-square-using-systemverilog-constraints/</guid>
      <description>&lt;p&gt;This is probably the last post in this series, at least until i find an interesting problem.&lt;/p&gt;&#xA;&lt;p&gt;Magic square is an interesting one problem indeed. From &lt;a href=&#34;https://en.wikipedia.org/wiki/Magic_square&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;In recreational mathematics, a square array of numbers, usually positive integers, is called a magic square if the sums of the numbers in each row, each column, and both main diagonals are the same&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/magic-square.png&#34; alt=&#34;Example image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s interesting because constraints span across rows, columns and diagonals. So, I used the same technique as in the no-three-line problem but extending to diagonals(positive and negative) as well.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Commentary on Jerry Maguire mission statement</title>
      <link>/posts/2022/09/commentary-on-jerry-maguire-mission-statement/</link>
      <pubDate>Mon, 05 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/09/commentary-on-jerry-maguire-mission-statement/</guid>
      <description>&lt;p&gt;Jerry Maguire is one of my all-time favourite movies. I find the mission statement Jerry wrote in his Miami hotel room the most interesting part. The idea of having a moment of clarity (breakhthrough not a breakdown) is life-changing. He (i know Jerry is not real :) ) wrote a genius document that applies to any profession really not just sports agents.&lt;/p&gt;&#xA;&lt;p&gt;Cameron Crowe released the full mission statement on the 20th anniversary at &lt;a href=&#34;https://www.theuncool.com/2016/04/25/jerry-maguire-mission-statement/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;. Jerry reads parts of it in the movie but when I read the whole thing, I couldn&amp;rsquo;t believe how it spoke to me.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux tap interface - Hello World</title>
      <link>/posts/2022/09/linux-tap-interface-hello-world/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/09/linux-tap-interface-hello-world/</guid>
      <description>&lt;p&gt;tap network interface is a way to forward data layer packets (ethernet) to user space. it is very similar to tun(actually they share command and /dev). note that run works on network layer (forwards IP packets to user space).&lt;/p&gt;&#xA;&lt;p&gt;We will use 3 shells in this examples&lt;/p&gt;&#xA;&lt;h1 id=&#34;shell-1&#34;&gt;&#xA;  Shell 1&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#shell-1&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Create interface and start a ping&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ip tuntap add mode tap dev tap0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ip addr add 10.0.3.0/24 dev tap0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ip link set dev tap0 up&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip route get 10.0.3.50&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ping 10.0.3.30&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;shell-2&#34;&gt;&#xA;  Shell 2&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#shell-2&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Start tcp capture.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solving No-three-in-line puzzle using SV constraints</title>
      <link>/posts/2022/09/solving-no-three-in-line-puzzle-using-sv-constraints/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/09/solving-no-three-in-line-puzzle-using-sv-constraints/</guid>
      <description>&lt;p&gt;Continuing the series on solving puzzles using SV constraints, This post is about no-three-in-line puzzle. From Wiki,&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The no-three-in-line problem in discrete geometry asks how many points can be placed in the NxN grid so that no three points lie on the same line.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;It&amp;rsquo;s nice problem because it&amp;rsquo;s more complicated than n-queen. Why more complicated? mainly because we need to include more than just 2 cells in the constraints. Let&amp;rsquo;s start with the easy ones first.&lt;/p&gt;</description>
    </item>
    <item>
      <title>systemd service - hello world</title>
      <link>/posts/2022/09/systemd-service-hello-world/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/09/systemd-service-hello-world/</guid>
      <description>&lt;p&gt;In previous posts, I found a workaround for the iwlwifi crashing driver. In this post, I wrote small script to detect the crash and apply the workaround. Also, I installed systemd service to run the script on boot so i don&amp;rsquo;t have to.&lt;/p&gt;&#xA;&lt;p&gt;Starting with the script. It&amp;rsquo;s basically while(1) to monitor the crash&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;found&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;$found&lt;/span&gt; -eq &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rm -f /tmp/d.log&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dmesg &amp;gt; /tmp/d.log&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt; tail -n &lt;span style=&#34;color:#a5d6ff&#34;&gt;5&lt;/span&gt; /tmp/d.log |grep -q &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Failed to wake NIC for hcmd&amp;#34;&lt;/span&gt; ; &lt;span style=&#34;color:#ff7b72&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        echo &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Fixing iwlwifi&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        echo &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &amp;gt; /sys/bus/pci/devices/0000:03:00.0/remove&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        echo &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &amp;gt; /sys/bus/pci/rescan&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sleep &lt;span style=&#34;color:#a5d6ff&#34;&gt;5&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;done&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The service itself is very simple, just &lt;code&gt;ExecStart&lt;/code&gt; to call the script.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wireshark protocol dissector</title>
      <link>/posts/2022/09/wireshark-protocol-dissector/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/09/wireshark-protocol-dissector/</guid>
      <description>&lt;p&gt;Wireshark is popular protocol analyzer used for network or other packet based protocols. It uses &lt;code&gt;dissectors&lt;/code&gt; for each protocol. The protocols are builtin but wireshark provides lua interface to define and register new dissectors.&lt;/p&gt;&#xA;&lt;h1 id=&#34;generating-pcap-with-scapy&#34;&gt;&#xA;  Generating pcap with scapy&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#generating-pcap-with-scapy&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I am using scapy to generate pcap for made-up protocol with two fields &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt;. In this example, I am generating 2 packets in pcap.&lt;/p&gt;</description>
    </item>
    <item>
      <title>iwlwifi driver crash - The problem and workaround</title>
      <link>/posts/2022/08/iwlwifi-driver-crash-the-problem-and-workaround/</link>
      <pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/08/iwlwifi-driver-crash-the-problem-and-workaround/</guid>
      <description>&lt;p&gt;iwlwifi has been crashing a lot on me recently and it is driving me crazy because the only way to fix it is rebooting. The errors indicate that crash happens while NIC is waking up. I am currently using 5.4 kernel and i will see if updating the new version fixes it. At this point, I managed to produce the crash and test a workaround without rebooting.&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-problem&#34;&gt;&#xA;  The problem&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-problem&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with  dmesg errors&lt;/p&gt;</description>
    </item>
    <item>
      <title>PCIe SRIOV linux initialization</title>
      <link>/posts/2022/08/pcie-sriov-linux-initialization/</link>
      <pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/08/pcie-sriov-linux-initialization/</guid>
      <description>&lt;p&gt;single root input/output virtualization (SR-IOV) is PCIe specifications that provide virtual function (in this context, the usual PCIe function would be physical function). virtual function is used VM for better performance. It allows flow the data like physical function with limited capabilities.&lt;/p&gt;&#xA;&lt;h1 id=&#34;finding-sriov-capabilities-space&#34;&gt;&#xA;  Finding SRIOV capabilities space&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#finding-sriov-capabilities-space&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;897&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;pci_iov_init&lt;/span&gt;(&lt;span style=&#34;color:#ff7b72&#34;&gt;struct&lt;/span&gt; pci_dev &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;dev)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;898&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;899&lt;/span&gt;     &lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; pos;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;900&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;901&lt;/span&gt;     &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;pci_is_pcie&lt;/span&gt;(dev))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;902&lt;/span&gt;         &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&lt;/span&gt;ENODEV;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;903&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;904&lt;/span&gt;     pos &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;pci_find_ext_capability&lt;/span&gt;(dev, PCI_EXT_CAP_ID_SRIOV);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;905&lt;/span&gt;     &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt; (pos)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;906&lt;/span&gt;         &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;sriov_init&lt;/span&gt;(dev, pos);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;907&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;908&lt;/span&gt;     &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&lt;/span&gt;ENODEV;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;909&lt;/span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;pos&lt;/code&gt; is found by &lt;code&gt;pci_find_ext_capability&lt;/code&gt; which calls &lt;code&gt;pci_find_next_ext_capability&lt;/code&gt; to get the extended configuration capabilities with SRIOV ID. Note the comare at line 566.&lt;/p&gt;</description>
    </item>
    <item>
      <title>iwlwifi - Not The Hitchhiker&#39;s guide to intel wireless driver</title>
      <link>/posts/2022/08/iwlwifi-not-the-hitchhikers-guide-to-intel-wireless-driver/</link>
      <pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/08/iwlwifi-not-the-hitchhikers-guide-to-intel-wireless-driver/</guid>
      <description>&lt;p&gt;This is the second post in a series about &lt;code&gt;iwlwifi&lt;/code&gt; the linux intel wireless controller driver. Unlucky(or luck) me, this driver crashes randomly on my machine. I decided to debug the crash before giving up and bump up kernel and modules version. &lt;code&gt;iwlwifi&lt;/code&gt; is basically PCIe driver but it also interacts with network stack and network configuration stack.&lt;/p&gt;&#xA;&lt;h1 id=&#34;pcie-driver&#34;&gt;&#xA;  PCIe driver&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#pcie-driver&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with PCIe side, Drivers have to register with the PCIe subsystem and the PCIe core will iterate devices and match drivers to the devices.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A 5 minute tour of my PCI wireless controller sysfs</title>
      <link>/posts/2022/08/a-5-minute-tour-of-my-pci-wireless-controller-sysfs/</link>
      <pubDate>Tue, 23 Aug 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/08/a-5-minute-tour-of-my-pci-wireless-controller-sysfs/</guid>
      <description>&lt;p&gt;It started with me trying to debug &lt;code&gt;iwlwifi&lt;/code&gt; kernel panic which brings down the network interface. So, I thought to write some stuff about the controller itself.&lt;/p&gt;&#xA;&lt;p&gt;Starting with &lt;code&gt;lspci&lt;/code&gt; output which basically reads sysfs (that would be /sys, more about sysfs in another post).&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ lspci -s 0000:03:00.0  -v&#xA;03:00.0 Network controller: Intel Corporation Dual Band Wireless-AC 3165 Plus Bluetooth (rev 99)&#xA;&#x9;Subsystem: Intel Corporation Dual Band Wireless-AC 3165 Plus Bluetooth&#xA;&#x9;Flags: bus master, fast devsel, latency 0, IRQ 125&#xA;&#x9;Memory at 91000000 (64-bit, non-prefetchable) [size=8K]&#xA;&#x9;Capabilities: &amp;lt;access denied&amp;gt;&#xA;&#x9;Kernel driver in use: iwlwifi&#xA;&#x9;Kernel modules: iwlwifi&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Well, I can see all the information at &lt;code&gt;/sys/bus/pci/devices/0000:03:00.0&lt;/code&gt; anyway, but lspci is nicer to look at. So, what is &amp;lsquo;0000:03:00.0&amp;rsquo;?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python package of the week: vcdvcd</title>
      <link>/posts/2022/08/python-package-of-the-week-vcdvcd/</link>
      <pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/08/python-package-of-the-week-vcdvcd/</guid>
      <description>&lt;p&gt;This post is about VCD parsing library called &lt;a href=&#34;https://github.com/ZihaoZhao/vcdvcd&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vcdvcd&lt;/a&gt;. It&amp;rsquo;s great way to load up vcd and do some processing instead of losing my mind looking at gtkwave. Honestly, The API documentation is not that great but there is an &lt;code&gt;examples.py&lt;/code&gt; which helped a little.&lt;/p&gt;&#xA;&lt;p&gt;So, I wrote this example which should be good enough to get started. It iterates the design hierarchy and gets &lt;code&gt;tv&lt;/code&gt; (time and value) tuples for each signal. After that i created my own wrapper with (&lt;code&gt;nextedge&lt;/code&gt;, &lt;code&gt;prevedge&lt;/code&gt;, &lt;code&gt;posedge&lt;/code&gt;, &lt;code&gt;negedge&lt;/code&gt;) but that&amp;rsquo;s for anther post.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python classmethod vs static method</title>
      <link>/posts/2022/08/python-classmethod-vs-static-method/</link>
      <pubDate>Fri, 12 Aug 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/08/python-classmethod-vs-static-method/</guid>
      <description>&lt;p&gt;classmethod and staticmethod are very similar. both are called by class but classmethod get passed class object as first argument(convention is to call it  &lt;code&gt;cls&lt;/code&gt;)&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;c&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;@staticmethod&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;stmethod&lt;/span&gt;(arg):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(arg)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;@classmethod&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;clsmethod&lt;/span&gt;(cls, args):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(cls, args)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;stmethod(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;static method&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;clsmethod(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;class method&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Python Ellipsis</title>
      <link>/posts/2022/08/python-ellipsis/</link>
      <pubDate>Fri, 12 Aug 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/08/python-ellipsis/</guid>
      <description>&lt;p&gt;I was today years old when i  knew ellipsis can be used as empty body. handy if you want to define something but not sure what to write there. It&amp;rsquo;s basically same as &lt;code&gt;pass&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;s&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>POSIX C client and server examples</title>
      <link>/posts/2022/08/posix-c-client-and-server-examples/</link>
      <pubDate>Mon, 08 Aug 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/08/posix-c-client-and-server-examples/</guid>
      <description>&lt;p&gt;Funny story, 7 years ago, I accidentally built RCE(remove code execution protocol) between systemverilog and Matlab. The project died long time ago but still one the most fun project i have worked on. At the time, I started with a simple TCP client/server implementation and build binary parsers above it. Anyway,This post is about that simple TCP client/server sockets.&lt;/p&gt;&#xA;&lt;p&gt;Posix sockets is the de-facto standard for network stack implementation. It evolved from BSD sockets (more details in &lt;a href=&#34;https://en.wikipedia.org/wiki/Berkeley_sockets&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt;). and it&amp;rsquo;s supported with modern operating systems(windows API has it&amp;rsquo;s quirks, DAMN YOU MS)&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenGL Hello world</title>
      <link>/posts/2022/07/opengl-hello-world/</link>
      <pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/07/opengl-hello-world/</guid>
      <description>&lt;p&gt;I have been playing with some opengl examples from the graphics bible &lt;code&gt;Computer graphics Principles and Practice&lt;/code&gt;. The first step is getting hello world to work.&lt;/p&gt;&#xA;&lt;h1 id=&#34;hello-world&#34;&gt;&#xA;  Hello World&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#hello-world&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This example shows polygon by defining 4 points.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;GL/glut.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;displayMe&lt;/span&gt;(&lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glClear(GL_COLOR_BUFFER_BIT);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glBegin(GL_POLYGON);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glVertex3f(&lt;span style=&#34;color:#a5d6ff&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;0.0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glVertex3f(&lt;span style=&#34;color:#a5d6ff&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;0.0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glVertex3f(&lt;span style=&#34;color:#a5d6ff&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;0.0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glVertex3f(&lt;span style=&#34;color:#a5d6ff&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;0.0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glEnd();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glFlush();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#ff7b72&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;**&lt;/span&gt;argv)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glutInit(&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;argc, argv);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glutInitDisplayMode(GLUT_SINGLE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glutInitWindowSize(&lt;span style=&#34;color:#a5d6ff&#34;&gt;300&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;300&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glutInitWindowPosition(&lt;span style=&#34;color:#a5d6ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;100&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glutCreateWindow(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Hello world&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glutDisplayFunc(displayMe);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glutMainLoop();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The generated graphics would be&lt;/p&gt;</description>
    </item>
    <item>
      <title>Latex - Adding bib ref files</title>
      <link>/posts/2022/06/latex-adding-bib-ref-files/</link>
      <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/06/latex-adding-bib-ref-files/</guid>
      <description>&lt;h1 id=&#34;adding-references-in-latex&#34;&gt;&#xA;  Adding references in Latex&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#adding-references-in-latex&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\begin&lt;/span&gt;{filecontents}{references.bib}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@ARTICLE{KG:2022,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  author        = {A1},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  title         = {FDA},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  booktitle     = {conf},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  year          = 2021&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\end&lt;/span&gt;{filecontents}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then add &lt;code&gt;bib&lt;/code&gt; file&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\bibliographystyle&lt;/span&gt;{ieeetr}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\bibliography&lt;/span&gt;{references}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\end&lt;/span&gt;{document}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, pdflatex needs to run 3 times to generates &lt;code&gt;references.bib&lt;/code&gt; first&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;pdflatex document.tex&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;bibtex document.aux&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;pdflatex document.tex&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;pdflatex document.tex&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;count-number-of-words-in-latex-document&#34;&gt;&#xA;  Count number of words in latex document&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#count-number-of-words-in-latex-document&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;untex file.tex | wc -w&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Latex - The minimal Resume</title>
      <link>/posts/2022/06/latex-the-minimal-resume/</link>
      <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/06/latex-the-minimal-resume/</guid>
      <description>&lt;p&gt;I have been using Latex to write documents including my resume for few years now. In this post, I am going through a minimal template i found online years ago and it has been working great for me.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\documentclass&lt;/span&gt;[margin, 10pt]{res}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\usepackage&lt;/span&gt;{helvet}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\setlength&lt;/span&gt;{&lt;span style=&#34;color:#ff7b72&#34;&gt;\textwidth&lt;/span&gt;}{5.1in}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\pagestyle&lt;/span&gt;{plain}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\usepackage&lt;/span&gt;{hyperref}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\begin&lt;/span&gt;{document}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\moveleft&lt;/span&gt;.5&lt;span style=&#34;color:#ff7b72&#34;&gt;\hoffset\centerline&lt;/span&gt;{&lt;span style=&#34;color:#ff7b72&#34;&gt;\large\bf&lt;/span&gt; Name}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\moveleft&lt;/span&gt;.5&lt;span style=&#34;color:#ff7b72&#34;&gt;\hoffset\centerline&lt;/span&gt;{Email: EMAIL}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\moveleft&lt;/span&gt;.5&lt;span style=&#34;color:#ff7b72&#34;&gt;\hoffset\centerline&lt;/span&gt;{Linkedin: {LINK}}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\moveleft&lt;/span&gt;.5&lt;span style=&#34;color:#ff7b72&#34;&gt;\hoffset\centerline&lt;/span&gt;{Phone: }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\moveleft&lt;/span&gt;.5&lt;span style=&#34;color:#ff7b72&#34;&gt;\hoffset\centerline&lt;/span&gt;{Address: }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\begin&lt;/span&gt;{resume}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;\section&lt;/span&gt;{ABOUT}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;\section&lt;/span&gt;{EDUCATION}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;\textbf&lt;/span&gt;{DEGREE}  &lt;span style=&#34;color:#ff7b72&#34;&gt;\hfill&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;\textbf&lt;/span&gt;{DATE}&lt;span style=&#34;color:#ff7b72&#34;&gt;\\&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UNIVERSITY &lt;span style=&#34;color:#ff7b72&#34;&gt;\\&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;\section&lt;/span&gt;{EXPERIENCE}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&lt;span style=&#34;color:#ff7b72&#34;&gt;\sl&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;\textbf&lt;/span&gt;{POSITION}} &lt;span style=&#34;color:#ff7b72&#34;&gt;\hfill&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;\textbf&lt;/span&gt;{DATE} &lt;span style=&#34;color:#ff7b72&#34;&gt;\\&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    LOCATION&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;\begin&lt;/span&gt;{itemize} &lt;span style=&#34;color:#ff7b72&#34;&gt;\itemsep&lt;/span&gt; -2pt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;\item&lt;/span&gt; POINT ONE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;\end&lt;/span&gt;{itemize}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;\section&lt;/span&gt;{TECHNICAL &lt;span style=&#34;color:#ff7b72&#34;&gt;\\&lt;/span&gt; SKILLS}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&lt;span style=&#34;color:#ff7b72&#34;&gt;\sl&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;\textbf&lt;/span&gt;{SKILL1}}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SKILL1 DETAILS &lt;span style=&#34;color:#ff7b72&#34;&gt;\\&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;\section&lt;/span&gt;{PERSONAL &lt;span style=&#34;color:#ff7b72&#34;&gt;\\&lt;/span&gt; SKILLS}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    excessive blogger&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\end&lt;/span&gt;{resume}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;\end&lt;/span&gt;{document}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;res.cls&lt;/code&gt; can be downloaded from &lt;a href=&#34;/res.cls&#34; &gt;link&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>RGB to YCbCr and DCT/IDCT effects</title>
      <link>/posts/2022/06/rgb-to-ycbcr-and-dct/idct-effects/</link>
      <pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/06/rgb-to-ycbcr-and-dct/idct-effects/</guid>
      <description>&lt;p&gt;I started this post with a attempt to show the difference between RGB and YCbCr. but that was easy enough so i added one round of dct/idct to see the effects on grey scale(if any).&lt;/p&gt;&#xA;&lt;h1 id=&#34;&#34;&gt;&#xA;  &#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The main difference between RGB and YCbCr is that instead using Red/green/blue, YCbCr is using gray(luminance) and Red/Blue differences. It&amp;rsquo;s mainly due to the fact human eye detects gray scale better than color scale which allows more aggressive compression for color components.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Arithmetic Coding</title>
      <link>/posts/2022/06/arithmetic-coding/</link>
      <pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/06/arithmetic-coding/</guid>
      <description>&lt;p&gt;In previous post, I wrote quick post about Huffman Coding. Apparently, Arithmetic Coding is replaces Huffman. It&amp;rsquo;s optional in MPEG and it&amp;rsquo;s part VP9 specs.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Arithmetic_coding&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt; describes it as&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Arithmetic coding (AC) is a form of entropy encoding used in lossless data compression.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;The encoding works by sending a value in range of probability &lt;code&gt;[0,1]&lt;/code&gt;(as fixed-point). Basically, It is decision tree on steroids. I really like the diagram on the wiki.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Discrete Fourier Transform - DFT</title>
      <link>/posts/2022/06/discrete-fourier-transform-dft/</link>
      <pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/06/discrete-fourier-transform-dft/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DFT&lt;/a&gt; is one of most important transformation ever invented.It&amp;rsquo;s used in almost every application(compression, filters, etc). From wiki,&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Basically, FT represents sum of basis frequencies (2&lt;em&gt;pi&lt;/em&gt;k/N) scaled with coefficients. DFT calculates these coefficients using the following equation&lt;/p&gt;</description>
    </item>
    <item>
      <title>Discrete Cosine Transform - DCT</title>
      <link>/posts/2022/06/discrete-cosine-transform-dct/</link>
      <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/06/discrete-cosine-transform-dct/</guid>
      <description>&lt;p&gt;DCT is frequency domain transform with cosine frequencies. &lt;a href=&#34;https://en.wikipedia.org/wiki/Discrete_cosine_transform&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wiki&lt;/a&gt; says it all:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A discrete cosine transform (DCT) expresses a finite sequence of data points in terms of a sum of cosine functions oscillating at different frequencies&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;The equation to calculate &lt;code&gt;g[u][v]&lt;/code&gt; DCT coefficients  for 8x8 matrix (used for JPEG).&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/dct-eq.png&#34; alt=&#34;Example image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Brute force calculation can be done with next loops. It sure can be better with caching &lt;code&gt;cosine&lt;/code&gt; multiplication or better butterfly implementation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Huffman Coding</title>
      <link>/posts/2022/06/huffman-coding/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/06/huffman-coding/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Huffman_coding&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Huffman code&lt;/a&gt; is one of the lossless compression algos. The idea is using a coding where more frequent symbols have shorter encoding and less frequent symbols with longer encoding(variable length encoding).  A variant of Huffman is used for JPEG standard, so apparently it&amp;rsquo;s a big deal.&lt;/p&gt;&#xA;&lt;p&gt;The simple algorithm on wiki is described as follows:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Create a leaf node for each symbol and add it to the priority queue.&#xA;While there is more than one node in the queue:&#xA;Remove the two nodes of highest priority (lowest probability) from the queue&#xA;Create a new internal node with these two nodes as children and with probability equal to the sum of the two nodes&amp;rsquo; probabilities.&#xA;Add the new node to the queue.&#xA;The remaining node is the root node and the tree is complete.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solving N-Queen using Systemverilog Constraints</title>
      <link>/posts/2022/06/solving-n-queen-using-systemverilog-constraints/</link>
      <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/06/solving-n-queen-using-systemverilog-constraints/</guid>
      <description>&lt;p&gt;This time I will try to solve &lt;a href=&#34;https://en.wikipedia.org/wiki/Eight_queens_puzzle&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;N-Queen&lt;/a&gt; problem using Systemverilog solver constraint.  They really need to add systemverilog to leetcode. Kidding! All the cool kids use python these days :).&lt;/p&gt;&#xA;&lt;p&gt;The Rules are simple:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Queens can&amp;rsquo;t be on the same rows&lt;/li&gt;&#xA;&lt;li&gt;Queens can&amp;rsquo;t be on the same columns&lt;/li&gt;&#xA;&lt;li&gt;Queens can&amp;rsquo;t be on diagonal (this really expands to +ve and -ve diagonals)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// square can be 0 or 1 (1 means queen)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;constraint a01 {foreach(grid[i][j]) grid[i][j] inside {[&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;]};}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// Each row can have one queen&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;constraint rows {foreach(grid[i][j]) grid[i].sum() &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// Each col can have one queen&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;consraint cols {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    foreach(grid[i][j]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        foreach(grid[r]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            (r &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;!=&lt;/span&gt; i) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; (grid[i][j] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;+&lt;/span&gt;grid[r][j] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// Diagnal can have one queen&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// +ve diagonal where col+row is constant&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 0123&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 1234&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 2345&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 3456&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// -ve diagonal where row-col is constant&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 0 -1 -2 -3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 1  0 -1 -2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 2  1  0 -1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// -3 2  1  0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;consraint pdiag {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    foreach(grid[i][j]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        foreach(grid[x][y]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ((i&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;!=&lt;/span&gt;x &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; j&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;!=&lt;/span&gt;y) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ((i &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;+&lt;/span&gt; j) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;==&lt;/span&gt; (x &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;+&lt;/span&gt; y))) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; ((grid[i][j] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;+&lt;/span&gt; grid[x][y])&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;consraint ndiag {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    foreach(grid[i][j]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        foreach(grid[x][y]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ((i&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;!=&lt;/span&gt;x &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; j&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;!=&lt;/span&gt;y) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ((i &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&lt;/span&gt; j) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;==&lt;/span&gt; (x &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&lt;/span&gt; y))) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; ((grid[i][j] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;+&lt;/span&gt; grid[x][y])&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Output for 4x4 queen problem can be&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ethernet MDIO Primer</title>
      <link>/posts/2022/06/ethernet-mdio-primer/</link>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/06/ethernet-mdio-primer/</guid>
      <description>&lt;p&gt;This post is about MDIO which is a part of MIIM (interface between MAC and PHY in ethernet 802 standard).&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Management_Data_Input/Output&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt; provide some details (but the main reference is 802 spec)&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Management Data Input/Output (MDIO), also known as Serial Management Interface (SMI) or Media Independent Interface Management (MIIM), is a serial bus defined for the Ethernet family of IEEE 802.3 standards for the Media Independent Interface, or MII. The MII connects Media Access Control (MAC) devices with Ethernet physical layer (PHY) circuits. The MAC device controlling the MDIO is called the Station Management Entity (SME).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Systemc Hello world</title>
      <link>/posts/2022/06/systemc-hello-world/</link>
      <pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/06/systemc-hello-world/</guid>
      <description>&lt;h1 id=&#34;compiling-systemc&#34;&gt;&#xA;  Compiling Systemc&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#compiling-systemc&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;systemc&lt;/code&gt; library can be found on &lt;a href=&#34;https://www.accellera.org/downloads/standards/systemc&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;accellera&lt;/a&gt;. There are two ways to build it. CMake and good old autoconf. autoconf will do the job just fine.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd systemc-2.3.3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./configure --prefix&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;pwd&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;/local&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#79c0ff&#34;&gt;SC_INSTALL&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;pwd&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;/local&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we are good to go.&lt;/p&gt;&#xA;&lt;h1 id=&#34;compiling-application&#34;&gt;&#xA;  Compiling application&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#compiling-application&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I got an example from systemc examples. Again there are several ways to build it But I am going for the minimal compilation command.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solving Sudoku using Systemverilog Constraints</title>
      <link>/posts/2022/06/solving-sudoku-using-systemverilog-constraints/</link>
      <pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/06/solving-sudoku-using-systemverilog-constraints/</guid>
      <description>&lt;p&gt;In previous post, I used python SAT solver to solve sudoku. Naturally, SV constraints are perfect to solve suduko once we figure out the correct constraints.&lt;/p&gt;&#xA;&lt;p&gt;For Wiki, Sudoku is:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;In classic Sudoku, the objective is to fill a 9 × 9 grid with digits so that each column, each row, and each of the nine 3 × 3 subgrids that compose the grid (also called &amp;ldquo;boxes&amp;rdquo;, &amp;ldquo;blocks&amp;rdquo;, or &amp;ldquo;regions&amp;rdquo;) contain all of the digits from 1 to 9.&lt;/p&gt;</description>
    </item>
    <item>
      <title>hash based message authentication HMAC</title>
      <link>/posts/2022/06/hash-based-message-authentication-hmac/</link>
      <pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/06/hash-based-message-authentication-hmac/</guid>
      <description>&lt;p&gt;HMAC(&lt;a href=&#34;https://en.wikipedia.org/wiki/HMAC&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt;) is &lt;code&gt;hash-based message authentication code&lt;/code&gt; which verifies data integrity and authenticity of a message. Basically, it ensure sender is really who they are and whatever they sent wasn&amp;rsquo;t changed.&lt;/p&gt;&#xA;&lt;p&gt;The algorithm can be found on wiki which is easy enough to write(i am using sha256 from hashlib :)).&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;function hmac is&#xA;    input:&#xA;        key:        Bytes    // Array of bytes&#xA;        message:    Bytes    // Array of bytes to be hashed&#xA;        hash:       Function // The hash function to use (e.g. SHA-1)&#xA;        blockSize:  Integer  // The block size of the hash function (e.g. 64 bytes for SHA-1)&#xA;        outputSize: Integer  // The output size of the hash function (e.g. 20 bytes for SHA-1)&#xA;&#xA;    // Compute the block sized key&#xA;    block_sized_key = computeBlockSizedKey(key, hash, blockSize)&#xA;&#xA;    o_key_pad ← block_sized_key xor [0x5c blockSize]   // Outer padded key&#xA;    i_key_pad ← block_sized_key xor [0x36 blockSize]   // Inner padded key&#xA;&#xA;    return  hash(o_key_pad ∥ hash(i_key_pad ∥ message))&#xA;&#xA;function computeBlockSizedKey is&#xA;    input:&#xA;        key:        Bytes    // Array of bytes&#xA;        hash:       Function // The hash function to use (e.g. SHA-1)&#xA;        blockSize:  Integer  // The block size of the hash function (e.g. 64 bytes for SHA-1)&#xA;&#xA;    // Keys longer than blockSize are shortened by hashing them&#xA;    if (length(key) &amp;gt; blockSize) then&#xA;        key = hash(key)&#xA;&#xA;    // Keys shorter than blockSize are padded to blockSize by padding with zeros on the right&#xA;    if (length(key) &amp;lt; blockSize) then&#xA;        return  Pad(key, blockSize) // Pad key with zeros to make it blockSize bytes long&#xA;&#xA;    return  key&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;python-implementation&#34;&gt;&#xA;  Python implementation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#python-implementation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The main issue here is getting the bytes arithmetic right. I wrote small utility function &lt;code&gt;xor_bytes&lt;/code&gt; for inner and outter hashes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RISCV riscv python model deepdive</title>
      <link>/posts/2022/05/riscv-riscv-python-model-deepdive/</link>
      <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/05/riscv-riscv-python-model-deepdive/</guid>
      <description>&lt;p&gt;This post is about &lt;a href=&#34;https://github.com/wallento/riscv-python-model&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;riscv python model&lt;/a&gt;. The doc describes it as:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;This is a python model of the RISC-V ISA. It is intended to be a resource for Python-based automated testing and verification. It is under development and not very useful yet, but can be used to generate random assembler codeThis is a python model of the RISC-V ISA. It is intended to be a resource for Python-based automated testing and verification. It is under development and not very useful yet, but can be used to generate random assembler code&lt;/p&gt;</description>
    </item>
    <item>
      <title>Network layers dissection using scapy</title>
      <link>/posts/2022/05/network-layers-dissection-using-scapy/</link>
      <pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/05/network-layers-dissection-using-scapy/</guid>
      <description>&lt;p&gt;This post goes through network layers(ethernet, IP, TCP) of a packet using scapy. &lt;code&gt;scapy&lt;/code&gt; is a package to create, send and sniff packets. Well, scapy docs say it all:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Scapy is a Python program that enables the user to send, sniff and dissect and forge network packets. This capability allows construction of tools that can probe, scan or attack networks.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;packet-fields&#34;&gt;&#xA;  Packet fields&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#packet-fields&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with IP, &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc791&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC&lt;/a&gt; describes packets fields  as follows&lt;/p&gt;</description>
    </item>
    <item>
      <title>Levenshtein Distance</title>
      <link>/posts/2022/05/levenshtein-distance/</link>
      <pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/05/levenshtein-distance/</guid>
      <description>&lt;p&gt;Levenshtein distance defines the distance between strings. It is used for spell checking and suggestions (among other applications). It is interesting as it reminded me of Hamming distance (I am looking at you, undergrad information theory course!) which led me the rabbit hole of string distance functions.&lt;/p&gt;&#xA;&lt;p&gt;Well, &lt;a href=&#34;https://en.wikipedia.org/wiki/Levenshtein_distance&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt; says it all&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;In information theory, linguistics, and computer science, the Levenshtein distance is a string metric for measuring the difference between two sequences. Informally, the Levenshtein distance between two words is the minimum number of single-character edits (insertions, deletions or substitutions) required to change one word into the other.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simple recursive solution to Maze path finding</title>
      <link>/posts/2022/05/simple-recursive-solution-to-maze-path-finding/</link>
      <pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/05/simple-recursive-solution-to-maze-path-finding/</guid>
      <description>&lt;p&gt;Maze path finding  is an interesting problem to find if there path(and the path) between start and dest points on grid. More details on &lt;a href=&#34;https://en.wikipedia.org/wiki/Maze-solving_algorithm&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt;. There many solutions some of them are more complicate than others. I am looking at backtracking or A* search. Normally simple solution is model the grid (open cells) as graph nodes and try to find shorted path between two nodes.&lt;/p&gt;&#xA;&lt;p&gt;In this instance of this problem, there is an extra requirement. At each cell, you can only move into one of neighbours cells (left, right, up and down). so, recursion looks like a good solution here.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Waveforms and WaveJSON - wavedrom and wavedrompy</title>
      <link>/posts/2022/05/waveforms-and-wavejson-wavedrom-and-wavedrompy/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/05/waveforms-and-wavejson-wavedrom-and-wavedrompy/</guid>
      <description>&lt;p&gt;Wavedrom is a tool to render SVG of waveforms using &lt;code&gt;WaveJSON&lt;/code&gt;. &lt;code&gt;WaveJSON&lt;/code&gt; is JSON based format &lt;a href=&#34;https://github.com/wavedrom/schema/blob/master/WaveJSON.md&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docs&lt;/a&gt; to documents signal values with labels and annotations. wavedrom is written in javascript but there is &lt;a href=&#34;https://github.com/wallento/wavedrompy&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wavedrompy&lt;/a&gt; which is the python implementation.&lt;/p&gt;&#xA;&lt;h1 id=&#34;example&#34;&gt;&#xA;  Example&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#example&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;signal&amp;#34;&lt;/span&gt;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;clk&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;wave&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;P............&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;.............&amp;#34;&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;req&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;wave&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;01..0........&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;.a..b.C...D..&amp;#34;&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;ack&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;wave&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;0.....1...0..&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;.A..B.c...d..&amp;#34;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;edge&amp;#34;&lt;/span&gt;   : [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;b-~&amp;gt;c 1:N&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&#x9;  &#x9;&#x9;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;a-~&amp;gt;b 5&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;c-~&amp;gt;d 8&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#x9;&#x9;&#x9;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;a-|&amp;gt;A&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#x9;&#x9;&#x9;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;b-|&amp;gt;B&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#x9;&#x9;&#x9;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;c-|&amp;gt;C&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#x9;&#x9;&#x9;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;d-|&amp;gt;D&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   ],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;hscale&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;scale&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And output should be something like&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux tun device - Hello World</title>
      <link>/posts/2022/05/linux-tun-device-hello-world/</link>
      <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/05/linux-tun-device-hello-world/</guid>
      <description>&lt;p&gt;tun device is virtual network interface that can send raw IP packets to user space  instead of link/phy layer. tun/tap devices are used with IPSec application like OpenVPN. more details in the &lt;a href=&#34;https://en.wikipedia.org/wiki/TUN/TAP&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt;. This is a write up based on the answer in &lt;a href=&#34;https://stackoverflow.com/questions/1003684/how-to-interface-with-the-linux-tun-driver&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SO&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;in this example, we will use 3 to create tun, run application and capture pacp.&lt;/p&gt;&#xA;&lt;h1 id=&#34;shell-1---how-to-create-tun-device&#34;&gt;&#xA;  Shell 1 - How to create tun device&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#shell-1---how-to-create-tun-device&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;create the &lt;code&gt;tun0&lt;/code&gt; interface and update the route table for that device.. and &lt;code&gt;up&lt;/code&gt; to bring up the interface&lt;/p&gt;</description>
    </item>
    <item>
      <title>Book review - Open Verification Methodology Cookbook</title>
      <link>/posts/2022/05/book-review-open-verification-methodology-cookbook/</link>
      <pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/05/book-review-open-verification-methodology-cookbook/</guid>
      <description>&lt;p&gt;The Open verification Methodology Cookbook is one my favorite books. I actually bought a hardcover and it&amp;rsquo;s small book so I always bring it with me while i am travelling :).&lt;/p&gt;&#xA;&lt;p&gt;The book starts from very basic introduction to verification, then language features and eventually explaining few of the important features of OVM library. I really like the way it starts with basic non-ovm testbench and build up to OVM based TB. I know what you are thinking, who uses OVM anymore? well, I guess some companies still have legacy codebases.Maybe?!  But the most importantly UVM is not that difference from OVM. Many core concepts are still valid. The components, TLM, phasing, reporting and configuration(well, resource_db not config_db).&lt;/p&gt;</description>
    </item>
    <item>
      <title>My assumptions (pun intended) about SymbiYosys - part1 </title>
      <link>/posts/2022/05/my-assumptions-pun-intended-about-symbiyosys-part1/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/05/my-assumptions-pun-intended-about-symbiyosys-part1/</guid>
      <description>&lt;p&gt;I wanted to try yosys for long time. I played around with SAT solvers before but didn&amp;rsquo;t try full-blown formal proof before. I thought formal is complex to do. Finally, I proved myself wrong (again, pun intended).&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;SymbiYosys&lt;/code&gt; is open source formal engine based on Yosys. It&amp;rsquo;s easy and most importantly it&amp;rsquo;s free.&lt;/p&gt;&#xA;&lt;h1 id=&#34;installation&#34;&gt;&#xA;  Installation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#installation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This is summary for steps in &lt;a href=&#34;https://symbiyosys.readthedocs.io/en/latest/install.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;official doc&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;One caveat, installation requires root to copy scripts. I don&amp;rsquo;t like running script with sudo on my machine, so i used docker and i am good to go.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - set_drain_time</title>
      <link>/posts/2022/04/uvm-internals-set_drain_time/</link>
      <pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/04/uvm-internals-set_drain_time/</guid>
      <description>&lt;h1 id=&#34;set-up&#34;&gt;&#xA;  Set up&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#set-up&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In &lt;code&gt;run_phase&lt;/code&gt;, &lt;code&gt;set_drain_time&lt;/code&gt; is called from &lt;code&gt;phase.phase_done&lt;/code&gt; which &lt;code&gt;uvm_objection&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;task&lt;/span&gt; run_phase(uvm_phase phase);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    phase.phase_done.set_drain_time(this, &lt;span style=&#34;color:#a5d6ff&#34;&gt;10&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;endtask&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;set_drain_time&lt;/code&gt; sets drain in &lt;code&gt;m_drain_time&lt;/code&gt; which is called &lt;code&gt;m_forked_drain&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt; set_drain_time (uvm_object obj&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;null, &lt;span style=&#34;color:#ff7b72&#34;&gt;time&lt;/span&gt; drain);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt; (obj&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;==&lt;/span&gt;null)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       obj &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; m_top;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     m_drain_time[obj] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; drain;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     m_set_hier_mode(obj);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;objection-timeout&#34;&gt;&#xA;  objection timeout&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#objection-timeout&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In &lt;code&gt;m_execute_scheduled_forks()&lt;/code&gt;, &lt;code&gt;m_forked_drain&lt;/code&gt; is called&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    objection.m_forked_drain(ctxt.obj, ctxt.source_obj, ctxt.description, ctxt.count, &lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and &lt;code&gt;m_forked_drain&lt;/code&gt; calls &lt;code&gt;uvm_delay&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Systemverilog functional coverage cheat-sheet</title>
      <link>/posts/2022/04/systemverilog-functional-coverage-cheat-sheet/</link>
      <pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/04/systemverilog-functional-coverage-cheat-sheet/</guid>
      <description>&lt;h1 id=&#34;basic&#34;&gt;&#xA;  basic&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#basic&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;enum&lt;/span&gt; {r,d} color,color1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;covergroup cg @(&lt;span style=&#34;color:#ff7b72&#34;&gt;posedge&lt;/span&gt; clk);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; coverpoint color;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp1 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; coverpoint color1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xp &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; cross cp, cp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endgroup&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cg cg_i &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; new;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;embedded-coverpoint&#34;&gt;&#xA;  embedded coverpoint&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#embedded-coverpoint&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class foo;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;enum&lt;/span&gt; {r,d} color,color1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;covergroup cg @(&lt;span style=&#34;color:#ff7b72&#34;&gt;posedge&lt;/span&gt; clk);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; coverpoint color;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp1 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; coverpoint color1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xp &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; cross cp, cp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endgroup&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; new();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cg &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;new; &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// embedded cg above instance is created automatically as cg is defined in class&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;implicit-coverpoint&#34;&gt;&#xA;  implicit coverpoint&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#implicit-coverpoint&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;color1 in cross create a coverpoint there.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - UVM_TIMEOUT</title>
      <link>/posts/2022/04/uvm-internals-uvm_timeout/</link>
      <pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/04/uvm-internals-uvm_timeout/</guid>
      <description>&lt;p&gt;This posts explains how &lt;code&gt;+UVM_TIMEOUT&lt;/code&gt; works.&lt;/p&gt;&#xA;&lt;p&gt;Starting with how it is used&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;sim command&amp;gt; +UVM_TIMEOUT&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;200000,NO&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;UVM_TIMEOUT&lt;/code&gt; is read in &lt;code&gt;uvm_root.svh&lt;/code&gt; which parses the value and override strings and calls &lt;code&gt;set_timeout&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  timeout_count &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; clp.get_arg_values(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;+UVM_TIMEOUT=&amp;#34;&lt;/span&gt;, timeout_settings);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt; (timeout_count &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;==&lt;/span&gt;  &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    timeout &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; timeout_settings[&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt; (timeout_count &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#ff7b72&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff7b72&#34;&gt;string&lt;/span&gt; timeout_list;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff7b72&#34;&gt;string&lt;/span&gt; sep;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff7b72&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; timeout_settings.size(); i&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;++&lt;/span&gt;) &lt;span style=&#34;color:#ff7b72&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          sep &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;; &amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        timeout_list &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; {timeout_list, sep, timeout_settings[i]};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff7b72&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      uvm_report_warning(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;MULTTIMOUT&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $sformatf(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Multiple (%0d) +UVM_TIMEOUT arguments provided on the command line.  &amp;#39;%s&amp;#39; will be used.  Provided list: %s.&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        timeout_count, timeout, timeout_list), UVM_NONE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    uvm_report_info(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;TIMOUTSET&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      $sformatf(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#39;+UVM_TIMEOUT=%s&amp;#39; provided on the command line is being applied.&amp;#34;&lt;/span&gt;, timeout), UVM_NONE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt;&amp;#39;($sscanf(timeout,&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;%d,%s&amp;#34;&lt;/span&gt;,timeout_int,override_spec));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;case&lt;/span&gt;(override_spec)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;YES&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; set_timeout(timeout_int, &lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;NO&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; set_timeout(timeout_int, &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff7b72&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; set_timeout(timeout_int, &lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;endcase&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;set_timeout&lt;/code&gt; sets the phase_timeout in &lt;code&gt;uvm_root&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Systemverilog constrainted randomization cheat-sheet</title>
      <link>/posts/2022/04/systemverilog-constrainted-randomization-cheat-sheet/</link>
      <pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/04/systemverilog-constrainted-randomization-cheat-sheet/</guid>
      <description>&lt;p&gt;This posts lists small snippets from LRM 1800.&lt;/p&gt;&#xA;&lt;h1 id=&#34;set-membership---inside&#34;&gt;&#xA;  set membership - inside&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#set-membership---inside&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class b;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rand &lt;span style=&#34;color:#ff7b72&#34;&gt;logic&lt;/span&gt; [&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;] x;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constraint x_c1 {x inside {&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;};}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constraint x_c2 {x inside {[&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt;]};}     &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;constraint x_c2 {&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;!&lt;/span&gt;(x inside {[&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt;]});} &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// negation&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;distribution&#34;&gt;&#xA;  Distribution&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#distribution&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class b;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rand &lt;span style=&#34;color:#ff7b72&#34;&gt;logic&lt;/span&gt; [&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;] x;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constraint x_c1 {x dist {&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt; ,&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;};}    &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 1,2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;constraint x_c1 {x dist {[&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt; ,&lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;};} &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 1, 1, 2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;constraint x_c1 {x dist {[&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;/=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt; ,&lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;};} &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 1/2,1/2,2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;unique&#34;&gt;&#xA;  unique&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#unique&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;unique&lt;/code&gt; says x and y shouldn&amp;rsquo;t take the same value.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - UVM 2020-2.0 - m_uvm_core_state</title>
      <link>/posts/2022/03/uvm-internals-uvm-2020-2.0-m_uvm_core_state/</link>
      <pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/03/uvm-internals-uvm-2020-2.0-m_uvm_core_state/</guid>
      <description>&lt;p&gt;UVM 2020-2.0 early release is out and i thought it would be fun to deep dive into one of the differences and try to understand why that change was made.&lt;/p&gt;&#xA;&lt;p&gt;I thought that was an interesting one!&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt; // we use a queue here only to avoid any problems on writing to variables&#xA;&amp;lt; // inside an always_comb/latch/ff in case those call UVM&#xA;&amp;lt; uvm_core_state m_uvm_core_state[$];&#xA;---&#xA;&amp;gt; uvm_core_state m_uvm_core_state = UVM_CORE_UNINITIALIZED;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, what does this comment mean? Let&amp;rsquo;s start with &lt;code&gt;uvm_core_state&lt;/code&gt;. well, that was easy.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python package of the week: tempfile</title>
      <link>/posts/2022/03/python-package-of-the-week-tempfile/</link>
      <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/03/python-package-of-the-week-tempfile/</guid>
      <description>&lt;p&gt;&lt;code&gt;tempfile&lt;/code&gt; is a useful to create files and directories under system temp path whatever that is.&lt;/p&gt;&#xA;&lt;p&gt;To create a temp directory, &lt;code&gt;tempfile.TemporaryDirectory&lt;/code&gt; returns a full path to temp directory.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#a5d6ff&#34;&gt;8&lt;/span&gt;]: x &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; tempfile&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;TemporaryDirectory()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#a5d6ff&#34;&gt;9&lt;/span&gt;]: x&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Out[&lt;span style=&#34;color:#a5d6ff&#34;&gt;9&lt;/span&gt;]: &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;/tmp/tmp_olncqa8&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To create a file, &lt;code&gt;tempfile.NamedTemporaryFile&lt;/code&gt; does exactly that.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#a5d6ff&#34;&gt;5&lt;/span&gt;]: x &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; tempfile&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;NamedTemporaryFile()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#a5d6ff&#34;&gt;6&lt;/span&gt;]: x&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Out[&lt;span style=&#34;color:#a5d6ff&#34;&gt;6&lt;/span&gt;]: &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;/tmp/tmpn7oud6l_&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;PS. the directory path is determined with following &lt;a href=&#34;https://docs.python.org/3/library/tempfile.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rules&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;If dir is not None, the file will be created in that directory; otherwise, a default directory is used. The default directory is chosen from a platform-dependent list, but the user of the application can control the directory location by setting the TMPDIR, TEMP or TMP environment variables&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - Sequence to Sequencer connection</title>
      <link>/posts/2022/03/uvm-internals-sequence-to-sequencer-connection/</link>
      <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/03/uvm-internals-sequence-to-sequencer-connection/</guid>
      <description>&lt;p&gt;This post answers the following question &amp;ldquo;How the typical sequencer to sequence coonection works?!&amp;rdquo;&lt;/p&gt;&#xA;&lt;h1 id=&#34;an-example&#34;&gt;&#xA;  An example&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#an-example&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Create sequencer class handle from vanilla &lt;code&gt;uvm_sequencer&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvm_sequencer #(foo_req, foo_rsp) sqr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Connect it to driver port in connect phase&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drv.seq_item_port.connect(sqr.seq_item_export);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Define &lt;code&gt;uvm_sequence&lt;/code&gt; with &lt;code&gt;body&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class foo_sequence extends uvm_sequence#(foo_seq_item);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  virtual &lt;span style=&#34;color:#ff7b72&#34;&gt;task&lt;/span&gt; body();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  start_item(item);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// Create the seq item&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;  ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  finish_item(item);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;endtask&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Call the sequence with sequencer instance.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;seq.start(sqr, null);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Finally the driver can use &lt;code&gt;get_next_item&lt;/code&gt; to get the sequence_item&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; seq_item_port.get_next_item(req);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// Do something with req&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt; seq_item_port.item_done();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;following-seqstart-down-the-rabbit-hole&#34;&gt;&#xA;  Following seq.start down the rabbit hole&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#following-seqstart-down-the-rabbit-hole&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;let&amp;rsquo;s start with &lt;code&gt;uvm_sequence&lt;/code&gt; and &lt;code&gt;seq.start&lt;/code&gt;, it turns out it&amp;rsquo;s very lean class as most logic is define in &lt;code&gt;uvm_sequence_base&lt;/code&gt; in &lt;code&gt;src/seq/uvm_sequence_base.svh&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ireland Rental Price Analysis</title>
      <link>/posts/2022/03/ireland-rental-price-analysis/</link>
      <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/03/ireland-rental-price-analysis/</guid>
      <description>&lt;p&gt;While the world is on fire, I wanted something light to do to get my mind off the news. So, I decided to look at another crisis. Ireland Housing Crisis :)&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/this-is-fine.0.jpg&#34; alt=&#34;Example image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Anyone who is familiar with Ireland knows about the housing shortage. So, Like everyone here, I check daft on daily basis(several times a day actually).&lt;/p&gt;&#xA;&lt;p&gt;I thought it would be fun to scrap Daft.ie and do basic analysis on the data(nothing fancy!). I am using jupyter notebooks because as all the cool kids use it :)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python package of the week: argparse</title>
      <link>/posts/2022/02/python-package-of-the-week-argparse/</link>
      <pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/02/python-package-of-the-week-argparse/</guid>
      <description>&lt;p&gt;&lt;code&gt;argparse&lt;/code&gt; is a great library to write CLI application with clean consistent interface. The main features are&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Sub-parsers&lt;/li&gt;&#xA;&lt;li&gt;Positional arguments&lt;/li&gt;&#xA;&lt;li&gt;Options arguments&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Full docs can found at &lt;a href=&#34;https://docs.python.org/3/library/argparse.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s definitely better than DIY parsing &lt;code&gt;sys.argv&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h1 id=&#34;an-example&#34;&gt;&#xA;  An example&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#an-example&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This is an examples that shows the most important features. It even prints nifty help message like this&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/argparse.png&#34; alt=&#34;Example image&#34;&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;argparse&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parser &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; argparse&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;ArgumentParser()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;subparsers &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; parser&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;add_subparsers(help&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;Super duper  commands&amp;#39;&lt;/span&gt;,dest&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;command&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parser&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;--verbose&amp;#39;&lt;/span&gt;, help&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;be more chatty&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parser_batch &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; subparsers&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;add_parser(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;batch&amp;#39;&lt;/span&gt;, help&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;Run in Batch mode&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parser_batch&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;input_file&amp;#39;&lt;/span&gt;, help&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;input file&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parser_gui &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; subparsers&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;add_parser(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;gui&amp;#39;&lt;/span&gt;, help&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;Run in GUI mode&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;args &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; parser&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;parse_args()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Python package of the week: Lark</title>
      <link>/posts/2022/02/python-package-of-the-week-lark/</link>
      <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/02/python-package-of-the-week-lark/</guid>
      <description>&lt;p&gt;Do you know the ancient proverb that says &amp;ldquo;If you want to really understand something, parse or generate it!&amp;rdquo;.&#xA;Just kidding :) I made that up. But doesn&amp;rsquo;t make less true through.&lt;/p&gt;&#xA;&lt;p&gt;This post &lt;em&gt;briefly&lt;/em&gt; explains BNF and how Lark uses it to build AST(Abstract syntax tree) which is basically the biggest computer science-y part of the job.&lt;/p&gt;&#xA;&lt;h1 id=&#34;bnf&#34;&gt;&#xA;  BNF&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#bnf&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;BNF is used to define formal specifications of context-free grammars using &lt;code&gt;Production Rules&lt;/code&gt; and &lt;code&gt;Terminal symbols&lt;/code&gt;. In this example from wiki, &lt;code&gt;twelve&lt;/code&gt; is a production rule to terminals &lt;code&gt;&amp;quot;1&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;2&amp;quot;&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - How do p_sequencer and m_sequencer work?</title>
      <link>/posts/2022/02/uvm-internals-how-do-p_sequencer-and-m_sequencer-work/</link>
      <pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/02/uvm-internals-how-do-p_sequencer-and-m_sequencer-work/</guid>
      <description>&lt;p&gt;One of the most iconic DV interview questions is &amp;ldquo;What are m_sequencer and p_sequencer?&amp;rdquo;. So, A good way to impress the interviewer is to answer the question by explaining how they work :)&lt;/p&gt;&#xA;&lt;h1 id=&#34;what-are-p_sequencer-and-m_sequencer&#34;&gt;&#xA;  What are p_sequencer and m_sequencer?&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#what-are-p_sequencer-and-m_sequencer&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;p_sequencer&lt;/code&gt; is declared using &lt;code&gt;uvm_declare_p_sequencer&lt;/code&gt; in the sequence to have access to the correct specialization of &lt;code&gt;uvm_sequencer&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class my_sequence extends uvm_sequence;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_declare_p_sequencer&lt;/span&gt;(ubus_slave_sequencer)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which expands to the following where &lt;code&gt;$cast&lt;/code&gt; will only work if &lt;code&gt;m_sequencer&lt;/code&gt; can be cast to &lt;code&gt;p_sequencer&lt;/code&gt;(ie cast from base class to parameterized derived class)&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - Transaction Recording Infrastructure</title>
      <link>/posts/2022/02/uvm-internals-transaction-recording-infrastructure/</link>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/02/uvm-internals-transaction-recording-infrastructure/</guid>
      <description>&lt;p&gt;UVM has a builtin transaction recorder as part of &lt;code&gt;uvm_transaciton&lt;/code&gt;. This is deepdive into how it works.&lt;/p&gt;&#xA;&lt;h1 id=&#34;how-to-use-transaction-recorder&#34;&gt;&#xA;  How to use transaction recorder&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#how-to-use-transaction-recorder&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;First, The recording should be enabled. In this example, this is part of sequence body where &lt;code&gt;enable_recording&lt;/code&gt; is called with &lt;code&gt;stream name&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pkt &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; apb_rw&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;type_id&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;create(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;apb_rw&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pkt.enable_recording(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;packet_stream&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start_item(pkt);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pkt.randomize();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    finish_item(pkt);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, &lt;code&gt;run_phase&lt;/code&gt; can call &lt;code&gt;accpet_tr&lt;/code&gt;, &lt;code&gt;begin_tr&lt;/code&gt; and &lt;code&gt;end_tr&lt;/code&gt; to log the transactions in the stream.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - Register model callbacks</title>
      <link>/posts/2022/01/uvm-internals-register-model-callbacks/</link>
      <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/01/uvm-internals-register-model-callbacks/</guid>
      <description>&lt;p&gt;UVM register model defines several callback hooks. This is deepdive into how it works.&lt;/p&gt;&#xA;&lt;h1 id=&#34;pre_read-example&#34;&gt;&#xA;  pre_read example&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#pre_read-example&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;First, we need to define callback class extending &lt;code&gt;uvm_reg_cbs&lt;/code&gt;. I am using &lt;code&gt;pre_read&lt;/code&gt; in this case.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class mycb extends uvm_reg_cbs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_object_utils&lt;/span&gt;(mycb)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; new(&lt;span style=&#34;color:#ff7b72&#34;&gt;string&lt;/span&gt; name&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    super.new(name);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  virtual &lt;span style=&#34;color:#ff7b72&#34;&gt;task&lt;/span&gt; pre_read(uvm_reg_item rw);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;cb called&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;endtask&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then register the callback with required uvm register(not confusing at all!).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python bits - PEP0380 Delegating to a Subgenerator - yield from</title>
      <link>/posts/2022/01/python-bits-pep0380-delegating-to-a-subgenerator-yield-from/</link>
      <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/01/python-bits-pep0380-delegating-to-a-subgenerator-yield-from/</guid>
      <description>&lt;p&gt;This post is about &lt;a href=&#34;https://www.python.org/dev/peps/pep-0380/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PEP-0380&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A syntax is proposed for a generator to delegate part of its operations to another generator. This allows a section of code containing &amp;lsquo;yield&amp;rsquo; to be factored out and placed in another generator. Additionally, the subgenerator is allowed to return with a value, and the value is made available to the delegating generator.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Basically, It&amp;rsquo;s a way to chain generators(generator is routine that &lt;code&gt;yield&lt;/code&gt; to immediate caller. with &lt;code&gt;yield from&lt;/code&gt;),And anthor iterator/generator can be used to return a value.&lt;/p&gt;</description>
    </item>
    <item>
      <title>VIM for fun and profit</title>
      <link>/posts/2022/01/vim-for-fun-and-profit/</link>
      <pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/01/vim-for-fun-and-profit/</guid>
      <description>&lt;p&gt;Not to start a editor war or anything, but VIM is and always will be the best editor (emacs are vscode are okey).&lt;/p&gt;&#xA;&lt;p&gt;I used different setups (&lt;code&gt;.vimrc&lt;/code&gt; and plugins) over the years but for the last couple of years i found cool a setup that i like. Here is breakdown of some useful plugins and VIM built-in features that i use every day.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/vim.png&#34; alt=&#34;Example image&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;windows-vs-buffers-vs-tabs&#34;&gt;&#xA;  windows vs buffers vs tabs&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#windows-vs-buffers-vs-tabs&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Probably everyone using vim used these feature in a way or another.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb Internals - Cocotb Startup VPI bootstrap to Python</title>
      <link>/posts/2022/01/cocotb-internals-cocotb-startup-vpi-bootstrap-to-python/</link>
      <pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/01/cocotb-internals-cocotb-startup-vpi-bootstrap-to-python/</guid>
      <description>&lt;p&gt;This post complements an earlier post about test discovery. This should close the gap between simulation start and actual cocotb test call.&lt;/p&gt;&#xA;&lt;h1 id=&#34;cocotb-hello-world-in-2-minutes&#34;&gt;&#xA;  cocotb hello-world in 2 minutes&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#cocotb-hello-world-in-2-minutes&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I will write down the basic commands to run the &lt;code&gt;adder&lt;/code&gt; example that ships with cocotb. I am assuming latest &lt;code&gt;iverilog&lt;/code&gt; is installed already.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;virtualenv .venv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source .venv/bin/activate&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd cocotb&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd examples/adder/tests&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will probably see something like this&lt;/p&gt;</description>
    </item>
    <item>
      <title>riscv picorv32 hello demystified</title>
      <link>/posts/2022/01/riscv-picorv32-hello-demystified/</link>
      <pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/01/riscv-picorv32-hello-demystified/</guid>
      <description>&lt;p&gt;This is a post about hello test in &lt;a href=&#34;https://github.com/YosysHQ/picorv32&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;piscorv32&lt;/a&gt;. I am not going to dig deep into picorv32 itself. Just the firmware.&lt;/p&gt;&#xA;&lt;h1 id=&#34;where-to-start&#34;&gt;&#xA;  Where to start&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#where-to-start&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;As usual, It makes sense to start with &lt;code&gt;Makefile&lt;/code&gt; and work backward.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make -n test&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After removing verilog related commands and tests, We have the following commands for the firmware.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32imc -o firmware/start.o firmware/start.S&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32ic -Os --std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/irq.o firmware/irq.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32ic -Os --std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/print.o firmware/print.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32ic -Os --std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/hello.o firmware/hello.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32ic -Os --std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/sieve.o firmware/sieve.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32ic -Os --std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/multest.o firmware/multest.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32ic -Os --std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/stats.o firmware/stats.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -Os -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32imc -ffreestanding -nostdlib -o firmware/firmware.elf &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;&#x9;-Wl,--build-id&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;none,-Bstatic,-T,firmware/sections.lds,-Map,firmware/firmware.map,--strip-debug &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;&#x9;firmware/start.o firmware/irq.o firmware/print.o firmware/hello.o firmware/sieve.o firmware/multest.o firmware/stats.o -lgcc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-objcopy -O binary firmware/firmware.elf firmware/firmware.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 firmware/makehex.py firmware/firmware.bin &lt;span style=&#34;color:#a5d6ff&#34;&gt;32768&lt;/span&gt; &amp;gt; firmware/firmware.hex&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;startup-assembly&#34;&gt;&#xA;  Startup assembly&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#startup-assembly&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Probably the most important part(beside linking):&lt;/p&gt;</description>
    </item>
    <item>
      <title>RISCV Memory Consistency Model Basics</title>
      <link>/posts/2022/01/riscv-memory-consistency-model-basics/</link>
      <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/01/riscv-memory-consistency-model-basics/</guid>
      <description>&lt;p&gt;The memory consistency model is an important (and complicated) topic that defines how memory loads/stores work in multi-thread(Hart in rv lingo) environment.&#xA;More detailed explanation of memory consistency can be found in &lt;a href=&#34;https://www.morganclaypool.com/doi/abs/10.2200/S00346ED1V01Y201104CAC016&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A Primer on Memory Consitency and Cache Coherency&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;There are several chapters in the spec related to memory model. Listed here for reference&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Chapter 2: &lt;code&gt;Fence&lt;/code&gt; instruction&lt;/li&gt;&#xA;&lt;li&gt;Chapter 3: Zifencei Instruction-Fetch Fence&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Chapter 8: A Standard Extension for Atomic Instructions&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Chapter 14: RVWMO Memory Consistency Modeal&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;Chapter 22: Zam Standard Extension for Misaligned Atomics&lt;/li&gt;&#xA;&lt;li&gt;Chapter 23: Ztso Standard Extension for Total Store Ordering&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;rvwmo&#34;&gt;&#xA;  RVWMO&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#rvwmo&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The following sections define instructions used for explicit sync of RISCV memory model &lt;code&gt;RVWMO&lt;/code&gt;. Chapter 14 defines &lt;code&gt;RVWMO&lt;/code&gt; formal specifications in detail. I will put couple of important snippets here but probably needs a separate post.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RISCV Privileged Specification and Linux Kernel Deep-ish Dive</title>
      <link>/posts/2022/01/riscv-privileged-specification-and-linux-kernel-deep-ish-dive/</link>
      <pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/01/riscv-privileged-specification-and-linux-kernel-deep-ish-dive/</guid>
      <description>&lt;p&gt;This is a deep-ish dive into the riscv privileged &lt;a href=&#34;https://github.com/riscv/riscv-isa-manual/releases/download/Priv-v1.12/riscv-privileged-20211203.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;specifications&lt;/a&gt; and Linux kernel syscall implementation.&lt;/p&gt;&#xA;&lt;h1 id=&#34;privileged-specification-tour&#34;&gt;&#xA;  Privileged specification tour&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#privileged-specification-tour&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;To keep it short, There are 3 privilege levels&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;U (user) : 0&lt;/li&gt;&#xA;&lt;li&gt;S (supervisor) : 1&lt;/li&gt;&#xA;&lt;li&gt;Reserved&lt;/li&gt;&#xA;&lt;li&gt;M (Machine) : 3&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;And specs describes them as&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;At any time, a RISC-V hardware thread (hart) is running at some privilege level encoded as a mode in one or more CSRs (control and status registers).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reviving old project - IPXACT to UVM RAL Generator - ipxactral</title>
      <link>/posts/2022/01/reviving-old-project-ipxact-to-uvm-ral-generator-ipxactral/</link>
      <pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/01/reviving-old-project-ipxact-to-uvm-ral-generator-ipxactral/</guid>
      <description>&lt;p&gt;This was a weekend project back in 2020 to build IPXACT parser and UVM register Model generator.&#xA;As an example of the lack of imagination at that time, I decided to call it &amp;lsquo;ipaxctral&amp;rsquo;. Creative?! I know!&lt;/p&gt;&#xA;&lt;h1 id=&#34;ipxact&#34;&gt;&#xA;  IPXACT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#ipxact&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I will just copy/paste the wiki here. But full Spec is on Accellera website&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;IP-XACT is an XML format that defines and describes individual, re-usable electronic circuit designs (individual pieces of intellectual property, or IPs) to facilitate their use in creating integrated circuits (i.e. microchips).&lt;/p&gt;</description>
    </item>
    <item>
      <title>How much riscv verilog I can write in 5 hours</title>
      <link>/posts/2022/01/how-much-riscv-verilog-i-can-write-in-5-hours/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/01/how-much-riscv-verilog-i-can-write-in-5-hours/</guid>
      <description>&lt;p&gt;While I was waiting for my weekly chicken roast to cook, I had this really bad idea for a challenge. &lt;strong&gt;how much riscv verilog i can write from scratch in the next 2 hours until the chicken is done?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;So, yeah that&amp;rsquo;s what I did on the last day of new year vacation.&lt;/p&gt;&#xA;&lt;h1 id=&#34;2-hours-to-v-hours&#34;&gt;&#xA;  2 hours to V hours&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#2-hours-to-v-hours&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I thought to start with a skeleton for single-cycle (See [H and H][1]) and try to build the blocks bottom up style.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blog setup</title>
      <link>/posts/2022/01/blog-setup/</link>
      <pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/01/blog-setup/</guid>
      <description>&lt;p&gt;This is write-up explaining how to setup a blog with Hugo, Markdown and github pages.&lt;/p&gt;&#xA;&lt;h1 id=&#34;hugo-setup&#34;&gt;&#xA;  Hugo setup&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#hugo-setup&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I am using &lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo&lt;/a&gt; which is an easy and fast static site generator. I use Markdown for content.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Create a new Hugo site&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new site blog&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Install a theme&#xA;Personally, I like this &lt;a href=&#34;https://github.com/rhazdon/hugo-theme-hello-friend-ng.git&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;theme&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule add https://github.com/rhazdon/hugo-theme-hello-friend-ng.git themes/hello-friend-ng/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then configure the theme in &lt;code&gt;config.toml&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why I blog</title>
      <link>/posts/2022/01/why-i-blog/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/01/why-i-blog/</guid>
      <description>&lt;p&gt;A friend asked me why I am more active with blog posts recently and It&amp;rsquo;s only fitting to reply with blog post( found it funny too).&lt;/p&gt;&#xA;&lt;p&gt;The thing is, since my undergrad years, I am used to take notes on everything. Lecture notes, project notes, problem sets notes. Probably all engineering students do.&lt;/p&gt;&#xA;&lt;p&gt;I was introduced to the concept of a README(it has a &lt;a href=&#34;https://en.wikipedia.org/wiki/README&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt; and everyhthing) back in 2011 and I was hooked. So, I have been writing 100&amp;rsquo;s of README on every technical projects i was involved in.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Langton Ant game</title>
      <link>/posts/2021/12/langton-ant-game/</link>
      <pubDate>Fri, 31 Dec 2021 00:00:00 +0000</pubDate>
      <guid>/posts/2021/12/langton-ant-game/</guid>
      <description>&lt;p&gt;This is post is about &lt;a href=&#34;https://en.wikipedia.org/wiki/Langton%27s_ant&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Langton&amp;rsquo;s ant&lt;/a&gt;. Like&#xA;&lt;a href=&#34;/posts/2020/05/conway-game-of-life/&#34; &gt;Conway&amp;rsquo;s game of life&lt;/a&gt;, It&amp;rsquo;s considered &lt;code&gt;Cellular automaton&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A cellular automaton consists of a regular grid of cells, each in one of a finite number of states, such as on and off (in contrast to a coupled map lattice). The grid can be in any finite number of dimensions. For each cell, a set of cells called its neighborhood is defined relative to the specified cell. An initial state (time t = 0) is selected by assigning a state for each cell. A new generation is created (advancing t by 1), according to some fixed rule (generally, a mathematical function)[3] that determines the new state of each cell in terms of the current state of the cell and the states of the cells in its neighborhood.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RISCV Simple Assembler - Part1</title>
      <link>/posts/2021/12/riscv-simple-assembler-part1/</link>
      <pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate>
      <guid>/posts/2021/12/riscv-simple-assembler-part1/</guid>
      <description>&lt;p&gt;This is write-up about a &lt;em&gt;work-in-progress&lt;/em&gt; simple riscv assembler in python. The riscv ISA is simple enough to implement in few 100s LOC. Besides,it looked like a good enough project for nice evening.&lt;/p&gt;&#xA;&lt;p&gt;The following items are on my todo list:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;define all rv32i instructions&lt;/li&gt;&#xA;&lt;li&gt;handle the ABI naming convention(a0-a31, sp, etc)&lt;/li&gt;&#xA;&lt;li&gt;handle pseudoinstruction defined in chapter 25&lt;/li&gt;&#xA;&lt;li&gt;write tkinter gui for the assembler&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;riscv-rv32i-isa&#34;&gt;&#xA;  riscv rv32i ISA&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#riscv-rv32i-isa&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;It&amp;rsquo;s risc isa (duh!) with 32bit length. from Chapter 2:&lt;/p&gt;</description>
    </item>
    <item>
      <title>RISCV Assembly rv64</title>
      <link>/posts/2021/12/riscv-assembly-rv64/</link>
      <pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate>
      <guid>/posts/2021/12/riscv-assembly-rv64/</guid>
      <description>&lt;p&gt;This is a write-up about riscv rv64 and  the assembly generated by GCC.&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-example&#34;&gt;&#xA;  The example&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-example&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I am using a pre-built rv64 toolchain from the package &lt;code&gt;gcc-riscv64-linux-gnu&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt install gcc-riscv64-linux-gnu&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;riscv64-linux-gnu-gcc -v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The example i am using is very simple. Basically setting a variable on the stack (will see later why we need this) then return that variable.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;(){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; x;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; x;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;riscv64-linux-gnu-gcc&lt;/code&gt; is used with a twist. This toolchain is using the compressed instructions. To see the full 32 bits, i had to pass the following options to gcc&lt;/p&gt;</description>
    </item>
    <item>
      <title>libusb Hello-World</title>
      <link>/posts/2021/12/libusb-hello-world/</link>
      <pubDate>Sat, 25 Dec 2021 00:00:00 +0000</pubDate>
      <guid>/posts/2021/12/libusb-hello-world/</guid>
      <description>&lt;p&gt;I first heard about libusb back in 2011 when I was working on USRP1. At the time, USRP had a really good C++ abstraction library called UHD, which did the heavy lifting talking to libusb. Hopefully, it takes me less than a decade to do a second example.&lt;/p&gt;&#xA;&lt;h1 id=&#34;what-is-libusb&#34;&gt;&#xA;  What is libusb?&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#what-is-libusb&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://libusb.info/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;libusb website&lt;/a&gt; says it all&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;libusb is a C library that provides generic access to USB devices. It is intended to be used by developers to facilitate the production of applications that communicate with USB hardware.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb Deepdive - Test discovery</title>
      <link>/posts/2021/11/cocotb-deepdive-test-discovery/</link>
      <pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate>
      <guid>/posts/2021/11/cocotb-deepdive-test-discovery/</guid>
      <description>&lt;p&gt;This is a write-up of &lt;code&gt;Cocotb&lt;/code&gt;  test discovery mechanism including the decorator and regression runner infrastructure.&lt;/p&gt;&#xA;&lt;h1 id=&#34;part1-discovery-with-regression-runner&#34;&gt;&#xA;  Part1: Discovery with regression runner&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#part1-discovery-with-regression-runner&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with &lt;code&gt;__init__.py&lt;/code&gt; where &lt;code&gt;from_discovery&lt;/code&gt; is called to lookup the tests.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# start Regression Manager&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;global&lt;/span&gt; regression_manager&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    regression_manager &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; RegressionManager&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;from_discovery(top)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    regression_manager&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;execute()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And &lt;code&gt;from_discorvery&lt;/code&gt; calls &lt;code&gt;_discover_tests&lt;/code&gt; (static class method in  &lt;code&gt;RegressionManager&lt;/code&gt;)&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        tests &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; cls&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;_discover_tests()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;_discover_tests&lt;/code&gt; loads test module (or modules) and detects classes derived from &lt;code&gt;Test&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - TLM analysis port</title>
      <link>/posts/2021/11/uvm-internals-tlm-analysis-port/</link>
      <pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate>
      <guid>/posts/2021/11/uvm-internals-tlm-analysis-port/</guid>
      <description>&lt;p&gt;This is write-up about the internals of UVM 1800.2 analysis_port rabbit hole.&lt;/p&gt;&#xA;&lt;p&gt;Starting with &lt;code&gt;uvm_analysis_port.svh&lt;/code&gt;, where the doc has small snippet of uvm_analysis_port object.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//------------------------------------------------------------------------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// Class -- NODOCS -- uvm_analysis_port&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// Broadcasts a value to all subscribers implementing a &amp;lt;uvm_analysis_imp&amp;gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//| class mon extends uvm_component;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//|   uvm_analysis_port#(trans) ap;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//|&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//|   function new(string name = &amp;#34;sb&amp;#34;, uvm_component parent = null);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//|      super.new(name, parent);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//|      ap = new(&amp;#34;ap&amp;#34;, this);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//|   endfunction&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//|&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//|   task run_phase(uvm_phase phase);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//|       trans t;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//|       ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//|       ap.write(t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//|       ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//|   endfunction&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//| endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;uvm_analysis_port&lt;/code&gt; is defined as&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python Descriptor Protocol</title>
      <link>/posts/2021/10/python-descriptor-protocol/</link>
      <pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate>
      <guid>/posts/2021/10/python-descriptor-protocol/</guid>
      <description>&lt;h1 id=&#34;first-example&#34;&gt;&#xA;  First Example&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#first-example&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This is write-up based on &lt;a href=&#34;https://docs.python.org/3/howto/descriptor.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt; for python descriptors.&lt;/p&gt;&#xA;&lt;p&gt;Descriptors are described as&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Descriptors let objects customize attribute lookup, storage, and deletion.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;lets start with simplest example&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Age&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;__get__&lt;/span&gt;(self, instance, owner):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; instance&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;age_years &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;__set__&lt;/span&gt;(self, instance, value):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        instance&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;age_years &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; value &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Person3&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    age_months &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; Age()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;__init__&lt;/span&gt;(self, age):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;age_years &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; age&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p3 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; Person3(&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(p3&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;__dict__&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(type(p3)&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;__dict__&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(p3&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;age_months)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here &lt;code&gt;age_months&lt;/code&gt; is descriptor that calculates age in month dynamically. age_months is not in &lt;code&gt;__dict__&lt;/code&gt;. but it is in &lt;code&gt;type(Person).__dict__&lt;/code&gt; as &lt;code&gt;&#39;age_months&#39;: &amp;lt;__main__.Age object at 0x7fcbab796970&amp;gt;,&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python class registration decorator</title>
      <link>/posts/2021/10/python-class-registration-decorator/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      <guid>/posts/2021/10/python-class-registration-decorator/</guid>
      <description>&lt;p&gt;Flask used decorators to register routes handlers. I have another post about flask internal to match function to specific URI.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;@app.route&lt;/span&gt;(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;hello_world&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That said, I wanted to implement similar registration but for classes.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Block&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;__init__&lt;/span&gt;(self) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;None&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Env&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    _blocks &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;__init__&lt;/span&gt;(self) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;None&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;@classmethod&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;register&lt;/span&gt;(cls):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;decorator&lt;/span&gt;(fn):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cls&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;_blocks&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;append(fn)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; fn&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; decorator&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;@Env.register&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;block1&lt;/span&gt;(Block):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;env &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; Env()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(env&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;_blocks)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which prints&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;[&lt;/span&gt;&amp;lt;class &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;__main__.block1&amp;#39;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Python Pandas cheat sheet</title>
      <link>/posts/2021/10/python-pandas-cheat-sheet/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      <guid>/posts/2021/10/python-pandas-cheat-sheet/</guid>
      <description>&lt;h1 id=&#34;basics&#34;&gt;&#xA;  Basics&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#basics&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Create DataFrame&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;DataFrame([[&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;],[&lt;span style=&#34;color:#a5d6ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;5&lt;/span&gt;]], columns&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;append(pd&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;DataFrame([[&lt;span style=&#34;color:#a5d6ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;9&lt;/span&gt;]], columns&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;list(df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;columns)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;File.csv&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;shape&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;info()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;head()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;tail()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Get all row with one column. This returns Series&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df[&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;col1&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df[&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;col1&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;value_counts()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;return multiple columns. This returns Dataframe&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df[[&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;col1&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;col2&amp;#34;&lt;/span&gt;]]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This returns pandas.core.indexes.base.Index.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;columns&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;list(df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;columns)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#pandas.core.series.Series&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;iloc[&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;iloc[&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;col1&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;iloc[ [&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;] ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;iloc[ [&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;] , [&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;] ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;loc[ [&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;] , [&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;col1&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;col2&amp;#34;&lt;/span&gt;] ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;loc[ &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt; , &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;col1&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;col2&amp;#34;&lt;/span&gt; ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;index&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;set_index(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;col1&amp;#39;&lt;/span&gt;,inplace&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;True&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;reset_index(inplace&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;True&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;File.csv&amp;#34;&lt;/span&gt;,index_col &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;col&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;sort_index(inplace&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;True&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;filtering&#34;&gt;&#xA;  Filtering&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#filtering&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filt &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; df[&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;col&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;==&lt;/span&gt; value&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filt &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; (df[&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;col&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;==&lt;/span&gt; value &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;|&lt;/span&gt; df[&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;col1&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;==&lt;/span&gt; value)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df[filt]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;#&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;loc(filt)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# negation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;loc(&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;~&lt;/span&gt;filt)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filt &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; df[&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;col&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;isin([&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;v2&amp;#34;&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# na=False ignore Nan&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filt &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; df[&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;col&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;str&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;containts([&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;v2&amp;#34;&lt;/span&gt;],na&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;False&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;update-rowscolumns&#34;&gt;&#xA;  Update rows/columns&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#update-rowscolumns&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# change columns names&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;columns &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; [x&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;lower() &lt;span style=&#34;color:#ff7b72&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;in&lt;/span&gt; df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;columns]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;rename(columns&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;col&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;col_new&amp;#34;&lt;/span&gt;}, incplace &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;True&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# change all values of a row&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;loc[&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;v2&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# change one column&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;loc[&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;col&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;new_value&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;loc[&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;,[&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;col&amp;#34;&lt;/span&gt;]] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;new_value&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# change all rows&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df[&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;col&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;v1&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;v2&amp;#39;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;operation-to-update-rowcolums&#34;&gt;&#xA;  Operation to update row/colums&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#operation-to-update-rowcolums&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;operations on series using &lt;code&gt;.apply&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python sequence slicing</title>
      <link>/posts/2021/09/python-sequence-slicing/</link>
      <pubDate>Sun, 19 Sep 2021 20:13:02 +0100</pubDate>
      <guid>/posts/2021/09/python-sequence-slicing/</guid>
      <description>&lt;h1 id=&#34;basic-index-slicing&#34;&gt;&#xA;  Basic index slicing&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#basic-index-slicing&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;python defines slicing with &lt;code&gt;[start:stop:step]&lt;/code&gt; to access elements of sequences(list, seq, str).&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; list(range(&lt;span style=&#34;color:#a5d6ff&#34;&gt;10&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;9&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x[&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#a5d6ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;7&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x[:&lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x[&lt;span style=&#34;color:#a5d6ff&#34;&gt;5&lt;/span&gt;:]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a5d6ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;9&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;named-slice&#34;&gt;&#xA;  Named slice&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#named-slice&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;for readability, index range can be names with slice object and used to index sequences.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mid &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; slice(&lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mid&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;slice(&lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; sel &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; x[mid]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; sel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;7&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;slice-in-python-model&#34;&gt;&#xA;  Slice in python model&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#slice-in-python-model&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;To support slicing in user defined class, class needs to have &lt;code&gt;__getitem__&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python sequence unpacking</title>
      <link>/posts/2021/09/python-sequence-unpacking/</link>
      <pubDate>Sun, 19 Sep 2021 20:13:02 +0100</pubDate>
      <guid>/posts/2021/09/python-sequence-unpacking/</guid>
      <description>&lt;p&gt;Python defines &lt;em&gt;unpacking&lt;/em&gt; for sequences(lists, tuple for example). RHS length has to match seq.len&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a , b &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; x&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;also, there is star expression for unpacking in &lt;a href=&#34;https://www.python.org/dev/peps/pep-3132/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pep-3132&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a, &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;b, c &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; range(&lt;span style=&#34;color:#a5d6ff&#34;&gt;5&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; b&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also, useful trick for unpacking while calling a function. where is two types list unpack (one star) and names unpack(double star).&#xA;This is defined by &lt;a href=&#34;https://www.python.org/dev/peps/pep-0448/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pep&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;f1&lt;/span&gt;(a,b):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;...&lt;/span&gt;     print(a,b)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; f1(&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;x)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#a5d6ff&#34;&gt;4&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; f1(&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;**&lt;/span&gt;x)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Python Template String</title>
      <link>/posts/2021/09/python-template-string/</link>
      <pubDate>Wed, 15 Sep 2021 18:02:53 +0100</pubDate>
      <guid>/posts/2021/09/python-template-string/</guid>
      <description>&lt;p&gt;Template strings (as define in &lt;a href=&#34;https://www.python.org/dev/peps/pep-0292/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PEP292&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;We propose the addition of a new class, called Template, which will live in the string module. The Template class supports new rules for string substitution; its value contains placeholders, introduced with the $ character. The following rules for $-placeholders apply:&lt;/p&gt;&#xA;&lt;p&gt;$$ is an escape; it is replaced with a single $&lt;/p&gt;&#xA;&lt;p&gt;$identifier names a substitution placeholder matching a mapping key of &amp;ldquo;identifier&amp;rdquo;. By default, &amp;ldquo;identifier&amp;rdquo; must spell a Python identifier as defined in [2]. The first non-identifier character after the $ character terminates this placeholder specification.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python Install without root</title>
      <link>/posts/2021/05/python-install-without-root/</link>
      <pubDate>Wed, 05 May 2021 20:13:02 +0100</pubDate>
      <guid>/posts/2021/05/python-install-without-root/</guid>
      <description>&lt;p&gt;This post documents the steps to install python without root.&lt;/p&gt;&#xA;&lt;h1 id=&#34;libffi&#34;&gt;&#xA;  libffi&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#libffi&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;libffi is required by ctypes module which is an important module for python/c interface.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./autogen.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./configure --prefix&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$LOCAL&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;sqlite3&#34;&gt;&#xA;  sqlite3&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#sqlite3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;sqlite3 required by sqlite3 module. Python can compile without it but it is good module to have. So worth the trouble.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./configure --prefix&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$LOCAL&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;python&#34;&gt;&#xA;  python&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#python&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;env&#34;&gt;&#xA;  env&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#env&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Note that LDFLAGS below is need for compiling ctypes with local libffi and be removed after compilation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python Pep 503</title>
      <link>/posts/2021/05/python-pep-503/</link>
      <pubDate>Sat, 01 May 2021 13:09:31 +0100</pubDate>
      <guid>/posts/2021/05/python-pep-503/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.python.org/dev/peps/pep-0503/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pep 503&lt;/a&gt; defines the python package repo api used py &lt;em&gt;pypi.org&lt;/em&gt;. I thought it was fun to create small repo using Flask (to host Flask) :)&lt;/p&gt;&#xA;&lt;p&gt;The spec require two urls&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;root url&lt;/li&gt;&#xA;&lt;li&gt;project url&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;root url return html listing available project page. the anchor tags has the following requirements&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The text of the anchor tag MUST be the name of the project and the href attribute MUST link to the URL for that particular project.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python Wheels</title>
      <link>/posts/2021/05/python-wheels/</link>
      <pubDate>Sat, 01 May 2021 10:00:20 +0100</pubDate>
      <guid>/posts/2021/05/python-wheels/</guid>
      <description>&lt;p&gt;Python wheels is zip file with package content as opposed to source distribution. It&amp;rsquo;s faster to install than the normal tar(or whatever).&lt;/p&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://realpython.com/python-wheels/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;article&lt;/a&gt; has really good description for wheels.&lt;/p&gt;&#xA;&lt;p&gt;For me, wheels are most helpful for installing packages on air-gapped machines. I can just copy the wheels and install.&#xA;These are the steps based on &lt;a href=&#34;https://stackoverflow.com/questions/36725843/installing-python-packages-without-internet-and-using-source-code-as-tar-gz-and&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SO&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export PD=/var/tmp/python-deps&#xA;mkdir $PD&#xA;python -m pip download wheel setuptools cocotb  setuptools_scm -d $PD&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And to install on another machine&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python Context Manager</title>
      <link>/posts/2021/05/python-context-manager/</link>
      <pubDate>Sat, 01 May 2021 08:53:49 +0100</pubDate>
      <guid>/posts/2021/05/python-context-manager/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/dev/peps/pep-0343/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pep-343&lt;/a&gt; describes the context(pun intended) of context managers.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;PEP 340, Anonymous Block Statements, combined many powerful ideas: using generators as block templates, adding exception handling and finalization to generators, and more&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Basically &lt;a href=&#34;https://www.python.org/dev/peps/pep-0340/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pep 340&lt;/a&gt; introduced the concept of anonymous blocks. which means that something&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;block EXPR1 as VAR1:&#xA;    BLOCK1&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;is the same as&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;itr = EXPR1  # The iterator&#xA;ret = False  # True if a return statement is active&#xA;val = None   # Return value, if ret == True&#xA;exc = None   # sys.exc_info() tuple if an exception is active&#xA;while True:&#xA;    try:&#xA;        if exc:&#xA;            ext = getattr(itr, &amp;#34;__exit__&amp;#34;, None)&#xA;            if ext is not None:&#xA;                VAR1 = ext(*exc)   # May re-raise *exc&#xA;            else:&#xA;                raise exc[0], exc[1], exc[2]&#xA;        else:&#xA;            VAR1 = itr.next()  # May raise StopIteration&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;but pep-343 won with statement &lt;em&gt;with&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python Dist utils</title>
      <link>/posts/2021/05/python-dist-utils/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      <guid>/posts/2021/05/python-dist-utils/</guid>
      <description>&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;├── MANIFEST.in&#xA;├── mypkg&#xA;│   ├── data.json&#xA;│   ├── __init__.py&#xA;│   └── mmod.py&#xA;├── README.md&#xA;├── requirements.txt&#xA;├── runner&#xA;└── setup.py&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;more MANIFEST.in&#xA;include README.md requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;more setup&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;distutils.core&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; setup&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;requirements.txt&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#ff7b72&#34;&gt;as&lt;/span&gt; f:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    required &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;splitlines()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(required)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    setup(name &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;appname&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        version &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        description &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;yadda yadda&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        author &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;myself and I&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        author_email &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;email@someplace.com&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        url &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;whatever&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        packages &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;mypkg&amp;#39;&lt;/span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        package_data &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; : [&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;data.json&amp;#34;&lt;/span&gt;] },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        scripts &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;runner&amp;#34;&lt;/span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        long_description &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Really long text here.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            install_requires&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;required&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Python int/hex and bytes</title>
      <link>/posts/2021/04/python-int/hex-and-bytes/</link>
      <pubDate>Thu, 22 Apr 2021 22:15:10 +0100</pubDate>
      <guid>/posts/2021/04/python-int/hex-and-bytes/</guid>
      <description>&lt;p&gt;few years ago, i tried to write ELF parser in python and it was fun to write hacky code to parse and manipulate binary/hex (not easy though). This is quick write-up to decribe python bin/hex methods.&lt;/p&gt;&#xA;&lt;h1 id=&#34;ord-and-chr&#34;&gt;&#xA;  ord and chr&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#ord-and-chr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;ord&lt;/code&gt; takes string of one char and returns ascii code. The doc descibes it as:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Given a string representing one Unicode character, return an integer representing the Unicode code point of that character. For example, ord(&amp;lsquo;a&amp;rsquo;) returns the integer 97 and ord(&amp;rsquo;€&amp;rsquo;) (Euro sign) returns 8364. This is the inverse of chr().&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python Decorators</title>
      <link>/posts/2021/04/python-decorators/</link>
      <pubDate>Mon, 19 Apr 2021 12:08:54 +0100</pubDate>
      <guid>/posts/2021/04/python-decorators/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.python.org/dev/peps/pep-0318/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pep&lt;/a&gt; describes decorators as better way for method transformation.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The current method of applying a transformation to a function or method places the actual transformation after the function body. For large functions this separates a key component of the function&amp;rsquo;s behavior from the definition of the rest of the function&amp;rsquo;s external interface&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;the pep mentions an example or the function transformation:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def foo(self):&#xA;    perform method operation&#xA;foo = classmethod(foo)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;syntax&#34;&gt;&#xA;  Syntax&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#syntax&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;syntax&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python Threading</title>
      <link>/posts/2021/04/python-threading/</link>
      <pubDate>Sun, 18 Apr 2021 16:01:24 +0100</pubDate>
      <guid>/posts/2021/04/python-threading/</guid>
      <description>&lt;p&gt;python threading module provides a way to start python callable in a thread of execution&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class threading.Thread(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)&#xA;This constructor should always be called with keyword arguments. Arguments are:&#xA;&#xA;group should be None; reserved for future extension when a ThreadGroup class is implemented.&#xA;&#xA;target is the callable object to be invoked by the run() method. Defaults to None, meaning nothing is called.&#xA;&#xA;name is the thread name. By default, a unique name is constructed of the form “Thread-N” where N is a small decimal number.&#xA;&#xA;args is the argument tuple for the target invocation. Defaults to ().&#xA;&#xA;kwargs is a dictionary of keyword arguments for the target invocation. Defaults to {}.&#xA;&#xA;If not None, daemon explicitly sets whether the thread is daemonic. If None (the default), the daemonic property is inherited from the current thread.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;it seems straightforward. create &lt;em&gt;Thread&lt;/em&gt; and pass callable. daemon can be set to True if you want thread to run as daemon.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python Subprocess</title>
      <link>/posts/2021/04/python-subprocess/</link>
      <pubDate>Sun, 18 Apr 2021 14:44:43 +0100</pubDate>
      <guid>/posts/2021/04/python-subprocess/</guid>
      <description>&lt;h1 id=&#34;subprocessrun&#34;&gt;&#xA;  subprocess.run&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#subprocessrun&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;python 3.5 provided new interface to replace older os.system to call programs and shell commands. &lt;a href=&#34;https://docs.python.org/3/library/subprocess.html#subprocess.run&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;doc&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;run() is wrapper around the lower interface Popen which provides finer and more complicated control. Also, run waits until process is done but popen will continue execution and user needs to check for process termination.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;subprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, capture_output=False, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None, text=None, env=None, universal_newlines=None, **other_popen_kwargs)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;as docs mentions these are the most important options.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python filter/map</title>
      <link>/posts/2021/04/python-filter/map/</link>
      <pubDate>Sun, 18 Apr 2021 12:39:44 +0100</pubDate>
      <guid>/posts/2021/04/python-filter/map/</guid>
      <description>&lt;h1 id=&#34;filter&#34;&gt;&#xA;  filter()&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#filter&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Define in &lt;a href=&#34;https://docs.python.org/3/library/functions.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docs&lt;/a&gt;,&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Construct an iterator from those elements of iterable for which function returns true. iterable may be either a sequence, a container which supports iteration, or an iterator. If function is None, the identity function is assumed, that is, all elements of iterable that are false are removed&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;This is very similar to filter and map from other languages like javascript&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python zip()</title>
      <link>/posts/2021/04/python-zip/</link>
      <pubDate>Sun, 18 Apr 2021 12:08:54 +0100</pubDate>
      <guid>/posts/2021/04/python-zip/</guid>
      <description>&lt;h1 id=&#34;zip-iterable-collections&#34;&gt;&#xA;  zip iterable collections&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#zip-iterable-collections&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;zip is a  way to iterate several iterable collections in the same loop. from &lt;a href=&#34;https://docs.python.org/3/library/functions.html#zip&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docs&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Make an iterator that aggregates elements from each of the iterables.&#xA;Returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables. The iterator stops when the shortest input iterable is exhausted. With a single iterable argument, it returns an iterator of 1-tuples.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python dict.items and enumerate</title>
      <link>/posts/2021/04/python-dict.items-and-enumerate/</link>
      <pubDate>Sun, 18 Apr 2021 11:49:07 +0100</pubDate>
      <guid>/posts/2021/04/python-dict.items-and-enumerate/</guid>
      <description>&lt;p&gt;Python provides several iteration API over collections(specially dictionary). In python2, there was dict.iteritems() for key/value iteration. Starting from python3, iteritems was replaced by items()i (see &lt;a href=&#34;https://stackoverflow.com/questions/10458437/what-is-the-difference-between-dict-items-and-dict-iteritems-in-python2&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SO&lt;/a&gt;). and there is also enumerate which works with all collections not just dict.&lt;/p&gt;&#xA;&lt;h1 id=&#34;dictitems&#34;&gt;&#xA;  dict.items()&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#dictitems&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Defined in &lt;a href=&#34;https://www.python.org/dev/peps/pep-3106/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pep&lt;/a&gt;, items() returns key/value iterator over dict. Although, items behaves the same in python2 and 3. but there is a difference in return type. In python2, items() returns list but in python3, it returns an iterator.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python Generator vs Iterator</title>
      <link>/posts/2021/04/python-generator-vs-iterator/</link>
      <pubDate>Sat, 17 Apr 2021 15:15:17 +0100</pubDate>
      <guid>/posts/2021/04/python-generator-vs-iterator/</guid>
      <description>&lt;p&gt;This is quick write-up about python iterators and generators.&lt;/p&gt;&#xA;&lt;h1 id=&#34;iterator-objects&#34;&gt;&#xA;  Iterator objects&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#iterator-objects&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;docs defines &lt;em&gt;iter&lt;/em&gt; functions&lt;/p&gt;&#xA;&lt;p&gt;&amp;quot;&amp;quot;&amp;quot;&#xA;Return an iterator object. The first argument is interpreted very differently depending on the presence of the second argument. Without a second argument, object must be a collection object which supports the iteration protocol (the &lt;strong&gt;iter&lt;/strong&gt;() method)&#xA;&amp;quot;&amp;quot;&amp;quot;&lt;/p&gt;&#xA;&lt;p&gt;This is an example of built-in iterators where &lt;em&gt;iter()&lt;/em&gt; and &lt;em&gt;next()&lt;/em&gt; are called to get iterator object and get next element in the list.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - TLM port to imp Connection</title>
      <link>/posts/2021/01/uvm-internals-tlm-port-to-imp-connection/</link>
      <pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/posts/2021/01/uvm-internals-tlm-port-to-imp-connection/</guid>
      <description>&lt;p&gt;This is a write-up about the Internals of TLM connection port-to-imp. I am using &lt;code&gt;uvm_blocking_put_port&lt;/code&gt; but others shouldn&amp;rsquo;t be different.&lt;/p&gt;&#xA;&lt;h1 id=&#34;producerconsumer-example&#34;&gt;&#xA;  Producer/Consumer example&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#producerconsumer-example&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The producer creates &lt;code&gt;port&lt;/code&gt; and calls &lt;code&gt;put&lt;/code&gt; with the transaction&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class producer extesnds uvm_component;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvm_blocking_put_port #(transaction) put_port;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; build_phase(...);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;put_port &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; new(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;, this);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; run_phase(....);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ....&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    put_port.put(t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The consumer creates &lt;code&gt;imp&lt;/code&gt; and provides&lt;code&gt;put&lt;/code&gt; method that gets called eventually.&lt;/p&gt;</description>
    </item>
    <item>
      <title>sshd with fail2ban</title>
      <link>/posts/2021/01/sshd-with-fail2ban/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/posts/2021/01/sshd-with-fail2ban/</guid>
      <description>&lt;p&gt;fail2ban is an important to harden any server exposed to the internet. mainly to stop bots from smashing the ssh service.&lt;/p&gt;&#xA;&lt;h1 id=&#34;installation&#34;&gt;&#xA;  Installation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#installation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt install fail2ban&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl enable fail2ban.service&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl start fail2ban.service&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;configuration&#34;&gt;&#xA;  configuration&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#configuration&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;there are several default configuration but we can override with with &lt;code&gt;fail2ban.local&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /etc/fail2ban/jail.conf /etc/fail2ban.local&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;fail2ban.local&lt;/code&gt; already has section for sshd. we just need to enable it and configure it as needed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - transaction id</title>
      <link>/posts/2021/01/uvm-internals-transaction-id/</link>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/posts/2021/01/uvm-internals-transaction-id/</guid>
      <description>&lt;p&gt;Have you ever wondered what &lt;code&gt;set_id_info&lt;/code&gt; does? If you have, read on.&lt;/p&gt;&#xA;&lt;p&gt;UVM docs describe &lt;code&gt;set_id_info&lt;/code&gt; as:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;function void set_id_info(&#x9;uvm_sequence_item &#x9;item&#x9;)&lt;/p&gt;&#xA;&lt;p&gt;Copies the sequence_id and transaction_id from the referenced item into the calling item.  This routine should always be used by drivers to initialize responses for future compatibility.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Basically, &lt;code&gt;set_id_info&lt;/code&gt; is called as a part of &lt;code&gt;req&lt;/code&gt;/&lt;code&gt;rsp&lt;/code&gt; protocol. driver can have something like the following&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;seq_item_port.get(req);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;rsp &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; new();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;rsp.set_id_info(req);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;seq_item_port.put(rsp);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Jumping right into &lt;code&gt;src/seq/uvm_sequence_item.svh&lt;/code&gt;, it&amp;rsquo;s obvious that &lt;code&gt;set_id_info&lt;/code&gt; copies transaction id and sequence id. so, why is this important anyway?&#xA;Let&amp;rsquo;s start by looking at &lt;code&gt;set_transaction_id&lt;/code&gt; and &lt;code&gt;get_transaction_id&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - uvm_create and uvm_send</title>
      <link>/posts/2021/01/uvm-internals-uvm_create-and-uvm_send/</link>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/posts/2021/01/uvm-internals-uvm_create-and-uvm_send/</guid>
      <description>&lt;p&gt;Typical pattern for sequence &lt;code&gt;body&lt;/code&gt; does 3 things:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Create object&lt;/li&gt;&#xA;&lt;li&gt;Configure and randomize Object&lt;/li&gt;&#xA;&lt;li&gt;Send Object&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    req &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; req&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;type_id&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;create(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;req&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start_item(req);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// Do something here with req&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    finish_item(req);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;UVM provide two macros to do less typing&amp;hellip; and confuse everyone (always bonus for UVM people).&#xA;these macros are &lt;code&gt;uvm_create&lt;/code&gt; and &lt;code&gt;uvm_send&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;uvm_create&#34;&gt;&#xA;  uvm_create&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#uvm_create&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with &lt;code&gt;uvm_create&lt;/code&gt; which calls &lt;code&gt;uvm_create_on&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_create&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// Do something here with req&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_send&lt;/span&gt;(req)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;`define uvm_create(SEQ_OR_ITEM) \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;  `uvm_create_on(SEQ_OR_ITEM, m_sequencer)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;uvm_create&lt;/code&gt; uses &lt;code&gt;uvm_create_on&lt;/code&gt; macro&lt;/p&gt;</description>
    </item>
    <item>
      <title>rustlang - Hello world</title>
      <link>/posts/2020/12/rustlang-hello-world/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/12/rustlang-hello-world/</guid>
      <description>&lt;h1 id=&#34;cargo&#34;&gt;&#xA;  Cargo&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#cargo&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;cargo&lt;/code&gt; package manager can be used to create standard structure for rust application.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cargo ini&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To build&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cargo build&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To build opt binary:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can build and run binary with&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cargo run&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;creating-first-rust-module&#34;&gt;&#xA;  Creating first rust module&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#creating-first-rust-module&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;To create a module, create file under &lt;code&gt;src/&lt;/code&gt;. For this example, the module name is &lt;code&gt;print.rs&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;pub&lt;/span&gt;&lt;span style=&#34;color:#6e7681&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;run&lt;/span&gt;(){&lt;span style=&#34;color:#6e7681&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6e7681&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;println!&lt;/span&gt;(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Hello there&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#6e7681&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6e7681&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#6e7681&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and that module can be imported into main using &lt;code&gt;mod print&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Not the hitchhiker&#39;s guide to UPF</title>
      <link>/posts/2020/12/not-the-hitchhikers-guide-to-upf/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/12/not-the-hitchhikers-guide-to-upf/</guid>
      <description>&lt;p&gt;There are my notes while reading the UPF standard (IEEE Std 1801). The standard is short and concise document and required several re-reads to understand the UPF semantics (Exactly as painful as reading the 1800 LRM).&lt;/p&gt;&#xA;&lt;h1 id=&#34;domains&#34;&gt;&#xA;  Domains&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#domains&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This is summary of section 4.2(just in points)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;domain is a collection of design elements. Unless otherwise specified, elements of a power domain share a&#xA;common primary supply set (see 4.3).&lt;/li&gt;&#xA;&lt;li&gt;primary supply set is implicitly connected to all elements within the domain.&lt;/li&gt;&#xA;&lt;li&gt;The design consists of a hierarchical tree of design elements (logic hierarchy). The logic hierarchy level&#xA;where a power domain is created is called the scope of the power domain.&lt;/li&gt;&#xA;&lt;li&gt;The set of design elements that belong to a power domain are said to be the extent of that power domain.&lt;/li&gt;&#xA;&lt;li&gt;design element can be the scope of multiple power domains, it can be in the extent of one and only one power domain.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;So, each Domain has a scope and extent. And &lt;code&gt;extent&lt;/code&gt; is all elements are under that domain.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Graphviz - Hello world</title>
      <link>/posts/2020/12/graphviz-hello-world/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/12/graphviz-hello-world/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;graphviz.org/about/&#34; &gt;Garphviz&lt;/a&gt; is very useful package to visualize data. They define their own &amp;ldquo;language&amp;rdquo; to render the graphs. More details about the &lt;a href=&#34;https://www.graphviz.org/doc/info/lang.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dot language&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h1 id=&#34;example&#34;&gt;&#xA;  Example&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#example&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This is example i found on &lt;a href=&#34;https://stackoverflow.com/questions/62769161/error-format-svg-not-recognized-use-one-of&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SO&lt;/a&gt; and i think it&amp;rsquo;s great way to quickly visualize diagrams.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;digraph G {&#xA;    graph [rankdir = LR];&#xA;&#xA;    node[shape=record];&#xA;    Bar[label=&amp;#34;{ \&amp;#34;Bar\&amp;#34;|{&amp;lt;p1&amp;gt;pin 1|&amp;lt;p2&amp;gt;     2|&amp;lt;p3&amp;gt;     3|&amp;lt;p4&amp;gt;     4|&amp;lt;p5&amp;gt;     5} }&amp;#34;];&#xA;    Foo[label=&amp;#34;{ {&amp;lt;data0&amp;gt;data0|&amp;lt;data1&amp;gt;data1|&amp;lt;data2&amp;gt;data2|&amp;lt;data3&amp;gt;data3|&amp;lt;data4&amp;gt;data4}|\&amp;#34;Foo\&amp;#34; |{&amp;lt;out0&amp;gt;out0|&amp;lt;out1&amp;gt;out1|&amp;lt;out2&amp;gt;out2|&amp;lt;GND&amp;gt;gnd|&amp;lt;ex0&amp;gt;ex0|&amp;lt;hi&amp;gt;hi|&amp;lt;lo&amp;gt;lo} }&amp;#34;];&#xA;&#xA;    Bew[label=&amp;#34;{ {&amp;lt;clk&amp;gt;clk|&amp;lt;syn&amp;gt;syn|&amp;lt;mux0&amp;gt;mux0|&amp;lt;mux1&amp;gt;mux1|&amp;lt;signal&amp;gt;signal}|\&amp;#34;Bew\&amp;#34; |{&amp;lt;out0&amp;gt;out0|&amp;lt;out1&amp;gt;out1|&amp;lt;out2&amp;gt;out2} }&amp;#34;];&#xA;    Bar:p1 -&amp;gt; Foo:data0;&#xA;    Bar:p2 -&amp;gt; Foo:data1;&#xA;    Bar:p3 -&amp;gt; Foo:data2;&#xA;    Bar:p4 -&amp;gt; Foo:data3;&#xA;    Bar:p5 -&amp;gt; Foo:data4;&#xA;&#xA;    Foo:out0 -&amp;gt; Bew:mux0;&#xA;    Foo:out1 -&amp;gt; Bew:mux1;&#xA;    Bew:clk -&amp;gt; Foo:ex0;&#xA;&#xA;    Gate[label=&amp;#34;{ {&amp;lt;a&amp;gt;a|&amp;lt;b&amp;gt;b}|OR|{&amp;lt;ab&amp;gt;a\|b} }&amp;#34;];&#xA;&#xA;    Foo:hi -&amp;gt; Gate:a;&#xA;    Foo:lo -&amp;gt; Gate:b;&#xA;    Gate:ab -&amp;gt; Bew:signal;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;dot&lt;/code&gt; program (part of graphviz) is used to generate png&lt;/p&gt;</description>
    </item>
    <item>
      <title>TCL And C interface</title>
      <link>/posts/2020/12/tcl-and-c-interface/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/12/tcl-and-c-interface/</guid>
      <description>&lt;h1 id=&#34;calling-tcl-from-c&#34;&gt;&#xA;  Calling TCL from C&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#calling-tcl-from-c&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with working example, we can see that &lt;code&gt;Tcl_CreateInterp&lt;/code&gt;  and &lt;code&gt;Tcl_Eval&lt;/code&gt; are the only two Tcl calls.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;tcl.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt; (&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#ff7b72&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;argv[]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Tcl_Interp &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;myinterp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;action &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;set a [expr 5 * 8]; puts $a&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; status;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;printf&lt;/span&gt; (&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Your Program will run ... &lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        myinterp &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;Tcl_CreateInterp&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        status &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;Tcl_Eval&lt;/span&gt;(myinterp,action);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;printf&lt;/span&gt; (&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Your Program has completed&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And compilation command&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; - Scoped enum</title>
      <link>/posts/2020/12/c-scoped-enum/</link>
      <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/12/c-scoped-enum/</guid>
      <description>&lt;p&gt;C defined a way to declare enum(or enum type) and enum constants. but the problem here is namespace pollution due to enum constants. I guess that why they came up with scoped enum to make enum behave like class types and enum constants are scoped with &lt;code&gt;::&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;utility&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;namespace&lt;/span&gt; std;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;enum&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ONE,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TWO&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} e1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;senum&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ONES,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TWOS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e1 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; ONE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    senum e2 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; senum&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;ONES;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; - std::array</title>
      <link>/posts/2020/12/c-stdarray/</link>
      <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/12/c-stdarray/</guid>
      <description>&lt;p&gt;Starting &lt;a href=&#34;https://en.cppreference.com/w/cpp/container/array&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;c++11&lt;/a&gt;, &lt;code&gt;std::array&lt;/code&gt; can be used for fixed size array. As opposed to &lt;code&gt;std::vector&lt;/code&gt; with variable length array.&#xA;note that length is fixed with &lt;code&gt;aggregate initialization&lt;/code&gt; and other&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; a2 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I think the biggest advantage over the vanilla array &lt;code&gt;[]&lt;/code&gt; is preventing pointer decay. where array pointers can assigned to compatible pointer. For more details why this is bad see &lt;a href=&#34;https://stackoverflow.com/questions/1461432/what-is-array-to-pointer-decay&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SO&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Beside that, there are cool methods like &lt;code&gt;fill&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; and of course operator overload &lt;code&gt;[]&lt;/code&gt;  same as vanilla array.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Stock Market Definitions</title>
      <link>/posts/2020/12/stock-market-definitions/</link>
      <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/12/stock-market-definitions/</guid>
      <description>&lt;h1 id=&#34;52-week-range&#34;&gt;&#xA;  52 week Range&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#52-week-range&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.investopedia.com/terms/1/52-week-range.asp#:~:text=What%20Is%20the%2052%2DWeek,during%20the%20previous%2052%20weeks.&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;invest&lt;/a&gt; Define it as&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The 52-week range is a data point traditionally reported by printed financial news media, but more modernly included in data feeds from financial information sources online. The data point includes the lowest and highest price at which a stock has traded during the previous 52 weeks.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;volume&#34;&gt;&#xA;  Volume&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#volume&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Volume is the amount of an asset or security that changes hands over some period of time, often over the course of a day.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Systemverilog Assertions(SVA) - part1 - 5-minute tour</title>
      <link>/posts/2020/12/systemverilog-assertionssva-part1-5-minute-tour/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/12/systemverilog-assertionssva-part1-5-minute-tour/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;There are two types of assertions: immediate and concurrent. I will omit immediate here because they are simple and straightforward for anyone who wrote an assertions in any language.&lt;/p&gt;&#xA;&lt;p&gt;concurrent assertions provide temporal(over time) semantics to check the deign &amp;ldquo;intent&amp;rdquo;. Basically, They describe behavior that spans over time. Unlike immediate assertions, the evaluation model is based on a clock so that a concurrent assertion is evaluated only at the occurrence of a clock tick.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Abridged guide to Systemverilog Functional coverage</title>
      <link>/posts/2020/12/abridged-guide-to-systemverilog-functional-coverage/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/12/abridged-guide-to-systemverilog-functional-coverage/</guid>
      <description>&lt;p&gt;Coverage is big part of &amp;ldquo;CRV&amp;rdquo; (constrained random verification). If randomization answers the question &amp;ldquo;does it work?&amp;rdquo;, Something needs to say when to stop &amp;ldquo;randomizing&amp;rdquo; and answer the question &amp;ldquo;are done?&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;SV Standard define combine several Semantics languages (mixed bag) for OOP, SVA, Randomization and most importantly &lt;code&gt;Functional Coverage&lt;/code&gt;. This is small(or abridged if you like fancy words) intro to Coverage semantics. So, LRM reading is a must to understand all features and details about functional coverage semantics.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; -is_copy_constructible and is_copy_assignable templates</title>
      <link>/posts/2020/11/c-is_copy_constructible-and-is_copy_assignable-templates/</link>
      <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/11/c-is_copy_constructible-and-is_copy_assignable-templates/</guid>
      <description>&lt;p&gt;c++11 defines several templates utilities that can evaluate if class has copy_constructor or assignment operator.&lt;/p&gt;&#xA;&lt;p&gt;there are several variants but this example uses &lt;code&gt;std::is_copy_constructible&lt;/code&gt; and &lt;code&gt;std::is_copy_assignable&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;for more details, see &lt;a href=&#34;https://en.cppreference.com/w/cpp/types/is_copy_assignable&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;is_copy_assignable&lt;/a&gt; and &lt;a href=&#34;https://en.cppreference.com/w/cpp/types/is_copy_constructible&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;is_copy_constructible&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;namespace&lt;/span&gt; std;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;cls&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cls(&lt;span style=&#34;color:#ff7b72&#34;&gt;const&lt;/span&gt; cls &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;default&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cls &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ff7b72&#34;&gt;const&lt;/span&gt; cls &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;other) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;default&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;cls1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cls1(&lt;span style=&#34;color:#ff7b72&#34;&gt;const&lt;/span&gt; cls1 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;delete&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cls1 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ff7b72&#34;&gt;const&lt;/span&gt; cls1 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;other) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;delete&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;cls&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;is_copy_assignable&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;cls&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;cls1&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;is_copy_assignable&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;cls1&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; - smart pointer - unique_ptr</title>
      <link>/posts/2020/11/c-smart-pointer-unique_ptr/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/11/c-smart-pointer-unique_ptr/</guid>
      <description>&lt;p&gt;Before c++11, smart pointer can be used from &lt;code&gt;boost&lt;/code&gt; library but now it&amp;rsquo;s part of std. This post documents some small example how to create and use &lt;code&gt;unique_ptr&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h1 id=&#34;hello-world&#34;&gt;&#xA;  Hello world&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#hello-world&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This is the first example of &lt;code&gt;unique_ptr&lt;/code&gt;, note how &lt;code&gt;sp&lt;/code&gt; is used same as &lt;code&gt;raw pointer&lt;/code&gt;. namely using &lt;code&gt;-&amp;gt;&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt;. From program output, It&amp;rsquo;s clear how unique_ptr is different.  &lt;code&gt;~cls()&lt;/code&gt; is called for  unique_ptr object but not for raw pointer.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; - std::pair</title>
      <link>/posts/2020/11/c-stdpair/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/11/c-stdpair/</guid>
      <description>&lt;p&gt;&lt;code&gt;std::pair&lt;/code&gt; is class template to store two elements(special case of std::tuple)&lt;/p&gt;&#xA;&lt;p&gt;according to &lt;a href=&#34;https://en.cppreference.com/w/cpp/utility/pair&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cpp reference&lt;/a&gt;, the elements are accessible through &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;second&lt;/code&gt; member objects.&lt;/p&gt;&#xA;&lt;p&gt;there are several ways to create pair according to &lt;a href=&#34;https://en.cppreference.com/w/cpp/utility/pair/pair&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;. i am listing the 3 obvious ones here:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;default constructor if both types std;:is_default_constuctible_v for both types is true&lt;/li&gt;&#xA;&lt;li&gt;constructor (x,y) which initializes first and second to x and y&lt;/li&gt;&#xA;&lt;li&gt;copy contructor from another pain.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;utility&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;namespace&lt;/span&gt; std;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.first &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; p1(&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p1.first &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p1.second &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;auto&lt;/span&gt; p2 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; make_pair(&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;1.1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p2.first &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p2.second &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;make_pair&#34;&gt;&#xA;  make_pair&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#make_pair&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;pairs can be constructed using &lt;a href=&#34;https://en.cppreference.com/w/cpp/utility/pair/make_pair&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;make_pair&lt;/code&gt;&lt;/a&gt;. which is template function to deduce the first and second types.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; - std::tie and std::ignore</title>
      <link>/posts/2020/11/c-stdtie-and-stdignore/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/11/c-stdtie-and-stdignore/</guid>
      <description>&lt;p&gt;c++11 defines utility &lt;code&gt;tie&lt;/code&gt; to return tuple that can be used in lvalue.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.cppreference.com/w/cpp/utility/tuple/tie&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;c++ reference&lt;/a&gt; has have one line definition&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Creates a tuple of lvalue references to its arguments or instances of std::ignore.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;in plain English, this works like unpack tuple in python or destructing in javascript. So, in the following example, &lt;code&gt;func&lt;/code&gt; return  tuple of two elements and using &lt;code&gt;tie&lt;/code&gt; and unpacking it in &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; variables&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; - std::tuple</title>
      <link>/posts/2020/11/c-stdtuple/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/11/c-stdtuple/</guid>
      <description>&lt;p&gt;&lt;code&gt;std::tuple&lt;/code&gt; was added in c++11 fixed sized heterogeneous values  It is a generalization of std::pair.&#xA;full details at &lt;a href=&#34;https://en.cppreference.com/w/cpp/utility/tuple&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cpp reference&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;get&amp;lt;index&amp;gt;(tuple)&lt;/code&gt; is used to get the values at index.&lt;/p&gt;&#xA;&lt;p&gt;what is interesting about tuple though is using &lt;code&gt;make_tuple&lt;/code&gt; and &lt;code&gt;auto&lt;/code&gt; to create tuples without specifying types. &lt;code&gt;auto&lt;/code&gt; type deduction will figure it out.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;utility&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// for tuple&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;namespace&lt;/span&gt; std;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt;, string&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; make_tuple(&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;fff&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; get&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;(p) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;auto&lt;/span&gt; p1 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; make_tuple(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;1dd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;1.1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; get&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;(p1) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; - explicit</title>
      <link>/posts/2020/11/c-explicit/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/11/c-explicit/</guid>
      <description>&lt;p&gt;by default, compiler can do implicit type conversion if there is a constructor that matches the argument. For example, &lt;code&gt;func&lt;/code&gt; returns int and return type is &lt;code&gt;cls&lt;/code&gt; which has a constructor with int.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;namespace&lt;/span&gt; std;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;cls&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     cls(&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; i)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cout &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cls &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;func&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;230&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cls c(&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; func();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://en.cppreference.com/w/cpp/language/explicit&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cpreference&lt;/a&gt; describes &lt;code&gt;explicit&lt;/code&gt; as was to disable the implicit conversion and force compile error when that happens.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; - const method</title>
      <link>/posts/2020/11/c-const-method/</link>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/11/c-const-method/</guid>
      <description>&lt;p&gt;&lt;code&gt;const&lt;/code&gt; method specifier stop the method from writing to class members. It throws compile time error for writes.&lt;/p&gt;&#xA;&lt;h1 id=&#34;example&#34;&gt;&#xA;  Example&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#example&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;cls&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; x;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;func&lt;/span&gt;() &lt;span style=&#34;color:#ff7b72&#34;&gt;const&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        x &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const.cc:8:11: error: assignment of member ‘cls::x’ in read-only object&#xA;    8 |         x = 0;&#xA;      |         ~~^~~&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that &lt;code&gt;const&lt;/code&gt; methods can only call constant methods.&lt;/p&gt;&#xA;&lt;h1 id=&#34;work-around-const-ness&#34;&gt;&#xA;  Work around const-ness&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#work-around-const-ness&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;To force write inside &lt;code&gt;const&lt;/code&gt; method, &lt;code&gt;const_cast&lt;/code&gt; can be used to remove const-ness.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; - default and delete</title>
      <link>/posts/2020/11/c-default-and-delete/</link>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/11/c-default-and-delete/</guid>
      <description>&lt;h1 id=&#34;default&#34;&gt;&#xA;  Default&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#default&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;if class defines constructor, compiler won&amp;rsquo;t generate default constructor.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;namespace&lt;/span&gt; std;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;child&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; x;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    child(&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; x) { cout &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// child() = default;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    child c;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;so, this will fail  with compile error&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;default_delete.cc:24:11: error: no matching function for call to ‘child::child()’&#xA;   24 |     child c;&#xA;      |           ^&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But if still want default constructor, we can define the default constructor same as we don&amp;rsquo;t have the custom constructor&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; - final keyword</title>
      <link>/posts/2020/11/c-final-keyword/</link>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/11/c-final-keyword/</guid>
      <description>&lt;p&gt;&lt;code&gt;final&lt;/code&gt;  keyword was added in C++11 to stop virtual functional override or base class inheritance.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;When used in a virtual function declaration or definition, final specifier ensures that the function is virtual &amp;gt; and specifies that it may not be overridden by derived classes. The program is ill-formed (a compile-time error &amp;gt; is generated) otherwise.&lt;/p&gt;&#xA;&lt;p&gt;When used in a class definition, final specifies that this class may not appear in the base-specifier-list of &amp;gt; another class definition (in other words, cannot be derived from). The program is ill-formed otherwise (a &amp;gt; compile-time error is generated). final can also be used with a union definition, in which case it has no &amp;gt; effect (other than on the outcome of std::is_final) (since C++14), since unions cannot be derived from.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; - noexpect</title>
      <link>/posts/2020/11/c-noexpect/</link>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/11/c-noexpect/</guid>
      <description>&lt;p&gt;&lt;code&gt;noexept&lt;/code&gt; is c++11 specifier to mark method as exception non-throwing. the best explanation i found is on &lt;a href=&#34;https://docs.microsoft.com/en-us/cpp/cpp/noexcept-cpp?view=msvc-160&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MSF&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Unary conditional operator noexcept(constant_expression) where constant_expression yields true, and its unconditional synonym noexcept, specify that the set of potential exception types that can exit a function is empty. That is, the function never throws an exception and never allows an exception to be propagated outside its scope.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;and after i tried it out, g++ doesn&amp;rsquo;t error out when that happen. It does issue a warning about &lt;code&gt;throw&lt;/code&gt; calling terminate.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; - override</title>
      <link>/posts/2020/11/c-override/</link>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/11/c-override/</guid>
      <description>&lt;p&gt;override keyword to make sure that class method &amp;ldquo;overrides&amp;rdquo; base class method. If there is not virtual in a parent class, it will throw compile error.&lt;/p&gt;&#xA;&lt;h1 id=&#34;example&#34;&gt;&#xA;  Example&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#example&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;namespace&lt;/span&gt; std;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;parent&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; x;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// virtual void func()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//     cout &amp;lt;&amp;lt; &amp;#34;parent&amp;#34; &amp;lt;&amp;lt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;child&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;public&lt;/span&gt; parent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; x;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;func&lt;/span&gt;() &lt;span style=&#34;color:#ff7b72&#34;&gt;override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cout &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;child&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    child c;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c.func();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;g++ errors out with&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setup openvpn on VPS</title>
      <link>/posts/2020/11/setup-openvpn-on-vps/</link>
      <pubDate>Sun, 08 Nov 2020 19:46:08 +0200</pubDate>
      <guid>/posts/2020/11/setup-openvpn-on-vps/</guid>
      <description>&lt;h1 id=&#34;creating-openvpn-server&#34;&gt;&#xA;  Creating openvpn server&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#creating-openvpn-server&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I used the script from &lt;a href=&#34;https://github.com/angristan/openvpn-install&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github&lt;/a&gt;. which is very easy to follow to generate the server and config&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -O https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chmod +x openvpn-install.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./openvpn-install.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and to make sure the port 1194 is open, I used ufw to allow traffic on it&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ufw allow 1194/udp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;fixing-the-issue-with-linux-openvpn-connection&#34;&gt;&#xA;  Fixing the issue with linux openvpn connection&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#fixing-the-issue-with-linux-openvpn-connection&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;with generated ovpn, we can connect to the openvpn server&lt;/p&gt;</description>
    </item>
    <item>
      <title>Encrypt Hard drive with cryptsetup</title>
      <link>/posts/2020/11/encrypt-hard-drive-with-cryptsetup/</link>
      <pubDate>Sun, 08 Nov 2020 15:46:08 +0200</pubDate>
      <guid>/posts/2020/11/encrypt-hard-drive-with-cryptsetup/</guid>
      <description>&lt;h1 id=&#34;prerequisite&#34;&gt;&#xA;  prerequisite&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#prerequisite&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install cryptsetup parted&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#79c0ff&#34;&gt;DRIVE&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;sdc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;create-partition&#34;&gt;&#xA;  Create partition&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#create-partition&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dd &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;/dev/zero &lt;span style=&#34;color:#79c0ff&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;/dev/&lt;span style=&#34;color:#79c0ff&#34;&gt;$DRIVE&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;bs&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;512&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;count&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;conv&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;notrunc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo parted /dev/&lt;span style=&#34;color:#79c0ff&#34;&gt;$DRIVE&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;parted&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; mkpart primary ext4 0% 100%&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;parted&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; print&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;(&lt;/span&gt;parted&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;)&lt;/span&gt; quit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;encrypt-partition&#34;&gt;&#xA;  Encrypt partition&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#encrypt-partition&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Encrypt the partition with password&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo cryptsetup --verbose --verify-passphrase luksFormat /dev/&lt;span style=&#34;color:#a5d6ff&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;DRIVE&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Open luks with password above&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo cryptsetup luksOpen /dev/&lt;span style=&#34;color:#a5d6ff&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;DRIVE&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;DRIVE&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Create ext4 filesystem&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkfs.ext4 /dev/mapper/&lt;span style=&#34;color:#a5d6ff&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;DRIVE&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# clean-up luks&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo cryptsetup luksClose &lt;span style=&#34;color:#a5d6ff&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;DRIVE&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;test-partition&#34;&gt;&#xA;  Test partition&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#test-partition&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo cryptsetup luksOpen /dev/&lt;span style=&#34;color:#a5d6ff&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;DRIVE&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;DRIVE&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;##  Mount partition &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p /media/&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;whoami&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;/&lt;span style=&#34;color:#a5d6ff&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;DRIVE&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mount /dev/mapper/&lt;span style=&#34;color:#a5d6ff&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;DRIVE&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt; /media/&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;whoami&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;/&lt;span style=&#34;color:#a5d6ff&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;DRIVE&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# fix permission&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chown -R &lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;whoami&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;:users /media/&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;whoami&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;/&lt;span style=&#34;color:#a5d6ff&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;DRIVE&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# clean-up&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo umount /media/&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;whoami&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;/&lt;span style=&#34;color:#a5d6ff&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;DRIVE&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf /media/&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;whoami&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;/&lt;span style=&#34;color:#a5d6ff&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;DRIVE&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo cryptsetup luksClose &lt;span style=&#34;color:#a5d6ff&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;DRIVE&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>UVM Internals - Structural Components</title>
      <link>/posts/2020/11/uvm-internals-structural-components/</link>
      <pubDate>Sat, 07 Nov 2020 00:13:06 +0200</pubDate>
      <guid>/posts/2020/11/uvm-internals-structural-components/</guid>
      <description>&lt;h1 id=&#34;components&#34;&gt;&#xA;  Components&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#components&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;UVM defines set  of standard building blocks to build test hierarchy. All components inherit from &lt;code&gt;uvm_component&lt;/code&gt;. but some components have more bells and whistles than others.&lt;/p&gt;&#xA;&lt;h1 id=&#34;uvm_compssvh&#34;&gt;&#xA;  uvm_comps.svh&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#uvm_compssvh&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;starting with &lt;code&gt;src/comps/uvm_comps.svh&lt;/code&gt; where components live, we can see there are two types&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Utility components&lt;/li&gt;&#xA;&lt;li&gt;Structural components&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`include&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;comps/uvm_pair.svh&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`include&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;comps/uvm_policies.svh&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`include&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;comps/uvm_in_order_comparator.svh&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`include&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;comps/uvm_algorithmic_comparator.svh&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`include&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;comps/uvm_random_stimulus.svh&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`include&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;comps/uvm_subscriber.svh&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`include&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;comps/uvm_monitor.svh&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`include&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;comps/uvm_driver.svh&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`include&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;comps/uvm_push_driver.svh&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`include&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;comps/uvm_scoreboard.svh&amp;#34;&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`include&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;comps/uvm_agent.svh&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`include&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;comps/uvm_env.svh&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`include&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;comps/uvm_test.svh&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;the-vanilla-components&#34;&gt;&#xA;  The vanilla components&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-vanilla-components&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;There are several components which are just extension of &lt;code&gt;uvm_component&lt;/code&gt; without adding any further functionality.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Device Tree hello world</title>
      <link>/posts/2020/09/device-tree-hello-world/</link>
      <pubDate>Sun, 06 Sep 2020 16:05:18 +0200</pubDate>
      <guid>/posts/2020/09/device-tree-hello-world/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Device_tree&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Device Tree&lt;/a&gt; is defined as&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;In computing, a device tree (also written devicetree) is a data structure describing the hardware components of a particular computer so that the operating system&amp;rsquo;s kernel can use and manage those components, including the CPU or CPUs, the memory, the buses and the peripherals.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Basically, device tree defines SOC architecture for operating system or boot-loader. This is widely used in embedded systems where the system is not configurable and not going to change.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Report Server</title>
      <link>/posts/2020/09/uvm-report-server/</link>
      <pubDate>Fri, 04 Sep 2020 03:13:06 +0200</pubDate>
      <guid>/posts/2020/09/uvm-report-server/</guid>
      <description>&lt;p&gt;UVM Class reference manual define &lt;code&gt;uvm_report_server&lt;/code&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;uvm_report_handler. None of its methods are intended to be called by normal testbench&#xA;uvm_report_server is a global server that processes all of the reports generated by an&#xA;code, although in some circumstances the virtual methods process_report and/or&#xA;compose_uvm_info may be overloaded in a subclass.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;define-uvm_report_server&#34;&gt;&#xA;  Define uvm_report_server&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#define-uvm_report_server&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;To change the message format, say CSV, &lt;code&gt;compase_message&lt;/code&gt; can be used to return re-formatted message.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Report Catcher</title>
      <link>/posts/2020/09/uvm-report-catcher/</link>
      <pubDate>Tue, 01 Sep 2020 03:13:06 +0200</pubDate>
      <guid>/posts/2020/09/uvm-report-catcher/</guid>
      <description>&lt;p&gt;How to use UVM report catcher to change message attributes. Report catcher can&amp;rsquo;t change the message format. Report server can be used to change the format.&lt;/p&gt;&#xA;&lt;h1 id=&#34;report-catcher&#34;&gt;&#xA;  Report Catcher&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#report-catcher&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;first we need to sub-class &lt;code&gt;uvm_report_catcher&lt;/code&gt; and override &lt;code&gt;catch&lt;/code&gt;. in this example,&lt;code&gt;get_severity&lt;/code&gt; and &lt;code&gt;get_id&lt;/code&gt; are used to filter messages. Then &lt;code&gt;THROW&lt;/code&gt; is returned which passes the modified message.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class catcher extends uvm_report_catcher;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; new(&lt;span style=&#34;color:#ff7b72&#34;&gt;string&lt;/span&gt; name&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;catcher&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    super.new(name);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; action_e catch();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt;(get_severity() &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;==&lt;/span&gt; UVM_WARNING&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; get_id() &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;MYID&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      set_severity(UVM_ERROR);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; THROW;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All getters and setters can be found at &lt;a href=&#34;https://verificationacademy.com/verification-methodology-reference/uvm/docs_1.1a/html/files/base/uvm_report_catcher-svh.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UVM report cat catcher&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Sequencer grab()</title>
      <link>/posts/2020/08/uvm-sequencer-grab/</link>
      <pubDate>Mon, 31 Aug 2020 03:13:06 +0200</pubDate>
      <guid>/posts/2020/08/uvm-sequencer-grab/</guid>
      <description>&lt;h1 id=&#34;hierarchical-sequences&#34;&gt;&#xA;  Hierarchical sequences&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#hierarchical-sequences&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;A big part of sequencer functionality (i.e., complexity) is sequence arbitration. That&amp;rsquo;s why we have the whole &lt;code&gt;start_item&lt;/code&gt; and &lt;code&gt;get_next_item&lt;/code&gt; thing, AKA driver-sequence protocol.&lt;/p&gt;&#xA;&lt;p&gt;In this example, I am using 2 sequences with &lt;code&gt;p_sequencer&lt;/code&gt;. By default, the priority of all items from sequences are equal and default arbitration algorithm is fifo.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class my_sequence extends uvm_sequence#(my_transaction);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_object_utils&lt;/span&gt;(my_sequence)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_declare_p_sequencer&lt;/span&gt;(my_sequencer)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt;  new(&lt;span style=&#34;color:#ff7b72&#34;&gt;string&lt;/span&gt; name&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;super.new(name);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;m_seq1 s1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    m_seq2 s2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;task&lt;/span&gt; body();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      s1 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; m_seq1&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;type_id&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;create(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;s1&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      s2 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; m_seq2&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;type_id&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;create(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;s2&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff7b72&#34;&gt;fork&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        s1.start(p_sequencer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        s2.start(p_sequencer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff7b72&#34;&gt;join&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;endtask&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; body&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The sequencer alternates between sequences. So, we have items from each sequence in the order they were called from the virtual sequence.&lt;/p&gt;</description>
    </item>
    <item>
      <title>uvm_config_db spellchecker</title>
      <link>/posts/2020/08/uvm_config_db-spellchecker/</link>
      <pubDate>Mon, 31 Aug 2020 03:13:06 +0200</pubDate>
      <guid>/posts/2020/08/uvm_config_db-spellchecker/</guid>
      <description>&lt;p&gt;Fun trivia i didn&amp;rsquo;t know about UVM config DB. It has build-in spell checker for resource lookup. Who Knew!&lt;/p&gt;&#xA;&lt;p&gt;The class for spell checker is &lt;code&gt;uvm_spell_chkr&lt;/code&gt;. grep&amp;rsquo;ing trough UVM-1.1d, i found it&amp;rsquo;s used once inside &lt;code&gt;uvm_resource.svh&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;bit&lt;/span&gt; spell_check(&lt;span style=&#34;color:#ff7b72&#34;&gt;string&lt;/span&gt; s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; uvm_spell_chkr#(uvm_resource_types&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;rsrc_q_t)&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;check(rtab, s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;looking at &lt;code&gt;check&lt;/code&gt;, It seems like poorman&amp;rsquo;s spell checker for resource names.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [.........]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;%s not located&amp;#34;&lt;/span&gt;, s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// if (min == max) then the string table is empty&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt;(min &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;==&lt;/span&gt; max) &lt;span style=&#34;color:#ff7b72&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      $display(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;  no alternatives to suggest&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// dump all the alternatives with the minimum distance&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;    foreach(min_key[i]) &lt;span style=&#34;color:#ff7b72&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      $display(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;  did you mean %s?&amp;#34;&lt;/span&gt;, min_key[i]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And &lt;code&gt;spell_check&lt;/code&gt; is called from lookup_name&lt;/p&gt;</description>
    </item>
    <item>
      <title>WE API reverse engineering</title>
      <link>/posts/2020/08/we-api-reverse-engineering/</link>
      <pubDate>Sat, 29 Aug 2020 21:39:25 +0200</pubDate>
      <guid>/posts/2020/08/we-api-reverse-engineering/</guid>
      <description>&lt;h1 id=&#34;background&#34;&gt;&#xA;  Background&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#background&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;My ISP has a &amp;ldquo;modern&amp;rdquo; web app using Angular and REST backend. that said, their website sucks because their login form breaks my password manager. So, I have to login manually every time.&lt;/p&gt;&#xA;&lt;p&gt;Obviously, they don&amp;rsquo;t have a documented API. so, i have to trace the xhr requests in the browser. This is a 3 hour journey to reverse engineer their login API including deepdive into their weird password encryption!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wake on LAN</title>
      <link>/posts/2020/08/wake-on-lan/</link>
      <pubDate>Sat, 29 Aug 2020 15:46:08 +0200</pubDate>
      <guid>/posts/2020/08/wake-on-lan/</guid>
      <description>&lt;p&gt;There is a cool protocol to boot machine remotely called &lt;a href=&#34;https://en.wikipedia.org/wiki/Wake-on-LAN&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wake on LAN&lt;/a&gt;. Considering i am using RPI as gateway, This allows me to start my machine remotely and poweroff if not needed.&lt;/p&gt;&#xA;&lt;h1 id=&#34;enable-wol-in-biosuefi&#34;&gt;&#xA;  Enable WOL in BIOS/UEFI&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#enable-wol-in-biosuefi&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This has to be supported by hardware and it&amp;rsquo;s usually disabled by default. On my mobo, It&amp;rsquo;s named &amp;ldquo;Power On by PCIE&amp;rdquo;. So, that has to be enabled first.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM user defined phase</title>
      <link>/posts/2020/08/uvm-user-defined-phase/</link>
      <pubDate>Sat, 29 Aug 2020 00:13:06 +0200</pubDate>
      <guid>/posts/2020/08/uvm-user-defined-phase/</guid>
      <description>&lt;p&gt;UVM provide a weird pattern to define user defined phases. Usually, it&amp;rsquo;s useful for adding phases for VIP&amp;rsquo;s&lt;/p&gt;&#xA;&lt;h1 id=&#34;user-defined-phase-boiler-plate&#34;&gt;&#xA;  User defined phase boiler-plate&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#user-defined-phase-boiler-plate&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;According to UVM class reference manual, we need to extends on of the class&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class my_PHASE_phase extends uvm_task_phase;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class my_PHASE_phase extends uvm_topdown_phase;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class my_PHASE_phase extends uvm_bottomup_phase;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;then override exec_task or exec_func&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;task&lt;/span&gt; exec_task(uvm_component comp, uvm_phase schedule);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt; exec_func(uvm_component comp, uvm_phase schedule);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;the important part about exec method that it calls the phase from the component&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Hearbeat</title>
      <link>/posts/2020/08/uvm-hearbeat/</link>
      <pubDate>Fri, 28 Aug 2020 02:28:49 +0200</pubDate>
      <guid>/posts/2020/08/uvm-hearbeat/</guid>
      <description>&lt;p&gt;Example of UVM hearbeat based on &lt;a href=&#34;https://verificationguide.com/uvm/uvm-heartbeat-example/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;example&lt;/a&gt; and &lt;a href=&#34;https://verificationacademy.com/verification-methodology-reference/uvm/docs_1.1c/html/files/base/uvm_heartbeat-svh.html#uvm_heartbeat&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UVM heartbeat docs&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;UVM reference manual defines &lt;code&gt;Heart Beat&lt;/code&gt; as&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Heartbeats provide a way for environments to easily ensure that their descendants are&#xA;alive. A uvm_heartbeat is associated with a specific objection object. A component that&#xA;is being tracked by the heartbeat object must raise (or drop) the synchronizing objection&#xA;during the heartbeat window. The synchronizing objection must be a&#xA;uvm_callbacks_objection type.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting up VNC</title>
      <link>/posts/2020/08/setting-up-vnc/</link>
      <pubDate>Fri, 21 Aug 2020 14:24:17 +0200</pubDate>
      <guid>/posts/2020/08/setting-up-vnc/</guid>
      <description>&lt;h1 id=&#34;install-server&#34;&gt;&#xA;  Install server&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#install-server&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Install tigervnc server&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apt install tigervnc-standalone-server&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Install desktop&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apt install  xfce4 xfce4-goodies&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Set up xstartup script&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;touch ~/.vnc/xstartup&#xA;chmod 700 ~/.vnc/xstartup&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/sh&#xA;&#xA;unset SESSION_MANAGER&#xA;unset DBUS_SESSION_BUS_ADDRESS&#xA;&#xA;[ -x /etc/vnc/xstartup ] &amp;amp;&amp;amp; exec /etc/vnc/xstartup&#xA;[ -r $HOME/.Xresources ] &amp;amp;&amp;amp; xrdb $HOME/.Xresources&#xA;xsetroot -solid grey&#xA;vncconfig -iconic &amp;amp;&#xA;xfce4-session &amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, create the session and set password&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vncserver&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;systemd-service&#34;&gt;&#xA;  systemd service&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#systemd-service&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;create service file&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Basics - Reporting</title>
      <link>/posts/2020/08/uvm-basics-reporting/</link>
      <pubDate>Sun, 16 Aug 2020 00:54:35 +0200</pubDate>
      <guid>/posts/2020/08/uvm-basics-reporting/</guid>
      <description>&lt;p&gt;A previous post went into the UVM Reporting implementation, But i thought UVM reporting is important enough topic to have overview.&lt;/p&gt;&#xA;&lt;h1 id=&#34;uvm-reporting&#34;&gt;&#xA;  UVM Reporting&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#uvm-reporting&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;UVM Reporting Macros provide 4 severity level &lt;code&gt;Info&lt;/code&gt;, &lt;code&gt;Warning&lt;/code&gt;, &lt;code&gt;Error&lt;/code&gt;,&lt;code&gt;Fatal&lt;/code&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;`uvm_info&#xA;`uvm_warning&#xA;`uvm_error&#xA;`uvm_fatal&#xA;`uvm_info_context&#xA;`uvm_warning_context&#xA;`uvm_error_context&#xA;`uvm_fatal_context&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;starting with &lt;code&gt;uvm_info&lt;/code&gt;,&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;`uvm_info(ID,MSG,VERBOSITY)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ID: Unique string for the message.&#xA;MSG: message string&#xA;VERBOSITY:&lt;/p&gt;&#xA;&lt;h1 id=&#34;hello-world&#34;&gt;&#xA;  Hello world&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#hello-world&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`include&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;uvm_macros.svh&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;uvm_pkg::*&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class test extends uvm_test;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_component_utils&lt;/span&gt;(test)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; new(&lt;span style=&#34;color:#ff7b72&#34;&gt;string&lt;/span&gt; name&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, uvm_component parent);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    super.new(name,parent);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;task&lt;/span&gt; run_phase(uvm_phase phase);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    super.run_phase(phase);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_info&lt;/span&gt;(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;TEST/RUN&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;,UVM_LOW)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;endtask&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;module&lt;/span&gt; top;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;initial&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    run_test(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;endmodule&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;output&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mysql cheat sheet</title>
      <link>/posts/2020/08/mysql-cheat-sheet/</link>
      <pubDate>Fri, 14 Aug 2020 10:23:57 +0200</pubDate>
      <guid>/posts/2020/08/mysql-cheat-sheet/</guid>
      <description>&lt;p&gt;This is a small sql cheat sheet i keep. It contains super basic operations (create, select, delete).&#xA;I am using Mysql for demo here but there would be some difference with sqlite or postgresql.&lt;/p&gt;&#xA;&lt;h1 id=&#34;start-mysql&#34;&gt;&#xA;  Start Mysql&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#start-mysql&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;to connect to server for first time, you need to connect as root&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo mysql&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;create-user-and-add-privileges&#34;&gt;&#xA;  Create user and add privileges&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#create-user-and-add-privileges&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE USER &amp;#39;user&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;password&amp;#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mysql&amp;gt; GRANT ALL PRIVILEGES ON *.* TO &amp;#39;user&amp;#39;@&amp;#39;localhost&amp;#39;;&#xA;Query OK, 0 rows affected (0.02 sec)&#xA;&#xA;mysql&amp;gt; FLUSH PRIVILEGES;&#xA;Query OK, 0 rows affected (0.00 sec)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;create-show-delete-databases&#34;&gt;&#xA;  Create, show delete databases&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#create-show-delete-databases&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mysql&amp;gt; CREATE DATABASE acme;&#xA;Query OK, 1 row affected (0.01 sec)&#xA;&#xA;mysql&amp;gt; SHOW DATABASES;&#xA;+--------------------+&#xA;| Database           |&#xA;+--------------------+&#xA;| acme               |&#xA;| information_schema |&#xA;| mysql              |&#xA;| performance_schema |&#xA;+--------------------+&#xA;7 rows in set (0.01 sec)&#xA;&#xA;mysql&amp;gt; DROP DATABASE acme;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;connect-to-database&#34;&gt;&#xA;  Connect to database&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#connect-to-database&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mysql&amp;gt; USE acme;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;tables&#34;&gt;&#xA;  Tables&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tables&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;list tables&lt;/p&gt;</description>
    </item>
    <item>
      <title>SSH jump server on Raspberry pi</title>
      <link>/posts/2020/08/ssh-jump-server-on-raspberry-pi/</link>
      <pubDate>Sun, 02 Aug 2020 18:46:08 +0200</pubDate>
      <guid>/posts/2020/08/ssh-jump-server-on-raspberry-pi/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;These are the steps to setup Raspberry pi as ssh &lt;a href=&#34;https://en.wikipedia.org/wiki/Jump_server&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;jump server&lt;/a&gt;. Well, It&amp;rsquo;s not exactly Fort Knox but it&amp;rsquo;s better than exposing my machine directly to internet. This way i can ssh into RPI first then ssh into a machine on local network.&lt;/p&gt;&#xA;&lt;h1 id=&#34;get-dynamic-dns&#34;&gt;&#xA;  Get Dynamic DNS&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#get-dynamic-dns&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The first step is getting dynamic DNS. The problem is ISP can change my real IP any time(usually when router reboots). So, I need to either pay for fixed IP(obviously i am too cheap to do that) or setup dynamic DNS. So, I quickly researched DDNS services and chose &lt;a href=&#34;https://www.noip.com/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;no-ip&lt;/a&gt;. It&amp;rsquo;s free but i need to login every 30 days which is not a deal breaker.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Yosys Nextpnr Flow</title>
      <link>/posts/2020/07/yosys-nextpnr-flow/</link>
      <pubDate>Thu, 23 Jul 2020 18:10:09 +0200</pubDate>
      <guid>/posts/2020/07/yosys-nextpnr-flow/</guid>
      <description>&lt;p&gt;I came across this &lt;a href=&#34;https://github.com/grahamedgecombe/icicle.git&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;riscv core&lt;/a&gt;. I was more interested in the setup to run Yosys and nextpnr all the way to bitstream.&lt;/p&gt;&#xA;&lt;p&gt;The default target is &lt;a href=&#34;https://www.digikey.com/product-detail/en/lattice-semiconductor-corporation/ICE40HX8K-B-EVN/220-1874-ND/4738851&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;board&lt;/a&gt; with &lt;a href=&#34;http://www.latticesemi.com/iCE40&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ICE40&lt;/a&gt; FPGA. These are steps the Makefile used to build bitstream.&lt;/p&gt;&#xA;&lt;h1 id=&#34;pre-synthesis&#34;&gt;&#xA;  Pre-synthesis&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#pre-synthesis&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;starting with &lt;code&gt;icepll&lt;/code&gt;, it&amp;rsquo;s part of &lt;a href=&#34;https://github.com/cliffordwolf/icestorm.git&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;icestorm&lt;/a&gt; project to reverse-engineer the binary format for ICE40 fpga.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;icepll -q -i &lt;span style=&#34;color:#a5d6ff&#34;&gt;12&lt;/span&gt; -o &lt;span style=&#34;color:#a5d6ff&#34;&gt;48&lt;/span&gt; -m -f pll.sv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The generated &lt;code&gt;pll&lt;/code&gt; is wrapper around Lattice&amp;rsquo;s &lt;code&gt;SB_PLL40_CORE&lt;/code&gt;. I guess pll was needed to generated higher frequency. the on-baoard clock was 12 MHz and generated clock is 48 MHz.&lt;/p&gt;</description>
    </item>
    <item>
      <title>APB Tutorial</title>
      <link>/posts/2020/07/apb-tutorial/</link>
      <pubDate>Thu, 23 Jul 2020 14:36:41 +0200</pubDate>
      <guid>/posts/2020/07/apb-tutorial/</guid>
      <description>&lt;p&gt;This is a walkthrough of the APB specification &lt;code&gt;AMBA 3 APB Protocol&lt;/code&gt;. The spec is short, but I thought to document my notes anyway.&lt;/p&gt;&#xA;&lt;h1 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;APB is AMBA&amp;rsquo;s low-speed bus that provides basic write/read transfer. No pipelines with a minimum access time of 2 cycles.&lt;/p&gt;&#xA;&lt;h1 id=&#34;transfers&#34;&gt;&#xA;  Transfers&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#transfers&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Chapter 2 explains write and read transfers with 2 variants:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nginx Configuration</title>
      <link>/posts/2020/07/nginx-configuration/</link>
      <pubDate>Wed, 15 Jul 2020 20:52:51 +0200</pubDate>
      <guid>/posts/2020/07/nginx-configuration/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt install nginx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;allow-http-and-https-ports&#34;&gt;&#xA;  allow HTTP and HTTPS ports&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#allow-http-and-https-ports&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ufw allow https&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ufw allow http&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;add-nginx-configuration&#34;&gt;&#xA;  Add nginx configuration&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#add-nginx-configuration&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;touch /etc/nginx/sites-available/foobar.com.conf&#xA;ln -s /etc/nginx/sites-available/foobar.com.conf /etc/nginx/sites-enable&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;server {&#xA;        listen 80;&#xA;        listen [::]:80;&#xA;&#xA;        server_name foobar.com www.foobar.com;&#xA;&#xA;        root /var/www/example.com;&#xA;        index index.html;&#xA;&#xA;        location / {&#xA;                try_files $uri $uri/ =404;&#xA;        }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;then reload nginx&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;service nginx reload&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;change-dns-on-domain-and-dns-provider&#34;&gt;&#xA;  Change DNS on domain and DNS provider&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#change-dns-on-domain-and-dns-provider&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Change the domain to point to your VPS provider. In my case, I am using digitalocean.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Stm32f4 Discovery - Part1 - ARM Cortex M4 Initialization</title>
      <link>/posts/2020/07/stm32f4-discovery-part1-arm-cortex-m4-initialization/</link>
      <pubDate>Sat, 11 Jul 2020 17:48:31 +0200</pubDate>
      <guid>/posts/2020/07/stm32f4-discovery-part1-arm-cortex-m4-initialization/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This post will explain the linker script and assembly initialization before jumping to main using &lt;a href=&#34;https://www.st.com/en/evaluation-tools/stm32f4discovery.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stm32f4&lt;/a&gt; board and Hello world example from &lt;a href=&#34;git://github.com/jeremyherbert/stm32-templates.git&#34; &gt;github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-end&#34;&gt;&#xA;  The end&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-end&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I will describe this the same way i gone through it. &lt;em&gt;Starting with the linking command&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;arm-none-eabi-gcc -g -O2 -Wall -Tstm32_flash.ld  -mlittle-endian -mthumb -mcpu&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;cortex-m4 -mthumb-interwork -mfloat-abi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;hard -mfpu&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;fpv4-sp-d16 -Iinc -Ilib -Ilib/inc  -Ilib/inc/core -Ilib/inc/peripherals  src/main.c src/stm32f4xx_it.c src/system_stm32f4xx.c lib/startup_stm32f4xx.s -o main.elf -Llib -lstm32f4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Starting with &lt;code&gt;main.c&lt;/code&gt;, well nothing interesting there. just the &lt;code&gt;main&lt;/code&gt;, obviously.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang Part1</title>
      <link>/posts/2020/07/golang-part1/</link>
      <pubDate>Fri, 10 Jul 2020 01:59:51 +0200</pubDate>
      <guid>/posts/2020/07/golang-part1/</guid>
      <description>&lt;p&gt;These are notes i document while learning Go.&lt;/p&gt;&#xA;&lt;h1 id=&#34;go-package&#34;&gt;&#xA;  Go package&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#go-package&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;the core of GO is packages. the main package contains one main function which is entry point for the build elf.&#xA;The ways i can run this file&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;fmt.&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;Println&lt;/span&gt;(os.Args)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Passing the file directory&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go build main.go&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;Passing the directory. In this case, the files in that directory will be compiled to generate the elf binary.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go build ./&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that all names should be unique in the files compiled into the same package.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang Part2</title>
      <link>/posts/2020/07/golang-part2/</link>
      <pubDate>Fri, 10 Jul 2020 01:59:51 +0200</pubDate>
      <guid>/posts/2020/07/golang-part2/</guid>
      <description>&lt;h1 id=&#34;maps&#34;&gt;&#xA;  Maps&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#maps&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;map has to initialized with &lt;code&gt;make&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;var&lt;/span&gt; m &lt;span style=&#34;color:#ff7b72&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#ff7b72&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#ff7b72&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;m = make(&lt;span style=&#34;color:#ff7b72&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#ff7b72&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#ff7b72&#34;&gt;string&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;m[&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;a1&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;fmt.&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;Println&lt;/span&gt;(m)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;structure&#34;&gt;&#xA;  Structure&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#structure&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;type struct&lt;/code&gt; to create a container for variables. in this example, &lt;code&gt;b1&lt;/code&gt; variable of type &lt;code&gt;Book&lt;/code&gt;. &lt;code&gt;b2&lt;/code&gt; is the same with initialized.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;type&lt;/span&gt; Book &lt;span style=&#34;color:#ff7b72&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;title &lt;span style=&#34;color:#ff7b72&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;pages &lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;var&lt;/span&gt; b1 Book&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;b1.pages = &lt;span style=&#34;color:#a5d6ff&#34;&gt;100&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;b1.title = &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;koko&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;fmt.&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;Println&lt;/span&gt;(b1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;b2 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:=&lt;/span&gt; Book{title: &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;b2&amp;#34;&lt;/span&gt;, pages: &lt;span style=&#34;color:#a5d6ff&#34;&gt;100&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;fmt.&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;Println&lt;/span&gt;(b2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;oop-ish&#34;&gt;&#xA;  OOP-ish&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#oop-ish&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;class can be defined with &lt;code&gt;type &amp;lt;name&amp;gt; struct&lt;/code&gt;. the class methods can be defined with &lt;code&gt;type &amp;lt;intf&amp;gt; interface&lt;/code&gt;. and finally to define type method.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bitbake Tutorial</title>
      <link>/posts/2020/07/bitbake-tutorial/</link>
      <pubDate>Fri, 03 Jul 2020 16:47:59 +0200</pubDate>
      <guid>/posts/2020/07/bitbake-tutorial/</guid>
      <description>&lt;h1 id=&#34;introdction&#34;&gt;&#xA;  Introdction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introdction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Bitbake is make-like build system. It was a part of openembedded project but split at some point to function as task runner.&lt;/p&gt;&#xA;&lt;p&gt;This is small working exaple of bitbake layer. I extracted it from &lt;a href=&#34;https://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docs&lt;/a&gt; and Yocto-poky repo.&lt;/p&gt;&#xA;&lt;h1 id=&#34;installation&#34;&gt;&#xA;  Installation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#installation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Download git repo from &lt;a href=&#34;https://github.com/openembedded/bitbake&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;git&lt;/a&gt;. and set PATH to &lt;code&gt;bitbake/bin&lt;/code&gt;. that&amp;rsquo;s it :)&lt;/p&gt;&#xA;&lt;h1 id=&#34;basic-concepts&#34;&gt;&#xA;  Basic concepts&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#basic-concepts&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Bitbake uses &lt;code&gt;recipes&lt;/code&gt; to control how to build software packages. Recipes can be grouped in &lt;code&gt;layer&lt;/code&gt;.It is useful to isolate related recipes into separate layer. And you can add customization or more recipes with additional layers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Starting With Wordpress</title>
      <link>/posts/2020/06/starting-with-wordpress/</link>
      <pubDate>Thu, 25 Jun 2020 19:14:05 +0200</pubDate>
      <guid>/posts/2020/06/starting-with-wordpress/</guid>
      <description>&lt;h1 id=&#34;dependencies&#34;&gt;&#xA;  Dependencies&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#dependencies&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install wordpress php libapache2-mod-php mysql-server php-mysql&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will install some important files at &lt;code&gt;/usr/share/wordpress&lt;/code&gt;. If this is the first time to install mysql you may be asked to set root user password.&lt;/p&gt;&#xA;&lt;h1 id=&#34;apache-setup&#34;&gt;&#xA;  Apache setup&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#apache-setup&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;First we need to setup Apache to serve php files from &lt;code&gt;/usr/share/wordpress&lt;/code&gt;. Edit &lt;code&gt;/etc/apache2/sites-available/wordpress.conf&lt;/code&gt; with the following content&lt;/p&gt;</description>
    </item>
    <item>
      <title>Breadth-first and Depth-first Graph Searches</title>
      <link>/posts/2020/06/breadth-first-and-depth-first-graph-searches/</link>
      <pubDate>Fri, 12 Jun 2020 19:04:24 +0200</pubDate>
      <guid>/posts/2020/06/breadth-first-and-depth-first-graph-searches/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;DFS and BFS  are probably first topic to do when doing anything related to graphs. I started with things like Dijkstra and prim which could be extension of DFS and BFS.&lt;/p&gt;&#xA;&lt;p&gt;DFS and BFS can be used for several application like shortest path and detecting cycles and connected components.&lt;/p&gt;&#xA;&lt;h1 id=&#34;breadth-first-search&#34;&gt;&#xA;  Breadth first search&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#breadth-first-search&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Breadth-first_search&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt; says that BFS visits the nodes of a graph by visiting the neighbour nodes first then move to the next level of neighbours.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prim&#39;s Minimum Spanning Tree</title>
      <link>/posts/2020/06/prims-minimum-spanning-tree/</link>
      <pubDate>Fri, 12 Jun 2020 00:56:05 +0200</pubDate>
      <guid>/posts/2020/06/prims-minimum-spanning-tree/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Prim%27s_algorithm&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;prim&amp;rsquo;s Algorithm&lt;/a&gt; find minimum spanning tree for weighted undirected graph.&lt;/p&gt;&#xA;&lt;p&gt;basically, Minimum spanning tree is sub-graph (in this case tree) that connect all vertices of weight graph. This requires that original graph is connected.&lt;/p&gt;&#xA;&lt;p&gt;MST is useful for network distribution problems.&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-algorithm&#34;&gt;&#xA;  The algorithm&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-algorithm&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;From the wiki:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Initialize a tree with a single vertex, chosen arbitrarily from the graph.&lt;/li&gt;&#xA;&lt;li&gt;Grow the tree by one edge: of the edges that connect the tree to vertices not yet in the tree, find the minimum-weight edge, and transfer it to the tree.&lt;/li&gt;&#xA;&lt;li&gt;Repeat step 2 (until all vertices are in the tree).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;implementation&#34;&gt;&#xA;  Implementation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#implementation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;As usual, adjacency list graph.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Graph&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;__init__&lt;/span&gt;(self, V):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;V &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; V&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;graph &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; [[] &lt;span style=&#34;color:#ff7b72&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;in&lt;/span&gt; range(V)]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;connect&lt;/span&gt;(self, n1,n2, w):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;graph[n1]&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;append((n2,w))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;graph[n2]&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;append((n1,w))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;The tricky part is knowing the edge to add. I use &lt;code&gt;mstSet&lt;/code&gt; as the temp sub-graph. This means the termination condition is  all vertices are in &lt;code&gt;mstSet&lt;/code&gt;. probably, This is not the best implementation but it&amp;rsquo;s good enough for this.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            value &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; float(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;inf&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff7b72&#34;&gt;for&lt;/span&gt; n1 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;in&lt;/span&gt; mstSet:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff7b72&#34;&gt;for&lt;/span&gt; (n2,w) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;graph[n1]:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt; w &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; value &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;and&lt;/span&gt; (&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;not&lt;/span&gt; n2 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;in&lt;/span&gt; mstSet):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        edge &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; (n1,n2,w)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        value &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; w&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          run &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; len(mstSet) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;!=&lt;/span&gt; self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;V&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;putting-it-all-together&#34;&gt;&#xA;  Putting it all together&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#putting-it-all-together&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;random&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Graph&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;__init__&lt;/span&gt;(self, V):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;V &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; V&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;graph &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; [[] &lt;span style=&#34;color:#ff7b72&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;in&lt;/span&gt; range(V)]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;connect&lt;/span&gt;(self, n1,n2, w):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;graph[n1]&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;append((n2,w))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;graph[n2]&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;append((n1,w))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Prim&lt;/span&gt;(Graph):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;__init__&lt;/span&gt;(self,V):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Graph&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;__init__&lt;/span&gt;(self,V)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;mst  &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; Graph(self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;V)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;MST&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mstSet &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# initial random node&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        start &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;, self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;V&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mstSet&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;append(start)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#79c0ff&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;gt;&amp;gt; Starting at node &lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;{&lt;/span&gt;start&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        total &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        run &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;True&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;while&lt;/span&gt; run:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Get the edge and add the node to mstSet&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            edge&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; ()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            value &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; float(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;inf&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff7b72&#34;&gt;for&lt;/span&gt; n1 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;in&lt;/span&gt; mstSet:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff7b72&#34;&gt;for&lt;/span&gt; (n2,w) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;graph[n1]:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt; w &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; value &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;and&lt;/span&gt; (&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;not&lt;/span&gt; n2 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;in&lt;/span&gt; mstSet):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        edge &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; (n1,n2,w)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        value &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; w&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            mstSet&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;append(edge[&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            total &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;+=&lt;/span&gt; edge[&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#79c0ff&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;edge=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;{&lt;/span&gt;edge&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# connect the node &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;mst&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;edge)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# check if all nodes are in the MST&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            run &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; len(mstSet) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;!=&lt;/span&gt; self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;V&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#79c0ff&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;total weight=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;{&lt;/span&gt;total&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    g &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; Prim(&lt;span style=&#34;color:#a5d6ff&#34;&gt;9&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    g&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;4&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    g&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;8&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    g&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;11&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    g&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;8&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    g&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#a5d6ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;7&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    g&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#a5d6ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    g&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    g&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;4&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    g&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;7&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    g&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#a5d6ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;6&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    g&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#a5d6ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    g&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;14&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    g&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;9&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    g&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#a5d6ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;10&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    g&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;MST()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;in&lt;/span&gt; g&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;mst&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;graph:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#79c0ff&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;vertix=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;{&lt;/span&gt;v&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;__name__&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    main()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Dijkstra Algorithm</title>
      <link>/posts/2020/06/dijkstra-algorithm/</link>
      <pubDate>Wed, 10 Jun 2020 22:04:46 +0200</pubDate>
      <guid>/posts/2020/06/dijkstra-algorithm/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dijkstra&amp;rsquo;s algorithm&lt;/a&gt; says it is an algorithm for finding the shortest paths between nodes in a graph.&lt;/p&gt;&#xA;&lt;p&gt;Dijkstra is big deal because it&amp;rsquo;s used to find the best way (based on weight function) between points A and B on a graph. It works well on graphs with non-negative edges.&lt;/p&gt;&#xA;&lt;p&gt;Considering the instance of the problem where A and B is connected and graph and required to calculate minimum cost for that path.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Merkle Tree</title>
      <link>/posts/2020/05/merkle-tree/</link>
      <pubDate>Fri, 29 May 2020 23:04:23 +0200</pubDate>
      <guid>/posts/2020/05/merkle-tree/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Merkle_tree&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Merkle tree&lt;/a&gt; is hash tree (usually binary tree) where each node is hash function of children nodes.&#xA;i used binary tree with sha256 from &lt;code&gt;hashlib&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h1 id=&#34;building-the-tree&#34;&gt;&#xA;  Building the tree&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#building-the-tree&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;i choose to start from the leafs and build up the tree bottom-to-top. &lt;code&gt;_buildTree&lt;/code&gt; does that by the recursively building parent nodes. for uniformity, i chose to add padding node to the tree (with empty hash string). this way the nodes are always even number all the way to the root node. this means unneeded nodes but easier logic. I didn&amp;rsquo;t put much thought about the upper limit for the number of dummy nodes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Xilinx Vivado - Part1 The Flow</title>
      <link>/posts/2020/05/xilinx-vivado-part1-the-flow/</link>
      <pubDate>Thu, 28 May 2020 20:14:08 +0200</pubDate>
      <guid>/posts/2020/05/xilinx-vivado-part1-the-flow/</guid>
      <description>&lt;p&gt;This post explains the simple vivado non-project flow for synthesis and implementation. The advantage of non-project mode is full control over the flow and reports generated. Note that non-project runs in-memory (no file generated).So, It does need some extra work to create checkpoints and reports as needed.&lt;/p&gt;&#xA;&lt;h1 id=&#34;invoking-vivado&#34;&gt;&#xA;  Invoking Vivado&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#invoking-vivado&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;vivado takes &lt;code&gt;-mode&lt;/code&gt; as one of &lt;code&gt;gui, tcl, batch&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;gui: default. start vivado in gui mode&lt;/li&gt;&#xA;&lt;li&gt;tcl: starts vivado in tcl (interactive mode)&lt;/li&gt;&#xA;&lt;li&gt;batch: starts vivado and exit after executing commands (regression mode)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Also, &lt;code&gt;-source run.tcl&lt;/code&gt; is used to run &lt;code&gt;run.tcl&lt;/code&gt; after init. I like to use &lt;code&gt;-nojournal -nolog&lt;/code&gt; to get rid of annoying log and journal files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Percolation Union find</title>
      <link>/posts/2020/05/percolation-union-find/</link>
      <pubDate>Tue, 26 May 2020 18:08:00 +0200</pubDate>
      <guid>/posts/2020/05/percolation-union-find/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Percolation&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wiki&lt;/a&gt; says that Percolation is&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;refers to the movement and filtering of fluids through porous materials&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;To put this in CS/Math terms:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Starting with N*N grid with and open and closed cells, is there a path from top row to bottom row?&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;This is an example from &lt;a href=&#34;https://www2.cs.duke.edu/courses/cps100r/spring18/notes/0228/13-percolation-uf.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;&#xA;that shows how system percolates or not.&#xA;&lt;img src=&#34;/percolation.png&#34; alt=&#34;Example image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Percolation is a problem that shows up in chemistry and physics. Also, in network connectivity or Maze connectivity. basically asking &amp;ldquo;is there a path between two points on grid&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sudoku SAT Solution</title>
      <link>/posts/2020/05/sudoku-sat-solution/</link>
      <pubDate>Sun, 24 May 2020 20:49:37 +0200</pubDate>
      <guid>/posts/2020/05/sudoku-sat-solution/</guid>
      <description>&lt;p&gt;This one is about two things Sudoku and SAT (obviously!). Let&amp;rsquo;s start with definitions:&lt;/p&gt;&#xA;&lt;h1 id=&#34;sudoku&#34;&gt;&#xA;  Sudoku&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#sudoku&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Sudoku is a puzzle with the objective to fill 9x9 grid with numbers between 1 and 9. There are few rules&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;All cells must have one number between 1 and 9&lt;/li&gt;&#xA;&lt;li&gt;Rows and columns must contain unique numbers 1 to 9 (no repeated digits)&lt;/li&gt;&#xA;&lt;li&gt;each 3x3 sub-grid (AKA box) must contain unique numbers 1 to 9 (to repeated digits)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://en.wikipedia.org/wiki/Sudoku&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Conway Game of Life</title>
      <link>/posts/2020/05/conway-game-of-life/</link>
      <pubDate>Sat, 23 May 2020 15:23:40 +0200</pubDate>
      <guid>/posts/2020/05/conway-game-of-life/</guid>
      <description>&lt;p&gt;Conway&amp;rsquo;s Game of Life is a zero-player game introduced by the mathematician John Horton Conway in 1970. Well, It has it&amp;rsquo;s own &lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt; and all.&lt;/p&gt;&#xA;&lt;p&gt;The rules are simple. You start with a grid of cells with initial state of either living or dead. Cells interact with neighbors to define the next generation of cells.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Any live cell with fewer than two live neighbors dies, as if by under-population.&lt;/li&gt;&#xA;&lt;li&gt;Any live cell with two or three live neighbors lives on to the next generation.&lt;/li&gt;&#xA;&lt;li&gt;Any live cell with more than three live neighbors dies, as if by overpopulation.&lt;/li&gt;&#xA;&lt;li&gt;Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;implementation&#34;&gt;&#xA;  Implementation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#implementation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;It&amp;rsquo;s using the following packages&lt;/p&gt;</description>
    </item>
    <item>
      <title>MD5 python implementation</title>
      <link>/posts/2020/05/md5-python-implementation/</link>
      <pubDate>Fri, 15 May 2020 23:04:19 +0200</pubDate>
      <guid>/posts/2020/05/md5-python-implementation/</guid>
      <description>&lt;p&gt;I thought it would be fun to implement MD5 from scratch. it was indeed fun but with few Gotchas. so, after shaking off PTSD, i wrote this post.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://tools.ietf.org/html/rfc1321&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rfc1321&lt;/a&gt; defines MD5 digest algorithm. It also has reference C implementation which is nice (and needlessly complicated). That said, I don&amp;rsquo;t think Python is really the best language for bit manipulations of binary files. but that is part of the fun, right?&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - Configuration database</title>
      <link>/posts/2020/05/uvm-internals-configuration-database/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/05/uvm-internals-configuration-database/</guid>
      <description>&lt;h1 id=&#34;the-white-rabbit&#34;&gt;&#xA;  The White Rabbit&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-white-rabbit&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Configuration database is used to pass around configuration parameters through a centralized database. One of the famous patterns is storing the virtual interface.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvm_config_db#(virtual v_if)&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;set(null,&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;v_if&amp;#34;&lt;/span&gt;,intf);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then any component(driver/monitor) can get the virtual interface&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvm_config_db#(virtual v_if)&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;get(null,&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;v_if&amp;#34;&lt;/span&gt;,vintf);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;set&#34;&gt;&#xA;  ::set&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#set&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with &lt;code&gt;::set&lt;/code&gt;, it is defined in &lt;code&gt;src/base/uvm_config_db.svh&lt;/code&gt; as static method of class &lt;code&gt;uvm_class_db&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class uvm_config_db#(&lt;span style=&#34;color:#ff7b72&#34;&gt;type&lt;/span&gt; T&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt;) extends uvm_resource_db#(T);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  static &lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt; set(uvm_component cntxt,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &lt;span style=&#34;color:#ff7b72&#34;&gt;string&lt;/span&gt; inst_name,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &lt;span style=&#34;color:#ff7b72&#34;&gt;string&lt;/span&gt; field_name,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           T value);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;set&lt;/code&gt; uses &lt;code&gt;cntxt&lt;/code&gt; to build the &lt;code&gt;inst_name&lt;/code&gt; then add resource &lt;code&gt;m_rsc&lt;/code&gt; if it doesn&amp;rsquo;t exist&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - Reporting</title>
      <link>/posts/2020/05/uvm-internals-reporting/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/05/uvm-internals-reporting/</guid>
      <description>&lt;h1 id=&#34;the-white-rabbit&#34;&gt;&#xA;  The White Rabbit&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-white-rabbit&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;uvm reporting is the mechanism to control which/how messages are printed to the logs. In this post, i am going to trace one of the macro down to IO system task.&lt;/p&gt;&#xA;&lt;p&gt;Starting with an example of &lt;code&gt;uvm_warning&lt;/code&gt; macro&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_warning&lt;/span&gt;(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;MYWARN1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;This is a warning&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;uvm_warning&#34;&gt;&#xA;  uvm_warning&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#uvm_warning&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;starting with macro expansion&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;`define uvm_warning(ID,MSG) \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;   begin \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;     if (uvm_report_enabled(UVM_NONE,UVM_WARNING,ID)) \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;       uvm_report_warning (ID, MSG, UVM_NONE, `uvm_file, `uvm_line); \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;   end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;in &lt;code&gt;uvm_globals.svh&lt;/code&gt;, the function &lt;code&gt;uvm_report_warning&lt;/code&gt; is defined&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - Factory</title>
      <link>/posts/2020/05/uvm-internals-factory/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/05/uvm-internals-factory/</guid>
      <description>&lt;h1 id=&#34;the-white-rabbit&#34;&gt;&#xA;  The White Rabbit&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-white-rabbit&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The factory is a way to dynamically construct objects (see wiki). For UVM, the factory can be used to override the object created, which allows &lt;code&gt;injection&lt;/code&gt; of new functionality into already existing sequences.&lt;/p&gt;&#xA;&lt;p&gt;It requires registering the class first then using &lt;code&gt;create&lt;/code&gt; to get an object&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;registration&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class env extends uvm_env;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_component_utils&lt;/span&gt;(uvm_env)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Creation&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;env &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; uvm_env&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;type_id&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;create(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt;,this);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;registration&#34;&gt;&#xA;  Registration&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#registration&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;uvm_component_utils&lt;/code&gt; is defined in &lt;code&gt;src/macros/uvm_object_defines.svh&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Internals - run_test</title>
      <link>/posts/2020/04/uvm-internals-run_test/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/04/uvm-internals-run_test/</guid>
      <description>&lt;h1 id=&#34;hello-world&#34;&gt;&#xA;  Hello World&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#hello-world&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The simplest UVM testbench starts with &lt;code&gt;run_test&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;initial begin&#xA;  run_test(&amp;#34;test01&amp;#34;);&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;run_test&lt;/code&gt; is defined on &lt;code&gt;src/base/uvm_globals.svh&lt;/code&gt; where it constructs &lt;code&gt;uvm_root&lt;/code&gt; and run run_test from &lt;code&gt;top.run_test()&lt;/code&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;task run_test (string test_name=&amp;#34;&amp;#34;);&#xA;  uvm_root top;&#xA;  top = uvm_root::get();&#xA;  top.run_test(test_name);&#xA;endtask&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;creating-uvm_root&#34;&gt;&#xA;  Creating uvm_root&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#creating-uvm_root&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;uvm_root is created by calling &lt;code&gt;uvm_root::get&lt;/code&gt; static method. Beside creating the singelton &lt;code&gt;uvm_root&lt;/code&gt;, it creates the &lt;code&gt;uvm_domain&lt;/code&gt; which is also a singelton.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; - member initializer lists  </title>
      <link>/posts/2020/03/c-member-initializer-lists/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/03/c-member-initializer-lists/</guid>
      <description>&lt;p&gt;c++11 feature to initialize public members without using constructor using &lt;code&gt;c1{1, 2};&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;cls&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; x;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; y;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;cls c1{&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c1.x &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c1.y &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;most GNU toolchains support 11 by default. so, it works as expected&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ./a.out&#xA;12&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;when compiled with &lt;code&gt;std=c++98&lt;/code&gt;, it prints&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;member-class-init.cpp:12:8: warning: extended initializer lists only available with -std=c++11 or -std=gnu++11&#xA;  cls c1{1, 2};&#xA;        ^&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; - Type alias</title>
      <link>/posts/2020/03/c-type-alias/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/03/c-type-alias/</guid>
      <description>&lt;p&gt;for template classes, alias can be used to declare specialization of template class. I guess it can used to define default configuration of the template class.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;unsigned&lt;/span&gt; T&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;cls&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cls()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; T &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// The alias with T=32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;using&lt;/span&gt; alias &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; cls&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alias c;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; -initializer_list</title>
      <link>/posts/2020/03/c-initializer_list/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/03/c-initializer_list/</guid>
      <description>&lt;p&gt;&lt;code&gt;initializer_list&lt;/code&gt; is wrapper (proxy) to allow passing arrays as curly braces. according to &lt;a href=&#34;https://en.cppreference.com/w/cpp/utility/initializer_list&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;, it can be used for class constructor to initialize class with arrays.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;initializer_list&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-weight:bold;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;namespace&lt;/span&gt; std;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;cls&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt; func(std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; ins)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#ff7b72&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;in&lt;/span&gt; : ins)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cout &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; in &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cls c;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c.func({&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building OSS FPGA Toolchain</title>
      <link>/posts/2020/02/building-oss-fpga-toolchain/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/02/building-oss-fpga-toolchain/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I used yosys occasionally but never tried the whole yosys-nexpnr-icestorm toolchain. This post documents the steps to compile the toolchain. Spoiler alert, the order is important.&lt;/p&gt;&#xA;&lt;h1 id=&#34;setup&#34;&gt;&#xA;  Setup&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#setup&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#79c0ff&#34;&gt;BASRPATH&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$PWD&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#79c0ff&#34;&gt;OSSFPGA&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$BASRPATH&lt;/span&gt;/opt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export &lt;span style=&#34;color:#79c0ff&#34;&gt;MAKEPARALLEL&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;-j4&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install build-essential clang bison flex &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;                libreadline-dev gawk tcl-dev libffi-dev git &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;                graphviz xdot pkg-config python3 libboost-system-dev &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;                libboost-python-dev libboost-filesystem-dev zlib1g-dev &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;                libboost-program-options-dev libboost-thread-dev libboost-iostreams-dev &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;                libftdi-dev libeigen3-dev qtbase5-dev&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;building-yosys&#34;&gt;&#xA;  Building Yosys&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#building-yosys&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/YosysHQ/yosys.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd yosys&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make config-gcc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make &lt;span style=&#34;color:#79c0ff&#34;&gt;$MAKEPARALLEL&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make install &lt;span style=&#34;color:#79c0ff&#34;&gt;PREFIX&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$OSSFPGA&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd &lt;span style=&#34;color:#79c0ff&#34;&gt;$BASRPATH&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;building-trellis&#34;&gt;&#xA;  Building trellis&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#building-trellis&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/SymbiFlow/prjtrellis&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd prjtrellis/libtrellis&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cmake -DCMAKE_INSTALL_PREFIX&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$OSSFPGA&lt;/span&gt; .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make &lt;span style=&#34;color:#79c0ff&#34;&gt;$MAKEPARALLEL&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd &lt;span style=&#34;color:#79c0ff&#34;&gt;$BASRPATH&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;building-icestorm&#34;&gt;&#xA;  Building icestorm&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#building-icestorm&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/cliffordwolf/icestorm.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd icestorm&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make install &lt;span style=&#34;color:#79c0ff&#34;&gt;PREFIX&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$OSSFPGA&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd &lt;span style=&#34;color:#79c0ff&#34;&gt;$BASRPATH&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;building-nextpnr&#34;&gt;&#xA;  Building nextpnr&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#building-nextpnr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/YosysHQ/nextpnr.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd nextpnr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cmake .. -DARCH&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;all -DCMAKE_INSTALL_PREFIX&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$OSSFPGA&lt;/span&gt; -DTRELLIS_ROOT&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$BASRPATH&lt;/span&gt;/prjtrellis &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt; -DICEBOX_ROOT&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;$OSSFPGA&lt;/span&gt;/share/icebox&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd &lt;span style=&#34;color:#79c0ff&#34;&gt;$BASRPATH&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Setup Git without server</title>
      <link>/posts/2020/01/setup-git-without-server/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/01/setup-git-without-server/</guid>
      <description>&lt;p&gt;I recently had to setup a git repo on nfs path. So, there are the steps i used to setup it up (and Gotcha)&lt;/p&gt;&#xA;&lt;p&gt;To do that, &lt;em&gt;bare&lt;/em&gt; repo must be used. basically, bare repo is shared repo. You can&amp;rsquo;t work directly on it because it doesn&amp;rsquo;t have the source code. It contains whatever &lt;em&gt;.git&lt;/em&gt; has.&lt;/p&gt;&#xA;&lt;p&gt;Create bare repo&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init --bare myrepo.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then set your remote to the bare repo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solve Vscode extension download errors</title>
      <link>/posts/2019/10/solve-vscode-extension-download-errors/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/posts/2019/10/solve-vscode-extension-download-errors/</guid>
      <description>&lt;p&gt;This is write-up about how i solved a problem with vscode where i couldn&amp;rsquo;t download/update any extensions.&lt;/p&gt;&#xA;&lt;p&gt;well, if you see an error like this, read on.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;Failed to update &amp;#39;ms-python.python&amp;#39;.&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After spending hours reading github issues on vscode repo, it turned out to simple (but stupid) problem. So, I am documenting it for future me when i forget how i solved it.&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-problem&#34;&gt;&#xA;  The problem&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-problem&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The vscode code marketplace (where all extensions live) can&amp;rsquo;t be resolved unless i have cloudflare &lt;code&gt;1.1.1.1&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flask Internals Part1</title>
      <link>/posts/2019/09/flask-internals-part1/</link>
      <pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate>
      <guid>/posts/2019/09/flask-internals-part1/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I have been playing around with flask for few weeks now. It&amp;rsquo;s definitely leaner than Django but still there are some parts that look like  &lt;em&gt;black magic&lt;/em&gt; (I am looking at you, g).&lt;/p&gt;&#xA;&lt;p&gt;So, Starting with&amp;hellip;&lt;/p&gt;&#xA;&lt;h1 id=&#34;hello-world&#34;&gt;&#xA;  Hello world&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#hello-world&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This looks like a good to place to start. This is the smallest functional flask app, I guess.&lt;/p&gt;</description>
    </item>
    <item>
      <title>VPS Configuration</title>
      <link>/posts/2019/09/vps-configuration/</link>
      <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
      <guid>/posts/2019/09/vps-configuration/</guid>
      <description>&lt;p&gt;Steps to setup VPS machine.&lt;/p&gt;&#xA;&lt;h1 id=&#34;change-default-hostname&#34;&gt;&#xA;  Change default Hostname&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#change-default-hostname&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hostnamectl set-hostname VPS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;add-sudo-user&#34;&gt;&#xA;  Add sudo user&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#add-sudo-user&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;adduser admin&#xA;usermod -aG sudo admin&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;setup-up-strict-firewall&#34;&gt;&#xA;  Setup up strict Firewall&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#setup-up-strict-firewall&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ufw app list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ufw allow OpenSSH&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ufw status&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ufw enable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ufw status&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;harden-sshd&#34;&gt;&#xA;  Harden sshd&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#harden-sshd&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vi /etc/ssh/sshd_config&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Disable Root ssh access&lt;/p&gt;</description>
    </item>
    <item>
      <title> Book review - The Pragmatic Programmer</title>
      <link>/posts/2019/08/book-review-the-pragmatic-programmer/</link>
      <pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/posts/2019/08/book-review-the-pragmatic-programmer/</guid>
      <description>&lt;p&gt;The Pragmatic Programmer is a small book about the best practices to be a &amp;ldquo;Pragmatic&amp;rdquo; Programmer. It talks about handling software projects with large teams, changing requirements and complex environments.&lt;/p&gt;&#xA;&lt;p&gt;I liked the first chapter where it goes through the philosophy of &lt;em&gt;pragmatic engineers&lt;/em&gt;. I have been following these practices for years but i haven&amp;rsquo;t see them actually written somewhere. things, like investing in personal portofolio, are the best investment an engineer can do. well, They apply to any field not just engineering.&lt;/p&gt;</description>
    </item>
    <item>
      <title>vscode Tips and Tricks</title>
      <link>/posts/2019/06/vscode-tips-and-tricks/</link>
      <pubDate>Sun, 02 Jun 2019 00:00:00 +0000</pubDate>
      <guid>/posts/2019/06/vscode-tips-and-tricks/</guid>
      <description>&lt;h1 id=&#34;recovering-deleted-files&#34;&gt;&#xA;  Recovering deleted files&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#recovering-deleted-files&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;If you deleted something through vscode, you can find at&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;&amp;lt;mounted_disk&amp;gt;/.Trash-1000/files/&amp;lt;deleted_file_name&amp;gt;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;I found the solution at &lt;a href=&#34;https://github.com/Microsoft/vscode/issues/32078&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github issue&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;spelling-checks&#34;&gt;&#xA;  Spelling checks&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#spelling-checks&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I use &lt;code&gt;spell-right&lt;/code&gt; vscode extension for spelling suggestions.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt-get install hunspell-en-us&#xA;ln -s /usr/share/hunspell/* ~/.config/Code/Dictionaries&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;then &lt;code&gt;Alt-Shift-p&lt;/code&gt; to choose &lt;code&gt;spellRight: Select Dictionary&lt;/code&gt; and it works!.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Web scraping with python</title>
      <link>/posts/2019/06/web-scraping-with-python/</link>
      <pubDate>Sun, 02 Jun 2019 00:00:00 +0000</pubDate>
      <guid>/posts/2019/06/web-scraping-with-python/</guid>
      <description>&lt;p&gt;This post is about the fetch and crawl of html pages using &lt;code&gt;requests&lt;/code&gt; and &lt;code&gt;BeautifulSoup&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;I came across an interesting forum and i was looking for posts with some keywords. The forum did have a search form but didn&amp;rsquo;t support any kind of regex. I think it uses some kind OR&amp;rsquo;ing logic for search keywords and returns any post that has any of the words. It was built in early 00&amp;rsquo;s using PHP, lucky for me. So, the approach was&lt;/p&gt;</description>
    </item>
    <item>
      <title>Boot linux in Qemu</title>
      <link>/posts/2019/05/boot-linux-in-qemu/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      <guid>/posts/2019/05/boot-linux-in-qemu/</guid>
      <description>&lt;p&gt;This is quick guide to compile linux kernel and minimal boot in Qemu.&lt;/p&gt;&#xA;&lt;h1 id=&#34;compiling-linux-kernel&#34;&gt;&#xA;  Compiling linux kernel&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#compiling-linux-kernel&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;To compile linux kernel, you will need &lt;code&gt;.config&lt;/code&gt; to configure the build. To generate default &lt;code&gt;.config&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make defconfig&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;if you are planning to upgrade the kernel version on your machine, you need to use the current config to generate compatible configuration&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /boot/config-&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;kernel version&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt; ./config&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make oldconfig&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;creating-busybox-initramfs&#34;&gt;&#xA;  Creating busybox initramfs&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#creating-busybox-initramfs&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;mkinitramfs&lt;/code&gt; creates minimal busybox file system with busybox unix commands.&#xA;More importantly, the kernel will try to mount root file system by default.So, you will get kernel panic if kernel didn&amp;rsquo;t find one.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Console boot options in linux</title>
      <link>/posts/2019/05/console-boot-options-in-linux/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      <guid>/posts/2019/05/console-boot-options-in-linux/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I was trying to boot linux with qemu and it didn&amp;rsquo;t work until i added &lt;code&gt;console=ttyS0&lt;/code&gt;.So, I decided to take a deep dive into the kernel boot sequence to understand it.&lt;/p&gt;&#xA;&lt;p&gt;I looked into kernel docs,and found &lt;code&gt;console&lt;/code&gt; supports several console types like ttyS, tty, ttyUSB and few others. but i was interested in ttyS0 only for now.&lt;/p&gt;&#xA;&lt;h1 id=&#34;boot-options-registration&#34;&gt;&#xA;  Boot options registration&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#boot-options-registration&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Linux has infrastructure to register boot options and parsers will iterate boot options and call the registered functions.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
