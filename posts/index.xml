<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Techiedeepdive</title>
        <link>/posts/</link>
        <description>Recent content in Posts on Techiedeepdive</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 01 Apr 2023 00:00:00 +0000</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Qemu - Data object exchange DOE</title>
            <link>/posts/2023/04/qemu-data-object-exchange-doe/</link>
            <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/04/qemu-data-object-exchange-doe/</guid>
            <description>This is a quick write-up about Qemu DOE emulation. DOE is part of PCIe and CXL extended capabilities. Technically, It&amp;rsquo;s optional but is important part of IDE starting gen5.
Starting with cxl_usp_read_config is one of the places where pcie_doe_read_config is called. It seems it&amp;rsquo;s only supported with CXL which kinda matches what kernel implements. If it&amp;rsquo;s DOE extended address, it will fall back to pci_default_read_config.
static uint32_t cxl_usp_read_config(PCIDevice *d, uint32_t address, int len) { CXLUpstreamPort *usp = CXL_USP(d); uint32_t val; if (pcie_doe_read_config(&amp;amp;usp-&amp;gt;doe_cdat, address, len, &amp;amp;val)) { return val; } return pci_default_read_config(d, address, len); } pcie_doe_read_config reads the fields when address matches the DW in DOW extended configuration address space.</description>
            <content type="html"><![CDATA[<p>This is a quick write-up about Qemu DOE emulation. DOE is part of PCIe and CXL extended capabilities. Technically, It&rsquo;s optional but is important part of IDE starting gen5.</p>
<p>Starting with <code>cxl_usp_read_config</code> is one of the places where <code>pcie_doe_read_config</code> is called. It seems it&rsquo;s only supported with CXL which kinda matches what kernel implements. If it&rsquo;s DOE extended address, it will fall back to <code>pci_default_read_config</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">uint32_t</span> cxl_usp_read_config(PCIDevice *d, <span style="color:#fff;font-weight:bold">uint32_t</span> address, <span style="color:#fff;font-weight:bold">int</span> len)
{
    CXLUpstreamPort *usp = CXL_USP(d);
    <span style="color:#fff;font-weight:bold">uint32_t</span> val;

    <span style="color:#fff;font-weight:bold">if</span> (pcie_doe_read_config(&amp;usp-&gt;doe_cdat, address, len, &amp;val)) {
        <span style="color:#fff;font-weight:bold">return</span> val;
    }

    <span style="color:#fff;font-weight:bold">return</span> pci_default_read_config(d, address, len);
}
</code></pre></div><p><code>pcie_doe_read_config</code> reads the fields when address matches the DW in DOW extended configuration address space. Other than configuration access, The important thing here is reading/writing from <code>read_mbox</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">bool</span> pcie_doe_read_config(DOECap *doe_cap, <span style="color:#fff;font-weight:bold">uint32_t</span> addr, <span style="color:#fff;font-weight:bold">int</span> size,
                          <span style="color:#fff;font-weight:bold">uint32_t</span> *buf)
{
    <span style="color:#fff;font-weight:bold">uint16_t</span> doe_offset = doe_cap-&gt;offset;


    addr -= doe_offset;
    *buf = <span style="color:#ff0;font-weight:bold">0</span>;

    <span style="color:#fff;font-weight:bold">if</span> (range_covers_byte(PCI_EXP_DOE_CAP, DWORD_BYTE, addr)) {
        *buf = FIELD_DP32(*buf, PCI_DOE_CAP_REG, INTR_SUPP,
                          doe_cap-&gt;cap.intr);
        *buf = FIELD_DP32(*buf, PCI_DOE_CAP_REG, DOE_INTR_MSG_NUM,
                          doe_cap-&gt;cap.vec);
    } <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">if</span> (range_covers_byte(PCI_EXP_DOE_CTRL, DWORD_BYTE, addr)) {
        <span style="color:#007f7f">/* Must return ABORT=0 and GO=0 */</span>
        *buf = FIELD_DP32(*buf, PCI_DOE_CAP_CONTROL, DOE_INTR_EN,
                          doe_cap-&gt;ctrl.intr);
    } <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">if</span> (range_covers_byte(PCI_EXP_DOE_STATUS, DWORD_BYTE, addr)) {
        *buf = FIELD_DP32(*buf, PCI_DOE_CAP_STATUS, DOE_BUSY,
                          doe_cap-&gt;status.busy);
        *buf = FIELD_DP32(*buf, PCI_DOE_CAP_STATUS, DOE_INTR_STATUS,
                          doe_cap-&gt;status.intr);
        *buf = FIELD_DP32(*buf, PCI_DOE_CAP_STATUS, DOE_ERROR,
                          doe_cap-&gt;status.error);
        *buf = FIELD_DP32(*buf, PCI_DOE_CAP_STATUS, DATA_OBJ_RDY,
                          doe_cap-&gt;status.ready);
    <span style="color:#007f7f">/* Mailbox should be DW accessed */</span>
    } <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">if</span> (addr == PCI_EXP_DOE_RD_DATA_MBOX &amp;&amp; size == DWORD_BYTE) {
        <span style="color:#fff;font-weight:bold">if</span> (doe_cap-&gt;status.ready &amp;&amp; !doe_cap-&gt;status.error) {
            *buf = doe_cap-&gt;read_mbox[doe_cap-&gt;read_mbox_idx];
        }
    }

  ...
}
</code></pre></div><p>It&rsquo;s probably good idea to start from the top. <code>pcie_doe_init</code> adds capability and creates mailboxes. It&rsquo;s called from <code>cxl_usp_realize</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">void</span> pcie_doe_init(PCIDevice *dev, DOECap *doe_cap, <span style="color:#fff;font-weight:bold">uint16_t</span> offset,
                   DOEProtocol *protocols, <span style="color:#fff;font-weight:bold">bool</span> intr, <span style="color:#fff;font-weight:bold">uint16_t</span> vec)
{
    pcie_add_capability(dev, PCI_EXT_CAP_ID_DOE, <span style="color:#ff0;font-weight:bold">0x1</span>, offset,
                        PCI_DOE_SIZEOF);

    doe_cap-&gt;write_mbox = g_malloc0(PCI_DOE_DW_SIZE_MAX * DWORD_BYTE);
    doe_cap-&gt;read_mbox = g_malloc0(PCI_DOE_DW_SIZE_MAX * DWORD_BYTE);

    pcie_doe_reset_mbox(doe_cap);
}

</code></pre></div><p>Back to post-init write, when sender (linux kernel) writes to control register, it calls some handlers to handle control bits change. Also, in case of RD mailbox, qemu sets the ready bit in control reg.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">void</span> pcie_doe_write_config(DOECap *doe_cap,
                           <span style="color:#fff;font-weight:bold">uint32_t</span> addr, <span style="color:#fff;font-weight:bold">uint32_t</span> val, <span style="color:#fff;font-weight:bold">int</span> size)
{

    <span style="color:#fff;font-weight:bold">switch</span> (addr) {
    <span style="color:#fff;font-weight:bold">case</span> PCI_EXP_DOE_CTRL:
        <span style="color:#fff;font-weight:bold">if</span> (FIELD_EX32(val, PCI_DOE_CAP_CONTROL, DOE_ABORT)) {
            pcie_doe_set_ready(doe_cap, <span style="color:#ff0;font-weight:bold">0</span>);
            pcie_doe_set_error(doe_cap, <span style="color:#ff0;font-weight:bold">0</span>);
            pcie_doe_reset_mbox(doe_cap);
            <span style="color:#fff;font-weight:bold">return</span>;
        }

        <span style="color:#fff;font-weight:bold">if</span> (FIELD_EX32(val, PCI_DOE_CAP_CONTROL, DOE_GO)) {
            pcie_doe_prepare_rsp(doe_cap);
        }
    ...
    ...
    ...
    <span style="color:#fff;font-weight:bold">case</span> PCI_EXP_DOE_RD_DATA_MBOX:
        <span style="color:#007f7f">/* Mailbox should be DW accessed */</span>
        <span style="color:#fff;font-weight:bold">if</span> (size != DWORD_BYTE) {
            <span style="color:#fff;font-weight:bold">return</span>;
        }
        doe_cap-&gt;read_mbox_idx++;
        <span style="color:#fff;font-weight:bold">if</span> (doe_cap-&gt;read_mbox_idx == doe_cap-&gt;read_mbox_len) {
            pcie_doe_reset_mbox(doe_cap);
            pcie_doe_set_ready(doe_cap, <span style="color:#ff0;font-weight:bold">0</span>);
        } <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">if</span> (doe_cap-&gt;read_mbox_idx &gt; doe_cap-&gt;read_mbox_len) {
            <span style="color:#007f7f">/* Underflow */</span>
            pcie_doe_set_error(doe_cap, <span style="color:#ff0;font-weight:bold">1</span>);
        }
        <span style="color:#fff;font-weight:bold">break</span>;
    <span style="color:#fff;font-weight:bold">case</span> PCI_EXP_DOE_WR_DATA_MBOX:
        <span style="color:#007f7f">/* Mailbox should be DW accessed */</span>
        <span style="color:#fff;font-weight:bold">if</span> (size != DWORD_BYTE) {
            <span style="color:#fff;font-weight:bold">return</span>;
        }
        doe_cap-&gt;write_mbox[doe_cap-&gt;write_mbox_len] = val;
        doe_cap-&gt;write_mbox_len++;
        <span style="color:#fff;font-weight:bold">break</span>;
</code></pre></div><p><code>handle_request</code> is set depending on the protocol. In case of discovery request is sent, <code>pcie_doe_discovery</code> is called</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">void</span> pcie_doe_prepare_rsp(DOECap *doe_cap)
{

    <span style="color:#fff;font-weight:bold">if</span> (doe_cap-&gt;write_mbox[<span style="color:#ff0;font-weight:bold">0</span>] ==
        DATA_OBJ_BUILD_HEADER1(PCI_VENDOR_ID_PCI_SIG, PCI_SIG_DOE_DISCOVERY)) {
        handle_request = pcie_doe_discovery;
    } <span style="color:#fff;font-weight:bold">else</span> {
        <span style="color:#fff;font-weight:bold">for</span> (p = <span style="color:#ff0;font-weight:bold">0</span>; p &lt; doe_cap-&gt;protocol_num - <span style="color:#ff0;font-weight:bold">1</span>; p++) {
            <span style="color:#fff;font-weight:bold">if</span> (doe_cap-&gt;write_mbox[<span style="color:#ff0;font-weight:bold">0</span>] ==
                pcie_doe_build_protocol(&amp;doe_cap-&gt;protocols[p])) {
                handle_request = doe_cap-&gt;protocols[p].handle_request;
                <span style="color:#fff;font-weight:bold">break</span>;
            }
        }
    }

   ...
   ...
    <span style="color:#fff;font-weight:bold">if</span> (handle_request &amp;&amp; (doe_cap-&gt;write_mbox_len ==
        pcie_doe_get_obj_len(pcie_doe_get_write_mbox_ptr(doe_cap)))) {
        success = handle_request(doe_cap);
    }

    <span style="color:#fff;font-weight:bold">if</span> (success) {
        pcie_doe_set_ready(doe_cap, <span style="color:#ff0;font-weight:bold">1</span>);
    } <span style="color:#fff;font-weight:bold">else</span> {
        pcie_doe_reset_mbox(doe_cap);
    }
}

</code></pre></div><p>In <code>pcie_doe_discovery</code>, response is created(including setting next index) and call <code>pcie_doe_set_rsp</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">bool</span> pcie_doe_discovery(DOECap *doe_cap)
{
    ...
    ...
    rsp.header = (DOEHeader) {
        .vendor_id = PCI_VENDOR_ID_PCI_SIG,
        .data_obj_type = PCI_SIG_DOE_DISCOVERY,
        .length = DIV_ROUND_UP(<span style="color:#fff;font-weight:bold">sizeof</span>(DoeDiscoveryRsp), DWORD_BYTE),
    };

    <span style="color:#fff;font-weight:bold">if</span> (index == <span style="color:#ff0;font-weight:bold">0</span>) {
        rsp.vendor_id = PCI_VENDOR_ID_PCI_SIG;
        rsp.data_obj_type = PCI_SIG_DOE_DISCOVERY;
    } <span style="color:#fff;font-weight:bold">else</span> {
        <span style="color:#fff;font-weight:bold">if</span> (index &lt; doe_cap-&gt;protocol_num) {
            prot = &amp;doe_cap-&gt;protocols[index - <span style="color:#ff0;font-weight:bold">1</span>];
            rsp.vendor_id = prot-&gt;vendor_id;
            rsp.data_obj_type = prot-&gt;data_obj_type;
        } <span style="color:#fff;font-weight:bold">else</span> {
            rsp.vendor_id = <span style="color:#ff0;font-weight:bold">0xFFFF</span>;
            rsp.data_obj_type = <span style="color:#ff0;font-weight:bold">0xFF</span>;
        }
    }

    <span style="color:#fff;font-weight:bold">if</span> (index + <span style="color:#ff0;font-weight:bold">1</span> == doe_cap-&gt;protocol_num) {
        rsp.next_index = <span style="color:#ff0;font-weight:bold">0</span>;
    } <span style="color:#fff;font-weight:bold">else</span> {
        rsp.next_index = index + <span style="color:#ff0;font-weight:bold">1</span>;
    }

    pcie_doe_set_rsp(doe_cap, &amp;rsp);

    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">true</span>;
}
</code></pre></div><p><code>pcie_doe_set_rsp</code> just puts the response in <code>read_mbox</code></p>
<pre tabindex="0"><code>void pcie_doe_set_rsp(DOECap *doe_cap, void *rsp)
{
    uint32_t len = pcie_doe_get_obj_len(rsp);

    memcpy(doe_cap-&gt;read_mbox + doe_cap-&gt;read_mbox_len, rsp, len * DWORD_BYTE);
    doe_cap-&gt;read_mbox_len += len;
}
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Qemu - PCIe SRIOV and virtual function</title>
            <link>/posts/2023/04/qemu-pcie-sriov-and-virtual-function/</link>
            <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/04/qemu-pcie-sriov-and-virtual-function/</guid>
            <description>This is a quick write-up about SRIOV and virtual functions emulation in Qemu. From link
 SR-IOV is a specification that allows a single Peripheral Component Interconnect Express (PCIe) physical device under a single root port to appear as multiple separate physical devices to the hypervisor or the guest operating system.
SR-IOV uses physical functions (PFs) and virtual functions (VFs) to manage global functions for the SR-IOV devices. PFs are full PCIe functions that are capable of configuring and managing the SR-IOV functionality.</description>
            <content type="html"><![CDATA[<p>This is a quick write-up about SRIOV and virtual functions emulation in Qemu. From <a href="https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.vsphere.networking.doc/GUID-CC021803-30EA-444D-BCBE-618E0D836B9F.html">link</a></p>
<blockquote>
<p>SR-IOV is a specification that allows a single Peripheral Component Interconnect Express (PCIe) physical device under a single root port to appear as multiple separate physical devices to the hypervisor or the guest operating system.</p>
<p>SR-IOV uses physical functions (PFs) and virtual functions (VFs) to manage global functions for the SR-IOV devices. PFs are full PCIe functions that are capable of configuring and managing the SR-IOV functionality. It is possible to configure or control PCIe devices using PFs, and the PF has full ability to move data in and out of the device. VFs are lightweight PCIe functions that support data flowing but have a restricted set of configuration resources.</p>
</blockquote>
<h1 id="device-emulation-igb">Device emulation igb</h1>
<p>Let&rsquo;s Have a look at an example of Network device that supports SRIOV. In <code>hw/net/igb.c</code>, igb is one of the Intel NIC&rsquo;s that supports SRIOV. The emulation calls these functions to init the SRIOV capability and BAR</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">    pcie_sriov_pf_init(pci_dev, IGB_CAP_SRIOV_OFFSET, <span style="color:#0ff;font-weight:bold">&#34;igbvf&#34;</span>,
        IGB_82576_VF_DEV_ID, IGB_MAX_VF_FUNCTIONS, IGB_MAX_VF_FUNCTIONS,
        IGB_VF_OFFSET, IGB_VF_STRIDE);

    pcie_sriov_pf_init_vf_bar(pci_dev, <span style="color:#ff0;font-weight:bold">0</span>,
        PCI_BASE_ADDRESS_MEM_TYPE_64 | PCI_BASE_ADDRESS_MEM_PREFETCH,
        <span style="color:#ff0;font-weight:bold">16</span> * KiB);
    pcie_sriov_pf_init_vf_bar(pci_dev, <span style="color:#ff0;font-weight:bold">3</span>,
        PCI_BASE_ADDRESS_MEM_TYPE_64 | PCI_BASE_ADDRESS_MEM_PREFETCH,
        <span style="color:#ff0;font-weight:bold">16</span> * KiB);
</code></pre></div><h1 id="sriov-subsystem">sriov subsystem</h1>
<p>In <code>hw/pci/pcie_sriov.c</code>, <code>pcie_sriov_pf_init</code> sets the configuration spaces for SRIOV capability.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">void</span> pcie_sriov_pf_init(PCIDevice *dev, <span style="color:#fff;font-weight:bold">uint16_t</span> offset,
                        <span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">char</span> *vfname, <span style="color:#fff;font-weight:bold">uint16_t</span> vf_dev_id,
                        <span style="color:#fff;font-weight:bold">uint16_t</span> init_vfs, <span style="color:#fff;font-weight:bold">uint16_t</span> total_vfs,
                        <span style="color:#fff;font-weight:bold">uint16_t</span> vf_offset, <span style="color:#fff;font-weight:bold">uint16_t</span> vf_stride)
{
    <span style="color:#fff;font-weight:bold">uint8_t</span> *cfg = dev-&gt;config + offset;
    <span style="color:#fff;font-weight:bold">uint8_t</span> *wmask;

    pcie_add_capability(dev, PCI_EXT_CAP_ID_SRIOV, <span style="color:#ff0;font-weight:bold">1</span>,
                        offset, PCI_EXT_CAP_SRIOV_SIZEOF);
      
    dev-&gt;exp.sriov_cap = offset;
    dev-&gt;exp.sriov_pf.num_vfs = <span style="color:#ff0;font-weight:bold">0</span>;
    dev-&gt;exp.sriov_pf.vfname = g_strdup(vfname);
    dev-&gt;exp.sriov_pf.vf = <span style="color:#fff;font-weight:bold">NULL</span>;

    pci_set_word(cfg + PCI_SRIOV_VF_OFFSET, vf_offset);
    pci_set_word(cfg + PCI_SRIOV_VF_STRIDE, vf_stride);

    pci_set_word(cfg + PCI_SRIOV_SUP_PGSIZE, SRIOV_SUP_PGSIZE_MINREQ);

    pci_set_word(cfg + PCI_SRIOV_SYS_PGSIZE, <span style="color:#ff0;font-weight:bold">0x1</span>);

    pci_set_word(cfg + PCI_SRIOV_VF_DID, vf_dev_id);
    pci_set_word(cfg + PCI_SRIOV_INITIAL_VF, init_vfs);
    pci_set_word(cfg + PCI_SRIOV_TOTAL_VF, total_vfs);
    pci_set_word(cfg + PCI_SRIOV_NUM_VF, <span style="color:#ff0;font-weight:bold">0</span>);

    wmask = dev-&gt;wmask + offset;
    pci_set_word(wmask + PCI_SRIOV_CTRL,
                 PCI_SRIOV_CTRL_VFE | PCI_SRIOV_CTRL_MSE | PCI_SRIOV_CTRL_ARI);
    pci_set_word(wmask + PCI_SRIOV_NUM_VF, <span style="color:#ff0;font-weight:bold">0xffff</span>);
    pci_set_word(wmask + PCI_SRIOV_SYS_PGSIZE, <span style="color:#ff0;font-weight:bold">0x553</span>);

    qdev_prop_set_bit(&amp;dev-&gt;qdev, <span style="color:#0ff;font-weight:bold">&#34;multifunction&#34;</span>, <span style="color:#fff;font-weight:bold">true</span>);
}
</code></pre></div><p><code>pcie_sriov_pf_init_vf_bar</code> is called with devices to set BAR mask and configuration.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">void</span> pcie_sriov_pf_init_vf_bar(PCIDevice *dev, <span style="color:#fff;font-weight:bold">int</span> region_num,
                               <span style="color:#fff;font-weight:bold">uint8_t</span> type, dma_addr_t size)
{

  ...
  ...
    wmask = ~(size - <span style="color:#ff0;font-weight:bold">1</span>);
    addr = sriov_cap + PCI_SRIOV_BAR + region_num * <span style="color:#ff0;font-weight:bold">4</span>;

    pci_set_long(dev-&gt;config + addr, type);
    <span style="color:#fff;font-weight:bold">if</span> (!(type &amp; PCI_BASE_ADDRESS_SPACE_IO) &amp;&amp;
        type &amp; PCI_BASE_ADDRESS_MEM_TYPE_64) {
        pci_set_quad(dev-&gt;wmask + addr, wmask);
        pci_set_quad(dev-&gt;cmask + addr, ~<span style="color:#ff0;font-weight:bold">0ULL</span>);
    } <span style="color:#fff;font-weight:bold">else</span> {
        pci_set_long(dev-&gt;wmask + addr, wmask &amp; <span style="color:#ff0;font-weight:bold">0xffffffff</span>);
        pci_set_long(dev-&gt;cmask + addr, <span style="color:#ff0;font-weight:bold">0xffffffff</span>);
    }
    dev-&gt;exp.sriov_pf.vf_bar_type[region_num] = type;
}
</code></pre></div><h1 id="pci-methods-accessing-vf-address-space">pci methods accessing VF address space</h1>
<p>In <code>hw/pci/pci.c</code>, <code>pci_config_get_bar_addr</code> is called by the generic pci subsystem. But the virtual function has special handling.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> pcibus_t pci_config_get_bar_addr(PCIDevice *d, <span style="color:#fff;font-weight:bold">int</span> reg,
                                        <span style="color:#fff;font-weight:bold">uint8_t</span> type, pcibus_t size)
{
    pcibus_t new_addr;
    <span style="color:#fff;font-weight:bold">if</span> (!pci_is_vf(d)) {
      ...
      ...
    } <span style="color:#fff;font-weight:bold">else</span> {
        PCIDevice *pf = d-&gt;exp.sriov_vf.pf;
        <span style="color:#fff;font-weight:bold">uint16_t</span> sriov_cap = pf-&gt;exp.sriov_cap;
        <span style="color:#fff;font-weight:bold">int</span> bar = sriov_cap + PCI_SRIOV_BAR + reg * <span style="color:#ff0;font-weight:bold">4</span>;
        <span style="color:#fff;font-weight:bold">uint16_t</span> vf_offset =
            pci_get_word(pf-&gt;config + sriov_cap + PCI_SRIOV_VF_OFFSET);
        <span style="color:#fff;font-weight:bold">uint16_t</span> vf_stride =
            pci_get_word(pf-&gt;config + sriov_cap + PCI_SRIOV_VF_STRIDE);
        <span style="color:#fff;font-weight:bold">uint32_t</span> vf_num = (d-&gt;devfn - (pf-&gt;devfn + vf_offset)) / vf_stride;

        <span style="color:#fff;font-weight:bold">if</span> (type &amp; PCI_BASE_ADDRESS_MEM_TYPE_64) {
            new_addr = pci_get_quad(pf-&gt;config + bar);
        } <span style="color:#fff;font-weight:bold">else</span> {
            new_addr = pci_get_long(pf-&gt;config + bar);
        }
        new_addr += vf_num * size;
    }
    ...
    ...
}
</code></pre></div><h1 id="enable-and-disable-devices">Enable and disable devices</h1>
<p>Still in pci subsystem, In <code>pci_default_write_config</code>, sriov had to be handled differently by calling <code>pcie_sriov_config_writ</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">void</span> pci_default_write_config(PCIDevice *d, <span style="color:#fff;font-weight:bold">uint32_t</span> addr, <span style="color:#fff;font-weight:bold">uint32_t</span> val_in, <span style="color:#fff;font-weight:bold">int</span> l)
{
...
...
    pcie_sriov_config_write(d, addr, val_in, l);
}
</code></pre></div><p>The config enables and disables the device by calling <code>register_vfs</code> and <code>unregister_vfs</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">void</span> pcie_sriov_config_write(PCIDevice *dev, <span style="color:#fff;font-weight:bold">uint32_t</span> address,
                             <span style="color:#fff;font-weight:bold">uint32_t</span> val, <span style="color:#fff;font-weight:bold">int</span> len)
{
    <span style="color:#fff;font-weight:bold">uint32_t</span> off;
    <span style="color:#fff;font-weight:bold">uint16_t</span> sriov_cap = dev-&gt;exp.sriov_cap;

    <span style="color:#fff;font-weight:bold">if</span> (!sriov_cap || address &lt; sriov_cap) {
        <span style="color:#fff;font-weight:bold">return</span>;
    }
    off = address - sriov_cap;
    <span style="color:#fff;font-weight:bold">if</span> (off &gt;= PCI_EXT_CAP_SRIOV_SIZEOF) {
        <span style="color:#fff;font-weight:bold">return</span>;
    }

    trace_sriov_config_write(dev-&gt;name, PCI_SLOT(dev-&gt;devfn),
                             PCI_FUNC(dev-&gt;devfn), off, val, len);

    <span style="color:#fff;font-weight:bold">if</span> (range_covers_byte(off, len, PCI_SRIOV_CTRL)) {
        <span style="color:#fff;font-weight:bold">if</span> (dev-&gt;exp.sriov_pf.num_vfs) {
            <span style="color:#fff;font-weight:bold">if</span> (!(val &amp; PCI_SRIOV_CTRL_VFE)) {
                unregister_vfs(dev);
            }
        } <span style="color:#fff;font-weight:bold">else</span> {
            <span style="color:#fff;font-weight:bold">if</span> (val &amp; PCI_SRIOV_CTRL_VFE) {
                register_vfs(dev);
            }
        }
    }
}
</code></pre></div><p>In <code>register_vfs</code> and <code>unregister_vfs</code>, the virtual functions are enabled and disabled.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> PCIDevice *register_vf(PCIDevice *pf, <span style="color:#fff;font-weight:bold">int</span> devfn, <span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">char</span> *name,
                              <span style="color:#fff;font-weight:bold">uint16_t</span> vf_num)
{
    PCIDevice *dev = pci_new(devfn, name);
    dev-&gt;exp.sriov_vf.pf = pf;
    dev-&gt;exp.sriov_vf.vf_number = vf_num;
    PCIBus *bus = pci_get_bus(pf);
    Error *local_err = <span style="color:#fff;font-weight:bold">NULL</span>;

    ...
    ...
    qdev_realize(&amp;dev-&gt;qdev, &amp;bus-&gt;qbus, &amp;local_err);

    <span style="color:#007f7f">/* set vid/did according to sr/iov spec - they are not used */</span>
    pci_config_set_vendor_id(dev-&gt;config, <span style="color:#ff0;font-weight:bold">0xffff</span>);
    pci_config_set_device_id(dev-&gt;config, <span style="color:#ff0;font-weight:bold">0xffff</span>);

    <span style="color:#fff;font-weight:bold">return</span> dev;
}

<span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">void</span> register_vfs(PCIDevice *dev)
{
    <span style="color:#fff;font-weight:bold">uint16_t</span> sriov_cap = dev-&gt;exp.sriov_cap;
    <span style="color:#fff;font-weight:bold">uint16_t</span> vf_offset = pci_get_word(dev-&gt;config + sriov_cap + PCI_SRIOV_VF_OFFSET);
    <span style="color:#fff;font-weight:bold">uint16_t</span> vf_stride = pci_get_word(dev-&gt;config + sriov_cap + PCI_SRIOV_VF_STRIDE);
    <span style="color:#fff;font-weight:bold">int32_t</span> devfn = dev-&gt;devfn + vf_offset;


    num_vfs = pci_get_word(dev-&gt;config + sriov_cap + PCI_SRIOV_NUM_VF);

    dev-&gt;exp.sriov_pf.vf = g_new(PCIDevice *, num_vfs);

    trace_sriov_register_vfs(dev-&gt;name, PCI_SLOT(dev-&gt;devfn),
                             PCI_FUNC(dev-&gt;devfn), num_vfs);
    <span style="color:#fff;font-weight:bold">for</span> (i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; num_vfs; i++) {
        dev-&gt;exp.sriov_pf.vf[i] = register_vf(dev, devfn,
                                              dev-&gt;exp.sriov_pf.vfname, i);
        <span style="color:#fff;font-weight:bold">if</span> (!dev-&gt;exp.sriov_pf.vf[i]) {
            num_vfs = i;
            <span style="color:#fff;font-weight:bold">break</span>;
        }
        devfn += vf_stride;
    }
    dev-&gt;exp.sriov_pf.num_vfs = num_vfs;
}

<span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">void</span> unregister_vfs(PCIDevice *dev)
{
    ...
    ...
    <span style="color:#fff;font-weight:bold">uint16_t</span> num_vfs = dev-&gt;exp.sriov_pf.num_vfs;

    trace_sriov_unregister_vfs(dev-&gt;name, PCI_SLOT(dev-&gt;devfn),
                               PCI_FUNC(dev-&gt;devfn), num_vfs);
    <span style="color:#fff;font-weight:bold">for</span> (i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; num_vfs; i++) {
        PCIDevice *vf = dev-&gt;exp.sriov_pf.vf[i];
        object_property_set_bool(OBJECT(vf), <span style="color:#0ff;font-weight:bold">&#34;realized&#34;</span>, <span style="color:#fff;font-weight:bold">false</span>, &amp;local_err);
        ...
        ...
    }
    g_free(dev-&gt;exp.sriov_pf.vf);
    dev-&gt;exp.sriov_pf.vf = <span style="color:#fff;font-weight:bold">NULL</span>;
    dev-&gt;exp.sriov_pf.num_vfs = <span style="color:#ff0;font-weight:bold">0</span>;
    pci_set_word(dev-&gt;config + dev-&gt;exp.sriov_cap + PCI_SRIOV_NUM_VF, <span style="color:#ff0;font-weight:bold">0</span>);
}
</code></pre></div><h1 id="multifunction-and-virtual-functions">multifunction and virtual functions</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">void</span> pci_init_multifunction(PCIBus *bus, PCIDevice *dev, Error **errp)
{
    <span style="color:#fff;font-weight:bold">uint8_t</span> slot = PCI_SLOT(dev-&gt;devfn);
    <span style="color:#fff;font-weight:bold">uint8_t</span> func;

    <span style="color:#fff;font-weight:bold">if</span> (dev-&gt;cap_present &amp; QEMU_PCI_CAP_MULTIFUNCTION) {
        dev-&gt;config[PCI_HEADER_TYPE] |= PCI_HEADER_TYPE_MULTI_FUNCTION;
    }

    <span style="color:#007f7f">/*
</span><span style="color:#007f7f">     * With SR/IOV and ARI, a device at function 0 need not be a multifunction
</span><span style="color:#007f7f">     * device, as it may just be a VF that ended up with function 0 in
</span><span style="color:#007f7f">     * the legacy PCI interpretation. Avoid failing in such cases:
</span><span style="color:#007f7f">     */</span>
    <span style="color:#fff;font-weight:bold">if</span> (pci_is_vf(dev) &amp;&amp;
        dev-&gt;exp.sriov_vf.pf-&gt;cap_present &amp; QEMU_PCI_CAP_MULTIFUNCTION) {
        <span style="color:#fff;font-weight:bold">return</span>;
    }

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Qemu riscv emulation</title>
            <link>/posts/2023/03/qemu-riscv-emulation/</link>
            <pubDate>Fri, 31 Mar 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/03/qemu-riscv-emulation/</guid>
            <description>riscv spike Board /* Find firmware */ firmware_name = riscv_find_firmware(machine-&amp;gt;firmware, riscv_default_firmware_name(&amp;amp;s-&amp;gt;soc[0])); firmware_end_addr = riscv_load_firmware(firmware_name, memmap[SPIKE_DRAM].base, htif_symbol_callback); create_fdt(s, memmap, riscv_is_32bit(&amp;amp;s-&amp;gt;soc[0]), htif_custom_base); In hw/riscv/boot.c,
#define RISCV32_BIOS_BIN &amp;#34;opensbi-riscv32-generic-fw_dynamic.bin&amp;#34; #define RISCV64_BIOS_BIN &amp;#34;opensbi-riscv64-generic-fw_dynamic.bin&amp;#34; risc virt Board In hw/riscv/virt.c, The initialization code for the virt machine
static const TypeInfo virt_machine_typeinfo = { .name = MACHINE_TYPE_NAME(&amp;#34;virt&amp;#34;), .parent = TYPE_MACHINE, .class_init = virt_machine_class_init, .instance_init = virt_machine_instance_init, .instance_size = sizeof(RISCVVirtState), .interfaces = (InterfaceInfo[]) { { TYPE_HOTPLUG_HANDLER }, { } }, }; static void virt_machine_init_register_types(void) { type_register_static(&amp;amp;virt_machine_typeinfo); } type_init(virt_machine_init_register_types) static void virt_machine_class_init(ObjectClass *oc, void *data) { char str[128]; MachineClass *mc = MACHINE_CLASS(oc); HotplugHandlerClass *hc = HOTPLUG_HANDLER_CLASS(oc); mc-&amp;gt;desc = &amp;#34;RISC-V VirtIO board&amp;#34;; mc-&amp;gt;init = virt_machine_init; `` ```c firmware_end_addr = riscv_find_and_load_firmware(machine, firmware_name, start_addr, NULL); static void virt_machine_init(MachineState *machine) { .</description>
            <content type="html"><![CDATA[<h1 id="riscv-spike-board">riscv spike Board</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">    <span style="color:#007f7f">/* Find firmware */</span>
    firmware_name = riscv_find_firmware(machine-&gt;firmware,
                        riscv_default_firmware_name(&amp;s-&gt;soc[<span style="color:#ff0;font-weight:bold">0</span>]));
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">        firmware_end_addr = riscv_load_firmware(firmware_name,
                                                memmap[SPIKE_DRAM].base,
                                                htif_symbol_callback);
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">    create_fdt(s, memmap, riscv_is_32bit(&amp;s-&gt;soc[<span style="color:#ff0;font-weight:bold">0</span>]), htif_custom_base);
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"></code></pre></div><p>In <code>hw/riscv/boot.c</code>,</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#0f0;font-weight:bold">#define RISCV32_BIOS_BIN    &#34;opensbi-riscv32-generic-fw_dynamic.bin&#34;
</span><span style="color:#0f0;font-weight:bold">#define RISCV64_BIOS_BIN    &#34;opensbi-riscv64-generic-fw_dynamic.bin&#34;
</span></code></pre></div><h1 id="risc-virt-board">risc virt Board</h1>
<p>In <code>hw/riscv/virt.c</code>, The initialization code for the virt machine</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">const</span> TypeInfo virt_machine_typeinfo = {
    .name       = MACHINE_TYPE_NAME(<span style="color:#0ff;font-weight:bold">&#34;virt&#34;</span>),
    .parent     = TYPE_MACHINE,
    .class_init = virt_machine_class_init,
    .instance_init = virt_machine_instance_init,
    .instance_size = <span style="color:#fff;font-weight:bold">sizeof</span>(RISCVVirtState),
    .interfaces = (InterfaceInfo[]) {
         { TYPE_HOTPLUG_HANDLER },
         { }
    },
};

<span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">void</span> virt_machine_init_register_types(<span style="color:#fff;font-weight:bold">void</span>)
{
    type_register_static(&amp;virt_machine_typeinfo);
}

type_init(virt_machine_init_register_types)
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">
<span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">void</span> virt_machine_class_init(ObjectClass *oc, <span style="color:#fff;font-weight:bold">void</span> *data)
{
    <span style="color:#fff;font-weight:bold">char</span> str[<span style="color:#ff0;font-weight:bold">128</span>];
    MachineClass *mc = MACHINE_CLASS(oc);
    HotplugHandlerClass *hc = HOTPLUG_HANDLER_CLASS(oc);

    mc-&gt;desc = <span style="color:#0ff;font-weight:bold">&#34;RISC-V VirtIO board&#34;</span>;
    mc-&gt;init = virt_machine_init;
<span style="color:#f00">``</span> 

<span style="color:#f00">```</span>c
    firmware_end_addr = riscv_find_and_load_firmware(machine, firmware_name,
                                                     start_addr, <span style="color:#fff;font-weight:bold">NULL</span>);
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">void</span> virt_machine_init(MachineState *machine)
{
    ...
    ...
    s-&gt;machine_done.notify = virt_machine_done;
    qemu_add_machine_init_done_notifier(&amp;s-&gt;machine_done);
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Misc useful commands</title>
            <link>/posts/2023/03/misc-useful-commands/</link>
            <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/03/misc-useful-commands/</guid>
            <description>These are misc useful commands using linux command line
spliting and combing PDF pdfseparate -f 1 original.pdf output-page%d.pdf qpdf --empty --pages `cat l` -- all.pdf HP printer These are some commands to document hplip linux HP printer utils.
sudo apt install hplip-gui hplip ``verilog hp-scan
 </description>
            <content type="html"><![CDATA[<p>These are misc useful commands using linux command line</p>
<h1 id="spliting-and-combing-pdf">spliting and combing PDF</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pdfseparate -f <span style="color:#ff0;font-weight:bold">1</span>  original.pdf  output-page%d.pdf
qpdf --empty --pages <span style="color:#0ff;font-weight:bold">`</span>cat l<span style="color:#0ff;font-weight:bold">`</span> -- all.pdf
</code></pre></div><h1 id="hp-printer">HP printer</h1>
<p>These are some commands to document <code>hplip</code> linux HP printer utils.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">sudo apt install hplip-gui hplip
</code></pre></div><p>``verilog
hp-scan</p>
<pre tabindex="0"><code>
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Qemu PCIe Emulation</title>
            <link>/posts/2023/03/qemu-pcie-emulation/</link>
            <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/03/qemu-pcie-emulation/</guid>
            <description>This post is about how qemu emulates PCI devices for guest Kernel. Honestly, I took the scenic road here which is reading the code and setting breakpoints in GDB at interesting places and work my way through the stack trace. Disclaimer, This is a very short post on a complicated topic and huge code base(Qemu). But It&amp;rsquo;s a good start to dig deeper into qemu code (more specifically PCI emulation in qemu)</description>
            <content type="html"><![CDATA[<p>This post is about how qemu emulates PCI devices for guest Kernel. Honestly, I took the scenic road here which is reading the code and setting breakpoints in GDB at interesting places and work my way through the stack trace. Disclaimer, This is a very short post on a complicated topic and huge code base(Qemu). But It&rsquo;s a good start to dig deeper into qemu code (more specifically PCI emulation in qemu)</p>
<h1 id="compiling-qemu-for-gdbb">Compiling Qemu for gdbb</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo apt install libpixman-1-dev libglib2.0-dev

mkdir build
<span style="color:#fff;font-weight:bold">cd</span> build

../configure --target-list=x86_64-softmmu --enable-debug

</code></pre></div><h1 id="chipset-emulation-initialization">Chipset Emulation Initialization</h1>
<p>Qemu has several chipset support. The oldest one is i440fx in <code>hw/pci-host/i440fx.c</code>, It defines pc_init1 which is the entry point for  emulating that chipset. This is a stack trace starting from  <code>main</code> all the way down ( or up :)) to pc_init1.</p>
<pre tabindex="0"><code>#0  pc_init1 (machine=0x555556c88400, host_type=0x5555561acef9 &quot;i440FX-pcihost&quot;, pci_type=0x5555561acef2 &quot;i440FX&quot;) at ../hw/i386/pc_piix.c:93
#1  0x0000555555bd9563 in pc_init_v8_0 (machine=0x555556c88400) at ../hw/i386/pc_piix.c:464
#2  0x00005555558f0a19 in machine_run_board_init (machine=0x555556c88400, mem_path=0x0, errp=0x5555569bc2e0 &lt;error_fatal&gt;) at ../hw/core/machine.c:1408
#3  0x0000555555b0df44 in qemu_init_board () at ../softmmu/vl.c:2513
#4  0x0000555555b0e1e5 in qmp_x_exit_preconfig (errp=0x5555569bc2e0 &lt;error_fatal&gt;) at ../softmmu/vl.c:2609
#5  0x0000555555b10a97 in qemu_init (argc=10, argv=0x7fffffffdea8) at ../softmmu/vl.c:3612
#6  0x000055555585c6cb in main (argc=10, argv=0x7fffffffdea8) at ../softmmu/main.c:47
</code></pre><p>In the next few snippets, I will trace the stacktrace above. Starting with <code>qmp_x_exit_preconfig</code></p>
<pre tabindex="0"><code>void qmp_x_exit_preconfig(Error **errp)
{
    if (phase_check(PHASE_MACHINE_INITIALIZED)) {
        error_setg(errp, &quot;The command is permitted only before machine initialization&quot;);
        return;
    }

    qemu_init_board();
    qemu_create_cli_devices();
    qemu_machine_creation_done();
</code></pre><p>Which calls <code>qemu_init_board</code></p>
<pre tabindex="0"><code>static void qemu_init_board(void)
{

    /* From here on we enter MACHINE_PHASE_INITIALIZED.  */
    machine_run_board_init(current_machine, mem_path, &amp;error_fatal);
    ....
}
</code></pre><p><code>machine_run_board_init</code> does few things but the most import part here is <code>machine_class-&gt;init(machine);</code></p>
<pre tabindex="0"><code>    accel_init_interfaces(ACCEL_GET_CLASS(machine-&gt;accelerator));
    machine_class-&gt;init(machine);
    phase_advance(PHASE_MACHINE_INITIAL
</code></pre><p>Which eventually calls <code>pc_init</code>. The interesting part in <code>pc_init1</code> is the call to <code>i440fx_init</code></p>
<pre tabindex="0"><code>        pci_bus = i440fx_init(pci_type,
                              i440fx_host,
                              system_memory, system_io, machine-&gt;ram_size,
                              x86ms-&gt;below_4g_mem_size,
                              x86ms-&gt;above_4g_mem_size,
                              pci_memory, ram_memory);
</code></pre><p><code>i440fx_init</code> created root host bridge and populates devices</p>
<pre tabindex="0"><code>PCIBus *i440fx_init(const char *pci_type,
                    DeviceState *dev,
                    MemoryRegion *address_space_mem,
                    MemoryRegion *address_space_io,
                    ram_addr_t ram_size,
                    ram_addr_t below_4g_mem_size,
                    ram_addr_t above_4g_mem_size,
                    MemoryRegion *pci_address_space,
                    MemoryRegion *ram_memory)
{
    PCIBus *b;
    PCIDevice *d;
    PCIHostState *s;
    PCII440FXState *f;
    unsigned i;
    I440FXState *i440fx;

    s = PCI_HOST_BRIDGE(dev);
    b = pci_root_bus_new(dev, NULL, pci_address_space,
                         address_space_io, 0, TYPE_PCI_BUS);
    s-&gt;bus = b;
    object_property_add_child(qdev_get_machine(), &quot;i440fx&quot;, OBJECT(dev));
    sysbus_realize_and_unref(SYS_BUS_DEVICE(dev), &amp;error_fatal);

    d = pci_create_simple(b, 0, pci_type);
    f = I440FX_PCI_DEVICE(d);
</code></pre><p><code>pci_root_bus_new</code> eventually calls <code>pci_root_bus_internal_init</code> which registers the root bus.</p>
<pre tabindex="0"><code>static void pci_root_bus_internal_init(PCIBus *bus, DeviceState *parent,
                                       MemoryRegion *address_space_mem,
                                       MemoryRegion *address_space_io,
                                       uint8_t devfn_min)
{
    assert(PCI_FUNC(devfn_min) == 0);
    bus-&gt;devfn_min = devfn_min;
    bus-&gt;slot_reserved_mask = 0x0;
    bus-&gt;address_space_mem = address_space_mem;
    bus-&gt;address_space_io = address_space_io;
    bus-&gt;flags |= PCI_BUS_IS_ROOT;

    /* host bridge */
    QLIST_INIT(&amp;bus-&gt;child);

    pci_host_bus_register(parent);
}
</code></pre><p>Side note,  i440fx calls <code>pci_create_simple</code> to create devices which goes to Qemu PCI subsystem and eventually call back the i440fx_realize on these devices.</p>
<pre tabindex="0"><code>0  i440fx_realize (dev=0x555556e6b620, errp=0x7fffffffd5c0) at ../hw/pci-host/i440fx.c:233
#1  0x0000555555a072ea in pci_qdev_realize (qdev=0x555556e6b620, errp=0x7fffffffd640) at ../hw/pci/pci.c:2098
#2  0x0000555555e16107 in device_set_realized (obj=0x555556e6b620, value=true, errp=0x7fffffffd750) at ../hw/core/qdev.c:510
#3  0x0000555555e202e3 in property_set_bool (obj=0x555556e6b620, v=0x555556e6fbb0, name=0x555556208211 &quot;realized&quot;, opaque=0x555556a3da90, errp=0x7fffffffd750) at ../qom/object.c:2285
#4  0x0000555555e1e1da in object_property_set (obj=0x555556e6b620, name=0x555556208211 &quot;realized&quot;, v=0x555556e6fbb0, errp=0x7fffffffd750) at ../qom/object.c:1420
#5  0x0000555555e22829 in object_property_set_qobject (obj=0x555556e6b620, name=0x555556208211 &quot;realized&quot;, value=0x555556e6b220, errp=0x5555569bc2e0 &lt;error_fatal&gt;) at ../qom/qom-qobject.c:28
#6  0x0000555555e1e559 in object_property_set_bool (obj=0x555556e6b620, name=0x555556208211 &quot;realized&quot;, value=true, errp=0x5555569bc2e0 &lt;error_fatal&gt;) at ../qom/object.c:1489
#7  0x0000555555e15895 in qdev_realize (dev=0x555556e6b620, bus=0x555556e33b40, errp=0x5555569bc2e0 &lt;error_fatal&gt;) at ../hw/core/qdev.c:292
#8  0x0000555555e158c6 in qdev_realize_and_unref (dev=0x555556e6b620, bus=0x555556e33b40, errp=0x5555569bc2e0 &lt;error_fatal&gt;) at ../hw/core/qdev.c:299
#9  0x0000555555a075f9 in pci_realize_and_unref (dev=0x555556e6b620, bus=0x555556e33b40, errp=0x5555569bc2e0 &lt;error_fatal&gt;) at ../hw/pci/pci.c:2167
#10 0x0000555555a07649 in pci_create_simple_multifunction (bus=0x555556e33b40, devfn=0, multifunction=false, name=0x5555561acef2 &quot;i440FX&quot;) at ../hw/pci/pci.c:2175
#11 0x0000555555a07681 in pci_create_simple (bus=0x555556e33b40, devfn=0, name=0x5555561acef2 &quot;i440FX&quot;) at ../hw/pci/pci.c:2181
#12 0x0000555555a2158b in i440fx_init
    (pci_type=0x5555561acef2 &quot;i440FX&quot;, dev=0x555556d32620, address_space_mem=0x555556c6dc00, address_space_io=0x555556bbc2e0, ram_size=2147483648, below_4g_mem_size=2147483648, above_4g_mem_size=0, pci_address_space=0x555556b6d800, ram_m4
#13 0x0000555555bd8a72 in pc_init1 (machine=0x555556c88400, host_type=0x5555561acef9 &quot;i440FX-pcihost&quot;, pci_type=0x5555561acef2 &quot;i440FX&quot;) at ../hw/i386/pc_piix.c:227
#14 0x0000555555bd9563 in pc_init_v8_0 (machine=0x555556c88400) at ../hw/i386/pc_piix.c:464
#15 0x00005555558f0a19 in machine_run_board_init (machine=0x555556c88400, mem_path=0x0, errp=0x5555569bc2e0 &lt;error_fatal&gt;) at ../hw/core/machine.c:1408
#16 0x0000555555b0df44 in qemu_init_board () at ../softmmu/vl.c:2513
#17 0x0000555555b0e1e5 in qmp_x_exit_preconfig (errp=0x5555569bc2e0 &lt;error_fatal&gt;) at ../softmmu/vl.c:2609
#18 0x0000555555b10a97 in qemu_init (argc=10, argv=0x7fffffffdea8) at ../softmmu/vl.c:3612
#19 0x000055555585c6cb in main (argc=10, argv=0x7fffffffdea8) at ../softmmu/main.c:47

</code></pre><h1 id="run-time">Run time</h1>
<p>During kernel execution, Qemu traps the IO/Memory access to emulate them for the guest kernel. I found <code>i440fx_write_config</code> callback in i440fx which handles memory/IO write</p>
<pre tabindex="0"><code>#0  i440fx_write_config (dev=0x555556e6b620, address=88, val=858992640, len=4) at ../hw/pci-host/i440fx.c:88
#1  0x0000555555a0acf1 in pci_host_config_write_common (pci_dev=0x555556e6b620, addr=88, limit=256, val=858992640, len=4) at ../hw/pci/pci_host.c:85
#2  0x0000555555a0af0f in pci_data_write (s=0x555556e33b40, addr=2147483736, val=858992640, len=4) at ../hw/pci/pci_host.c:127
#3  0x0000555555a0b0b6 in pci_host_data_write (opaque=0x555556d32620, addr=0, val=858992640, len=4) at ../hw/pci/pci_host.c:177
#4  0x0000555555d58118 in memory_region_write_accessor (mr=0x555556d32a60, addr=0, value=0x7ffff6b08068, size=4, shift=0, mask=4294967295, attrs=...) at ../softmmu/memory.c:493
#5  0x0000555555d58366 in access_with_adjusted_size (addr=0, value=0x7ffff6b08068, size=4, access_size_min=1, access_size_max=4, access_fn=0x555555d5801e &lt;memory_region_write_accessor&gt;, mr=0x555556d32a60, attrs=...)
    at ../softmmu/memory.c:555
#6  0x0000555555d5b549 in memory_region_dispatch_write (mr=0x555556d32a60, addr=0, data=858992640, op=MO_32, attrs=...) at ../softmmu/memory.c:1515
#7  0x0000555555d6ad14 in address_space_stl_internal (as=0x55555699e120 &lt;address_space_io&gt;, addr=3324, val=858992640, attrs=..., result=0x0, endian=DEVICE_NATIVE_ENDIAN) at /home/aa/Downloads/sources/qemu/memory_ldst.c.inc:319
#8  0x0000555555d6ae0f in address_space_stl (as=0x55555699e120 &lt;address_space_io&gt;, addr=3324, val=858992640, attrs=..., result=0x0) at /home/aa/Downloads/sources/qemu/memory_ldst.c.inc:350
#9  0x0000555555bc3bb8 in helper_outl (env=0x555556cb1470, port=3324, data=858992640) at ../target/i386/tcg/sysemu/misc_helper.c:55
#10 0x00007fff772b11a0 in code_gen_buffer ()
#11 0x0000555555dd8a3d in cpu_tb_exec (cpu=0x555556caf080, itb=0x7fffb395cfc0, tb_exit=0x7ffff6b086f8) at ../accel/tcg/cpu-exec.c:460
#12 0x0000555555dd97cf in cpu_loop_exec_tb (cpu=0x555556caf080, tb=0x7fffb395cfc0, pc=4294884085, last_tb=0x7ffff6b08708, tb_exit=0x7ffff6b086f8) at ../accel/tcg/cpu-exec.c:894
#13 0x0000555555dd9aeb in cpu_exec_loop (cpu=0x555556caf080, sc=0x7ffff6b08780) at ../accel/tcg/cpu-exec.c:1005
#14 0x0000555555dd9c39 in cpu_exec_setjmp (cpu=0x555556caf080, sc=0x7ffff6b08780) at ../accel/tcg/cpu-exec.c:1037
#15 0x0000555555dd9ccf in cpu_exec (cpu=0x555556caf080) at ../accel/tcg/cpu-exec.c:1063
#16 0x0000555555e08813 in tcg_cpus_exec (cpu=0x555556caf080) at ../accel/tcg/tcg-accel-ops.c:81
#17 0x0000555555e08efb in mttcg_cpu_thread_fn (arg=0x555556caf080) at ../accel/tcg/tcg-accel-ops-mttcg.c:95
#18 0x00005555560021bb in qemu_thread_start (args=0x555556d07620) at ../util/qemu-thread-posix.c:541
#19 0x00007ffff77b8b43 in start_thread (arg=&lt;optimized out&gt;) at ./nptl/pthread_create.c:442
#20 0x00007ffff784aa00 in clone3 () at ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81

</code></pre><p>i440fx_write_config calls pci_default_write_config</p>
<pre tabindex="0"><code>static void i440fx_write_config(PCIDevice *dev,
                                uint32_t address, uint32_t val, int len)
{
    PCII440FXState *d = I440FX_PCI_DEVICE(dev);

    /* XXX: implement SMRAM.D_LOCK */
    pci_default_write_config(dev, address, val, len);
    if (ranges_overlap(address, len, I440FX_PAM, I440FX_PAM_SIZE) ||
        range_covers_byte(address, len, I440FX_SMRAM)) {
        i440fx_update_memory_mappings(d);
    }
}
</code></pre><p>and pci_default_write_config eventually call pci_host_config_write to set the value of the emulated register. For completeness, I copied <code>pci_host_config_read</code> as well.</p>
<pre tabindex="0"><code>static void pci_host_config_write(void *opaque, hwaddr addr,
                                  uint64_t val, unsigned len)
{
    PCIHostState *s = opaque;

    PCI_DPRINTF(&quot;%s addr &quot; HWADDR_FMT_plx &quot; len %d val %&quot;PRIx64&quot;\n&quot;,
                __func__, addr, len, val);
    if (addr != 0 || len != 4) {
        return;
    }
    s-&gt;config_reg = val;
}

static uint64_t pci_host_config_read(void *opaque, hwaddr addr,
                                     unsigned len)
{
    PCIHostState *s = opaque;
    uint32_t val = s-&gt;config_reg;

    PCI_DPRINTF(&quot;%s addr &quot; HWADDR_FMT_plx &quot; len %d val %&quot;PRIx32&quot;\n&quot;,
                __func__, addr, len, val);
    return val;
}
</code></pre><p>To sum up, There are 2 stages here:</p>
<ul>
<li>The board initialization where PCI topology is create starting with host bridge and other buses and devices</li>
<li>During the time, Qemu (while doing code translation using the wonderful TCG) traps the memory/IO operations and redirect them into the devices created in the initialization above.</li>
</ul>
<p>That&rsquo;s it.</p>
]]></content>
        </item>
        
        <item>
            <title>Crypto - big Picture</title>
            <link>/posts/2023/03/crypto-big-picture/</link>
            <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/03/crypto-big-picture/</guid>
            <description>This post describes the cryptography algorithms and their applications (As I understand them). Over the years, I read bits of &amp;ldquo;Understanding cryptography&amp;rdquo; by Cristof Paar and these are my notes which kinda match the chapters of the book. I also, added links to related posts for each section.
The crypto provides several goals (the technical name is services)
 confidentiality: Stop people from seeing the message Integrity: Make sure the message is correct(no tampering) Message Authentication (The message is coming from the right person) Nonrepudiation: prove that some person signed a message  symmetric algorithms symmetric algorithms provide confidentiality by using shared key known by the Bob and Alice.</description>
            <content type="html"><![CDATA[<p>This post describes the cryptography algorithms and their applications (As I understand them). Over the years, I read bits of &ldquo;Understanding cryptography&rdquo; by Cristof Paar and these are my notes which kinda match the chapters of the book. I also, added links to related posts for each section.</p>
<p>The crypto provides several goals (the technical name is <code>services</code>)</p>
<ul>
<li>confidentiality: Stop people from seeing the message</li>
<li>Integrity: Make sure the message is correct(no tampering)</li>
<li>Message Authentication (The message is coming from the right person)</li>
<li>Nonrepudiation: prove that some person signed a message</li>
</ul>
<h1 id="symmetric-algorithms">symmetric algorithms</h1>
<p>symmetric algorithms provide confidentiality by using <code>shared key</code> known by the Bob and Alice.</p>
<p>Examples:</p>
<ul>
<li>AES <a href="/posts/2023/02/aes-rijndael-s-box-explained/">crypto-AES-SBOX</a></li>
</ul>
<p>The key has to exchanged over other way(see key exchange section). But, once it&rsquo;s known both sides can encrypt/decrypt messages with shared key.</p>
<h1 id="asymmetric-algorithms-public-key">asymmetric Algorithms (public key)</h1>
<p>asymmetric algorithms provide confidentiality by using 2 keys <code>Public</code> and <code>Private</code> keys. The good part is that private key can&rsquo;t be calculated from public key.
Let&rsquo;s Say Alice wants to send secure message to Bob:</p>
<ul>
<li>Bob has a key consisting of kpr and Kpub</li>
<li>Bob share Kpub to Alice</li>
<li>Alice uses Kpup to encrypt message</li>
<li>Bob uses Kpr to decrypt message</li>
</ul>
<p>The key point here is the Alice doesn&rsquo;t know the private key of Bob.</p>
<p>Examples:</p>
<ul>
<li>RSA   <a href="/posts/2022/09/the-slowest-rsa-implementation/">crypto-rsa</a></li>
<li>Discrete <a href="/posts/2022/10/the-diffie-hellman-key-exchange/">crypto-diffie-hellman</a></li>
<li>Elliptical curve  <a href="/posts/2022/10/elliptical-curve-crypto-key-exchange/">crypto-clliptical-curve</a></li>
</ul>
<h1 id="digital-signature">Digital signature</h1>
<p>provides Integrity, Authentication, and Nonrepudiation. Bob signs a message by creating a digital signal which is function of Kpr(Bob&rsquo;t private key) and sends both the message and signature. Alice using Bob&rsquo;s Public key, the message and signature to decide the message is valid or not. Digital signatures mainly use asymmetric algorithms above.</p>
<p>Examples:</p>
<ul>
<li>RSA</li>
<li>Discrete</li>
<li>Elliptical curve</li>
</ul>
<h1 id="hash-functions">Hash functions</h1>
<p>Hash function provides Integrity for the message by calculating one-way fixed size hash for arbitrary length messages. The hash algorithm needs to have the following properties</p>
<ul>
<li>One-way: You can&rsquo;t get a message from the digest</li>
<li>No-collision: you can&rsquo;t create 2 messages with the digest</li>
<li>Takes arbitrary length message</li>
<li>generate fixed size digest</li>
</ul>
<p>Examples:</p>
<ul>
<li>MD4 Family (MD5) <a href="/posts/2020/05/md5-python-implementation/">crypto-md5-python</a></li>
<li>SHA Family (SHA-0 and later)</li>
</ul>
<h1 id="integrity-algorithms">Integrity Algorithms</h1>
<p>They provide Integrity, Authentication by combining hash and symmetric. So, These algorithms still need a key to calculate a digest sent with message. And receiver uses the message, digest and key to check that message is valid or not.</p>
<p>Examples:</p>
<ul>
<li>HMAC(using hash functions SHA1 or MD5) <a href="/posts/2022/06/hash-based-message-authentication-hmac/">crypto-hmac</a></li>
<li>CBC-MAC</li>
<li>GMAC</li>
</ul>
<h1 id="key-exchange">Key exchange</h1>
<p>In above Algorithms, we assumed the keys are already known by Alice and Bob. But we need a way to exchange the keys.</p>
<ul>
<li>symmertic exchange (not common)</li>
<li>Asymmetric exchange (very popular)</li>
</ul>
<p>In Asymmetric exchange, Both sides share public keys and the other side uses the public key and private key, to calculate secret key.</p>
<p>Examples:</p>
<ul>
<li>Diffie–Hellman key exchange (DHKE) <a href="/posts/2023/03/crypto-dh-key-exchange/">crypto-keyexchange</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Crypto - DH key exchange</title>
            <link>/posts/2023/03/crypto-dh-key-exchange/</link>
            <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/03/crypto-dh-key-exchange/</guid>
            <description>In most Crypto algorithms, we assumed the keys are already known by Alice and Bob. But we need a way to exchange the keys on securely first
 symmertic exchange (not common) Asymmetric exchange (very popular)  In Asymmetric exchange, Both sides share public keys and the other side uses the public key and private key, to calculate secret key.
Alice ------ A -----&amp;gt; Bob &amp;lt;-------B------ At Alice Kab = Fun(a, B) At Bob Kab = Fun(b, A) Diffie–Hellman key exchange (DHKE) The problem how make sure is that Bob is Bob?</description>
            <content type="html"><![CDATA[<p>In most Crypto algorithms, we assumed the keys are already known by Alice and Bob. But we need a way to exchange the keys on securely first</p>
<ul>
<li>symmertic exchange (not common)</li>
<li>Asymmetric exchange (very popular)</li>
</ul>
<p>In Asymmetric exchange, Both sides share public keys and the other side uses the public key and private key, to calculate secret key.</p>
<pre tabindex="0"><code>Alice  ------ A -----&gt; Bob
      &lt;-------B------

At Alice
Kab = Fun(a, B)

At Bob
Kab = Fun(b, A)

</code></pre><h1 id="diffiehellman-key-exchange-dhke">Diffie–Hellman key exchange (DHKE)</h1>
<p>The problem how make sure is that Bob is Bob?
The good solution using digital signature to sign the public key and Identity. and send <code>certificate</code> which &lt;message, sign(message)&gt;. In this case, <code> sign_Kpr,a(&lt;Kpub,a  IDa&gt;)</code> where Kpr is Alice&rsquo;s private key.  This way the receiver needs Kpub to verify the certificate first</p>
<pre tabindex="0"><code>Alice ------- X ------&gt;

X = sign(&lt;Kpub,a  IDa&gt;)
Certa = [
 &lt;Kpub,a  IDa&gt;
 sign_Kpr,a(&lt;Kpub,a  IDa&gt;)
] 
</code></pre><p>Now, the problem is that receiver needs to know Alice&rsquo;s Kpub which the problem we are trying to solve. Here where certificate authority comes in.</p>
<pre tabindex="0"><code>CA generate k_pub_A, k_pr_A

S_a = Sign_Kpr_CA(k_pub_A, ID_A)
Cert_A = &lt;k_pub_A, S_A&gt;

CA sends back Cert_A and k_pr_A
</code></pre><p>For Alice and Bob to communicate, the key establishment should be done first by exchange Cert_A and Cert_B.</p>
<pre tabindex="0"><code>At Alice:
A = K_pub_A
a = K_pr_A

Cert_A = [ (A, ID_A), S_A]
S_A is signature by CA


At Bobe:
B = K_pub_B
b = K_pr_B

Cert_B = [ (B, ID_B), S_B]
S_B is signature by CA


Alice --------- Cert_A ----&gt; Bob
      &lt;--------- Cert_B---- 

At Alice:
verify(Cert_B) and get B.. The verification is using k_pub_CA
Kab = Fun(B, a)
</code></pre><p>Note that verification of <code>Cert_B</code> will use CA public key <code>k_pub_CA</code> which insures that Cert was generated for B (Bob). Obviously, The certificate distribution has to be secure But this has to one-time thing between Alice and CA.</p>
]]></content>
        </item>
        
        <item>
            <title>Cocotb Deepdive - Force and release</title>
            <link>/posts/2023/03/cocotb-deepdive-force-and-release/</link>
            <pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/03/cocotb-deepdive-force-and-release/</guid>
            <description>A really nice feature of cocotb is force and release which map to RTL force and release depending on the language (and simulator). This is example how to use Force and Release.
from cocotb.handle import Force, Release, Deposit from cocotb.binary import BinaryValue value = &amp;#34;0&amp;#34; sig = .... sig.value = Force(BinaryValue(len(sig) * value) sig.value = Release() Force and Release are defines in handle.py and defines _as_gpi_args_for.
class _SetValueAction(_SetAction): __slots__ = (&amp;#34;value&amp;#34;,) &amp;#34;&amp;#34;&amp;#34;Base class representing the type of action used while write-accessing a handle with a value.</description>
            <content type="html"><![CDATA[<p>A really nice feature of cocotb is force and release which map to RTL force and release depending on the language (and simulator). This is example how to use <code>Force</code> and <code>Release</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">from</span> cocotb.handle <span style="color:#fff;font-weight:bold">import</span> Force, Release, Deposit
<span style="color:#fff;font-weight:bold">from</span> cocotb.binary <span style="color:#fff;font-weight:bold">import</span> BinaryValue

value = <span style="color:#0ff;font-weight:bold">&#34;0&#34;</span>
sig  = ....

sig.value = Force(BinaryValue(<span style="color:#fff;font-weight:bold">len</span>(sig) * value)
sig.value = Release()
</code></pre></div><p><code>Force</code> and <code>Release</code> are defines in <code>handle.py</code> and defines <code>_as_gpi_args_for</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> _SetValueAction(_SetAction):
    __slots__ = (<span style="color:#0ff;font-weight:bold">&#34;value&#34;</span>,)
    <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;Base class representing the type of action used while write-accessing a handle with a value.&#34;&#34;&#34;</span>

    <span style="color:#fff;font-weight:bold">def</span> __init__(self, value):
        self.value = value


<span style="color:#fff;font-weight:bold">class</span> Force(_SetValueAction):
    <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;Action used to force a handle to a given value until a release is applied.&#34;&#34;&#34;</span>

    <span style="color:#fff;font-weight:bold">def</span> _as_gpi_args_for(self, hdl):
        <span style="color:#fff;font-weight:bold">return</span> self.value, <span style="color:#ff0;font-weight:bold">1</span>  <span style="color:#007f7f"># GPI_FORCE</span>

<span style="color:#fff;font-weight:bold">class</span> Release(_SetAction):
    <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;Action used to stop the effects of a previously applied force/freeze action.&#34;&#34;&#34;</span>

    <span style="color:#fff;font-weight:bold">def</span> _as_gpi_args_for(self, hdl):
        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">2</span>  <span style="color:#007f7f"># GPI_RELEASE</span>
</code></pre></div><p>Ok, Let&rsquo;s look what happens when testbench calls <code>sig.value = Force(v)</code>. Starting with <code>setter</code> function which calls <code>_set_value</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    @value.setter
    <span style="color:#fff;font-weight:bold">def</span> value(self, value):
        self._set_value(value, cocotb.scheduler._schedule_write)
</code></pre></div><p>For integer, <code>IntegerObject</code> calls <code>_check_for_set_action</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> IntegerObject(ModifiableObject):

        value, set_action = self._check_for_set_action(value)
    <span style="color:#fff;font-weight:bold">def</span> _set_value(self, value, call_sim):
        ...


         call_sim(self, self._handle.set_signal_val_int, set_action, value)
</code></pre></div><p>And <code>_check_for_set_action</code> calls <code>_as_gpi_args_for</code> to get type of action and pass it down to simulator.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
    <span style="color:#fff;font-weight:bold">def</span> _check_for_set_action(self, value):
        <span style="color:#fff;font-weight:bold">if</span> not <span style="color:#fff;font-weight:bold">isinstance</span>(value, _SetAction):
            <span style="color:#fff;font-weight:bold">return</span> value, <span style="color:#ff0;font-weight:bold">0</span>  <span style="color:#007f7f"># GPI_DEPOSIT</span>
        <span style="color:#fff;font-weight:bold">return</span> value._as_gpi_args_for(self)
</code></pre></div><p>well, Several layers(gpi and stuff), there are several implementations of force(FLI/VHPI and VPI). This is snippet from the vpi <code>set_signal_value</code>. <code>vpiForceFlag</code> is passed to <code>vpi_put_value</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#fff;font-weight:bold">int</span> VpiSignalObjHdl::set_signal_value(s_vpi_value value_s,
                                      gpi_set_action_t action) {
    PLI_INT32 vpi_put_flag = -<span style="color:#ff0;font-weight:bold">1</span>;
    s_vpi_time vpi_time_s;

    vpi_time_s.type = vpiSimTime;
    vpi_time_s.high = <span style="color:#ff0;font-weight:bold">0</span>;
    vpi_time_s.low = <span style="color:#ff0;font-weight:bold">0</span>;

    <span style="color:#fff;font-weight:bold">switch</span> (action) {
        <span style="color:#fff;font-weight:bold">case</span> GPI_DEPOSIT:
            <span style="color:#fff;font-weight:bold">if</span> (vpiStringVar ==
                vpi_get(vpiType, GpiObjHdl::get_handle&lt;vpiHandle&gt;())) {
                <span style="color:#007f7f">// assigning to a vpiStringVar only seems to work with
</span><span style="color:#007f7f"></span>                <span style="color:#007f7f">// vpiNoDelay
</span><span style="color:#007f7f"></span>                vpi_put_flag = vpiNoDelay;
            } <span style="color:#fff;font-weight:bold">else</span> {
                <span style="color:#007f7f">// Use Inertial delay to schedule an event, thus behaving like a
</span><span style="color:#007f7f"></span>                <span style="color:#007f7f">// verilog testbench
</span><span style="color:#007f7f"></span>                vpi_put_flag = vpiInertialDelay;
            }
            <span style="color:#fff;font-weight:bold">break</span>;
        <span style="color:#fff;font-weight:bold">case</span> GPI_FORCE:
            vpi_put_flag = vpiForceFlag;
            <span style="color:#fff;font-weight:bold">break</span>;
        <span style="color:#fff;font-weight:bold">case</span> GPI_RELEASE:
            <span style="color:#007f7f">// Best to pass its current value to the sim when releasing
</span><span style="color:#007f7f"></span>            vpi_get_value(GpiObjHdl::get_handle&lt;vpiHandle&gt;(), &amp;value_s);
            vpi_put_flag = vpiReleaseFlag;
            <span style="color:#fff;font-weight:bold">break</span>;
        <span style="color:#fff;font-weight:bold">default</span>:
            assert(<span style="color:#ff0;font-weight:bold">0</span>);
    }

    <span style="color:#fff;font-weight:bold">if</span> (vpi_put_flag == vpiNoDelay) {
        vpi_put_value(GpiObjHdl::get_handle&lt;vpiHandle&gt;(), &amp;value_s, <span style="color:#fff;font-weight:bold">NULL</span>,
                      vpiNoDelay);
    } <span style="color:#fff;font-weight:bold">else</span> {
        vpi_put_value(GpiObjHdl::get_handle&lt;vpiHandle&gt;(), &amp;value_s, &amp;vpi_time_s,
                      vpi_put_flag);
    }

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Yosys Python bindings pyosys - Hello world and deepdive</title>
            <link>/posts/2023/03/yosys-python-bindings-pyosys-hello-world-and-deepdive/</link>
            <pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/03/yosys-python-bindings-pyosys-hello-world-and-deepdive/</guid>
            <description>I think Yosys is one most important open sources projects ever created, at least for hardware development. It enabled so much research and innovation in FPGA and ASIC area. It did what gcc did for software development.
Building and installation These are the steps to build yosys with pyosys(python bindings). It&amp;rsquo;s not enabled by default. So you have to pass ENABLE_PYOSYS. Also, I am using virtualenv as I don&amp;rsquo;t want to install anything with root.</description>
            <content type="html"><![CDATA[<p>I think Yosys is one most important open sources projects ever created, at least for hardware development. It enabled so much research and innovation in FPGA and ASIC area. It did what gcc did for software development.</p>
<h1 id="building-and-installation">Building and installation</h1>
<p>These are the steps to build yosys with pyosys(python bindings). It&rsquo;s not enabled by default. So you have to pass <code>ENABLE_PYOSYS</code>. Also, I am using virtualenv as I don&rsquo;t want to install anything with root.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#fff;font-weight:bold">source</span> .venv/bin/activate
make config-gcc
make ENABLE_PYOSYS=<span style="color:#ff0;font-weight:bold">1</span> -j4
make install PREFIX=<span style="color:#0ff;font-weight:bold">`</span><span style="color:#fff;font-weight:bold">pwd</span><span style="color:#0ff;font-weight:bold">`</span>/local ENABLE_PYOSYS=<span style="color:#ff0;font-weight:bold">1</span>

<span style="color:#fff;font-weight:bold">export</span> PATH=<span style="color:#0ff;font-weight:bold">`</span><span style="color:#fff;font-weight:bold">pwd</span><span style="color:#0ff;font-weight:bold">`</span>/local/bin:$PATH
</code></pre></div><h1 id="hello-world">Hello world</h1>
<p>pyosys provides API to run yosys <code>passes</code> and provide design information using <code>ys.Design()</code> object.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">from</span> pyosys <span style="color:#fff;font-weight:bold">import</span> libyosys <span style="color:#fff;font-weight:bold">as</span> ys

design = ys.Design()

rtl_sources = [<span style="color:#0ff;font-weight:bold">&#34;Files here&#34;</span>]
ys.run_pass(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;tee -q -o yosys.log read_verilog -mem2reg -noopt  </span><span style="color:#0ff;font-weight:bold">{</span>include_string<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">  </span><span style="color:#0ff;font-weight:bold">{</span><span style="color:#0ff;font-weight:bold">&#34; &#34;</span>.join(rtl_sources)<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>, design)
ys.run_pass(<span style="color:#0ff;font-weight:bold">&#34;tee -q -a yosys.log hierarchy&#34;</span>, design)
</code></pre></div><p>Then you can use all the cool stuff like design iterations and passes. Starting with list of modules compiled and instantiated cell(basically other modules)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        <span style="color:#fff;font-weight:bold">for</span> module in self.design.selected_whole_modules_warn():

            <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;module.name.str()&#34;</span>)    
            <span style="color:#fff;font-weight:bold">for</span> cell in module.selected_cells():
                <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">\t</span><span style="color:#0ff;font-weight:bold">cell: </span><span style="color:#0ff;font-weight:bold">{</span>cell.type.str()<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
</code></pre></div><h1 id="deepdive">Deepdive</h1>
<p>Now that we have hello world is out the way, Let&rsquo;s dig deeper into the python binding. On core code side, There are several places where specific interfaces are added to be called from python modules like</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#ifdef WITH_PYTHON
</span><span style="color:#0f0;font-weight:bold"></span>	<span style="color:#fff;font-weight:bold">static</span> std::map&lt;<span style="color:#fff;font-weight:bold">unsigned</span> <span style="color:#fff;font-weight:bold">int</span>, RTLIL::Design*&gt; *get_all_designs(<span style="color:#fff;font-weight:bold">void</span>);
<span style="color:#0f0;font-weight:bold">#endif
</span></code></pre></div><p>and definition</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#ifdef WITH_PYTHON
</span><span style="color:#0f0;font-weight:bold"></span><span style="color:#fff;font-weight:bold">static</span> std::map&lt;<span style="color:#fff;font-weight:bold">unsigned</span> <span style="color:#fff;font-weight:bold">int</span>, RTLIL::Design*&gt; all_designs;
std::map&lt;<span style="color:#fff;font-weight:bold">unsigned</span> <span style="color:#fff;font-weight:bold">int</span>, RTLIL::Design*&gt; *RTLIL::Design::get_all_designs(<span style="color:#fff;font-weight:bold">void</span>)
{
	<span style="color:#fff;font-weight:bold">return</span> &amp;all_designs;
}
<span style="color:#0f0;font-weight:bold">#endif
</span></code></pre></div><p>There are other API that are available in C++ (and python) like <code>selected_whole_modules_warn</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#fff;font-weight:bold">struct</span> RTLIL::Design
{
	<span style="color:#fff;font-weight:bold">unsigned</span> <span style="color:#fff;font-weight:bold">int</span> hashidx_;
	<span style="color:#fff;font-weight:bold">unsigned</span> <span style="color:#fff;font-weight:bold">int</span> hash() <span style="color:#fff;font-weight:bold">const</span> { <span style="color:#fff;font-weight:bold">return</span> hashidx_; }
    ....
    ....
	std::vector&lt;RTLIL::Module*&gt; selected_modules() <span style="color:#fff;font-weight:bold">const</span>;
	std::vector&lt;RTLIL::Module*&gt; selected_whole_modules() <span style="color:#fff;font-weight:bold">const</span>;
	std::vector&lt;RTLIL::Module*&gt; selected_whole_modules_warn(<span style="color:#fff;font-weight:bold">bool</span> include_wb = <span style="color:#fff;font-weight:bold">false</span>) <span style="color:#fff;font-weight:bold">const</span>;
</code></pre></div><p>For module init, It&rsquo;s more complicated. Starting In <code>kernel/yosys.cc</code>, <code>Py_Initialize</code> is called after appending <code>INIT_MODULE</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">	<span style="color:#0f0;font-weight:bold">#ifdef WITH_PYTHON
</span><span style="color:#0f0;font-weight:bold"></span>		PyImport_AppendInittab((<span style="color:#fff;font-weight:bold">char</span>*)<span style="color:#0ff;font-weight:bold">&#34;libyosys&#34;</span>, INIT_MODULE);
		Py_Initialize();
		PyRun_SimpleString(<span style="color:#0ff;font-weight:bold">&#34;import sys&#34;</span>);
		signal(SIGINT, SIG_DFL);
	<span style="color:#0f0;font-weight:bold">#endif
</span></code></pre></div><p>and <code>INIT_MODULE</code> is macro in same file</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#ifdef WITH_PYTHON
</span><span style="color:#0f0;font-weight:bold">#if PY_MAJOR_VERSION &gt;= 3
</span><span style="color:#0f0;font-weight:bold">#   define INIT_MODULE PyInit_libyosys
</span><span style="color:#0f0;font-weight:bold"></span>    <span style="color:#fff;font-weight:bold">extern</span> <span style="color:#0ff;font-weight:bold">&#34;C&#34;</span> PyObject* INIT_MODULE();
<span style="color:#0f0;font-weight:bold">#else
</span><span style="color:#0f0;font-weight:bold">#   define INIT_MODULE initlibyosys
</span><span style="color:#0f0;font-weight:bold"></span>	<span style="color:#fff;font-weight:bold">extern</span> <span style="color:#0ff;font-weight:bold">&#34;C&#34;</span> <span style="color:#fff;font-weight:bold">void</span> INIT_MODULE();
<span style="color:#0f0;font-weight:bold">#endif
</span></code></pre></div><p>So, where are the wrappers? the complicated <code>PY</code> stuff.</p>
<p>For that there is script <code>external/yosys/misc/py_wrap_generator.py</code> which dumps all wrapper code using <code>BOOST PYTHON</code> . This is snippet of the script showing the module init macro used.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">	BOOST_PYTHON_MODULE(libyosys)
	{
		using namespace boost::python;

		class_&lt;Initializer&gt;(<span style="color:#0ff;font-weight:bold">&#34;Initializer&#34;</span>);
		scope().attr(<span style="color:#0ff;font-weight:bold">&#34;_hidden&#34;</span>) = new Initializer();

		def(<span style="color:#0ff;font-weight:bold">&#34;log_to_stream&#34;</span>, &amp;log_to_stream);
<span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;)
</span></code></pre></div><p>Side note about BOOST python modules, From the docs:</p>
<pre tabindex="0"><code>Introduction
This header provides the basic facilities needed to create a Boost.Python extension module.

Macros
BOOST_PYTHON_MODULE(name) is used to declare Python module initialization functions. The name argument must exactly match the name of the module to be initialized, and must conform to Python's identifier naming rules. Where you would normally write

extern &quot;C&quot; void initname()
{
   ...
}
Boost.Python modules should be initialized with

BOOST_PYTHON_MODULE(name)
{
   ...
}
</code></pre><p>So, who calls <code>py_wrap_generator.py</code>?</p>
<p>During build process, Makefile calls that script to generate the wrappers to be compiled into <code>libyosys.so</code></p>
<pre tabindex="0"><code>PY_GEN_SCRIPT= py_wrap_generator

...
...

ifeq ($(ENABLE_PYOSYS),1)
$(PY_WRAPPER_FILE).cc: misc/$(PY_GEN_SCRIPT).py $(PY_WRAP_INCLUDES)
	$(Q) mkdir -p $(dir $@)
	$(P) python$(PYTHON_VERSION) -c &quot;from misc import $(PY_GEN_SCRIPT); $(PY_GEN_SCRIPT).gen_wrappers(\&quot;$(PY_WRAPPER_FILE).cc\&quot;)&quot;
endif
</code></pre><p>The last bit is installing <code>libyosys.so</code> to be called from python as normal python module. The full path should be</p>
<pre tabindex="0"><code>.venv/lib/python3.10/dist-packages/pyosys/libyosys.so
</code></pre>]]></content>
        </item>
        
        <item>
            <title>IPXACT parser To Tree -- One way to avoid XML</title>
            <link>/posts/2023/03/ipxact-parser-to-tree-one-way-to-avoid-xml/</link>
            <pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/03/ipxact-parser-to-tree-one-way-to-avoid-xml/</guid>
            <description>In older post, I went through ipxactral (poor man&amp;rsquo;s RAL generator). It seems only logical to extract the part where i process XML and make dedicated module for that. I hear someone shouting, isn&amp;rsquo;t XML a tree already? My answer is I HATE XML, So I will do whatever to avoid dealing with XML.
Jumping right into it, IPXACTTree just takes path to ixact file.
t = IPXACTTree(args.ipxactfile) The heavy lifting is done here to create the tree starting from root and recursively going through the nodes.</description>
            <content type="html"><![CDATA[<p>In older post, I went through <code>ipxactral</code> (poor man&rsquo;s RAL generator). It seems only logical to extract the part where i process XML and make dedicated module for that. I hear someone shouting, isn&rsquo;t XML a tree already?
My answer is <code>I HATE XML</code>, So I will do whatever to avoid dealing with XML.</p>
<p>Jumping right into it, <code>IPXACTTree</code> just takes path to ixact file.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">t = IPXACTTree(args.ipxactfile)
</code></pre></div><p>The heavy lifting is done here to create the tree starting from root and recursively going through the nodes.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> IPXACTTree():
    <span style="color:#fff;font-weight:bold">def</span> __init__(self,ipxactfile):
        <span style="color:#fff;font-weight:bold">def</span> iterate_tree(xmlnode,node):
            <span style="color:#fff;font-weight:bold">for</span> child in xmlnode:
                cn = Node(child)
                node.add(cn)
                iterate_tree(child, cn)

        tree = ET.parse(ipxactfile)
        xmlroot = tree.getroot()

        self.root = Node(xmlroot)
        iterate_tree(xmlroot,self.root)

</code></pre></div><p>Other than that, most work is delegated to <code>Node</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> __iter__(self):
        <span style="color:#fff;font-weight:bold">for</span> node in self.root:
            <span style="color:#fff;font-weight:bold">yield</span> node

    <span style="color:#fff;font-weight:bold">def</span> __str__(self):
        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">str</span>(self.root)

    <span style="color:#fff;font-weight:bold">def</span> findall(self,tag):
        <span style="color:#fff;font-weight:bold">all</span> = self.root.findall(tag)
        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">all</span>
</code></pre></div><p>The interesting part is searching for tags with <code>findall</code>. I do quick DFS of the tree to get the nodes matching the tag.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> __iter__(self):
        <span style="color:#fff;font-weight:bold">def</span> dfs_internal(node):
            <span style="color:#fff;font-weight:bold">yield</span> node
            <span style="color:#fff;font-weight:bold">for</span> child in node.children:
                <span style="color:#fff;font-weight:bold">yield from</span> dfs_internal(child)
        <span style="color:#fff;font-weight:bold">yield from</span> dfs_internal(self)

    <span style="color:#fff;font-weight:bold">def</span> __str__(self):
        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>.join([(<span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">\t</span><span style="color:#0ff;font-weight:bold">&#34;</span> * node.level)+ <span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">{</span>node.tag<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">: </span><span style="color:#0ff;font-weight:bold">{</span>node.text<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>  <span style="color:#fff;font-weight:bold">for</span> node in self])

    <span style="color:#fff;font-weight:bold">def</span> findall(self,tag):
        <span style="color:#fff;font-weight:bold">all</span> = [node  <span style="color:#fff;font-weight:bold">for</span> node in self <span style="color:#fff;font-weight:bold">if</span> tag == node.tag]
        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">all</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Parsing UPF - Embedding TCL interpreter with python</title>
            <link>/posts/2023/03/parsing-upf-embedding-tcl-interpreter-with-python/</link>
            <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/03/parsing-upf-embedding-tcl-interpreter-with-python/</guid>
            <description>This post is about quirky idea to parse UPF for fun and profit. I started with writing Lark BNF, To a man with a hammer, everything looks like a nail :) But gave up on the idea as i will end up writing frontend for TCL. So, I was mentally blocked for some time.
Then it hit me, I can use full-blown TCL interpreter to parse the actual UPF and pass it back to python for processing.</description>
            <content type="html"><![CDATA[<p>This post is about quirky idea to parse UPF for fun and profit. I started with writing Lark BNF, To a man with a hammer, everything looks like a nail :)
But gave up on the idea as i will end up writing frontend for TCL. So, I was mentally blocked for some time.</p>
<p>Then it hit me, I can use full-blown TCL interpreter to parse the actual UPF and pass it back to python for processing. The problem how to do it?</p>
<p>Apparently, TCL can accept user-defined handler for commands called <code>_unknown</code>. The idea is getting the command name and arg and create a json and send it back to python socket (not show in the snippet yet.)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-tcl" data-lang="tcl"><span style="color:#007f7f"># Globals passed to python
</span><span style="color:#007f7f"></span><span style="color:#fff;font-weight:bold">set</span> command_name <span style="color:#0ff;font-weight:bold">&#34;TMP&#34;</span>
<span style="color:#fff;font-weight:bold">set</span> command_args <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>

<span style="color:#007f7f"># Handle unsupport commands
</span><span style="color:#007f7f"></span><span style="color:#fff;font-weight:bold">rename</span> unknown _unknown<span style="color:#fff;font-weight:bold">;</span>
<span style="color:#fff;font-weight:bold">proc</span> unknown <span style="color:#fff;font-weight:bold">{</span>args<span style="color:#fff;font-weight:bold">}</span> <span style="color:#fff;font-weight:bold">{</span>
    <span style="color:#007f7f"># puts stderr &#34;Unknown Command: $args&#34;
</span><span style="color:#007f7f"></span>    <span style="color:#007f7f"># puts [llength $args]
</span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">global</span> command_name
    <span style="color:#fff;font-weight:bold">global</span> command_args

    <span style="color:#fff;font-weight:bold">set</span> command_name <span style="color:#fff;font-weight:bold">[</span><span style="color:#fff;font-weight:bold">lindex</span> <span style="color:#fff;font-weight:bold">[</span><span style="color:#fff;font-weight:bold">info</span> level <span style="color:#ff0;font-weight:bold">0</span><span style="color:#fff;font-weight:bold">]</span> <span style="color:#ff0;font-weight:bold">0</span><span style="color:#fff;font-weight:bold">]</span>
    
    <span style="color:#fff;font-weight:bold">set</span> result <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>
    <span style="color:#fff;font-weight:bold">foreach</span> x $args <span style="color:#fff;font-weight:bold">{</span>
        <span style="color:#fff;font-weight:bold">append</span> result $x
    <span style="color:#fff;font-weight:bold">}</span>
    <span style="color:#fff;font-weight:bold">set</span> command_args $result
<span style="color:#fff;font-weight:bold">}</span>

</code></pre></div><p>The easiest way to run TCL from python is using <code>tkinter.Tcl</code>. The first command is calling the common error handler and then parsing TCL(UPF) and passing it to the <code>tclsh</code></p>
<pre tabindex="0"><code>import tkinter
    
  tclsh = tkinter.Tcl()

    tclsh.eval(&quot;source {tcl/upf_commands.tcl}&quot;)

    f = open(args.filename,&quot;r&quot;)
    lines = f.readlines()
    lines = &quot;&quot;.join(lines)
    tclsh.eval(lines)

</code></pre><p>The next step is complete the interface from TCL to python to call python stuff for each UPF command.</p>
]]></content>
        </item>
        
        <item>
            <title>Portable Stimulus Standard - Part 1</title>
            <link>/posts/2023/02/portable-stimulus-standard-part-1/</link>
            <pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/portable-stimulus-standard-part-1/</guid>
            <description>Portable stimulus standard (PSS) is very interesting. That said, It&amp;rsquo;s surprising simple.
These are important abstraction units specific by the spec:
 component action Activity  Component Component is a way to encapsulate other elements (mainly actions)
 Components serve as a mechanism to encapsulate and reuse elements of functionality in a portable stimulus model. Typically, a model is broken down into parts that correspond to roles played by different actors during test execution.</description>
            <content type="html"><![CDATA[<p>Portable stimulus standard (PSS) is very interesting. That said, It&rsquo;s surprising simple.</p>
<p>These are important abstraction units specific by the spec:</p>
<ul>
<li>component</li>
<li>action</li>
<li>Activity</li>
</ul>
<h1 id="component">Component</h1>
<p>Component is a way to encapsulate other elements (mainly actions)</p>
<blockquote>
<p>Components serve as a mechanism to encapsulate and reuse elements of functionality in a portable stimulus
model. Typically, a model is broken down into parts that correspond to roles played by different actors
during test execution. Components often align with certain structural elements of the system and execution
environment, such as hardware engines, software packages, or testbench agents.</p>
</blockquote>
<p>The example from the spec, we have 2 component and action in the top <code>pss_top</code> component. The action entry uses the actions from sub-components.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">component usb_c {
action write {...}
}
component uart_c {
action write {...}
}
component pss_top {
uart_c s1;
usb_c s2;
action entry {
uart_c::write wr; //refers to the write action in uart_c
...
}
}
</code></pre></div><h1 id="actions">Actions</h1>
<p>The spec describes action as follows:</p>
<blockquote>
<p>Actions are a key abstraction unit in PSS. Actions serve to decompose scenarios into elements whose
definitions can be reused in many different contexts. Along with their intrinsic properties, actions also
encapsulate the rules for their interaction with other actions and the ways to combine them in legal
scenarios. Atomic actions may be composed into higher-level actions, and, ultimately, to top-level test
actions, using activities (see Clause 13)</p>
</blockquote>
<p>Well, Action can be either atomic which does specific job like read and write. Compound action is something like the example below where it combines other actions to describe the scenario.</p>
<pre tabindex="0"><code>action sub_a {...};
action compound_a {
sub_a a1, a2;
activity {
a1;
a2;
}
}
</code></pre><h1 id="activity">Activity</h1>
<p>The spec defines <code>activity</code> as follows:</p>
<blockquote>
<p>When a compound action includes multiple operations, these behaviors are described within the action
using one or more activity statements. An activity specifies the set of actions to be executed and the
scheduling relationship(s) between them</p>
</blockquote>
<p>There are several statements that can be used with action. One example is <code>action traversal</code> with the following example.</p>
<blockquote>
<p>An action traversal statement designates the point in the execution of an activity where an action is
randomized and evaluated (see Syntax 49 and Syntax 50). The action being traversed may be specified via
an action handle referring to an action field that was previously declared or the action being traversed may
be specified by type, in which case the action instance is anonymous.</p>
</blockquote>
<pre tabindex="0"><code>action A {
rand bit[3:0]
...
}
f1;
action B {
    A a1, a2;
    activity {
        a1;
        a2 with {
        f1 &lt; 10;
        };
    }
}
</code></pre><h1 id="action-inferencing">Action inferencing</h1>
<p>Well, did iIsay PSS is simple? maybe not.</p>
<p>Action inference is confusing, but I guess it is the selling point of PSS.</p>
<blockquote>
<p>Perhaps the most powerful feature of PSS is the ability to focus purely on the user’s verification intent, while
delegating the means to achieve that intent. Previous clauses have introduced the semantic concepts to
define such abstract specifications of intent. The modeling constructs and semantic rules thus defined for a
portable stimulus model allow a tool to generate a number of scenarios from a single (partial) specification
to implement the desired intent.</p>
</blockquote>
<blockquote>
<p>In a scenario description, the explicit binding of outputs to inputs may be left unspecified. In these cases, an
implementation shall execute a scenario that reflects a valid completion of the given partial specification in a
way that conforms to pool binding rules. If no valid scenario exists, the tool shall report an error.
Completing a partial specification may involve decisions on output-to-input binding of flow objects in
actions that are explicitly traversed. It may also involve introducing the traversal of additional actions,
beyond those explicitly traversed, to serve as the counterpart of a flow object exchange. The introduction of
an action in the execution of a scenario to complete a partially specified flow is called action inferencing.
Action inferences are necessary to make a scenario execution legal if the following conditions hold:
a) An input of any kind is not explicitly bound to an output, or an output of stream kind is not explicitly
bound to an input.
b) There is no explicitly traversed action available to legally bind its output/input to the unbound input/
output, i.e.,</p>
<ol>
<li>There is no action that is or may be scheduled before the inputting action in the case of buffer
or state objects.</li>
<li>There is no action that is or may be scheduled in parallel to the inputting/outputting action in
the case of stream objects.</li>
</ol>
</blockquote>
<h1 id="test-realization">Test Realization</h1>
<p>The moment we all waiting for. Why does PSS even do?</p>
<p>If you have scenario inferred already (all the actions and activity magic is done), One way to <code>realize</code> a test is using a template. Again, example from the spec as follows:</p>
<pre tabindex="0"><code>component top {
struct S {
rand int b;
}
action A {
rand int a;
rand S
s1;
exec body C = &quot;&quot;&quot;
printf(&quot;a={{a}} s1.b={{s1.b}} a+b={{a+s1.b}}\n&quot;);
&quot;&quot;&quot;;
}
}
</code></pre><p>body is one the exec, This is description for the rest:</p>
<blockquote>
<p>The following list describes the different exec block kinds:
— pre_solve—valid in action, flow/resource object, and struct types. The pre_solve block is pro-
cessed prior to solving of random-variable relationships in the PSS model. pre_solve exec blocks are
used to initialize non-random variables that the solve process uses. See also 17.4.10.
— post_solve—valid in action, flow/resource object, and struct types. The post_solve block is pro-
cessed after random-variable relationships have been solved. The post_solve exec block is used to
compute values of non-random fields based on the solved values of random fields. See also 17.4.10.
— body—valid in action types. The body block constitutes the implementation of an atomic action.
The body block of each action is invoked in its respective order during the execution of a sce-
nario—after the body blocks of all predecessor actions complete. Execution of an action’s body
may be logically time-consuming and concurrent with that of other actions. In particular, the invoca-
tion of exec blocks of actions with the same set of scheduling dependencies logically takes place at
the same time. Implementation of the standard should guarantee that executions of exec blocks of
same-time actions take place as close as possible.
— run_start—valid in action, flow/resource object, and struct types. The run_start block is a proce-
dural non-time-consuming code block to be executed before any body block of the scenario is
invoked. It is used typically for one-time test bring-up and configuration required by the context
action or object. exec run_start is restricted to pre-generation flow (see Table 24).
— run_end—valid in action, flow/resource object, and struct types. The run_end block is a proce-
dural non-time-consuming code block to be executed after all body blocks of the scenario are com-
pleted. It is used typically for test bring-down and post-run checks associated with the context action
or object. exec run_end is restricted to pre-generation flow (see Table 24).
— init_down/init_up(init)—valid in component types. The init_down and init_up blocks are used to
assign values to component attributes and to initialize foreign language objects. Component
init_down and init_up blocks are called before the scenario root action’s pre_solve block is
invoked. init_down and init_up blocks may not call target template functions.</p>
<ol>
<li>init_down—Starting with the root component, init_down blocks are evaluated top-down for
each component in the hierarchy. The relative order of evaluating init_down blocks for compo-
nents at the same level of hierarchy is undefined. For any component, the init_down block
shall be evaluated before its init_up block is evaluated.</li>
<li>init_up—For a leaf-level component (i.e., one that does not instantiate any subcomponents),
the init_up block shall be evaluated after its init_down block (if any). A parent component’s
init_up block shall be evaluated only after all subcomponent init_up blocks have been evalu-
ated.
— header—valid in action, flow/resource object, and struct types. The header block specifies top-
level statements for header declarations presupposed by subsequent code blocks of the context
action or object. Examples are &lsquo;#include&rsquo; directives in C, or forward function or class declara-
tions.
— declaration—valid in action, flow/resource object, and struct types. The declaration block speci-
fies declarative statements used to define entities that ar</li>
</ol>
</blockquote>
<p>There is another thing called <code>Foreign procedural interface</code>, but I am too old for this stuff.</p>
]]></content>
        </item>
        
        <item>
            <title>Liberty - Hello World</title>
            <link>/posts/2023/02/liberty-hello-world/</link>
            <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/liberty-hello-world/</guid>
            <description>Liberty format defines delays and power of cells. It&amp;rsquo;s important part of ASIC flow for delay calculation and power estimation.
Syntax Liberty defines 3 types statements
 group statement attribute statement define statement  Group Statements A group is a named collection of statements that defines a library, a cell, a pin, a timing arc, and so forth. Braces ({}), which are used in pairs, enclose the contents of the group.</description>
            <content type="html"><![CDATA[<p>Liberty format defines delays and power of cells. It&rsquo;s important part of ASIC flow for delay calculation and power estimation.</p>
<h1 id="syntax">Syntax</h1>
<p>Liberty defines 3 types statements</p>
<ul>
<li>group statement</li>
<li>attribute statement</li>
<li>define statement</li>
</ul>
<h2 id="group-statements">Group Statements</h2>
<p>A group is a named collection of statements that defines a library, a cell, a pin, a timing arc,
and so forth. Braces ({}), which are used in pairs, enclose the contents of the group.</p>
<pre tabindex="0"><code>group_name (name) {
... statements ...
}
</code></pre><h2 id="attribute-statements">Attribute Statements</h2>
<p>An attribute statement defines characteristics of specific objects in the library. Attributes
applying to specific objects are assigned within a group statement defining the object, such
as a cell group or a pin group.</p>
<pre tabindex="0"><code>attribute_name : attribute_value ;
</code></pre><h2 id="define-statements">Define Statements</h2>
<p>You can create new simple attributes with the define statement.</p>
<pre tabindex="0"><code>define (attribute_name, group_name, attribute_type) ;
</code></pre><h1 id="writing-liberty-library">Writing liberty library</h1>
<h2 id="library-group">library Group</h2>
<p>The library group statement defines the name of the library you want to describe. This statement must be the first executable line in your library.</p>
<pre tabindex="0"><code>library (my_library) {
...
}
</code></pre><h2 id="library-attributes">library attributes</h2>
<ul>
<li>technology Attribute</li>
<li>delay_model Attribute</li>
<li>bus_naming_style Attribute</li>
</ul>
<h2 id="delay-and-slew-attributes">Delay and Slew Attributes</h2>
<p>The spec defines two concepts:</p>
<ul>
<li>Delay</li>
<li>Slew</li>
</ul>
<p>The spec describes it very well.  I will just quote it.</p>
<h3 id="delay">Delay</h3>
<blockquote>
<p>Delay is the time it takes for the output signal voltage, which is falling from 1 to 0, to fall to the threshold point set with the output_threshold_pct_fall attribute after the input signal voltage, which is falling from 1 to 0, has fallen to the threshold point set with the input_threshold_pct_fall attribute</p>
</blockquote>
<p>The following commands define the threshold</p>
<ul>
<li>input_threshold_pct_fall</li>
<li>input_threshold_pct_rise</li>
<li>output_threshold_pct_fall</li>
<li>output_threshold_pct_rise</li>
</ul>
<h3 id="slew">Slew</h3>
<blockquote>
<p>Slew is the time it takes for the voltage value to fall or rise between two designated threshold
points on an input, an output, or a bidirectional port. The designated threshold points must
fall within a voltage falling from 1 to 0 or rising from 0 to 1.</p>
<p>Use the following attributes to enter the two designated threshold points to model the time for voltage falling from 1 to 0:</p>
<p>slew_lower_threshold_pct_fall</p>
<p>slew_upper_threshold_pct_fall</p>
<p>Use the following attributes to enter the two designated threshold points to model the time for voltage rising from 0 to 1:</p>
<p>slew_lower_threshold_pct_rise</p>
<p>slew_upper_threshold_pct_rise</p>
</blockquote>
<h2 id="defining-units-attributes">Defining Units attributes</h2>
<p>Use these library-level attributes to define units:</p>
<ul>
<li>time_unit</li>
<li>voltage_unit</li>
<li>current_unit</li>
<li>pulling_resistance_unit</li>
<li>capacitive_load_unit</li>
<li>leakage_power_unit</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Weekend project - Python Hardware Description Language - PHDL</title>
            <link>/posts/2023/02/weekend-project-python-hardware-description-language-phdl/</link>
            <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/weekend-project-python-hardware-description-language-phdl/</guid>
            <description>It&amp;rsquo;s Saturday night and I have been cleaning up my github repos. And I found this old defunct project I wrote few years ago. So, I thought to write this post about it.
This is a quick prototype for Python Hardware Description Language(Ironically, Named PHDL). Basically, I wanted to figure out semantics to specify verilog design programmatically. I started with defining components I need to generate a module. The snippet below shows Port and Parameter.</description>
            <content type="html"><![CDATA[<p>It&rsquo;s Saturday night and I have been cleaning up my github repos. And I found this old defunct project I wrote few years ago. So, I thought to write this post about it.</p>
<p>This is a quick prototype for Python Hardware Description Language(Ironically, Named PHDL). Basically, I wanted to figure out semantics to specify verilog design programmatically. I started with defining components I need to generate a module.  The snippet below shows <code>Port</code> and <code>Parameter</code>. I am using python templates to generate fragments of texts after full tree is build.</p>
<p>I used the most confusing variable names. Don&rsquo;t mind me. That&rsquo;s just me committing python war crimes.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#fff;font-weight:bold">class</span> Port(Signal):
    <span style="color:#fff;font-weight:bold">def</span> __init__(self,direction, *args):
        Signal.__init__(self, *args)      
        self.direction      = direction

    <span style="color:#fff;font-weight:bold">def</span> render(self):
        pdims = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>.join([<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;[</span><span style="color:#0ff;font-weight:bold">{</span>p.MSB<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>p.LSB<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">]&#34;</span> <span style="color:#fff;font-weight:bold">for</span> p in self.pdims])
        updims = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>.join([<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;[</span><span style="color:#0ff;font-weight:bold">{</span>p.MSB<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>p.LSB<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">]&#34;</span> <span style="color:#fff;font-weight:bold">for</span> p in self.updims])
        txt = <span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">{</span>self.direction<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> </span><span style="color:#0ff;font-weight:bold">{</span>self.type_<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> </span><span style="color:#0ff;font-weight:bold">{</span>pdims<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> </span><span style="color:#0ff;font-weight:bold">{</span>self.name<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> </span><span style="color:#0ff;font-weight:bold">{</span>updims<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>
        <span style="color:#fff;font-weight:bold">return</span> txt

<span style="color:#fff;font-weight:bold">class</span> Parameter():
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, type_ = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, value=<span style="color:#fff;font-weight:bold">None</span>, **kargs):
        self.name       = name
        self.type_      = type_
        self.value      = value

    <span style="color:#fff;font-weight:bold">def</span> render(self):
        txt = <span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;parameter </span><span style="color:#0ff;font-weight:bold">{</span>self.name<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> </span><span style="color:#0ff;font-weight:bold">{</span>self.type_<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span> + (<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;= </span><span style="color:#0ff;font-weight:bold">{</span>self.value<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span> <span style="color:#fff;font-weight:bold">if</span> self.value <span style="color:#fff;font-weight:bold">else</span> <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>)
        <span style="color:#fff;font-weight:bold">return</span> txt

</code></pre></div><p>400 lines later, I had the infra done to specify simple modules and instance as follows</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#fff;font-weight:bold">import</span>  verilog <span style="color:#fff;font-weight:bold">as</span> verilog

m = verilog.Module(name=<span style="color:#0ff;font-weight:bold">&#34;top&#34;</span>)
m.ports.append(verilog.Port(<span style="color:#0ff;font-weight:bold">&#34;input&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;p1&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;logic&#34;</span>,[verilog.Dimension(<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">3</span>)]))
m.ports.append(verilog.Port(<span style="color:#0ff;font-weight:bold">&#34;input&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;p2&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;logic&#34;</span>,[verilog.Dimension(<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">3</span>)]))
m.params.append(verilog.Parameter(<span style="color:#0ff;font-weight:bold">&#34;pr1&#34;</span>,value=<span style="color:#ff0;font-weight:bold">3</span>))
m.items.append(verilog.Instance(name=<span style="color:#0ff;font-weight:bold">&#34;u_controller&#34;</span>, 
        module=<span style="color:#0ff;font-weight:bold">&#34;controller&#34;</span>,
        params_override=[(<span style="color:#0ff;font-weight:bold">&#34;ff&#34;</span>,<span style="color:#ff0;font-weight:bold">3</span>)],
        ports_conn=[(<span style="color:#0ff;font-weight:bold">&#34;ff&#34;</span>,<span style="color:#ff0;font-weight:bold">3</span>)]
        ))
<span style="color:#fff;font-weight:bold">print</span>(m.render())

</code></pre></div><p>And the output generated as follows. I know. Not great but not terrible.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">        <span style="color:#fff;font-weight:bold">module</span> #(<span style="color:#fff;font-weight:bold">parameter</span> pr1 = <span style="color:#ff0;font-weight:bold">3</span>) top (<span style="color:#fff;font-weight:bold">input</span> <span style="color:#fff;font-weight:bold">logic</span> [<span style="color:#ff0;font-weight:bold">0</span>:<span style="color:#ff0;font-weight:bold">3</span>] p1 ,<span style="color:#fff;font-weight:bold">input</span> <span style="color:#fff;font-weight:bold">logic</span> [<span style="color:#ff0;font-weight:bold">0</span>:<span style="color:#ff0;font-weight:bold">3</span>] p2 );
        controller #( .ff(<span style="color:#ff0;font-weight:bold">3</span>) ) u_controller(.ff(<span style="color:#ff0;font-weight:bold">3</span>));
        <span style="color:#fff;font-weight:bold">endmodule</span>

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Generating sequence diagram using planuml</title>
            <link>/posts/2023/02/generating-sequence-diagram-using-planuml/</link>
            <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/generating-sequence-diagram-using-planuml/</guid>
            <description>This post is about generating sequence diagram using a tool called plantuml. It can be used for a lot of things, but I use it mainly for sequence diagram generation.
Sequence diagram is used to describe message-based protocols (like network TCP/UDP). That said, I have used it to visualize a lot of things. For example:
 Bus transaction (write/read) side-band signals (interrupts) req/ack handshakes power sequence FSM state changes UVM messages  Basically, Anything I can parse from logs.</description>
            <content type="html"><![CDATA[<p>This post is about generating sequence diagram using a tool called <code>plantuml</code>. It can be used for a lot of things, but I use it mainly for sequence diagram generation.</p>
<p>Sequence diagram is used to describe message-based protocols (like network TCP/UDP). That said, I have used it to visualize a lot of things. For example:</p>
<ul>
<li>Bus transaction (write/read)</li>
<li>side-band signals (interrupts)</li>
<li>req/ack handshakes</li>
<li>power sequence</li>
<li>FSM state changes</li>
<li>UVM messages</li>
</ul>
<p>Basically, Anything I can parse from logs.</p>
<h1 id="example">Example</h1>
<p>This is small example to show the basic features. I used notes over and next transactions, Separators, and groups. Check out the documentation. Sky is the limit.</p>
<pre tabindex="0"><code>@startuml
autonumber

== Yo-sup protocol ==

block1 -&gt; block2: Yo dude
block2 --&gt; block1: sup
note left: the only right answer to Yo  dude


hnote over block1: all good

== self introspection ==
alt message to myself
block1 -&gt; block1: blabla
end

== activation ==
block1 -&gt; block2: Yo dude
activate block1
block2 --&gt; block1: sup
deactivate block1

@enduml

</code></pre><p>To run plantuml, it&rsquo;s easy enough</p>
<pre tabindex="0"><code>java -jar $PLANTUML/plantuml-1.2023.1.jar -tpng ex01.txt -tsvg
</code></pre><p>And I use a browser because I can search texts in SVG&rsquo;s. bonus point :)</p>
<p><img src="/plantuml.png" alt="Example image"></p>
<p>PS. The way I use it, I generate sorted array of names tuple in Python and generate the plantUML file.</p>
]]></content>
        </item>
        
        <item>
            <title>Haiku </title>
            <link>/posts/2023/02/haiku/</link>
            <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/haiku/</guid>
            <description>These are some haiku about random stuff. In case you are wondering what is haiku, here is one-liner from wiki:
 A Japanese poem in three lines, the first and last consisting of five morae, and the second consisting of seven morae, usually with an emphasis on the season or a naturalistic theme.
 Gate level simulation This one is about the existential pain everyone gets while debugging GLS failures. I think i will be a happier person if i don&amp;rsquo;t touch GLS never again.</description>
            <content type="html"><![CDATA[<p>These are some  haiku about random stuff. In case you are wondering what is haiku, here is one-liner from wiki:</p>
<blockquote>
<p>A Japanese poem in three lines, the first and last consisting of five morae, and the second consisting of seven morae, usually with an emphasis on the season or a naturalistic theme.</p>
</blockquote>
<h1 id="gate-level-simulation">Gate level simulation</h1>
<p>This one is about the existential pain everyone gets while debugging GLS failures. I think i will be a happier person if i don&rsquo;t touch GLS never again.</p>
<pre tabindex="0"><code>Gates runs for ever
X jumps into endless pond
Soul dies in winter
</code></pre>]]></content>
        </item>
        
        <item>
            <title>The one books everyone should read</title>
            <link>/posts/2023/02/the-one-books-everyone-should-read/</link>
            <pubDate>Tue, 21 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/the-one-books-everyone-should-read/</guid>
            <description>You may think there is a typo in the title. It is not! This post is about The one book I like the most in each topic. I mean if you have to read just one book in computer Architecture, What would it be?
Disclaimer, This is purely personal preference so don&amp;rsquo;t fight me if you don&amp;rsquo;t like these books.
 Computer Organization: Digital Design and Computer Architecture, David Harris. Computer Architecture: Computer Architecture: A Quantitative Approach Cryptography: Understanding Cryptography Computer Graphics: Computer Graphics Principles Practice USB: Mindshare PCIE: Again Mindshare Graph Theory: Introduction to Graph Theory Linux Kernel: Understanding The Linux Kernel C : The C programming Language.</description>
            <content type="html"><![CDATA[<p>You may think there is a typo in the title. It is not! This post is about The one book I like the most in each topic. I mean if you have to read just one book in computer Architecture, What would it be?</p>
<p>Disclaimer, This is purely personal preference so don&rsquo;t fight me if you don&rsquo;t like these books.</p>
<ul>
<li>Computer Organization: Digital Design and Computer Architecture, David Harris.</li>
<li>Computer Architecture: Computer Architecture: A Quantitative Approach</li>
<li>Cryptography: Understanding Cryptography</li>
<li>Computer Graphics: Computer Graphics Principles Practice</li>
<li>USB: Mindshare</li>
<li>PCIE: Again Mindshare</li>
<li>Graph Theory: Introduction to Graph Theory</li>
<li>Linux Kernel: Understanding The Linux Kernel</li>
<li>C : The C programming Language.</li>
<li>C++: Modern C++ Design</li>
<li>Python: Programming Python</li>
<li>Computation Theory: Introduction to the Theory of Computation</li>
<li>UVM: Advanced UVM</li>
<li>Systemverilog: systemverilog for verification</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Security Protocol and Data Model(SPDM) primer</title>
            <link>/posts/2023/02/security-protocol-and-data-modelspdm-primer/</link>
            <pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/security-protocol-and-data-modelspdm-primer/</guid>
            <description>SPDM defines the messages exchange protocol to do the following tasks
 The specification-defined message exchanges enable Requesters to: Discover and negotiate the security capabilities of a Responder. Authenticate or provision an identity of a Responder. Retrieve the measurements of a Responder. Securely establish cryptographic session keys to construct a secure communication channel for the transmission or reception of application data.
 In English, SPDM allows requester to know the capability of responder, encrypt/decrypt stuff.</description>
            <content type="html"><![CDATA[<p>SPDM defines the messages exchange protocol to do the following tasks</p>
<blockquote>
<p>The specification-defined message exchanges enable Requesters to:
Discover and negotiate the security capabilities of a Responder.
Authenticate or provision an identity of a Responder.
Retrieve the measurements of a Responder.
Securely establish cryptographic session keys to construct a secure communication channel for the transmission
or reception of application data.</p>
</blockquote>
<p>In English, SPDM allows requester to know the capability of responder, encrypt/decrypt stuff.</p>
<p>The message protocol from <a href="dmtf.org/sites/default/files/standards/documents/DSP0274_1.2.1.pdf">SPDM</a>
<img src="/spdm_diagrampng.png" alt="Example image"></p>
<p>The message format is defined as follows
<img src="/spdm-message.png" alt="Example image"></p>
<p>One example for <code>GET_VERSION</code> request and respond
<img src="/spdm_get_versionpng.png" alt="Example image">
section 10 of SPDM specs defines the rest of message format</p>
]]></content>
        </item>
        
        <item>
            <title>AES-GCM Galois-Counter Mode </title>
            <link>/posts/2023/02/aes-gcm-galois-counter-mode/</link>
            <pubDate>Sat, 18 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/aes-gcm-galois-counter-mode/</guid>
            <description>AES is one most important block ciphers used right now. AES has several modes of operation like CBC, ECB. This post is about GCM (Galois Counter Mode). This is used in several specifications. For example, This is I and E in PCIe IDE :)
GCM provides authenticated encryption. Basically, It keeps things secret and makes sure nobody played around with these secret. I read the NIST document for GCM but I think the best resource I found is paper.</description>
            <content type="html"><![CDATA[<p>AES is one most important block ciphers used right now. AES has several modes of operation like CBC, ECB. This post is about GCM (Galois Counter Mode). This is used in several specifications. For example, This is I and E in PCIe IDE :)</p>
<p>GCM provides authenticated encryption. Basically, It keeps things secret and makes sure nobody played around with these secret. I read the NIST document for GCM but I think the best resource I found is <a href="https://luca-giuzzi.unibs.it/corsi/Support/papers-cryptography/gcm-spec.pdf">paper</a>.</p>
<p>From <a href="https://en.wikipedia.org/wiki/Galois/Counter_Mode">Wiki</a>, This is one-liner description</p>
<blockquote>
<p>Like in normal counter mode, blocks are numbered sequentially, and then this block number is combined with an initialization vector (IV) and encrypted with a block cipher E, usually AES. The result of this encryption is then XORed with the plaintext to produce the ciphertext. Like all counter modes, this is essentially a stream cipher, and so it is essential that a different IV is used for each stream that is encrypted.</p>
</blockquote>
<p>Basically, It computes The cipher from the IV and Counter and do G(128) multiplication to get the final cipher then calculate the <code>Auth Tag</code> to be sent with that data.
<img src="/crypto-aes-gcm.png" alt="Example image"></p>
<p>In <a href="https://luca-giuzzi.unibs.it/corsi/Support/papers-cryptography/gcm-spec.pdf">paper</a>, They have a good example of packet based GCM encryption. This is very similar to what PCIe IDE does.
<img src="/crypto-aes-gcm-examplepng.png" alt="Example image"></p>
]]></content>
        </item>
        
        <item>
            <title>Deepdive - DOE CXL Linux driver</title>
            <link>/posts/2023/02/deepdive-doe-cxl-linux-driver/</link>
            <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/deepdive-doe-cxl-linux-driver/</guid>
            <description>This post is about DOE which is Data Object Exchange which is used by CMA to implement SPDM for PCI/CXL IDE specification(starting Gen5, I think). I can&amp;rsquo;t download ENC on PCI SIG, So the next best thing is reading the Linux kernel driver that uses DOE. Luckily, CXL driver uses it. win-win!
Entry point the probe Starting with drivers/cxl/pci.c, .probe is called with devices by PCI core.
static struct pci_driver cxl_pci_driver = { .</description>
            <content type="html"><![CDATA[<p>This post is about DOE which is Data Object Exchange which is used by CMA to implement SPDM for PCI/CXL IDE specification(starting Gen5, I think).
I can&rsquo;t download ENC on PCI SIG, So the next best thing is reading the Linux kernel driver that uses DOE. Luckily, CXL driver uses it.  win-win!</p>
<h1 id="entry-point-the-probe">Entry point the probe</h1>
<p>Starting with <code>drivers/cxl/pci.c</code>, <code>.probe</code> is called with devices by PCI core.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">struct</span> pci_driver cxl_pci_driver = {
	.name			= KBUILD_MODNAME,
	.id_table		= cxl_mem_pci_tbl,
	.probe			= cxl_pci_probe,
	.driver	= {
		.probe_type	= PROBE_PREFER_ASYNCHRONOUS,
	},
};

module_pci_driver(cxl_pci_driver);
</code></pre></div><p><code>cxl_pci_probe</code> calls <code>devm_cxl_pci_create_doe</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">	devm_cxl_pci_create_doe(cxlds);
</code></pre></div><h1 id="mailbox">mailbox</h1>
<p>Still in <code>drivers/cxl/pci.c</code>, <code>pcim_doe_create_mb</code> is called from <code>devm_cxl_pci_create_doe</code> to create mailbox and pushed with <code>xa_insert</code> into <code>&amp;cxlds-&gt;doe_mbs</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">void</span> devm_cxl_pci_create_doe(<span style="color:#fff;font-weight:bold">struct</span> cxl_dev_state *cxlds)
{
	<span style="color:#fff;font-weight:bold">struct</span> device *dev = cxlds-&gt;dev;
	<span style="color:#fff;font-weight:bold">struct</span> pci_dev *pdev = to_pci_dev(dev);
	u16 off = <span style="color:#ff0;font-weight:bold">0</span>;

	xa_init(&amp;cxlds-&gt;doe_mbs);

	pci_doe_for_each_off(pdev, off) {
		<span style="color:#fff;font-weight:bold">struct</span> pci_doe_mb *doe_mb;

		doe_mb = pcim_doe_create_mb(pdev, off);
...
...
		}

		<span style="color:#fff;font-weight:bold">if</span> (xa_insert(&amp;cxlds-&gt;doe_mbs, off, doe_mb, GFP_KERNEL)) {
		}

	}
}
</code></pre></div><p><code>pcim_doe_create_mb</code> takes us to <code>drivers/pci/doe.c</code>, <code>pci_doe_mb</code> is just a wrapper for mailbox.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#007f7f">/**
</span><span style="color:#007f7f"> * struct pci_doe_mb - State for a single DOE mailbox
</span><span style="color:#007f7f"> *
</span><span style="color:#007f7f"> * This state is used to manage a single DOE mailbox capability.  All fields
</span><span style="color:#007f7f"> * should be considered opaque to the consumers and the structure passed into
</span><span style="color:#007f7f"> * the helpers below after being created by devm_pci_doe_create()
</span><span style="color:#007f7f"> *
</span><span style="color:#007f7f"> * @pdev: PCI device this mailbox belongs to
</span><span style="color:#007f7f"> * @cap_offset: Capability offset
</span><span style="color:#007f7f"> * @prots: Array of protocols supported (encoded as long values)
</span><span style="color:#007f7f"> * @wq: Wait queue for work item
</span><span style="color:#007f7f"> * @work_queue: Queue of pci_doe_work items
</span><span style="color:#007f7f"> * @flags: Bit array of PCI_DOE_FLAG_* flags
</span><span style="color:#007f7f"> */</span>
<span style="color:#fff;font-weight:bold">struct</span> pci_doe_mb {
	<span style="color:#fff;font-weight:bold">struct</span> pci_dev *pdev;
	u16 cap_offset;
	<span style="color:#fff;font-weight:bold">struct</span> xarray prots;

	wait_queue_head_t wq;
	<span style="color:#fff;font-weight:bold">struct</span> workqueue_struct *work_queue;
	<span style="color:#fff;font-weight:bold">unsigned</span> <span style="color:#fff;font-weight:bold">long</span> flags;
};
</code></pre></div><p>For example, <code>pci_doe_write_ctrl</code> uses to offset to configuration space for that PCI(CXL device)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">void</span> pci_doe_write_ctrl(<span style="color:#fff;font-weight:bold">struct</span> pci_doe_mb *doe_mb, u32 val)
{
	<span style="color:#fff;font-weight:bold">struct</span> pci_dev *pdev = doe_mb-&gt;pdev;
	<span style="color:#fff;font-weight:bold">int</span> offset = doe_mb-&gt;cap_offset;

	pci_write_config_dword(pdev, offset + PCI_DOE_CTRL, val);
}
</code></pre></div><p>At this point, we have mailbox created and linked to pci <code>dev</code>. The next section goes through another data structure <code>pci_doe_task</code> which what actually gets sent to CXL. I think(TODO confirm).</p>
<h1 id="task">task</h1>
<p><code>pci_doe_task</code> is defined as container for DOE protocol</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#007f7f">/**
</span><span style="color:#007f7f"> * struct pci_doe_task - represents a single query/response
</span><span style="color:#007f7f"> *
</span><span style="color:#007f7f"> * @prot: DOE Protocol
</span><span style="color:#007f7f"> * @request_pl: The request payload
</span><span style="color:#007f7f"> * @request_pl_sz: Size of the request payload (bytes)
</span><span style="color:#007f7f"> * @response_pl: The response payload
</span><span style="color:#007f7f"> * @response_pl_sz: Size of the response payload (bytes)
</span><span style="color:#007f7f"> * @rv: Return value.  Length of received response or error (bytes)
</span><span style="color:#007f7f"> * @complete: Called when task is complete
</span><span style="color:#007f7f"> * @private: Private data for the consumer
</span><span style="color:#007f7f"> * @work: Used internally by the mailbox
</span><span style="color:#007f7f"> * @doe_mb: Used internally by the mailbox
</span><span style="color:#007f7f"> *
</span><span style="color:#007f7f"> * The payload sizes and rv are specified in bytes with the following
</span><span style="color:#007f7f"> * restrictions concerning the protocol.
</span><span style="color:#007f7f"> *
</span><span style="color:#007f7f"> *	1) The request_pl_sz must be a multiple of double words (4 bytes)
</span><span style="color:#007f7f"> *	2) The response_pl_sz must be &gt;= a single double word (4 bytes)
</span><span style="color:#007f7f"> *	3) rv is returned as bytes but it will be a multiple of double words
</span><span style="color:#007f7f"> *
</span><span style="color:#007f7f"> * NOTE there is no need for the caller to initialize work or doe_mb.
</span><span style="color:#007f7f"> */</span>
<span style="color:#fff;font-weight:bold">struct</span> pci_doe_task {
	<span style="color:#fff;font-weight:bold">struct</span> pci_doe_protocol prot;
	u32 *request_pl;
	size_t request_pl_sz;
	u32 *response_pl;
	size_t response_pl_sz;
	<span style="color:#fff;font-weight:bold">int</span> rv;
	<span style="color:#fff;font-weight:bold">void</span> (*complete)(<span style="color:#fff;font-weight:bold">struct</span> pci_doe_task *task);
	<span style="color:#fff;font-weight:bold">void</span> *private;

	<span style="color:#007f7f">/* No need for the user to initialize these fields */</span>
	<span style="color:#fff;font-weight:bold">struct</span> work_struct work;
	<span style="color:#fff;font-weight:bold">struct</span> pci_doe_mb *doe_mb;
};
</code></pre></div><p>one path to send request is <code>doe_statemachine_work</code> which calls <code>pci_doe_send_req</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">void</span> doe_statemachine_work(<span style="color:#fff;font-weight:bold">struct</span> work_struct *work)
{
	<span style="color:#fff;font-weight:bold">struct</span> pci_doe_task *task = container_of(work, <span style="color:#fff;font-weight:bold">struct</span> pci_doe_task,
						 work);
	<span style="color:#fff;font-weight:bold">struct</span> pci_doe_mb *doe_mb = task-&gt;doe_mb;
	<span style="color:#fff;font-weight:bold">struct</span> pci_dev *pdev = doe_mb-&gt;pdev;
	<span style="color:#fff;font-weight:bold">int</span> offset = doe_mb-&gt;cap_offset;
	<span style="color:#fff;font-weight:bold">unsigned</span> <span style="color:#fff;font-weight:bold">long</span> timeout_jiffies;
	u32 val;
	<span style="color:#fff;font-weight:bold">int</span> rc;


	<span style="color:#007f7f">/* Send request */</span>
	rc = pci_doe_send_req(doe_mb, task);
</code></pre></div><p><code>doe_statemachine_work</code> is called from <code>pci_doe_submit_task</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">int</span> pci_doe_submit_task(<span style="color:#fff;font-weight:bold">struct</span> pci_doe_mb *doe_mb, <span style="color:#fff;font-weight:bold">struct</span> pci_doe_task *task)
{
	<span style="color:#fff;font-weight:bold">if</span> (!pci_doe_supports_prot(doe_mb, task-&gt;prot.vid, task-&gt;prot.type))
		<span style="color:#fff;font-weight:bold">return</span> -EINVAL;

...
...
	task-&gt;doe_mb = doe_mb;
	INIT_WORK(&amp;task-&gt;work, doe_statemachine_work);
</code></pre></div><p><code>pci_doe_submit_task</code> is called from <code>pci_doe_discovery</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">int</span> pci_doe_discovery(<span style="color:#fff;font-weight:bold">struct</span> pci_doe_mb *doe_mb, u8 *index, u16 *vid,
			     u8 *protocol)
{
	u32 request_pl = FIELD_PREP(PCI_DOE_DATA_OBJECT_DISC_REQ_3_INDEX,
				    *index);
	u32 response_pl;
	DECLARE_COMPLETION_ONSTACK(c);
	<span style="color:#fff;font-weight:bold">struct</span> pci_doe_task task = {
		.prot.vid = PCI_VENDOR_ID_PCI_SIG,
		.prot.type = PCI_DOE_PROTOCOL_DISCOVERY,
		.request_pl = &amp;request_pl,
		.request_pl_sz = <span style="color:#fff;font-weight:bold">sizeof</span>(request_pl),
		.response_pl = &amp;response_pl,
		.response_pl_sz = <span style="color:#fff;font-weight:bold">sizeof</span>(response_pl),
		.complete = pci_doe_task_complete,
		.private = &amp;c,
	};
	<span style="color:#fff;font-weight:bold">int</span> rc;

	rc = pci_doe_submit_task(doe_mb, &amp;task);
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">int</span> pci_doe_cache_protocols(<span style="color:#fff;font-weight:bold">struct</span> pci_doe_mb *doe_mb)
{
	u8 index = <span style="color:#ff0;font-weight:bold">0</span>;
	u8 xa_idx = <span style="color:#ff0;font-weight:bold">0</span>;

	<span style="color:#fff;font-weight:bold">do</span> {
		<span style="color:#fff;font-weight:bold">int</span> rc;
		u16 vid;
		u8 prot;

		rc = pci_doe_discovery(doe_mb, &amp;index, &amp;vid, &amp;prot);
</code></pre></div><p><code>pci_doe_discovery</code> is called by <code>pcim_doe_create_mb</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">struct</span> pci_doe_mb *pcim_doe_create_mb(<span style="color:#fff;font-weight:bold">struct</span> pci_dev *pdev, u16 cap_offset)
{

...
...

	rc = pci_doe_cache_protocols(doe_mb);
</code></pre></div><p><code>pcim_doe_create_mb</code> is called in the <code>probe</code> above section that create traces mailbox creation.</p>
]]></content>
        </item>
        
        <item>
            <title>PCIe physical layer 8b/10b encoder</title>
            <link>/posts/2023/02/pcie-physical-layer-8b/10b-encoder/</link>
            <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/pcie-physical-layer-8b/10b-encoder/</guid>
            <description>This is a quick post about 8b/10b encoder in PCIE Gen1/2. Not that change in Gen3.
From Mindeshare PCIe book, encoder balances out the
 Maintaining DC Balance. PCIe uses an AC‐coupled link, placing a capaci‐ tor serially in the path to isolate the DC part of the signal from the other end of the Link. This allows the Transmitter and Receiver to use different com‐ mon‐mode voltages and makes the electrical design easier for cases where the path between them is long enough that they’re less likely to have exactly the same reference voltages.</description>
            <content type="html"><![CDATA[<p>This is a quick post about 8b/10b encoder in PCIE Gen1/2. Not that change in Gen3.</p>
<p>From Mindeshare PCIe book, encoder balances out the</p>
<blockquote>
<p>Maintaining DC Balance. PCIe uses an AC‐coupled link, placing a capaci‐
tor serially in the path to isolate the DC part of the signal from the other end
of the Link. This allows the Transmitter and Receiver to use different com‐
mon‐mode voltages and makes the electrical design easier for cases where
the path between them is long enough that they’re less likely to have exactly
the same reference voltages.</p>
</blockquote>
<p>Basically changing the next symbol based on previous symbol, either increasing or decreasing number of ones in the encoding.</p>
<blockquote>
<p>this drifting voltage degrades signal integrity at the Receiver. To
compensate, the 8b/10b encoder tracks the “disparity” of the last Symbol
that was sent. Disparity, or inequality, simply indicates whether the previ‐
ous Symbol had more ones than zeros (called positive disparity), more
zeros than ones (negative disparity), or a balance of ones and zeros (neutral</p>
</blockquote>
<p>This is break down of code calculation</p>
<h1 id="partition">Partition</h1>
<p>The first stage is partition the 8 bits into 5 and 3 sub-blocks.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> parition(i):
    bs = int2binstr(i)
    <span style="color:#fff;font-weight:bold">return</span> (bs[<span style="color:#ff0;font-weight:bold">3</span>:], bs[<span style="color:#ff0;font-weight:bold">0</span>:<span style="color:#ff0;font-weight:bold">3</span>])
</code></pre></div><p>This is the lookup table(from Wiki) for 5 bits.</p>
<p><img src="/pcie_encoder.png" alt="Example image"></p>
<h1 id="disparity">Disparity</h1>
<p>Disparity is the difference between number of ones and zeros. Dump implementation would be something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> disparity(b):
    n_1 = <span style="color:#fff;font-weight:bold">len</span>([o <span style="color:#fff;font-weight:bold">for</span> o in <span style="color:#fff;font-weight:bold">list</span>(b) <span style="color:#fff;font-weight:bold">if</span>     o== <span style="color:#0ff;font-weight:bold">&#39;1&#39;</span>])
    n_0 = <span style="color:#fff;font-weight:bold">len</span>([o <span style="color:#fff;font-weight:bold">for</span> o in <span style="color:#fff;font-weight:bold">list</span>(b) <span style="color:#fff;font-weight:bold">if</span>     o== <span style="color:#0ff;font-weight:bold">&#39;0&#39;</span>])
    dis = n_1 - n_0
    <span style="color:#fff;font-weight:bold">return</span> dis
</code></pre></div><h1 id="running-disparity-rd">Running disparity RD</h1>
<p>As mentioned before the RD, depends on disparity and current RD.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">lookup = [
        <span style="color:#007f7f"># prev RD, disparity, disparity chosen, RD</span>
        (-<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">0</span>,  <span style="color:#ff0;font-weight:bold">0</span>, -<span style="color:#ff0;font-weight:bold">1</span>),
        (-<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">2</span>, +<span style="color:#ff0;font-weight:bold">2</span>, +<span style="color:#ff0;font-weight:bold">1</span>),
        (+<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">0</span>,  <span style="color:#ff0;font-weight:bold">0</span>, +<span style="color:#ff0;font-weight:bold">1</span>),
        (+<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">2</span>, -<span style="color:#ff0;font-weight:bold">2</span>, -<span style="color:#ff0;font-weight:bold">1</span>),
        ]
<span style="color:#fff;font-weight:bold">def</span> get_new_rd(rd, dis):
    <span style="color:#fff;font-weight:bold">assert</span> (rd in [-<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">1</span>])
    <span style="color:#fff;font-weight:bold">assert</span> (dis in [<span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">2</span>, -<span style="color:#ff0;font-weight:bold">2</span>])

    l = [x <span style="color:#fff;font-weight:bold">for</span> x in lookup <span style="color:#fff;font-weight:bold">if</span> x[<span style="color:#ff0;font-weight:bold">0</span>] == rd]
    l = [x <span style="color:#fff;font-weight:bold">for</span> x in l <span style="color:#fff;font-weight:bold">if</span> x[<span style="color:#ff0;font-weight:bold">1</span>] == <span style="color:#fff;font-weight:bold">abs</span>(dis)]
    <span style="color:#fff;font-weight:bold">assert</span>(<span style="color:#fff;font-weight:bold">len</span>(l))

    rd_next = l[<span style="color:#ff0;font-weight:bold">0</span>][<span style="color:#ff0;font-weight:bold">3</span>]

    <span style="color:#fff;font-weight:bold">return</span> rd_next

</code></pre></div><h1 id="putting-it-all-together">Putting it all together</h1>
<p>I am too lazy to copy all rows, So, I put down rows I needed for this example. The rest is <code>None</code> as placeholder</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> int2binstr(value):
    b = (<span style="color:#fff;font-weight:bold">bin</span>(value)[<span style="color:#ff0;font-weight:bold">2</span>:]).zfill(<span style="color:#ff0;font-weight:bold">8</span>)
    <span style="color:#fff;font-weight:bold">return</span> b

lookup = [
        <span style="color:#007f7f"># prev RD, disparity, disparity chosen, RD</span>
        (-<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">0</span>,  <span style="color:#ff0;font-weight:bold">0</span>, -<span style="color:#ff0;font-weight:bold">1</span>),
        (-<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">2</span>, +<span style="color:#ff0;font-weight:bold">2</span>, +<span style="color:#ff0;font-weight:bold">1</span>),
        (+<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">0</span>,  <span style="color:#ff0;font-weight:bold">0</span>, +<span style="color:#ff0;font-weight:bold">1</span>),
        (+<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">2</span>, -<span style="color:#ff0;font-weight:bold">2</span>, -<span style="color:#ff0;font-weight:bold">1</span>),
        ]

encode_5_6 = [
        <span style="color:#007f7f"># (EDCBA, (RD=-1, RD=1))</span>
        (<span style="color:#0ff;font-weight:bold">&#34;00000&#34;</span>,  (<span style="color:#0ff;font-weight:bold">&#34;100111&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;011000&#34;</span>)), <span style="color:#007f7f"># D.00</span>
        (<span style="color:#0ff;font-weight:bold">&#34;00001&#34;</span>,  (<span style="color:#0ff;font-weight:bold">&#34;011101&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;100010&#34;</span>)), <span style="color:#007f7f"># D.01</span>
        (<span style="color:#0ff;font-weight:bold">&#34;00010&#34;</span>,  (<span style="color:#0ff;font-weight:bold">&#34;101101&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;010010&#34;</span>)), <span style="color:#007f7f"># D.02</span>
        (<span style="color:#0ff;font-weight:bold">&#34;00011&#34;</span>,  (<span style="color:#0ff;font-weight:bold">&#34;110001&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;110001&#34;</span>)), <span style="color:#007f7f"># D.03</span>
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        (<span style="color:#0ff;font-weight:bold">&#34;01010&#34;</span>,  (<span style="color:#0ff;font-weight:bold">&#34;010101&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;010101&#34;</span>)), <span style="color:#007f7f"># 10</span>
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        (<span style="color:#0ff;font-weight:bold">&#34;11011&#34;</span>,  (<span style="color:#0ff;font-weight:bold">&#34;110110&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;001001&#34;</span>)), <span style="color:#007f7f"># 27</span>
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        <span style="color:#fff;font-weight:bold">None</span>,
        ]

<span style="color:#fff;font-weight:bold">def</span> disparity(b):
    n_1 = <span style="color:#fff;font-weight:bold">len</span>([o <span style="color:#fff;font-weight:bold">for</span> o in <span style="color:#fff;font-weight:bold">list</span>(b) <span style="color:#fff;font-weight:bold">if</span>     o== <span style="color:#0ff;font-weight:bold">&#39;1&#39;</span>])
    n_0 = <span style="color:#fff;font-weight:bold">len</span>([o <span style="color:#fff;font-weight:bold">for</span> o in <span style="color:#fff;font-weight:bold">list</span>(b) <span style="color:#fff;font-weight:bold">if</span>     o== <span style="color:#0ff;font-weight:bold">&#39;0&#39;</span>])
    dis = n_1 - n_0
    <span style="color:#fff;font-weight:bold">return</span> dis

<span style="color:#fff;font-weight:bold">def</span> get_new_rd(rd, dis):
    <span style="color:#fff;font-weight:bold">assert</span> (rd in [-<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">1</span>])
    <span style="color:#fff;font-weight:bold">assert</span> (dis in [<span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">2</span>, -<span style="color:#ff0;font-weight:bold">2</span>])

    l = [x <span style="color:#fff;font-weight:bold">for</span> x in lookup <span style="color:#fff;font-weight:bold">if</span> x[<span style="color:#ff0;font-weight:bold">0</span>] == rd]
    l = [x <span style="color:#fff;font-weight:bold">for</span> x in l <span style="color:#fff;font-weight:bold">if</span> x[<span style="color:#ff0;font-weight:bold">1</span>] == <span style="color:#fff;font-weight:bold">abs</span>(dis)]
    <span style="color:#fff;font-weight:bold">assert</span>(<span style="color:#fff;font-weight:bold">len</span>(l))

    rd_next = l[<span style="color:#ff0;font-weight:bold">0</span>][<span style="color:#ff0;font-weight:bold">3</span>]

    <span style="color:#fff;font-weight:bold">return</span> rd_next

<span style="color:#fff;font-weight:bold">def</span> parition(i):
    bs = int2binstr(i)
    <span style="color:#fff;font-weight:bold">return</span> (bs[<span style="color:#ff0;font-weight:bold">3</span>:], bs[<span style="color:#ff0;font-weight:bold">0</span>:<span style="color:#ff0;font-weight:bold">3</span>])

<span style="color:#007f7f"># main</span>
data = [<span style="color:#ff0;font-weight:bold">0x6a</span>, <span style="color:#ff0;font-weight:bold">0x1b</span>]
rd = -<span style="color:#ff0;font-weight:bold">1</span> <span style="color:#007f7f"># start rd is -1</span>

<span style="color:#fff;font-weight:bold">for</span> d in data:
    p = parition(d)

    idx_5_6 = <span style="color:#fff;font-weight:bold">int</span>(p[<span style="color:#ff0;font-weight:bold">0</span>],<span style="color:#ff0;font-weight:bold">2</span>)
    idx_5_6_rd = <span style="color:#ff0;font-weight:bold">1</span> <span style="color:#fff;font-weight:bold">if</span> rd == <span style="color:#ff0;font-weight:bold">1</span> <span style="color:#fff;font-weight:bold">else</span> <span style="color:#ff0;font-weight:bold">0</span> <span style="color:#007f7f"># TODO find better way to idex RD=1, RD=-1</span>
    code = encode_5_6[idx_5_6][<span style="color:#ff0;font-weight:bold">1</span>][idx_5_6_rd]

    dis = disparity(code)

    rd, rd_current = (get_new_rd(rd, dis), rd)

    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#39;code:</span><span style="color:#0ff;font-weight:bold">{</span>code<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> disparity:</span><span style="color:#0ff;font-weight:bold">{</span>dis<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> current_rd:</span><span style="color:#0ff;font-weight:bold">{</span>rd_current<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> rd:</span><span style="color:#0ff;font-weight:bold">{</span>rd<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#39;</span>)

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Root of trust primer</title>
            <link>/posts/2023/02/root-of-trust-primer/</link>
            <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/root-of-trust-primer/</guid>
            <description>NIST defines Root of trust (RoT) as follows
 Roots of trust are highly reliable hardware, firmware, and software components that perform specific, critical security functions. Because roots of trust are inherently trusted, they must be secure by design.
 Basically, It&amp;rsquo;s hardware implementation of security functions like
 key management(generation and storage) cryptographic functions(Block ciphers, Asymmetric key crypto, Hash)  The hardware is designed with security threat model in mind.</description>
            <content type="html"><![CDATA[<p><a href="https://csrc.nist.gov/Projects/Hardware-Roots-of-Trust">NIST</a> defines Root of trust (RoT) as follows</p>
<blockquote>
<p>Roots of trust are highly reliable hardware, firmware, and software components that perform specific, critical security functions. Because roots of trust are inherently trusted, they must be secure by design.</p>
</blockquote>
<p>Basically, It&rsquo;s hardware implementation of security functions like</p>
<ul>
<li>key management(generation and storage)</li>
<li>cryptographic functions(Block ciphers, Asymmetric key crypto, Hash)</li>
</ul>
<p>The hardware is designed with security threat model in mind. <a href="https://csrc.nist.gov/CSRC/media/Publications/sp/800-164/draft/documents/sp800_164_draft.pdf">NIST Guidelines on Hardware Rooted Security in Mobile Devices</a> states 3 important guidelines for RoT</p>
<ul>
<li>Device Integrity: Device integrity is the absence of corruption in the hardware, firmware and software of a device. A mobile device can provide evidence that it has maintained device integrity if its software, firmware, and hardware configurations can be shown to be in a state that is trusted by a relying party</li>
<li>Isolation: Isolation prevents unintended interaction between applications and Information Contexts on the same device.</li>
<li>Protected Storage: Protected storage preserves the confidentiality and integrity of data on the device while at rest, while in use (in the event an unauthorized application attempts to access an item in protected storage), and upon revocation of access.</li>
</ul>
<p>If you want to find examples of hardware implementation guidelines, a list can be found on <a href="https://docs.opentitan.org/doc/security/implementation_guidelines/hardware/">opentitan</a>. For example, There are guidelines for avoiding <code>side-channel leakage</code></p>
<blockquote>
<p>Recommendation 2: Side-channel leakage considerations
Consider side-channel leakage of any secret information (side channels include timing, power, EM radiation, caches, and micro-architectural state, among others)</p>
<p>Process secret information in at least a 32-bit wide datapath
Use fixed/constant time operations when handling secrets (see <a href="https://csrc.nist.gov/CSRC/media/Publications/sp/800-164/draft/documents/sp800_164_draft.pdf">6</a> and [11])
Don’t branch/perform conditional operations based on secret values</p>
</blockquote>
<p>Naturally, threat model needs to be defined, again <a href="https://docs.opentitan.org/doc/security/threat_model/">opentitan threat model</a></p>
<h1 id="example-1">Example 1</h1>
<p>One interesting guideline from opentitan is Alerts</p>
<blockquote>
<p>Recommendation 5: Alerts
Generate alerts on any detected anomaly (need to define what priority/severity should be assigned)
Where possible, prefer to take a local action (clearing/randomizing state, cease processing) in addition to generating the alert</p>
</blockquote>
<p>This is quick example from opentitan of an alert.</p>
<p>Starting in <code>hw/ip/aes/rtl/aes_ctr_fsm.sv</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">      CTR_ERROR: <span style="color:#fff;font-weight:bold">begin</span>
        <span style="color:#007f7f">// SEC_CM: CTR.FSM.LOCAL_ESC
</span><span style="color:#007f7f"></span>        <span style="color:#007f7f">// Terminal error state
</span><span style="color:#007f7f"></span>        alert_o = <span style="color:#ff0;font-weight:bold">1</span><span style="color:#ff0;font-weight:bold">&#39;b1</span>;
      <span style="color:#fff;font-weight:bold">end</span>

      <span style="color:#007f7f">// We should never get here. If we do (e.g. via a malicious
</span><span style="color:#007f7f"></span>      <span style="color:#007f7f">// glitch), error out immediately.
</span><span style="color:#007f7f"></span>      <span style="color:#fff;font-weight:bold">default</span>: <span style="color:#fff;font-weight:bold">begin</span>
        aes_ctr_ns = CTR_ERROR;
        alert_o = <span style="color:#ff0;font-weight:bold">1</span><span style="color:#ff0;font-weight:bold">&#39;b1</span>;
      <span style="color:#fff;font-weight:bold">end</span>
</code></pre></div><p>eventually <code>alert_o</code> get connected to <code>ctrl_alert</code> and to <code>alert_fatal_o</code>. And status is set in the CSR <code>alert_fatal_fault</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#007f7f">// Collect fatal alert signals.
</span><span style="color:#007f7f"></span>  <span style="color:#fff;font-weight:bold">assign</span> alert_fatal_o = ctrl_err_storage |
                         ctr_alert        |
                         cipher_alert     |
                         ctrl_alert       |
                         intg_err_alert_i;

  <span style="color:#007f7f">// Make the fatal alert observable via status register.
</span><span style="color:#007f7f"></span>  <span style="color:#fff;font-weight:bold">assign</span> hw2reg.status.alert_fatal_fault.d  = alert_fatal_o;
  <span style="color:#fff;font-weight:bold">assign</span> hw2reg.status.alert_fatal_fault.de = alert_fatal_o;
</code></pre></div><h1 id="example-2">Example 2</h1>
<p>Another example is <code>Recommendation 3: Fault injection countermeasures</code></p>
<blockquote>
<p>Use parity/ECC on memories and data paths (note here that ECC is not true integrity, have to use hash to prevent forgery, see <a href="https://www.rambus.com/blogs/hardware-root-of-trust/">1</a>). For memories, ECC is helpful to protect instruction streams or values that can cause “branching control flows” that redirect execution flow. Parity is potentially helpful if detection of corruption is adequate (though double-glitch fault injection can fool parity, so Hsiao or other detect-2-error codes can be used, even without correction circuitry implemented). When committing to an irrevocable action (e.g. burning into OTP, unlocking part of the device/increasing permissions), ECC is probably more appropriate.</p>
</blockquote>
<p>For example, Flash controller <code>hw/ip/flash_ctrl/rtl/flash_phy_rd.sv</code> is using hamming ECC(Error correcting code)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">
  prim_secded_hamming_76_68_dec u_dec (
    .data_i(data_i),
    .data_o(data_ecc_chk),
    .syndrome_o(),
    .err_o({ecc_multi_err, ecc_single_err})
  );

  <span style="color:#007f7f">// send out error indication when ecc is enabled
</span><span style="color:#007f7f"></span>  <span style="color:#fff;font-weight:bold">assign</span> data_err = valid_ecc &amp; ecc_multi_err;

  <span style="color:#007f7f">// reliability ECC errors cause both in-band and out-of-band errors
</span><span style="color:#007f7f"></span>  <span style="color:#fff;font-weight:bold">assign</span> relbl_ecc_err_o = data_err;

  <span style="color:#007f7f">// If there is a detected multi-bit error or a single bit error, always return the
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// ECC corrected result (even though it is possibly wrong).
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// There is no data error of any kind (specifically when multi_err is disabled), just
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// return the raw data so that it can be debugged.
</span><span style="color:#007f7f"></span>  <span style="color:#fff;font-weight:bold">assign</span> data_int = data_err | ecc_single_err_o ?
                    data_ecc_chk :
                    data_i[PlainDataWidth-<span style="color:#ff0;font-weight:bold">1</span>:<span style="color:#ff0;font-weight:bold">0</span>];
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>New computer! Who dis?</title>
            <link>/posts/2023/02/new-computer-who-dis/</link>
            <pubDate>Thu, 16 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/new-computer-who-dis/</guid>
            <description>People talk about the smell of a new car, but nobody talks about the smell of new computer. The smell of plastic and potential :)
I recently retired my veteran Ideapad after battery, battery socket and eventually screen failed. safe to say, I got my money worth out of it. Honestly, I am surprised it lasted 7 years!
Reset in peace(RIP), my friend!
I decided to get another Ideapad. After research for few days, I found what I am looking for.</description>
            <content type="html"><![CDATA[<p>People talk about the smell of a new car, but nobody talks about the smell of new computer. The smell of plastic and potential :)</p>
<p>I recently retired my veteran Ideapad after battery, battery socket and eventually screen failed. safe to say, I got my money worth out of it. Honestly, I am surprised it lasted 7 years!</p>
<p>Reset in peace(RIP), my friend!</p>
<p>I decided to get another Ideapad. After research for few days, I found what I am looking for. I3 and decent RAM and It&rsquo;s not going to break the bank.</p>
<p>Unfortunately, I had to go through endless windows setup stuff to get the first boot. So, first thing to do, Download and install Linux. Now the big question is Which linux?
I was feeling adventures and decided something new. Mint! I have to say I am pleasantly surprised. Everything worked out of the box!</p>
<p>And of course, New computer means new stickers.</p>
<p><img src="/new-computer.png" alt="Example image"></p>
]]></content>
        </item>
        
        <item>
            <title>PCIe Galois LSFR scrambler - one way to do it!</title>
            <link>/posts/2023/02/pcie-galois-lsfr-scrambler-one-way-to-do-it/</link>
            <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/pcie-galois-lsfr-scrambler-one-way-to-do-it/</guid>
            <description>This is a quick post about PCIe scrambler as part of the physical layer. The polynomial is
 X^16 + X^5 + X^4 + X^3 + 1.
 From Wiki, This type of LSFR is called Galois LSFR where bits at taps(xor) is inverted when bit is 1.
 Named after the French mathematician Évariste Galois, an LFSR in Galois configuration, which is also known as modular, internal XORs, or one-to-many LFSR, is an alternate structure that can generate the same output stream as a conventional LFSR (but offset in time).</description>
            <content type="html"><![CDATA[<p>This is a quick post about PCIe scrambler as part of the physical layer. The polynomial is</p>
<blockquote>
<p>X^16 + X^5 + X^4 + X^3 + 1.</p>
</blockquote>
<p><img src="/pcie_scrambler.png" alt="Example image"></p>
<p>From <a href="https://en.wikipedia.org/wiki/Linear-feedback_shift_register">Wiki</a>, This type of LSFR is called <code>Galois LSFR</code> where bits at taps(xor) is inverted when bit is 1.</p>
<blockquote>
<p>Named after the French mathematician Évariste Galois, an LFSR in Galois configuration, which is also known as modular, internal XORs, or one-to-many LFSR, is an alternate structure that can generate the same output stream as a conventional LFSR (but offset in time).[5] In the Galois configuration, when the system is clocked, bits that are not taps are shifted one position to the right unchanged. The taps, on the other hand, are XORed with the output bit before they are stored in the next position. The new output bit is the next input bit. The effect of this is that when the output bit is zero, all the bits in the register shift to the right unchanged, and the input bit becomes zero. When the output bit is one, the bits in the tap positions all flip (if they are 0, they become 1, and if they are 1, they become 0), and then the entire register is shifted to the right and the input bit becomes 1.</p>
</blockquote>
<p>This is quick-and-dirty way to do LSFR. It can be done with clever xor but who got time to be clever.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#fff;font-weight:bold">def</span> int2binstr(value):
    b = (<span style="color:#fff;font-weight:bold">bin</span>(value)[<span style="color:#ff0;font-weight:bold">2</span>:]).zfill(<span style="color:#ff0;font-weight:bold">16</span>)
    <span style="color:#fff;font-weight:bold">return</span> b

<span style="color:#fff;font-weight:bold">def</span> lsfr(state):
    xor = [<span style="color:#ff0;font-weight:bold">3</span>,<span style="color:#ff0;font-weight:bold">4</span>,<span style="color:#ff0;font-weight:bold">5</span>]

    next_state = [<span style="color:#fff;font-weight:bold">int</span>(x) <span style="color:#fff;font-weight:bold">for</span> x in <span style="color:#fff;font-weight:bold">list</span>(int2binstr(state))]

    tmp = <span style="color:#fff;font-weight:bold">list</span>(next_state)

    <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">16</span>):
        <span style="color:#fff;font-weight:bold">if</span> i in xor:
            next_state[i] = tmp[i-<span style="color:#ff0;font-weight:bold">1</span>] ^ tmp[<span style="color:#ff0;font-weight:bold">15</span>]
        <span style="color:#fff;font-weight:bold">else</span>:
            next_state[i] = tmp[i-<span style="color:#ff0;font-weight:bold">1</span>]

    next_state = <span style="color:#fff;font-weight:bold">int</span>(<span style="color:#0ff;font-weight:bold">&#39;&#39;</span>.join([<span style="color:#fff;font-weight:bold">bin</span>(x)[<span style="color:#ff0;font-weight:bold">2</span>:] <span style="color:#fff;font-weight:bold">for</span> x in next_state]),<span style="color:#ff0;font-weight:bold">2</span>)

    <span style="color:#fff;font-weight:bold">return</span> next_state
    
state = <span style="color:#ff0;font-weight:bold">0x0001</span>

s = state
<span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">18</span>):
    o, s = (s, lsfr(s))
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#39;old=</span><span style="color:#0ff;font-weight:bold">{</span>int2binstr(o)<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> new=</span><span style="color:#0ff;font-weight:bold">{</span>int2binstr(s)<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#39;</span>)
</code></pre></div><p>And the output patterns as follows (it&rsquo;s not fully tested. So, hopefully, it&rsquo;s right!)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">old=<span style="color:#ff0;font-weight:bold">0000000000000001</span> new=<span style="color:#ff0;font-weight:bold">1001110000000000</span>
old=<span style="color:#ff0;font-weight:bold">1001110000000000</span> new=<span style="color:#ff0;font-weight:bold">0100111000000000</span>
old=<span style="color:#ff0;font-weight:bold">0100111000000000</span> new=<span style="color:#ff0;font-weight:bold">0010011100000000</span>
old=<span style="color:#ff0;font-weight:bold">0010011100000000</span> new=<span style="color:#ff0;font-weight:bold">0001001110000000</span>
old=<span style="color:#ff0;font-weight:bold">0001001110000000</span> new=<span style="color:#ff0;font-weight:bold">0000100111000000</span>
old=<span style="color:#ff0;font-weight:bold">0000100111000000</span> new=<span style="color:#ff0;font-weight:bold">0000010011100000</span>
old=<span style="color:#ff0;font-weight:bold">0000010011100000</span> new=<span style="color:#ff0;font-weight:bold">0000001001110000</span>
old=<span style="color:#ff0;font-weight:bold">0000001001110000</span> new=<span style="color:#ff0;font-weight:bold">0000000100111000</span>
old=<span style="color:#ff0;font-weight:bold">0000000100111000</span> new=<span style="color:#ff0;font-weight:bold">0000000010011100</span>
old=<span style="color:#ff0;font-weight:bold">0000000010011100</span> new=<span style="color:#ff0;font-weight:bold">0000000001001110</span>
old=<span style="color:#ff0;font-weight:bold">0000000001001110</span> new=<span style="color:#ff0;font-weight:bold">0000000000100111</span>
old=<span style="color:#ff0;font-weight:bold">0000000000100111</span> new=<span style="color:#ff0;font-weight:bold">1001110000010011</span>
old=<span style="color:#ff0;font-weight:bold">1001110000010011</span> new=<span style="color:#ff0;font-weight:bold">1101001000001001</span>
old=<span style="color:#ff0;font-weight:bold">1101001000001001</span> new=<span style="color:#ff0;font-weight:bold">1111010100000100</span>
old=<span style="color:#ff0;font-weight:bold">1111010100000100</span> new=<span style="color:#ff0;font-weight:bold">0111101010000010</span>
old=<span style="color:#ff0;font-weight:bold">0111101010000010</span> new=<span style="color:#ff0;font-weight:bold">0011110101000001</span>
old=<span style="color:#ff0;font-weight:bold">0011110101000001</span> new=<span style="color:#ff0;font-weight:bold">1000001010100000</span>
old=<span style="color:#ff0;font-weight:bold">1000001010100000</span> new=<span style="color:#ff0;font-weight:bold">0100000101010000</span>
</code></pre></div><p>Full disclosure, This is the just first half of the scrambler. The second half is the slower register driven by clocked by Byte clock (bit rate/8).</p>
]]></content>
        </item>
        
        <item>
            <title>AES Rijndael S-box explained</title>
            <link>/posts/2023/02/aes-rijndael-s-box-explained/</link>
            <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/aes-rijndael-s-box-explained/</guid>
            <description>This post is about Rijndael S-box which the first stage of AES encryption. It&amp;rsquo;s substitution lookup table. AES implementation usually uses pre-computed table. I thought it would be fun to calculate it in python to see it action.
From Wiki
 the input is mapped to its multiplicative inverse in GF(28) = GF(2) [x]/(x8 + x4 + x3 + x + 1), Rijndael&amp;rsquo;s finite field. Zero, as the identity, is mapped to itself.</description>
            <content type="html"><![CDATA[<p>This post is about Rijndael S-box which the first stage of AES encryption. It&rsquo;s substitution lookup table. AES implementation usually uses pre-computed table. I thought it would be fun to calculate it in python to see it action.</p>
<p>From Wiki</p>
<blockquote>
<p>the input is mapped to its multiplicative inverse in GF(28) = GF(2) [x]/(x8 + x4 + x3 + x + 1), Rijndael&rsquo;s finite field. Zero, as the identity, is mapped to itself. This transformation is known as the Nyberg S-box after its inventor Kaisa Nyberg.[2] The multiplicative inverse is then transformed using the following affine transformation:</p>
</blockquote>
<p>There are 2 stages</p>
<ul>
<li>Multiplicative inverse in GF(2^8)</li>
<li>Affine transformation</li>
</ul>
<h1 id="multiplicative-inverse">Multiplicative inverse</h1>
<p>I am using brute-force in GF(256) to find inverse. Basically loop and break when GF multiplication results in 1.</p>
<blockquote>
<p>p . q mod 0x11b = 1</p>
</blockquote>
<p>Based on <a href="https://crypto.stackexchange.com/questions/14902/understanding-multiplication-in-the-aes-specification">Link</a>, The calculation</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> mult(a,b):
    product = <span style="color:#ff0;font-weight:bold">0</span>
    <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">8</span>):
        <span style="color:#fff;font-weight:bold">if</span> (b &amp; <span style="color:#ff0;font-weight:bold">1</span>) == <span style="color:#ff0;font-weight:bold">1</span>:
            product ^= a
        hi_bit_set = a &amp; <span style="color:#ff0;font-weight:bold">0x80</span>
        a = (a &lt;&lt; <span style="color:#ff0;font-weight:bold">1</span>) &amp; <span style="color:#ff0;font-weight:bold">0xFF</span>
        <span style="color:#fff;font-weight:bold">if</span> hi_bit_set == <span style="color:#ff0;font-weight:bold">0x80</span>:
            a ^= <span style="color:#ff0;font-weight:bold">0x1B</span>
        b &gt;&gt;= <span style="color:#ff0;font-weight:bold">1</span>
    <span style="color:#fff;font-weight:bold">return</span> product

<span style="color:#fff;font-weight:bold">def</span> get_inverse(n):
    <span style="color:#fff;font-weight:bold">if</span> n == <span style="color:#ff0;font-weight:bold">0</span> :
        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>
    e = <span style="color:#fff;font-weight:bold">None</span>
    <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">256</span>):
        m = mult(n, i)
        <span style="color:#fff;font-weight:bold">if</span> (m == <span style="color:#ff0;font-weight:bold">1</span>):
            e = i
            <span style="color:#fff;font-weight:bold">break</span>
    <span style="color:#fff;font-weight:bold">return</span> e
</code></pre></div><h1 id="affinity-transformation">Affinity transformation</h1>
<p>For the Affinity transformation, It can be calculated with multiple algorithms But I implemented the formula:</p>
<blockquote>
<p>S = B + (B &laquo; 1) + (B &laquo; 2) + (B &laquo; 3) + (B &laquo; 4) + 0x63</p>
</blockquote>
<p>Where <code>+</code> is bitwise xor and <code>&lt;&lt;</code> is left rotate.
B here is the output is multiplicative inverse above</p>
<p>For rotation, I used good old concat after transforming it with <code>int2binstr</code>. There is probably easier pythonic way but It&rsquo;s 2 AM on Saturday night.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> rot1(v):
    bb = int2binstr(v)
    br = bb[<span style="color:#ff0;font-weight:bold">1</span>:] + bb[<span style="color:#ff0;font-weight:bold">0</span>]
    br = <span style="color:#fff;font-weight:bold">int</span>(br, <span style="color:#ff0;font-weight:bold">2</span>)
    <span style="color:#fff;font-weight:bold">return</span> br
</code></pre></div><h1 id="putting-it-all-together">Putting it all together</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> int2binstr(i):
    x = (<span style="color:#fff;font-weight:bold">bin</span>(i)[<span style="color:#ff0;font-weight:bold">2</span>:]).zfill(<span style="color:#ff0;font-weight:bold">8</span>)
    <span style="color:#fff;font-weight:bold">return</span> x

<span style="color:#fff;font-weight:bold">def</span> rot1(v):
    bb = int2binstr(v)
    br = bb[<span style="color:#ff0;font-weight:bold">1</span>:] + bb[<span style="color:#ff0;font-weight:bold">0</span>]
    br = <span style="color:#fff;font-weight:bold">int</span>(br, <span style="color:#ff0;font-weight:bold">2</span>)
    <span style="color:#fff;font-weight:bold">return</span> br

<span style="color:#fff;font-weight:bold">def</span> rot(v, count):
    p = v
    <span style="color:#fff;font-weight:bold">for</span> ii in <span style="color:#fff;font-weight:bold">range</span>(count):
        p = rot1(p)
    <span style="color:#fff;font-weight:bold">return</span> p

<span style="color:#fff;font-weight:bold">def</span> affinity(b):
    s = b ^ rot(b, <span style="color:#ff0;font-weight:bold">1</span>) ^ rot(b, <span style="color:#ff0;font-weight:bold">2</span>) ^ rot(b, <span style="color:#ff0;font-weight:bold">3</span>) ^ rot(b, <span style="color:#ff0;font-weight:bold">4</span>) ^  <span style="color:#ff0;font-weight:bold">0x63</span>
    <span style="color:#fff;font-weight:bold">return</span> s

<span style="color:#fff;font-weight:bold">def</span> mult(a,b):
    product = <span style="color:#ff0;font-weight:bold">0</span>
    <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">8</span>):
        <span style="color:#fff;font-weight:bold">if</span> (b &amp; <span style="color:#ff0;font-weight:bold">1</span>) == <span style="color:#ff0;font-weight:bold">1</span>:
            product ^= a
        hi_bit_set = a &amp; <span style="color:#ff0;font-weight:bold">0x80</span>
        a = (a &lt;&lt; <span style="color:#ff0;font-weight:bold">1</span>) &amp; <span style="color:#ff0;font-weight:bold">0xFF</span>
        <span style="color:#fff;font-weight:bold">if</span> hi_bit_set == <span style="color:#ff0;font-weight:bold">0x80</span>:
            a ^= <span style="color:#ff0;font-weight:bold">0x1B</span>
        b &gt;&gt;= <span style="color:#ff0;font-weight:bold">1</span>
    <span style="color:#fff;font-weight:bold">return</span> product

<span style="color:#fff;font-weight:bold">def</span> get_inverse(n):
    <span style="color:#fff;font-weight:bold">if</span> n == <span style="color:#ff0;font-weight:bold">0</span> :
        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>
    e = <span style="color:#fff;font-weight:bold">None</span>
    <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">256</span>):
        m = mult(n, i)
        <span style="color:#fff;font-weight:bold">if</span> (m == <span style="color:#ff0;font-weight:bold">1</span>):
            e = i
            <span style="color:#fff;font-weight:bold">break</span>
    <span style="color:#fff;font-weight:bold">return</span> e

<span style="color:#fff;font-weight:bold">for</span> n in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">256</span>):
    e = get_inverse(n)
    s = affinity(e)
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#39;[</span><span style="color:#0ff;font-weight:bold">{</span><span style="color:#fff;font-weight:bold">int</span>(n/<span style="color:#ff0;font-weight:bold">16</span>)<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">][</span><span style="color:#0ff;font-weight:bold">{</span>n%<span style="color:#ff0;font-weight:bold">16</span><span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">]=</span><span style="color:#0ff;font-weight:bold">{</span><span style="color:#fff;font-weight:bold">hex</span>(s)<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#39;</span>)

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>SVA req/ack assertions</title>
            <link>/posts/2023/02/sva-req/ack-assertions/</link>
            <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/sva-req/ack-assertions/</guid>
            <description>After req edge, req should be stable and ack is low until ack goes high between 0:11
$rose(req) |-&amp;gt; (req &amp;amp;&amp;amp; !ack)[*0:11] ##1 (req &amp;amp;&amp;amp; ack) When ack does high, req should be high as well
!req |-&amp;gt; !ack req goes low after ack goes low
$fell(req) |-&amp;gt; !ack </description>
            <content type="html"><![CDATA[<p>After req edge, req should be stable and ack is low until ack goes high between 0:11</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">$rose(req) |-&gt; (req &amp;&amp; !ack)[*<span style="color:#ff0;font-weight:bold">0</span>:<span style="color:#ff0;font-weight:bold">11</span>] ##<span style="color:#ff0;font-weight:bold">1</span> (req &amp;&amp; ack)
</code></pre></div><p>When ack does high, req should be high as well</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">!req |-&gt; !ack
</code></pre></div><p>req goes low after ack goes low</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">$fell(req) |-&gt; !ack
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM cheatsheet - Sequencer to driver connection</title>
            <link>/posts/2023/02/uvm-cheatsheet-sequencer-to-driver-connection/</link>
            <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/uvm-cheatsheet-sequencer-to-driver-connection/</guid>
            <description>sequence task body(); pkt t = pkt::type_id::create(&amp;#34;t&amp;#34;); start_item(t); tx.randomize(); finish_item(t); get_response(r); endtask driver class mydriver extends uvm_driver #(pkt); seq_item_port.get_next_item(pkt); seq_item_port.item_done(); endclass or for response ```verilog class mydriver extends uvm_driver; seq_item_port.get(req); // create rsp 	rsp.set_id_info(req); seq_item_port.put(rsp); endclass Connection in Agent m_drv.seq_item_port.connect(m_seqr.seq_item_export) </description>
            <content type="html"><![CDATA[<h1 id="sequence">sequence</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">task</span> body();

	pkt t = pkt::type_id::create(<span style="color:#0ff;font-weight:bold">&#34;t&#34;</span>);

	start_item(t);

	tx.randomize();

	finish_item(t);
	get_response(r);
<span style="color:#fff;font-weight:bold">endtask</span>
</code></pre></div><h1 id="driver">driver</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">
class mydriver extends uvm_driver #(pkt);

	seq_item_port.get_next_item(pkt);

	seq_item_port.item_done();
endclass


<span style="color:#fff;font-weight:bold">or</span> <span style="color:#fff;font-weight:bold">for</span> response

<span style="color:#f00">``</span>`verilog
class mydriver extends uvm_driver;
	seq_item_port.get(req);

	<span style="color:#007f7f">// create rsp
</span><span style="color:#007f7f"></span>	rsp.set_id_info(req);
	seq_item_port.put(rsp);
endclass
</code></pre></div><h1 id="connection-in-agent">Connection in Agent</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">m_drv.seq_item_port.connect(m_seqr.seq_item_export)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM Internals - deepdive into uvm_reg_predictor</title>
            <link>/posts/2023/02/uvm-internals-deepdive-into-uvm_reg_predictor/</link>
            <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/uvm-internals-deepdive-into-uvm_reg_predictor/</guid>
            <description>I uvm_predictor is UVM way to determine the value of registers model by monitoring the bus in case someone other than reg model is changing the registers. The usual boilerplate code looks something like this:
predict.map = regmodel.default_map; predict.adapter = reg2rw; // reg2rw is adapter  bus.mon.ap.connect(predict.bus_in); regmodel.default_map.set_auto_predict(0); Looking at the source code, The following important variables bus_in, map and adapter.
`uvm_component_param_utils(uvm_reg_predictor#(BUSTYPE)) // Variable: bus_in  //  // Observed bus transactions of type ~BUSTYPE~ are received from this  // port and processed.</description>
            <content type="html"><![CDATA[<p>I
<code>uvm_predictor</code> is UVM way to determine the value of registers model by monitoring the bus in case someone other than reg model is changing the registers. The usual boilerplate code looks something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">        predict.map = regmodel.default_map;
        predict.adapter = reg2rw; <span style="color:#007f7f">// reg2rw is adapter
</span><span style="color:#007f7f"></span>        bus.mon.ap.connect(predict.bus_in);
        regmodel.default_map.set_auto_predict(<span style="color:#ff0;font-weight:bold">0</span>);
</code></pre></div><p>Looking at the source code, The following important variables <code>bus_in</code>, <code>map</code> and <code>adapter</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">
  `uvm_component_param_utils(uvm_reg_predictor#(BUSTYPE))

  <span style="color:#007f7f">// Variable: bus_in
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">//
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// Observed bus transactions of type ~BUSTYPE~ are received from this
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// port and processed.
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">//
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// For each incoming transaction, the predictor will attempt to get the
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// register or memory handle corresponding to the observed bus address. 
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">//
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// If there is a match, the predictor calls the register or memory&#39;s
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// predict method, passing in the observed bus data. The register or
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// memory mirror will be updated with this data, subject to its configured
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// access behavior--RW, RO, WO, etc. The predictor will also convert the
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// bus transaction to a generic &lt;uvm_reg_item&gt; and send it out the
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// ~reg_ap~ analysis port.
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">//
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// If the register is wider than the bus, the
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// predictor will collect the multiple bus transactions needed to
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// determine the value being read or written.
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">//
</span><span style="color:#007f7f"></span>  uvm_analysis_imp #(BUSTYPE, uvm_reg_predictor #(BUSTYPE)) bus_in;
  
...
...
  <span style="color:#007f7f">// Variable: map
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">//
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// The map used to convert a bus address to the corresponding register
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// or memory handle. Must be configured before the run phase.
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// 
</span><span style="color:#007f7f"></span>  uvm_reg_map map;


  <span style="color:#007f7f">// Variable: adapter
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">//
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// The adapter used to convey the parameters of a bus operation in 
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// terms of a canonical &lt;uvm_reg_bus_op&gt; datum.
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// The &lt;uvm_reg_adapter&gt; must be configured before the run phase.
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">//
</span><span style="color:#007f7f"></span>  uvm_reg_adapter adapter;

</code></pre></div><p>The class has one function <code>write</code> connected to the <code>bus_in</code> analysis imp above.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  virtual <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> write(BUSTYPE tr);
     uvm_reg rg;
     uvm_reg_bus_op rw;
    <span style="color:#fff;font-weight:bold">if</span> (adapter == null)
     `uvm_fatal(<span style="color:#0ff;font-weight:bold">&#34;REG/WRITE/NULL&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;write: adapter handle is null&#34;</span>

</code></pre></div><p>First use adapter to get the rw transaction and look up the register by address</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">     <span style="color:#007f7f">// In case they forget to set byte_en
</span><span style="color:#007f7f"></span>     rw.byte_en = -<span style="color:#ff0;font-weight:bold">1</span>;
     adapter.bus2reg(tr,rw);
     rg = map.get_reg_by_offset(rw.addr, (rw.kind == UVM_READ));
</code></pre></div><p>Next, use the map to get <code>local_map</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">       local_map = rg.get_local_map(map,<span style="color:#0ff;font-weight:bold">&#34;predictor::write()&#34;</span>);
       map_info = local_map.get_reg_map_info(rg);
       ir=($cast(ireg, rg))?ireg.get_indirect_reg():rg;
      ...
      ...
       foreach (map_info.addr[i]) <span style="color:#fff;font-weight:bold">begin</span>
         <span style="color:#fff;font-weight:bold">if</span> (rw.addr == map_info.addr[i]) <span style="color:#fff;font-weight:bold">begin</span>
            found = <span style="color:#ff0;font-weight:bold">1</span>;
           reg_item.value[<span style="color:#ff0;font-weight:bold">0</span>] |= rw.data &lt;&lt; (i * map.get_n_bytes()*<span style="color:#ff0;font-weight:bold">8</span>);
           predict_info.addr[rw.addr] = <span style="color:#ff0;font-weight:bold">1</span>;
           ...
           ...
       <span style="color:#fff;font-weight:bold">end</span>
</code></pre></div><p>And eventually calling RAL function to do the magic</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">              ir.XsampleX(reg_item.value[<span style="color:#ff0;font-weight:bold">0</span>], rw.byte_en,
                          reg_item.kind == UVM_READ, local_map);
              ...
              ...
              ...
              rg.do_predict(reg_item, predict_kind, rw.byte_en);
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM Internals - Deepdive into uvm_reg_bit_bash_seq</title>
            <link>/posts/2023/02/uvm-internals-deepdive-into-uvm_reg_bit_bash_seq/</link>
            <pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/uvm-internals-deepdive-into-uvm_reg_bit_bash_seq/</guid>
            <description>This is a deepdive into uvm_reg_bit_bash_seq. It&amp;rsquo;s one of UVM RAL builtin sequences to test registers. uvm_reg_bit_bash_seq can be used as by setting the model and start the sequence and that&amp;rsquo;s it.
seq = uvm_reg_bit_bash_seq::type_id::create(&amp;#34;seq&amp;#34;,this); seq.model = env.regmodel; seq.start(null); seq.wait_for_sequence_state(FINISHED); Starting with body(), it seems reset_blk is empty in src/reg/sequences/uvm_reg_bit_bash_seq.svh
reg_seq = uvm_reg_single_bit_bash_seq::type_id::create(&amp;#34;reg_single_bit_bash_seq&amp;#34;); this.reset_blk(model); model.reset(); do_block(model); The loop works on all registers and calls vm_reg_single_bit_bash_seq on each register
protected virtual task do_block(uvm_reg_block blk); uvm_reg regs[$]; .</description>
            <content type="html"><![CDATA[<p>This is a deepdive into <code>uvm_reg_bit_bash_seq</code>. It&rsquo;s one of UVM RAL builtin sequences to test registers. <code>uvm_reg_bit_bash_seq</code> can be used as by setting the <code>model</code> and start the sequence and that&rsquo;s it.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">         seq = uvm_reg_bit_bash_seq::type_id::create(<span style="color:#0ff;font-weight:bold">&#34;seq&#34;</span>,this);
         seq.model = env.regmodel;

         seq.start(null);
         seq.wait_for_sequence_state(FINISHED);
</code></pre></div><p>Starting with <code>body()</code>, it seems <code>reset_blk</code> is empty in <code>src/reg/sequences/uvm_reg_bit_bash_seq.svh</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">
      reg_seq = uvm_reg_single_bit_bash_seq::type_id::create(<span style="color:#0ff;font-weight:bold">&#34;reg_single_bit_bash_seq&#34;</span>);

      this.reset_blk(model);
      model.reset();

      do_block(model);
</code></pre></div><p>The loop works on all registers and calls <code>vm_reg_single_bit_bash_seq</code> on each register</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">   protected virtual <span style="color:#fff;font-weight:bold">task</span> do_block(uvm_reg_block blk);
      uvm_reg regs[<span style="color:#f00">$</span>];
      ...
      ...

      <span style="color:#007f7f">// Iterate over all registers, checking accesses
</span><span style="color:#007f7f"></span>      blk.get_registers(regs, UVM_NO_HIER);
      foreach (regs[i]) <span style="color:#fff;font-weight:bold">begin</span>
         <span style="color:#007f7f">// Registers with some attributes are not to be tested
</span><span style="color:#007f7f"></span>         <span style="color:#fff;font-weight:bold">if</span> (uvm_resource_db#(<span style="color:#fff;font-weight:bold">bit</span>)::get_by_name({<span style="color:#0ff;font-weight:bold">&#34;REG::&#34;</span>,regs[i].get_full_name()},
                                                <span style="color:#0ff;font-weight:bold">&#34;NO_REG_TESTS&#34;</span>, <span style="color:#ff0;font-weight:bold">0</span>) != null ||
	     uvm_resource_db#(<span style="color:#fff;font-weight:bold">bit</span>)::get_by_name({<span style="color:#0ff;font-weight:bold">&#34;REG::&#34;</span>,regs[i].get_full_name()},
                                                <span style="color:#0ff;font-weight:bold">&#34;NO_REG_BIT_BASH_TEST&#34;</span>, <span style="color:#ff0;font-weight:bold">0</span>) != null )
            <span style="color:#fff;font-weight:bold">continue</span>;
         
         reg_seq.rg = regs[i];
         reg_seq.start(null,this);
      <span style="color:#fff;font-weight:bold">end</span>

</code></pre></div><p>And then call <code>do_block</code> recursively</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">      <span style="color:#fff;font-weight:bold">begin</span>
         uvm_reg_block blks[<span style="color:#f00">$</span>];
         
         blk.get_blocks(blks);
         foreach (blks[i]) <span style="color:#fff;font-weight:bold">begin</span>
            do_block(blks[i]);
         <span style="color:#fff;font-weight:bold">end</span>
      <span style="color:#fff;font-weight:bold">end</span>
   <span style="color:#fff;font-weight:bold">endtask</span>: do_block
</code></pre></div><p>Ok, let&rsquo;s look at <code>vm_reg_single_bit_bash_seq</code>. Note there are few knobs to disable the checks in case the user wants to. <code>NO_REG_TESTS</code> is set into the <code>uvm_resource_db</code> for registers that we don&rsquo;t checked.</p>
<p>Surprisingly, <code>body()</code> is well documented with comments (thank you, whoever wrote it!). But to sump, It loops over that fields and bits in each field, Calculate mask based on which bits are writable and then goes these bits and change the value and check the new value.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"> virtual <span style="color:#fff;font-weight:bold">task</span> body();

      <span style="color:#007f7f">// Registers with some attributes are not to be tested
</span><span style="color:#007f7f"></span>      <span style="color:#fff;font-weight:bold">if</span> (uvm_resource_db#(<span style="color:#fff;font-weight:bold">bit</span>)::get_by_name({<span style="color:#0ff;font-weight:bold">&#34;REG::&#34;</span>,rg.get_full_name()},
                                             <span style="color:#0ff;font-weight:bold">&#34;NO_REG_TESTS&#34;</span>, <span style="color:#ff0;font-weight:bold">0</span>) != null ||
          uvm_resource_db#(<span style="color:#fff;font-weight:bold">bit</span>)::get_by_name({<span style="color:#0ff;font-weight:bold">&#34;REG::&#34;</span>,rg.get_full_name()},
                                             <span style="color:#0ff;font-weight:bold">&#34;NO_REG_BIT_BASH_TEST&#34;</span>, <span style="color:#ff0;font-weight:bold">0</span>) != null )
            <span style="color:#fff;font-weight:bold">return</span>;
      
      n_bits = rg.get_n_bytes() * <span style="color:#ff0;font-weight:bold">8</span>;
         
      <span style="color:#007f7f">// Let&#39;s see what kind of bits we have...
</span><span style="color:#007f7f"></span>      rg.get_fields(fields);
         
      <span style="color:#007f7f">// Registers may be accessible from multiple physical interfaces (maps)
</span><span style="color:#007f7f"></span>      rg.get_maps(maps);
         
      <span style="color:#007f7f">// Bash the bits in the register via each map
</span><span style="color:#007f7f"></span>      foreach (maps[j]) <span style="color:#fff;font-weight:bold">begin</span>
         uvm_status_e status;
         uvm_reg_data_t  val, exp, v;
         <span style="color:#fff;font-weight:bold">int</span> next_lsb;
         
         next_lsb = <span style="color:#ff0;font-weight:bold">0</span>;
         dc_mask  = <span style="color:#ff0;font-weight:bold">0</span>;
         foreach (fields[k]) <span style="color:#fff;font-weight:bold">begin</span>
            <span style="color:#fff;font-weight:bold">int</span> lsb, w, dc;

            dc = (fields[k].get_compare() == UVM_NO_CHECK);
            lsb = fields[k].get_lsb_pos();
            w   = fields[k].get_n_bits();
            <span style="color:#007f7f">// Ignore Write-only fields because
</span><span style="color:#007f7f"></span>            <span style="color:#007f7f">// you are not supposed to read them
</span><span style="color:#007f7f"></span>            <span style="color:#fff;font-weight:bold">case</span> (fields[k].get_access(maps[j]))
             <span style="color:#0ff;font-weight:bold">&#34;WO&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;WOC&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;WOS&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;WO1&#34;</span>: dc = <span style="color:#ff0;font-weight:bold">1</span>;
            <span style="color:#fff;font-weight:bold">endcase</span>
            <span style="color:#007f7f">// Any unused bits on the right side of the LSB?
</span><span style="color:#007f7f"></span>            <span style="color:#fff;font-weight:bold">while</span> (next_lsb &lt; lsb) mode[next_lsb++] = <span style="color:#0ff;font-weight:bold">&#34;RO&#34;</span>;
            
            <span style="color:#fff;font-weight:bold">repeat</span> (w) <span style="color:#fff;font-weight:bold">begin</span>
               mode[next_lsb] = fields[k].get_access(maps[j]);
               dc_mask[next_lsb] = dc;
               next_lsb++;
            <span style="color:#fff;font-weight:bold">end</span>
         <span style="color:#fff;font-weight:bold">end</span>
         <span style="color:#007f7f">// Any unused bits on the left side of the MSB?
</span><span style="color:#007f7f"></span>         <span style="color:#fff;font-weight:bold">while</span> (next_lsb &lt; `UVM_REG_DATA_WIDTH)
            mode[next_lsb++] = <span style="color:#0ff;font-weight:bold">&#34;RO&#34;</span>;
         
         `uvm_info(<span style="color:#0ff;font-weight:bold">&#34;uvm_reg_bit_bash_seq&#34;</span>, $sformatf(<span style="color:#0ff;font-weight:bold">&#34;Verifying bits in register %s in map </span><span style="color:#0ff;font-weight:bold">\&#34;</span><span style="color:#0ff;font-weight:bold">%s</span><span style="color:#0ff;font-weight:bold">\&#34;</span><span style="color:#0ff;font-weight:bold">...&#34;</span>,
                                    rg.get_full_name(), maps[j].get_full_name()),UVM_LOW);
         
         <span style="color:#007f7f">// Bash the kth bit
</span><span style="color:#007f7f"></span>         <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">int</span> k = <span style="color:#ff0;font-weight:bold">0</span>; k &lt; n_bits; k++) <span style="color:#fff;font-weight:bold">begin</span>
            <span style="color:#007f7f">// Cannot test unpredictable bit behavior
</span><span style="color:#007f7f"></span>            <span style="color:#fff;font-weight:bold">if</span> (dc_mask[k]) <span style="color:#fff;font-weight:bold">continue</span>;

            bash_kth_bit(rg, k, mode[k], maps[j], dc_mask);
         <span style="color:#fff;font-weight:bold">end</span>
            
      <span style="color:#fff;font-weight:bold">end</span>
   <span style="color:#fff;font-weight:bold">endtask</span>: body
</code></pre></div><p>In <code>bash_kth_bit</code>, bit is written then read back and finally, The comparison at the end of task reports is there is a mismatch</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">   <span style="color:#fff;font-weight:bold">task</span> bash_kth_bit(uvm_reg         rg,
                     <span style="color:#fff;font-weight:bold">int</span>             k,
                     <span style="color:#fff;font-weight:bold">string</span>          mode,
                     uvm_reg_map     map,
                     uvm_reg_data_t  dc_mask);
      uvm_status_e status;
      uvm_reg_data_t  val, exp, v;
      <span style="color:#fff;font-weight:bold">bit</span> bit_val;

      `uvm_info(<span style="color:#0ff;font-weight:bold">&#34;uvm_reg_bit_bash_seq&#34;</span>, $sformatf(<span style="color:#0ff;font-weight:bold">&#34;...Bashing %s bit #%0d&#34;</span>, mode, k),UVM_HIGH);
      
      <span style="color:#fff;font-weight:bold">repeat</span> (<span style="color:#ff0;font-weight:bold">2</span>) <span style="color:#fff;font-weight:bold">begin</span>
         val = rg.get();
         v   = val;
         exp = val;
         val[k] = ~val[k];
         bit_val = val[k];
         
         rg.write(status, val, UVM_FRONTDOOR, map, this);
         <span style="color:#fff;font-weight:bold">if</span> (status != UVM_IS_OK) <span style="color:#fff;font-weight:bold">begin</span>
            `uvm_error(<span style="color:#0ff;font-weight:bold">&#34;uvm_reg_bit_bash_seq&#34;</span>, $sformatf(<span style="color:#0ff;font-weight:bold">&#34;Status was %s when writing to register </span><span style="color:#0ff;font-weight:bold">\&#34;</span><span style="color:#0ff;font-weight:bold">%s</span><span style="color:#0ff;font-weight:bold">\&#34;</span><span style="color:#0ff;font-weight:bold"> through map </span><span style="color:#0ff;font-weight:bold">\&#34;</span><span style="color:#0ff;font-weight:bold">%s</span><span style="color:#0ff;font-weight:bold">\&#34;</span><span style="color:#0ff;font-weight:bold">.&#34;</span>,
                                        status.name(), rg.get_full_name(), map.get_full_name()));
         <span style="color:#fff;font-weight:bold">end</span>
         
         exp = rg.get() &amp; ~dc_mask;
         rg.read(status, val, UVM_FRONTDOOR, map, this);
         <span style="color:#fff;font-weight:bold">if</span> (status != UVM_IS_OK) <span style="color:#fff;font-weight:bold">begin</span>
            `uvm_error(<span style="color:#0ff;font-weight:bold">&#34;uvm_reg_bit_bash_seq&#34;</span>, $sformatf(<span style="color:#0ff;font-weight:bold">&#34;Status was %s when reading register </span><span style="color:#0ff;font-weight:bold">\&#34;</span><span style="color:#0ff;font-weight:bold">%s</span><span style="color:#0ff;font-weight:bold">\&#34;</span><span style="color:#0ff;font-weight:bold"> through map </span><span style="color:#0ff;font-weight:bold">\&#34;</span><span style="color:#0ff;font-weight:bold">%s</span><span style="color:#0ff;font-weight:bold">\&#34;</span><span style="color:#0ff;font-weight:bold">.&#34;</span>,
                                        status.name(), rg.get_full_name(), map.get_full_name()));
         <span style="color:#fff;font-weight:bold">end</span>

         val &amp;= ~dc_mask;
         <span style="color:#fff;font-weight:bold">if</span> (val !== exp) <span style="color:#fff;font-weight:bold">begin</span>
            `uvm_error(<span style="color:#0ff;font-weight:bold">&#34;uvm_reg_bit_bash_seq&#34;</span>, $sformatf(<span style="color:#0ff;font-weight:bold">&#34;Writing a %b in bit #%0d of register </span><span style="color:#0ff;font-weight:bold">\&#34;</span><span style="color:#0ff;font-weight:bold">%s</span><span style="color:#0ff;font-weight:bold">\&#34;</span><span style="color:#0ff;font-weight:bold"> with initial value &#39;h%h yielded &#39;h%h instead of &#39;h%h&#34;</span>,
                                        bit_val, k, rg.get_full_name(), v, val, exp));
         <span style="color:#fff;font-weight:bold">end</span>
      <span style="color:#fff;font-weight:bold">end</span>
   <span style="color:#fff;font-weight:bold">endtask</span>: bash_kth_bit
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Purpose lost in search of limelight, They said!</title>
            <link>/posts/2023/02/purpose-lost-in-search-of-limelight-they-said/</link>
            <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/purpose-lost-in-search-of-limelight-they-said/</guid>
            <description>Disclaimer: This is joke/rant post. If sarcasm is not your thing, Please press next.
I was recently told something that I didn&amp;rsquo;t know how to respond to. I didn&amp;rsquo;t say anything at the time, but it bugged me for few hours then I thought of something and didn&amp;rsquo;t think about since(Good will hunting?!).
Anyway, someone said
 Your purpose is lost in search of limelight.
 It took me few seconds to parse and process the statement.</description>
            <content type="html"><![CDATA[<p>Disclaimer: This is joke/rant post. If sarcasm is not your thing, Please press next.</p>
<p>I was recently told something that I didn&rsquo;t know how to respond to. I didn&rsquo;t say anything at the time, but it bugged me for few hours then I thought of something and didn&rsquo;t think about since(Good will hunting?!).</p>
<p>Anyway, someone said</p>
<blockquote>
<p>Your purpose is lost in search of limelight.</p>
</blockquote>
<p>It took me few seconds to parse and process the statement. English is my second language and the wording didn&rsquo;t seem right to me. What in the name of google-translate does this mean?</p>
<p>Eventually, I understood what he really meant and this is my thought process that day with Memes of the great Ron burgundy</p>
<ul>
<li>Denial: limelight?  Me? I am absolutely not looking for limelight. What ? Where? When?  I don&rsquo;t even have a purpose. Are you sure you have the right Ahmed? It&rsquo;s a very common arabic name.</li>
</ul>
<p><img src="/saywhat.png" alt="Example image"></p>
<ul>
<li>
<p>Anger: Yo, Dude, did you just call me attention w-seeker? Maybe we should step outside and sort this out.
<img src="/anger.png" alt="Example image"></p>
</li>
<li>
<p>Bargaining: ok, hear me out. Can we really say that? I may be looking for the limelight. Just a little bit. Who isn&rsquo;t really?
<img src="/actuall-important.jpg" alt="Example image"></p>
</li>
<li>
<p>Depression: WHAT AM I DOING WITH MY LIFE? IS THIS ROCK BOTTOM? <em>chug a pint of Beamish</em>
<img src="/crying.jpg" alt="Example image"></p>
</li>
<li>
<p>Acceptance: I know this is meant as insult, but I will take as compliment. It&rsquo;s sounds too poetic to be angry about it.</p>
</li>
</ul>
<p><img src="/that-amazing.jpg" alt="Example image"></p>
<p>Joking aside, There is a fine line between being showy and just communicate/network with people. I find if very funny that someone thinks I am showy because anyone how knows me or worked with me, would know that I hate to be in spotlight(or limelight or whatever he called it). That said, I love to collaborate with people, work on initiatives/projects. Even better, learn something new together. This is the only way to learn and grow. The way to work with interesting wicked smart (another good will hunting reference!) people.</p>
<p>Thanks for coming to my Ted talk!</p>
]]></content>
        </item>
        
        <item>
            <title>UVM cheatsheet - Misc snippets</title>
            <link>/posts/2023/02/uvm-cheatsheet-misc-snippets/</link>
            <pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/uvm-cheatsheet-misc-snippets/</guid>
            <description>set_drain_time class test extends uvm_test; task run_phase (uvm_phase phase); phase.raise_objection(this); my_seq.start(m_sequencer); phase.phase_done.set_drain_time(this, 20ns); phase.drop_objection(this); endtask: run_phase endclass function for UVM names get_full_name() returns hierarchy from uvm_top get_type_name() returns class name get_name() return UVM object name. passed to new() How to start sequence class seq extends uvm_sequence; task body(); start_item(obj); obj.randomize(); finish_item(obj); endtask endclass seq sq; sq.start(seqencer); `uvm_do (seq/item) On calling this macro, create, randomize and send to the driver will be executed `uvm_do_with (seq/item, constraints) It is the same as `uvm_do but additionally, constraints can be defined while randomizing `uvm_do_pri(seq/item, priority) It is the same as `uvm_do but additionally, the mentioned priority is considered.</description>
            <content type="html"><![CDATA[<h1 id="set_drain_time">set_drain_time</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class test extends uvm_test;
 <span style="color:#fff;font-weight:bold">task</span> run_phase (uvm_phase phase);
   phase.raise_objection(this);
   
   my_seq.start(m_sequencer);
   phase.phase_done.set_drain_time(this, <span style="color:#ff0;font-weight:bold">20</span>ns);

   phase.drop_objection(this);
 <span style="color:#fff;font-weight:bold">endtask</span>: run_phase
endclass
</code></pre></div><h1 id="function-for-uvm-names">function for UVM names</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">get_full_name() returns hierarchy from uvm_top

get_type_name() returns class name

get_name()  <span style="color:#fff;font-weight:bold">return</span> UVM object name. passed to new()

</code></pre></div><h1 id="how-to-start-sequence">How to start sequence</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class seq extends uvm_sequence;

<span style="color:#fff;font-weight:bold">task</span> body();
	start_item(obj);
	obj.randomize();
	finish_item(obj);
<span style="color:#fff;font-weight:bold">endtask</span>
endclass

seq sq;
sq.start(seqencer);
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#0ff;font-weight:bold">`</span>uvm_do (seq/item) On calling this macro, create, randomize and send to the driver will be executed

<span style="color:#0ff;font-weight:bold">`</span>uvm_do_with (seq/item, constraints) It is the same as <span style="color:#0ff;font-weight:bold">`</span>uvm_do but additionally, constraints can be defined <span style="color:#fff;font-weight:bold">while</span> randomizing

<span style="color:#0ff;font-weight:bold">`</span>uvm_do_pri(seq/item, priority) It is the same as <span style="color:#0ff;font-weight:bold">`</span>uvm_do but additionally, the mentioned priority is considered.

<span style="color:#0ff;font-weight:bold">`</span>uvm_do_pri_with(seq/item, constraints, priority).  It is a combination of <span style="color:#0ff;font-weight:bold">`</span>uvm_do_with and <span style="color:#0ff;font-weight:bold">`</span>uvm_do_pri

<span style="color:#0ff;font-weight:bold">`</span>uvm_create(seq/item) This creates a sequence or item.

<span style="color:#0ff;font-weight:bold">`</span>uvm_send(seq/item) It directly sends seq/item without creating and randomizing it. So, make sure the seq/item is created and randomized first.

<span style="color:#0ff;font-weight:bold">`</span>uvm_rand_send(seq/item) It directly sends a randomized seq/item without creating it. So, make sure the seq/item is created first.

<span style="color:#0ff;font-weight:bold">`</span>uvm_rand_send_with(seq/item) It directly sends a randomized seq/item with constraints but without creating it. So, make sure seq/item is created first

<span style="color:#0ff;font-weight:bold">`</span>uvm_send_pri(seq/item, Priority) It is the same as <span style="color:#0ff;font-weight:bold">`</span>uvm_send but additionally. priority is also considered.

<span style="color:#0ff;font-weight:bold">`</span>uvm_rand_send_pri(seq/item, Priority) It is combination of <span style="color:#0ff;font-weight:bold">`</span>uvm_rand_send and <span style="color:#0ff;font-weight:bold">`</span>uvm_send_pri

<span style="color:#0ff;font-weight:bold">`</span>uvm_rand_send_pri_with(seq/item, Priority) It is a combination of <span style="color:#0ff;font-weight:bold">`</span>uvm_rand_send_with and <span style="color:#0ff;font-weight:bold">`</span>uvm_send_pri.
</code></pre></div><h1 id="uvm-messages">UVM messages</h1>
<p>uvm info messages had the following levels</p>
<ul>
<li>UVM_NONE</li>
<li>UVM_LOW</li>
<li>UVM_MEDIUM</li>
<li>UVM_HIGH</li>
<li>UVM_FULL</li>
<li>UVM_DEBUG</li>
</ul>
<p>Default is UVM_MEDIUM. So, the following are printed</p>
<ul>
<li>UVM_NONE</li>
<li>UVM_LOW</li>
<li>UVM_MEDIUM</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">+UVM_VERBOSITY=UVM_HIGH
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">`uvm_info( <span style="color:#0ff;font-weight:bold">&#34;id1&#34;</span>,  get_full_name(), UVM_DEBUG  ) 
`uvm_info(<span style="color:#0ff;font-weight:bold">&#34;MYINFO1&#34;</span>, $sformatf(<span style="color:#0ff;font-weight:bold">&#34;val: %0d&#34;</span>, val), UVM_LOW) 
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM cheatsheet - TLM</title>
            <link>/posts/2023/02/uvm-cheatsheet-tlm/</link>
            <pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/uvm-cheatsheet-tlm/</guid>
            <description>put port to imp class A; uvm_blocking_put_port #(obj) m_port; task run_phase() m_port.put(pkt); endtask endclass class B; uvm_blocking_put_export #(obj, comp) m_imp; virtual task put(pkt p); endtask endclass a.m_port.connect(b.m_imp); get port/imp class A; uvm_blocking_get_imp #(obj) m_imp; virtual task get(pkt p); endtask endclass class B; uvm_blocking_get_port #(obj, comp) m_port; task run_phase() m_port.get(pkt); endtask endclass b.m_port.connect(a.m_imp); Port to Port m_subcompo.m_port.connect(this.m_port) imp to export m_export.connect(subcomp.m_imp) port to export subcom.m_port.connect(comp.m_export) tlm_fifo uvm_blocking_put_port #(pkt) m_put; m_put(p); uvm_blocking_get_port #(pkt) m_get; m_get(p) uvm_tlm_fifo #(pkt) m_tlm_fifo; comp1.</description>
            <content type="html"><![CDATA[<h1 id="put-port-to-imp">put port to imp</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class A;
	uvm_blocking_put_port #(obj) m_port;

	<span style="color:#fff;font-weight:bold">task</span> run_phase()
		m_port.put(pkt);
	<span style="color:#fff;font-weight:bold">endtask</span>

endclass


class B;
	uvm_blocking_put_export #(obj, comp) m_imp;

	virtual <span style="color:#fff;font-weight:bold">task</span> put(pkt p);
	<span style="color:#fff;font-weight:bold">endtask</span>

endclass

a.m_port.connect(b.m_imp);
</code></pre></div><h1 id="get-portimp">get port/imp</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class A;
	uvm_blocking_get_imp #(obj) m_imp;

	virtual <span style="color:#fff;font-weight:bold">task</span> get(pkt p);
	<span style="color:#fff;font-weight:bold">endtask</span>

endclass

class B;
	uvm_blocking_get_port #(obj, comp) m_port;

	<span style="color:#fff;font-weight:bold">task</span> run_phase()
		m_port.get(pkt);
	<span style="color:#fff;font-weight:bold">endtask</span>

endclass

b.m_port.connect(a.m_imp);
</code></pre></div><h2 id="port-to-port">Port to Port</h2>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">m_subcompo.m_port.connect(this.m_port)
</code></pre></div><h2 id="imp-to-export">imp to export</h2>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">m_export.connect(subcomp.m_imp)
</code></pre></div><h2 id="port-to-export">port to export</h2>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">subcom.m_port.connect(comp.m_export)
</code></pre></div><h1 id="tlm_fifo">tlm_fifo</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">uvm_blocking_put_port #(pkt) m_put;
m_put(p);


uvm_blocking_get_port #(pkt) m_get;
m_get(p)

uvm_tlm_fifo #(pkt) m_tlm_fifo;

comp1.m_put.connect(m_tlm_fifo.put_export);
comp2.m_get.connect(m_tlm_fifo.get_export);
</code></pre></div><h1 id="uvm_analysis_port">uvm_analysis_port</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">uvm_analysis_port #(pkt) ap;
ap.write(p)

in uvm_subscriber
  uvm_analysis_imp #(T, this_type) analysis_export;


class s extends uvm_subscriber #(pkt);
	virtual <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> write(pkt p1);
	<span style="color:#fff;font-weight:bold">endfunction</span>

endclass

c1.ap.connect(c2.analysis_export)
</code></pre></div><h1 id="tlm-analysis-fifo">TLM analysis fifo</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">
<span style="color:#007f7f">// declare fifo
</span><span style="color:#007f7f"></span> uvm_tlm_analysis_fifo #(transaction) analy_fifo;  

<span style="color:#007f7f">// on one side create ap
</span><span style="color:#007f7f"></span> uvm_analysis_port#(transaction) analysis_port; 

<span style="color:#007f7f">// connect fifo to ap
</span><span style="color:#007f7f"></span> analysis_port.connect(analy_fifo.analysis_export);

<span style="color:#007f7f">// write to port
</span><span style="color:#007f7f"></span>analysis_port.write(trans);

<span style="color:#007f7f">// get from fifo
</span><span style="color:#007f7f"></span>analy_fifo.get(trans);
</code></pre></div><h1 id="tlm-macros">TLM macros</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">`uvm_put_imp_decl(_1)
`uvm_put_imp_decl(_2)

uvm_put_imp_2 #(pkt, my_put_compo#(pkt) ) put_imp2
uvm_put_imp_1 #(pkt, my_put_compo#(pkt) ) put_imp1

<span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> put_1(<span style="color:#fff;font-weight:bold">input</span> pkt t);
<span style="color:#fff;font-weight:bold">endfunction</span>
<span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> put_2(<span style="color:#fff;font-weight:bold">input</span> pkt t);
<span style="color:#fff;font-weight:bold">endfunction</span>


uvm_blocking_put_port #(pkt) put_port;
put_port.put(p);

compoS1.put_port.connect(compoR.put_imp1);
compoS2.put_port.connect(compoR.put_imp2);
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM Internals - What happens when you call set_auto_predict</title>
            <link>/posts/2023/02/uvm-internals-what-happens-when-you-call-set_auto_predict/</link>
            <pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/02/uvm-internals-what-happens-when-you-call-set_auto_predict/</guid>
            <description>This is a deepdive into how set_auto_predict works.
When called on reg_map, It updates the mirror values with write/read operation going through the reg model.
blabla_reg_block_map.set_auto_predict(1); The function is defined in uvm_reg_map.svh with the following comment
// When ~on~ is ~TRUE~,  // the register model will automatically update its mirror  // (what it thinks should be in the DUT) immediately after  // any bus read or write operation via this map.</description>
            <content type="html"><![CDATA[<p>This is a deepdive into how <code>set_auto_predict</code> works.</p>
<p>When called on reg_map, It updates the mirror values with write/read operation going through the reg model.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">blabla_reg_block_map.set_auto_predict(<span style="color:#ff0;font-weight:bold">1</span>);
</code></pre></div><p>The function is defined in <code>uvm_reg_map.svh</code> with the following comment</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">   <span style="color:#007f7f">// When ~on~ is ~TRUE~, 
</span><span style="color:#007f7f"></span>   <span style="color:#007f7f">// the register model will automatically update its mirror
</span><span style="color:#007f7f"></span>   <span style="color:#007f7f">// (what it thinks should be in the DUT) immediately after
</span><span style="color:#007f7f"></span>   <span style="color:#007f7f">// any bus read or write operation via this map. Before a &lt;uvm_reg::write&gt;
</span><span style="color:#007f7f"></span>   <span style="color:#007f7f">// or &lt;uvm_reg::read&gt; operation returns, the register&#39;s &lt;uvm_reg::predict&gt;
</span><span style="color:#007f7f"></span>   <span style="color:#007f7f">// method is called to update the mirrored value in the register.
</span><span style="color:#007f7f"></span>   <span style="color:#007f7f">//
</span><span style="color:#007f7f"></span>   <span style="color:#007f7f">// When ~on~ is ~FALSE~, bus reads and writes via this map do not
</span><span style="color:#007f7f"></span>   <span style="color:#007f7f">// automatically update the mirror. For real-time updates to the mirror
</span><span style="color:#007f7f"></span>   <span style="color:#007f7f">// in this mode, you connect a &lt;uvm_reg_predictor&gt; instance to the bus
</span><span style="color:#007f7f"></span>   <span style="color:#007f7f">// monitor. The predictor takes observed bus transactions from the
</span><span style="color:#007f7f"></span>   <span style="color:#007f7f">// bus monitor, looks up the associated &lt;uvm_reg&gt; register given
</span><span style="color:#007f7f"></span>   <span style="color:#007f7f">// the address, then calls that register&#39;s &lt;uvm_reg::predict&gt; method.
</span><span style="color:#007f7f"></span>   <span style="color:#007f7f">// While more complex, this mode will capture all register read/write
</span><span style="color:#007f7f"></span>   <span style="color:#007f7f">// activity, including that not directly descendant from calls to
</span><span style="color:#007f7f"></span>   <span style="color:#007f7f">// &lt;uvm_reg::write&gt; and &lt;uvm_reg::read&gt;.
</span><span style="color:#007f7f"></span>   <span style="color:#007f7f">//
</span><span style="color:#007f7f"></span>   <span style="color:#007f7f">// By default, auto-prediction is turned off.
</span><span style="color:#007f7f"></span>
   <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> set_auto_predict(<span style="color:#fff;font-weight:bold">bit</span> on=<span style="color:#ff0;font-weight:bold">1</span>); m_auto_predict = on; <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p><code>m_auto_predict</code> is referenced only in <code>get_auto_predict</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">bit</span>  get_auto_predict(); <span style="color:#fff;font-weight:bold">return</span> m_auto_predict; <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p><code>get_auto_predict</code> is called inside 2 tasks <code>do_write</code> and <code>do_read</code>. In <code>do_write</code>, the value is checked in <code>UVM_FRONTDOOR</code> case</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">
      UVM_FRONTDOOR: <span style="color:#fff;font-weight:bold">begin</span>
    ...
    ...
         <span style="color:#fff;font-weight:bold">if</span> (system_map.get_auto_predict()) <span style="color:#fff;font-weight:bold">begin</span>
            uvm_status_e status;
            <span style="color:#fff;font-weight:bold">if</span> (rw.status != UVM_NOT_OK) <span style="color:#fff;font-weight:bold">begin</span>
               sample(value, -<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">0</span>, rw.map);
               m_parent.XsampleX(map_info.offset, <span style="color:#ff0;font-weight:bold">0</span>, rw.map);
            <span style="color:#fff;font-weight:bold">end</span>

            status = rw.status; <span style="color:#007f7f">// do_predict will override rw.status, so we save it here
</span><span style="color:#007f7f"></span>            do_predict(rw, UVM_PREDICT_WRITE);
            rw.status = status;
         <span style="color:#fff;font-weight:bold">end</span>
</code></pre></div><p>The key function here is <code>do_predict</code> called with <code>rw</code>. For each field, <code>field.do_prodict</code> is called to predict each field. This is common function is called by RAL access API(poke, etc)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> uvm_reg::do_predict(uvm_reg_item      rw,
                                  uvm_predict_e     kind = UVM_PREDICT_DIRECT,
                                  uvm_reg_byte_en_t be = -<span style="color:#ff0;font-weight:bold">1</span>);

   uvm_reg_data_t reg_value = rw.value[<span style="color:#ff0;font-weight:bold">0</span>];
   m_fname = rw.fname;
   m_lineno = rw.lineno;

   rw.status = UVM_IS_OK;

   <span style="color:#fff;font-weight:bold">if</span> (m_is_busy &amp;&amp; kind == UVM_PREDICT_DIRECT) <span style="color:#fff;font-weight:bold">begin</span>
      `uvm_warning(<span style="color:#0ff;font-weight:bold">&#34;RegModel&#34;</span>, {<span style="color:#0ff;font-weight:bold">&#34;Trying to predict value of register &#39;&#34;</span>,
                  get_full_name(),<span style="color:#0ff;font-weight:bold">&#34;&#39; while it is being accessed&#34;</span>})
      rw.status = UVM_NOT_OK;
      <span style="color:#fff;font-weight:bold">return</span>;
   <span style="color:#fff;font-weight:bold">end</span>
   
   foreach (m_fields[i]) <span style="color:#fff;font-weight:bold">begin</span>
      rw.value[<span style="color:#ff0;font-weight:bold">0</span>] = (reg_value &gt;&gt; m_fields[i].get_lsb_pos()) &amp;
                                 ((<span style="color:#ff0;font-weight:bold">1</span> &lt;&lt; m_fields[i].get_n_bits())-<span style="color:#ff0;font-weight:bold">1</span>);
      m_fields[i].do_predict(rw, kind, be&gt;&gt;(m_fields[i].get_lsb_pos()/<span style="color:#ff0;font-weight:bold">8</span>));
   <span style="color:#fff;font-weight:bold">end</span>

   rw.value[<span style="color:#ff0;font-weight:bold">0</span>] = reg_value;

<span style="color:#fff;font-weight:bold">endfunction</span>: do_predict
</code></pre></div><p>So, what is <code>rw</code>? In <code>write</code> where <code>do_write</code> is called, <code>rw</code> object is created and initialized with the data passed to <code>write</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">task</span> uvm_reg::write(<span style="color:#fff;font-weight:bold">output</span> uvm_status_e      status,
                    <span style="color:#fff;font-weight:bold">input</span>  uvm_reg_data_t    value,
                    <span style="color:#fff;font-weight:bold">input</span>  uvm_path_e        path = UVM_DEFAULT_PATH,
                    <span style="color:#fff;font-weight:bold">input</span>  uvm_reg_map       map = null,
                    <span style="color:#fff;font-weight:bold">input</span>  uvm_sequence_base parent = null,
                    <span style="color:#fff;font-weight:bold">input</span>  <span style="color:#fff;font-weight:bold">int</span>               prior = -<span style="color:#ff0;font-weight:bold">1</span>,
                    <span style="color:#fff;font-weight:bold">input</span>  uvm_object        extension = null,
                    <span style="color:#fff;font-weight:bold">input</span>  <span style="color:#fff;font-weight:bold">string</span>            fname = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>,
                    <span style="color:#fff;font-weight:bold">input</span>  <span style="color:#fff;font-weight:bold">int</span>               lineno = <span style="color:#ff0;font-weight:bold">0</span>);

   <span style="color:#007f7f">// create an abstract transaction for this operation
</span><span style="color:#007f7f"></span>   uvm_reg_item rw;

...
...
...

   rw = uvm_reg_item::type_id::create(<span style="color:#0ff;font-weight:bold">&#34;write_item&#34;</span>,,get_full_name());
   rw.element      = this;
   rw.element_kind = UVM_REG;
   rw.kind         = UVM_WRITE;
   rw.value[<span style="color:#ff0;font-weight:bold">0</span>]     = value;
   rw.path         = path;
   rw.map          = map;
   rw.parent       = parent;
   rw.prior        = prior;
   rw.extension    = extension;
   rw.fname        = fname;
   rw.lineno       = lineno;

   do_write(rw);
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>OpenGL and Intel Graphics linux driver deepdive</title>
            <link>/posts/2023/01/opengl-and-intel-graphics-linux-driver-deepdive/</link>
            <pubDate>Sat, 28 Jan 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/01/opengl-and-intel-graphics-linux-driver-deepdive/</guid>
            <description>This post is deepdive into how opengl application interacts with underlying software stack which are opengl implementation and graphics drivers in the kernel. The stack is something like this.
User Land ------------&amp;gt; OpenGL implementation (Mesa) -------------&amp;gt; Intel driver (i915) -----------&amp;gt; HW Userland1: application and GLUT Starting with a simple application to show square polygon. This application uses libglut for window management and to start the opengl application. Cool!
#include &amp;lt;GL/glut.h&amp;gt; void displayMe(void) { glClear(GL_COLOR_BUFFER_BIT); glBegin(GL_POLYGON); glVertex3f(0.</description>
            <content type="html"><![CDATA[<p>This post is deepdive into how opengl application interacts with underlying software stack which are opengl implementation and graphics drivers in the kernel. The stack is something like this.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">User Land ------------&gt; OpenGL implementation (Mesa) -------------&gt; Intel driver (i915) -----------&gt; HW
</code></pre></div><h1 id="userland1-application-and-glut">Userland1: application and GLUT</h1>
<p>Starting with a simple application to show square polygon. This application uses <code>libglut</code> for window management and to start the opengl application. Cool!</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;GL/glut.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">void</span> displayMe(<span style="color:#fff;font-weight:bold">void</span>)
{
    glClear(GL_COLOR_BUFFER_BIT);
    glBegin(GL_POLYGON);
    glVertex3f(<span style="color:#ff0;font-weight:bold">0.0</span>, <span style="color:#ff0;font-weight:bold">0.0</span>, <span style="color:#ff0;font-weight:bold">0.0</span>);
    glVertex3f(<span style="color:#ff0;font-weight:bold">0.5</span>, <span style="color:#ff0;font-weight:bold">0.0</span>, <span style="color:#ff0;font-weight:bold">0.0</span>);
    glVertex3f(<span style="color:#ff0;font-weight:bold">0.5</span>, <span style="color:#ff0;font-weight:bold">0.5</span>, <span style="color:#ff0;font-weight:bold">0.0</span>);
    glVertex3f(<span style="color:#ff0;font-weight:bold">0.0</span>, <span style="color:#ff0;font-weight:bold">0.5</span>, <span style="color:#ff0;font-weight:bold">0.0</span>);
    glEnd();
    glFlush();
}

<span style="color:#fff;font-weight:bold">int</span> main(<span style="color:#fff;font-weight:bold">int</span> argc, <span style="color:#fff;font-weight:bold">char</span> **argv)
{
    glutInit(&amp;argc, argv);
    glutInitDisplayMode(GLUT_SINGLE);

    glutInitWindowSize(<span style="color:#ff0;font-weight:bold">300</span>, <span style="color:#ff0;font-weight:bold">300</span>);
    glutInitWindowPosition(<span style="color:#ff0;font-weight:bold">100</span>, <span style="color:#ff0;font-weight:bold">100</span>);
    glutCreateWindow(<span style="color:#0ff;font-weight:bold">&#34;Hello world&#34;</span>);

    glutDisplayFunc(displayMe);

    glutMainLoop();glut opengl
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}
</code></pre></div><p>For reference, <code>glut</code> is <code>The OpenGL Utility Toolkit</code> which is a minimal window manager to run opengl application. The popular implementation is <code>freeglut3</code> as according to <a href="https://freeglut.sourceforge.net/">link</a>, The original GLUT library was deprecated.</p>
<p><code>/usr/include/GL/freeglut_std.h</code> include headers from <code>GL/gl.h</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#0f0;font-weight:bold">#   include &lt;GL/gl.h&gt;
</span><span style="color:#0f0;font-weight:bold">#   include &lt;GL/glu.h&gt;
</span></code></pre></div><h1 id="userland2-opengl-implementation-libraries---mesa">Userland2: opengl implementation libraries - Mesa</h1>
<p>opengl is just API specification and the underlying system needs to implement these API&rsquo;s. I am using <a href="https://www.mesa3d.org/">mesa</a> as t&rsquo;s popular option (it implements other stuff like Vulkan as well).</p>
<p>Ok, Let&rsquo;s have a look at the next layer which is libmesa. Looking at the  shared objects, As expected, It links to libglut.so and libGl.so.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ldd main
	libglut.so.3 =&gt; /lib/x86_64-linux-gnu/libglut.so.3 (0x00007fcb71176000)
	libGL.so.1 =&gt; /lib/x86_64-linux-gnu/libGL.so.1 (0x00007fcb710ef000)
</code></pre></div><p>Getting the symbols of <code>libGL.so</code>, obviously, the symbols are there.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">m -D  /lib/x86_64-linux-gnu/libGL.so.1|rg <span style="color:#0ff;font-weight:bold">&#34; glClear</span>$<span style="color:#0ff;font-weight:bold">&#34;</span>
<span style="color:#ff0;font-weight:bold">0000000000047700</span> T glClear
</code></pre></div><p>In <code>src/./mesa/main/clear.c</code>, <code>clear</code> is defined. The important part is call to <code>st_Clear</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> ALWAYS_INLINE <span style="color:#fff;font-weight:bold">void</span>
clear(<span style="color:#fff;font-weight:bold">struct</span> gl_context *ctx, GLbitfield mask, <span style="color:#fff;font-weight:bold">bool</span> no_error)
{
   FLUSH_VERTICES(ctx, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0</span>);

   <span style="color:#fff;font-weight:bold">if</span> (!no_error) {
      <span style="color:#fff;font-weight:bold">if</span> (mask &amp; ~(GL_COLOR_BUFFER_BIT |
                   GL_DEPTH_BUFFER_BIT |
                   GL_STENCIL_BUFFER_BIT |
                   GL_ACCUM_BUFFER_BIT)) {
         _mesa_error( ctx, GL_INVALID_VALUE, <span style="color:#0ff;font-weight:bold">&#34;glClear(0x%x)&#34;</span>, mask);
         <span style="color:#fff;font-weight:bold">return</span>;
      }

....
....
      st_Clear(ctx, bufferMask);
</code></pre></div><p><code>st_Clear</code> eventually calls <code>pipe-&gt;clear</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">      st-&gt;pipe-&gt;clear(st-&gt;pipe, clear_buffers, have_scissor_buffers ? &amp;scissor_state : <span style="color:#fff;font-weight:bold">NULL</span>,
                      (<span style="color:#fff;font-weight:bold">union</span> pipe_color_union*)&amp;ctx-&gt;Color.ClearColor,
                      ctx-&gt;Depth.Clear, ctx-&gt;Stencil.Clear);
</code></pre></div><p>For intel i915, <code>clear</code> is set to i915 clear functions in <code>i915_clear.c</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">   <span style="color:#fff;font-weight:bold">if</span> (i915_screen(screen)-&gt;debug.use_blitter)
      i915-&gt;base.clear = i915_clear_blitter;
   <span style="color:#fff;font-weight:bold">else</span>
      i915-&gt;base.clear = i915_clear_render;

   i915-&gt;base.draw_vbo = i915_draw_vbo;
</code></pre></div><p>In <code>src/gallium/drivers/i915/i915_clear.c</code>, <code>i915_clear_render</code> calls <code>i915_clear_emit</code>. Note that <a href="https://www.freedesktop.org/wiki/Software/gallium/">gallium</a> is API between gpraphics drivers as described on docs page</p>
<blockquote>
<p>Gallium3D is a new architecture for building 3D graphics drivers. Initially supporting Mesa and Linux graphics drivers, Gallium3D is designed to allow portability to all major operating systems and graphics interfaces.</p>
</blockquote>
<p>Gallium is layered library</p>
<ul>
<li>API state tracker</li>
<li>GPU-specific driver</li>
<li>winsys (depends on OS, in case of Linux, It&rsquo;s DRM)</li>
</ul>
<p>For State tracker, Documentation says:</p>
<blockquote>
<p>The Mesa state tracker is the piece which interfaces core Mesa to the Gallium3D interface. It&rsquo;s responsible for translating Mesa state (blend modes, texture state, etc) and drawing commands (like glDrawArrays and glDrawPixels) into pipe objects and operations.</p>
</blockquote>
<p>For winsys, It&rsquo;s basically DRM interface. Later on that later.</p>
<p>ok back to <code>i915_clear_render</code>  defined in <code>src/gallium/drivers/i915/i915_clear.c</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">i915_clear_render(<span style="color:#fff;font-weight:bold">struct</span> pipe_context *pipe, <span style="color:#fff;font-weight:bold">unsigned</span> buffers,
                  <span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">struct</span> pipe_scissor_state *scissor_state,
                  <span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">union</span> pipe_color_union *color, <span style="color:#fff;font-weight:bold">double</span> depth,
                  <span style="color:#fff;font-weight:bold">unsigned</span> stencil)
{
   <span style="color:#fff;font-weight:bold">struct</span> i915_context *i915 = i915_context(pipe);

   <span style="color:#fff;font-weight:bold">if</span> (i915-&gt;dirty)
      i915_update_derived(i915);

   i915_clear_emit(pipe, buffers, color, depth, stencil, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0</span>,
                   i915-&gt;framebuffer.width, i915-&gt;framebuffer.height);
}

</code></pre></div><p>And <code>i915_clear_emit</code> is defined in the same file.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">void</span>
i915_clear_emit(<span style="color:#fff;font-weight:bold">struct</span> pipe_context *pipe, <span style="color:#fff;font-weight:bold">unsigned</span> buffers,
                <span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">union</span> pipe_color_union *color, <span style="color:#fff;font-weight:bold">double</span> depth,
                <span style="color:#fff;font-weight:bold">unsigned</span> stencil, <span style="color:#fff;font-weight:bold">unsigned</span> destx, <span style="color:#fff;font-weight:bold">unsigned</span> desty,
                <span style="color:#fff;font-weight:bold">unsigned</span> width, <span style="color:#fff;font-weight:bold">unsigned</span> height)
</code></pre></div><p>In <code>i15_clear_emit</code>, there are several <code>OUT_BATCH</code> to fill out the batch memory for kernel driver</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">      OUT_BATCH(_3DSTATE_SCISSOR_ENABLE_CMD | DISABLE_SCISSOR_RECT);

      OUT_BATCH(_3DSTATE_CLEAR_PARAMETERS);
      OUT_BATCH(CLEARPARAM_WRITE_COLOR | CLEARPARAM_CLEAR_RECT);
      <span style="color:#007f7f">/* Used for zone init prim */</span>
      OUT_BATCH(clear_color);
      OUT_BATCH(clear_depth);
      <span style="color:#007f7f">/* Used for clear rect prim */</span>
      OUT_BATCH(clear_color8888);
      OUT_BATCH_F(f_depth);
      OUT_BATCH(clear_stencil);
</code></pre></div><p>So, <code>OUT_BATCH</code> is just a write to that memory and increasing point by +4 as seen in <code>i915_winsys_batchbuffer_dword_unchecked</code>. Those macros are defined in <code>src/gallium/drivers/i915/i915_batch.h</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#0f0;font-weight:bold">#define OUT_BATCH(dword) i915_winsys_batchbuffer_dword(i915-&gt;batch, dword)
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">inline</span> <span style="color:#fff;font-weight:bold">void</span>
i915_winsys_batchbuffer_dword_unchecked(<span style="color:#fff;font-weight:bold">struct</span> i915_winsys_batchbuffer *batch,
                                        <span style="color:#fff;font-weight:bold">unsigned</span> dword)
{
   *(<span style="color:#fff;font-weight:bold">unsigned</span> *)batch-&gt;ptr = dword;
   batch-&gt;ptr += <span style="color:#ff0;font-weight:bold">4</span>;
}

<span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">inline</span> <span style="color:#fff;font-weight:bold">void</span>
i915_winsys_batchbuffer_dword(<span style="color:#fff;font-weight:bold">struct</span> i915_winsys_batchbuffer *batch,
                              <span style="color:#fff;font-weight:bold">unsigned</span> dword)
{
   assert(i915_winsys_batchbuffer_space(batch) &gt;= <span style="color:#ff0;font-weight:bold">4</span>);
   i915_winsys_batchbuffer_dword_unchecked(batch, dword);
}
</code></pre></div><p>The important part is the call to <code>FLUSH_BATCH</code> to send the above batch memory to kernel. But How?</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">   FLUSH_BATCH(<span style="color:#fff;font-weight:bold">NULL</span>, I915_FLUSH_ASYNC);
</code></pre></div><p><code>FLUSH_BATCH</code>is a call to <code>i915_flush</code> which calls <code>batchbuffer_flush</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#0f0;font-weight:bold">#define FLUSH_BATCH(fence, flags) i915_flush(i915, fence, flags)
</span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">void</span>
i915_flush(<span style="color:#fff;font-weight:bold">struct</span> i915_context *i915, <span style="color:#fff;font-weight:bold">struct</span> pipe_fence_handle **fence,
           <span style="color:#fff;font-weight:bold">unsigned</span> flags)
{
   <span style="color:#fff;font-weight:bold">struct</span> i915_winsys_batchbuffer *batch = i915-&gt;batch;

   batch-&gt;iws-&gt;batchbuffer_flush(batch, fence, flags);
   i915-&gt;vbo_flushed = <span style="color:#ff0;font-weight:bold">1</span>;

</code></pre></div><p><code>batchbuffer_flush</code> is set to <code>i915_drm_batchbuffer_flush</code> which <code>drm_intel_bo_exec</code> which is part if <code>libdrm</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">void</span>
i915_drm_batchbuffer_flush(<span style="color:#fff;font-weight:bold">struct</span> i915_winsys_batchbuffer *ibatch,
                           <span style="color:#fff;font-weight:bold">struct</span> pipe_fence_handle **fence,
                           <span style="color:#fff;font-weight:bold">enum</span> i915_winsys_flush_flags flags)
{
   <span style="color:#fff;font-weight:bold">struct</span> i915_drm_batchbuffer *batch = i915_drm_batchbuffer(ibatch);
   <span style="color:#fff;font-weight:bold">unsigned</span> used;
   <span style="color:#fff;font-weight:bold">int</span> ret;
...
...

   <span style="color:#007f7f">/* Do the sending to HW */</span>
   ret = drm_intel_bo_subdata(batch-&gt;bo, <span style="color:#ff0;font-weight:bold">0</span>, used, batch-&gt;base.map);
   <span style="color:#fff;font-weight:bold">if</span> (ret == <span style="color:#ff0;font-weight:bold">0</span> &amp;&amp; i915_drm_winsys(ibatch-&gt;iws)-&gt;send_cmd)
      ret = drm_intel_bo_exec(batch-&gt;bo, used, <span style="color:#fff;font-weight:bold">NULL</span>, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0</span>);

</code></pre></div><p>Note that <code>libdrm</code> is user space wrappers around DRM ioctl to <a href="https://en.wikipedia.org/wiki/Direct_Rendering_Manager">DRM</a>.</p>
<p>Before I jump to the kernel, I want to highlight that <code>libmesa</code> will write commands to buffer for HW to execute and can use ioctl to trigger execution
for example, the clear command <code>_3DSTATE_CLEAR_PARAMETERS</code> and this command is defined by Intel (see <a href="https://www.x.org/docs/intel/LKF/intel-gfx-prm-osrc-lkf-vol02a-commandreference-instructions.pdf">pdf</a> for opcode breakdown)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">      OUT_BATCH(_3DSTATE_CLEAR_PARAMETERS);
      OUT_BATCH((clear_params &amp; ~CLEARPARAM_WRITE_COLOR) |
                CLEARPARAM_CLEAR_RECT);
      <span style="color:#007f7f">/* Used for zone init prim */</span>
      OUT_BATCH(clear_color);
      OUT_BATCH(clear_depth);
      <span style="color:#007f7f">/* Used for clear rect prim */</span>
      OUT_BATCH(clear_color8888);
      OUT_BATCH_F(f_depth);
      OUT_BATCH(clear_stencil);
</code></pre></div><p><img src="/OPENGL_CLEARPARAM.png" alt="Example image"></p>
<p>now we saw one way to communicate to HW through commands written to batch buffers, we will have to see DRM interface between libmesa and linux kernel. we know that libmesa uses libdrm. And eventually libdrm will call ioctl. In <code>libdrm</code> code, I can see that <code>drm_intel_bo_exec</code> will use <code>DRM_IOCTL_I915_GEM_EXECBUFFER2_WR</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">
	ret = drmIoctl(bufmgr_gem-&gt;fd,
		       DRM_IOCTL_I915_GEM_EXECBUFFER2_WR,
		       &amp;execbuf);
	<span style="color:#fff;font-weight:bold">if</span> (ret != <span style="color:#ff0;font-weight:bold">0</span>) {
		ret = -errno;
		<span style="color:#fff;font-weight:bold">if</span> (ret == -ENOSPC) {
			DBG(<span style="color:#0ff;font-weight:bold">&#34;Execbuffer fails to pin. &#34;</span>
			    <span style="color:#0ff;font-weight:bold">&#34;Estimate: %u. Actual: %u. Available: %u</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>,
			    drm_intel_gem_estimate_batch_space(bufmgr_gem-&gt;exec_bos,
							       bufmgr_gem-&gt;exec_count),
			    drm_intel_gem_compute_batch_space(bufmgr_gem-&gt;exec_bos,
							      bufmgr_gem-&gt;exec_count),
			    (<span style="color:#fff;font-weight:bold">unsigned</span> <span style="color:#fff;font-weight:bold">int</span>) bufmgr_gem-&gt;gtt_size);
		}
	}
	drm_intel_update_buffer_offsets2(bufmgr_gem);
</code></pre></div><h1 id="linux-intel-driver-side">Linux Intel driver Side</h1>
<p>In this section, we go through Intel linux driver <code>i915</code> which is uses the kernel&rsquo;s <a href="https://en.wikipedia.org/wiki/Direct_Rendering_Manager">DRM</a>. The files can be found at <code>drivers/gpu/drm/i915</code>.</p>
<p>from <code>i915.rst</code></p>
<blockquote>
<p>The Intel GPU family is a family of integrated GPU&rsquo;s using Unified
Memory Access. For having the GPU &ldquo;do work&rdquo;, user space will feed the
GPU batch buffers via one of the ioctls <code>DRM_IOCTL_I915_GEM_EXECBUFFER2</code>
or <code>DRM_IOCTL_I915_GEM_EXECBUFFER2_WR</code>. Most such batchbuffers will
instruct the GPU to perform work (for example rendering) and that work
needs memory from which to read and memory to which to write. All memory
is encapsulated within GEM buffer objects (usually created with the ioctl
<code>DRM_IOCTL_I915_GEM_CREATE</code>). An ioctl providing a batchbuffer for the GPU
to create will also list all GEM buffer objects that the batchbuffer reads
and/or writes. For implementation details of memory management see
<code>GEM BO Management Implementation Details</code>_.</p>
</blockquote>
<p>In <code>i915_driver</code>, The ioctl callbacks are registered. I am putting <code>i915_gem_execbuffer2_ioctl</code> as it will be called for command execution.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">struct</span> drm_ioctl_desc i915_ioctls[] = {
   ....
	DRM_IOCTL_DEF_DRV(I915_GEM_EXECBUFFER2_WR, i915_gem_execbuffer2_ioctl, DRM_RENDER_ALLOW),
</code></pre></div><p><code>i915_gem_execbuffer2_ioctl</code> copies command buffer from user space and calls <code>i915_gem_do_execbuffer</code>. I will stop here to recover from PTSD.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">	<span style="color:#fff;font-weight:bold">if</span> (copy_from_user(exec2_list,
			   u64_to_user_ptr(args-&gt;buffers_ptr),
			   <span style="color:#fff;font-weight:bold">sizeof</span>(*exec2_list) * count)) {
		drm_dbg(&amp;i915-&gt;drm, <span style="color:#0ff;font-weight:bold">&#34;copy %zd exec entries failed</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>, count);
		kvfree(exec2_list);
		<span style="color:#fff;font-weight:bold">return</span> -EFAULT;
	}

	err = i915_gem_do_execbuffer(dev, file, args, exec2_list);

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM Internals - uvm_pool</title>
            <link>/posts/2023/01/uvm-internals-uvm_pool/</link>
            <pubDate>Thu, 26 Jan 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/01/uvm-internals-uvm_pool/</guid>
            <description>This post is about one of UVM utility uvm_pool which is wrapper around Systemverilog associative array. UVM defines singletons from uvm_pool as well.
Starting with some internal inside uvm_pool, poolassoc array is delatred as protected as there couple of setters and getter defines anyway.
typedef uvm_pool #(KEY,T) this_type; static protected this_type m_global_pool; protected T pool[KEY]; get and setare defined as follows. Easy enough!
virtual function T get (KEY key); if (!</description>
            <content type="html"><![CDATA[<p>This post is about one of UVM utility <code>uvm_pool</code> which is wrapper around Systemverilog associative array. UVM defines singletons from uvm_pool as well.</p>
<p>Starting with some internal inside uvm_pool, <code>pool</code>assoc array is delatred as protected as there couple of setters and getter defines anyway.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">typedef</span> uvm_pool #(KEY,T) this_type;

  static protected this_type m_global_pool;
  protected T pool[KEY];
</code></pre></div><p><code>get</code> and <code>set</code>are defined as follows. Easy enough!</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">
  virtual <span style="color:#fff;font-weight:bold">function</span> T get (KEY key);
    <span style="color:#fff;font-weight:bold">if</span> (!pool.exists(key)) <span style="color:#fff;font-weight:bold">begin</span>
      T default_value;
      pool[key] = default_value;
    <span style="color:#fff;font-weight:bold">end</span>
    <span style="color:#fff;font-weight:bold">return</span> pool[key];
  <span style="color:#fff;font-weight:bold">endfunction</span>
  
  virtual <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> add (KEY key, T item);
    pool[key] = item;
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p>For the singleton, these methods can be used. Again easy enough! Not that global pool is created once the first time <code>get_global_pool</code> is called.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  static <span style="color:#fff;font-weight:bold">function</span> this_type get_global_pool ();
    <span style="color:#fff;font-weight:bold">if</span> (m_global_pool==null)
      m_global_pool = new(<span style="color:#0ff;font-weight:bold">&#34;pool&#34;</span>);
    <span style="color:#fff;font-weight:bold">return</span> m_global_pool;
  <span style="color:#fff;font-weight:bold">endfunction</span>

  static <span style="color:#fff;font-weight:bold">function</span> T get_global (KEY key);
    this_type gpool;
    gpool = get_global_pool(); 
    <span style="color:#fff;font-weight:bold">return</span> gpool.get(key);
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p>UVM also declares specialization with string type which is again singleton.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class uvm_object_string_pool #(<span style="color:#fff;font-weight:bold">type</span> T=uvm_object) extends uvm_pool #(<span style="color:#fff;font-weight:bold">string</span>,T);
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Irish tax calculation using Python Jupyter notebook</title>
            <link>/posts/2023/01/irish-tax-calculation-using-python-jupyter-notebook/</link>
            <pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/01/irish-tax-calculation-using-python-jupyter-notebook/</guid>
            <description>For few years now I have using google sheets to keep track of taxes and check payroll tax calculations (trust but verify, Right?). Anyway, I decided to move to Jupyter notebook/python combo to do the calculations. This is small code to calculate the Irish tax (PAYE, USC, PRSI). I have a bigger dashboard with ESPP, RSU and bonus but I thought it would be an overkill here.
Jupyter To start a Jupyter notebook:</description>
            <content type="html"><![CDATA[<p>For few years now I have using google sheets to keep track of taxes and check payroll tax calculations (trust but verify, Right?).
Anyway, I decided to move to Jupyter notebook/python combo to do the calculations. This is small code to calculate the Irish tax (PAYE, USC, PRSI). I have a bigger dashboard with ESPP, RSU and bonus but I thought it would be an overkill here.</p>
<h1 id="jupyter">Jupyter</h1>
<p>To start a Jupyter notebook:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">jupyter notebook
</code></pre></div><p>And we are good to go.</p>
<h1 id="tax-calculations">Tax calculations</h1>
<p>Full disclosure, I tried to make it generic as much as I can but I ignored PRSI credit  because it is 12 euro (I think).</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">from</span> collections <span style="color:#fff;font-weight:bold">import</span> namedtuple
Deduction = namedtuple(<span style="color:#0ff;font-weight:bold">&#34;Deduction&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;name value per is_paye is_usc is_prsi&#34;</span>)
Extra     = namedtuple(<span style="color:#0ff;font-weight:bold">&#34;Extra&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;name value&#34;</span>)

<span style="color:#007f7f"># info from tax cert</span>
tax_cred = <span style="color:#ff0;font-weight:bold">200</span>
paye_tax_band = [
    (<span style="color:#ff0;font-weight:bold">40000</span>, <span style="color:#ff0;font-weight:bold">0.2</span>), 
    (<span style="color:#ff0;font-weight:bold">0</span>,     <span style="color:#ff0;font-weight:bold">0.4</span>)
]
usc_tax_band = [
    (<span style="color:#ff0;font-weight:bold">12012</span>,<span style="color:#ff0;font-weight:bold">0.005</span>),
    (<span style="color:#ff0;font-weight:bold">10908</span>,<span style="color:#ff0;font-weight:bold">0.02</span>),
    (<span style="color:#ff0;font-weight:bold">47124</span>,<span style="color:#ff0;font-weight:bold">0.045</span>),
    (<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">0.08</span>)
]
prsi_tax_band = <span style="color:#ff0;font-weight:bold">0.04</span>

<span style="color:#007f7f"># Info from payslip</span>
gross_yearly = <span style="color:#ff0;font-weight:bold">0</span> <span style="color:#007f7f"># &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; GROSS before tax</span>
extra = [
        Extra(<span style="color:#0ff;font-weight:bold">&#34;BIK&#34;</span>, ),
]

ded = [
    Deduction(<span style="color:#0ff;font-weight:bold">&#34;DCP&#34;</span>,         <span style="color:#ff0;font-weight:bold">0</span>,      <span style="color:#ff0;font-weight:bold">.07</span>,  <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">1</span>),
    Deduction(<span style="color:#0ff;font-weight:bold">&#34;bus&#34;</span>,         <span style="color:#ff0;font-weight:bold">80</span>,      <span style="color:#ff0;font-weight:bold">0</span>,    <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0</span>),
    Deduction(<span style="color:#0ff;font-weight:bold">&#34;bike&#34;</span>,        <span style="color:#ff0;font-weight:bold">0</span>,      <span style="color:#ff0;font-weight:bold">0</span>,    <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0</span>),   
    Deduction(<span style="color:#0ff;font-weight:bold">&#34;ESPP&#34;</span>,        <span style="color:#ff0;font-weight:bold">0</span>,      <span style="color:#ff0;font-weight:bold">0</span>,    <span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">1</span>),    
]

<span style="color:#007f7f"># Calculations</span>
gross_monthly       = gross_yearly/<span style="color:#ff0;font-weight:bold">12</span>
gross_monthly_total = gross_monthly + <span style="color:#fff;font-weight:bold">sum</span>([x.value <span style="color:#fff;font-weight:bold">for</span> x in extra])

gross_monthly_paye  = gross_monthly_total - <span style="color:#fff;font-weight:bold">sum</span>([
    (x.value  + (x.per * gross_monthly)) <span style="color:#fff;font-weight:bold">if</span> x.is_paye==<span style="color:#ff0;font-weight:bold">0</span> <span style="color:#fff;font-weight:bold">else</span> <span style="color:#ff0;font-weight:bold">0</span>  <span style="color:#fff;font-weight:bold">for</span> x in ded
])

gross_monthly_usc   = gross_monthly_total - <span style="color:#fff;font-weight:bold">sum</span>([
    (x.value  + (x.per * gross_monthly)) <span style="color:#fff;font-weight:bold">if</span> x.is_usc==<span style="color:#ff0;font-weight:bold">0</span> <span style="color:#fff;font-weight:bold">else</span> <span style="color:#ff0;font-weight:bold">0</span>  <span style="color:#fff;font-weight:bold">for</span> x in ded
])

gross_monthly_prsi  = gross_monthly_total - <span style="color:#fff;font-weight:bold">sum</span>([
    (x.value  + (x.per * gross_monthly)) <span style="color:#fff;font-weight:bold">if</span> x.is_prsi==<span style="color:#ff0;font-weight:bold">0</span> <span style="color:#fff;font-weight:bold">else</span> <span style="color:#ff0;font-weight:bold">0</span>  <span style="color:#fff;font-weight:bold">for</span> x in ded
])

<span style="color:#fff;font-weight:bold">def</span> calc(g, band):
    tax = <span style="color:#ff0;font-weight:bold">0</span>
    <span style="color:#fff;font-weight:bold">for</span> (v, t) in band:
        v = v <span style="color:#fff;font-weight:bold">if</span> (g &gt;= v) <span style="color:#fff;font-weight:bold">else</span> (g - v)
        v = v <span style="color:#fff;font-weight:bold">if</span> (v!= <span style="color:#ff0;font-weight:bold">0</span>) <span style="color:#fff;font-weight:bold">else</span> g <span style="color:#007f7f"># Handle special case of last range</span>
        <span style="color:#fff;font-weight:bold">if</span> v &lt;= <span style="color:#ff0;font-weight:bold">0</span>:
            <span style="color:#fff;font-weight:bold">break</span>
        tax += v * t
        g = g - v
    <span style="color:#fff;font-weight:bold">return</span>  tax

tax_paye =  calc(  gross_monthly_paye * <span style="color:#ff0;font-weight:bold">12</span> ,paye_tax_band )/<span style="color:#ff0;font-weight:bold">12</span> - (tax_cred/<span style="color:#ff0;font-weight:bold">12</span>)
tax_usc = calc(  gross_monthly_usc * <span style="color:#ff0;font-weight:bold">12</span> ,usc_tax_band )/<span style="color:#ff0;font-weight:bold">12</span>
tax_prsi = prsi_tax_band * gross_monthly_prsi

tax  = <span style="color:#fff;font-weight:bold">round</span>(tax_prsi + tax_usc + tax_paye,<span style="color:#ff0;font-weight:bold">2</span>) 
net = <span style="color:#fff;font-weight:bold">round</span>(gross_monthly - tax - <span style="color:#fff;font-weight:bold">sum</span>([ (x.value  + (x.per * gross_monthly)) <span style="color:#fff;font-weight:bold">for</span> x in ded]), <span style="color:#ff0;font-weight:bold">2</span>)

<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;PAYE:</span><span style="color:#0ff;font-weight:bold">{</span>tax_paye<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">USC:</span><span style="color:#0ff;font-weight:bold">{</span>tax_usc<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">PRSI:</span><span style="color:#0ff;font-weight:bold">{</span>tax_prsi<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;net:</span><span style="color:#0ff;font-weight:bold">{</span>net<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM Internals - uvm_barrier</title>
            <link>/posts/2023/01/uvm-internals-uvm_barrier/</link>
            <pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/01/uvm-internals-uvm_barrier/</guid>
            <description>This post is about one of UVM synchronization. Well, we all use phases which is implicitly one way to synchronize tasks(build, connect, run). Anyway, barriers is not a new thing it is used a lot in multi-thread/kernel development.
The most import method is wait_for. The processes call it at the point where it wants other processes. In this example, both process will continue after 20 delay.
uvm_barrier b = new(&amp;#39;b_test&amp;#39; , 2); initial begin #10; b.</description>
            <content type="html"><![CDATA[<p>This post is about one of UVM synchronization. Well, we all use phases which is implicitly one way to synchronize tasks(build, connect, run). Anyway, barriers is not a new thing it is used a lot in multi-thread/kernel development.</p>
<p>The most import method is <code>wait_for</code>. The processes call it at the point where it wants other processes. In this example, both process will continue after <code>20</code> delay.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">uvm_barrier b = new(&#39;b_test&#39; , <span style="color:#ff0;font-weight:bold">2</span>);
<span style="color:#fff;font-weight:bold">initial</span> <span style="color:#fff;font-weight:bold">begin</span>
#<span style="color:#ff0;font-weight:bold">10</span>;
b.wait_for();
<span style="color:#fff;font-weight:bold">end</span>

<span style="color:#fff;font-weight:bold">initial</span> <span style="color:#fff;font-weight:bold">begin</span>
#<span style="color:#ff0;font-weight:bold">20</span>;
b.wait_for();
<span style="color:#fff;font-weight:bold">end</span>
</code></pre></div><p>Let&rsquo;s dig deeper into UVM implementation. Starting with <code>new</code>, It is important <code>threashold</code> is set there and some other init stuff happening there as well.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"> <span style="color:#fff;font-weight:bold">function</span> new (<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, <span style="color:#fff;font-weight:bold">int</span> threshold=<span style="color:#ff0;font-weight:bold">0</span>);
    uvm_event e;
    super.new(name);
    e = new({<span style="color:#0ff;font-weight:bold">&#34;barrier_&#34;</span>,name});
    this.threshold = threshold;
    m_event = e;
    num_waiters = <span style="color:#ff0;font-weight:bold">0</span>;
    auto_reset = <span style="color:#ff0;font-weight:bold">1</span>;
    at_threshold = <span style="color:#ff0;font-weight:bold">0</span>;
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p>Every waiter that calls <code>wait_for</code> increments <code>num_waiters</code> and calls for <code>wait_trigger</code>. Note there is 2 importnat cases here:</p>
<ul>
<li>num_waiters less than threshold, in the case, it will just wait on <code>m_event</code>.</li>
<li>The important case here where num_waiters &gt;= threshold, It will trigger other waiters with <code>m_trigger</code> and return.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  virtual <span style="color:#fff;font-weight:bold">task</span> wait_for();

    <span style="color:#fff;font-weight:bold">if</span> (at_threshold)
      <span style="color:#fff;font-weight:bold">return</span>;

    num_waiters++;

    <span style="color:#fff;font-weight:bold">if</span> (num_waiters &gt;= threshold) <span style="color:#fff;font-weight:bold">begin</span>
      <span style="color:#fff;font-weight:bold">if</span> (!auto_reset)
        at_threshold=<span style="color:#ff0;font-weight:bold">1</span>;
      m_trigger();
      <span style="color:#fff;font-weight:bold">return</span>;
    <span style="color:#fff;font-weight:bold">end</span>

    m_event.wait_trigger();

  <span style="color:#fff;font-weight:bold">endtask</span>
</code></pre></div><p><code>m_trigger</code> is simple enough. It will just trigger the even and reset the num_waiters to 0.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  local <span style="color:#fff;font-weight:bold">task</span> m_trigger();
    m_event.trigger();
    num_waiters=<span style="color:#ff0;font-weight:bold">0</span>;
    #<span style="color:#ff0;font-weight:bold">0</span>; <span style="color:#007f7f">//this process was last to wait; allow other procs to resume first
</span><span style="color:#007f7f"></span>  <span style="color:#fff;font-weight:bold">endtask</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>How to read network tunnel packets in verilog using VPI</title>
            <link>/posts/2023/01/how-to-read-network-tunnel-packets-in-verilog-using-vpi/</link>
            <pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/01/how-to-read-network-tunnel-packets-in-verilog-using-vpi/</guid>
            <description>In previous post, I went through example how to get raw IP packets instead of going to link/phy layer. So, in this post, I thought what if i have IP stack in verilog and i want to get actual IP packets from the interface instead of creating packets myself? why not?! It&amp;rsquo;s slow sunday after all.
So, the idea is using VPI to get the packets and pass it back to verilog.</description>
            <content type="html"><![CDATA[<p>In previous post, I went through example how to get raw IP packets instead of going to link/phy layer. So, in this post, I thought what if i have IP stack in verilog  and i want to get actual IP packets from the interface instead of creating packets myself? why not?! It&rsquo;s slow sunday after all.</p>
<p>So, the idea is using VPI to get the packets and pass it back to verilog. Simple, Right?</p>
<h1 id="setup">Setup</h1>
<p>we need to create the tunnel network interface first using the following command</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">
sudo ip tuntap add mode tun dev tun0
sudo ip addr add 10.0.3.0/24 dev tun0 
sudo ip link <span style="color:#fff;font-weight:bold">set</span> dev tun0 up

</code></pre></div><p>and in the same shell, we can start the ping to send something on the tunnel</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ping 10.0.3.50
</code></pre></div><h1 id="verilog-side">Verilog side</h1>
<p>On verilog side, it&rsquo;s pretty simple, just 2-d memory to hold bytes sent to tunnel interface.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">module</span> top();

<span style="color:#fff;font-weight:bold">reg</span> [<span style="color:#ff0;font-weight:bold">7</span>:<span style="color:#ff0;font-weight:bold">0</span>] mem [<span style="color:#ff0;font-weight:bold">1023</span>:<span style="color:#ff0;font-weight:bold">0</span>];

<span style="color:#fff;font-weight:bold">reg</span> [<span style="color:#ff0;font-weight:bold">31</span>:<span style="color:#ff0;font-weight:bold">0</span>] i;

<span style="color:#fff;font-weight:bold">initial</span> <span style="color:#fff;font-weight:bold">begin</span>
$read_tun(mem);
<span style="color:#fff;font-weight:bold">for</span> (i=<span style="color:#ff0;font-weight:bold">0</span>; i&lt; <span style="color:#ff0;font-weight:bold">100</span>;i++)  <span style="color:#fff;font-weight:bold">begin</span>
   <span style="color:#fff;font-weight:bold">$display</span>(<span style="color:#0ff;font-weight:bold">&#34;mem[%0d]=%0x&#34;</span>, i,  mem[i]);
<span style="color:#fff;font-weight:bold">end</span>
<span style="color:#fff;font-weight:bold">end</span>
<span style="color:#fff;font-weight:bold">endmodule</span>

</code></pre></div><h1 id="c-side">C side</h1>
<p>on C side, it&rsquo;s more complicated as i have to register the vpi task first in the bootstrap. Then when called i open up the tap device and read the buffer and use <code>vpi_put_value</code> to set it to buffer on verilog side.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&#34;vpi_user.h&#34;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;fcntl.h&gt;              /* O_RDWR */</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;string.h&gt;             /* memset(), memcpy() */</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;stdio.h&gt;              /* perror(), printf(), fprintf() */</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;stdlib.h&gt;             /* exit(), malloc(), free() */</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;sys/ioctl.h&gt;          /* ioctl() */</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;unistd.h&gt;             /* read(), close() */</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#007f7f">/* includes for struct ifreq, etc */</span>
<span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;sys/types.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;sys/socket.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;linux/if.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;linux/if_tun.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">int</span> tun_open(<span style="color:#fff;font-weight:bold">char</span> *devname)
{
    <span style="color:#fff;font-weight:bold">struct</span> ifreq ifr;
    <span style="color:#fff;font-weight:bold">int</span> fd, err;

    <span style="color:#fff;font-weight:bold">if</span> ((fd = open(<span style="color:#0ff;font-weight:bold">&#34;/dev/net/tun&#34;</span>, O_RDWR)) == -<span style="color:#ff0;font-weight:bold">1</span>) {
        perror(<span style="color:#0ff;font-weight:bold">&#34;open /dev/net/tun&#34;</span>);
        exit(<span style="color:#ff0;font-weight:bold">1</span>);
    }
    memset(&amp;ifr, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#fff;font-weight:bold">sizeof</span>(ifr));
    ifr.ifr_flags = IFF_TUN;
    strncpy(ifr.ifr_name, devname, IFNAMSIZ);   <span style="color:#007f7f">// devname = &#34;tun0&#34; or &#34;tun1&#34;, etc
</span><span style="color:#007f7f"></span>
    <span style="color:#007f7f">/* ioctl will use ifr.if_name as the name of TUN
</span><span style="color:#007f7f">     * interface to open: &#34;tun0&#34;, etc. */</span>
    <span style="color:#fff;font-weight:bold">if</span> ((err = ioctl(fd, TUNSETIFF, (<span style="color:#fff;font-weight:bold">void</span> *) &amp;ifr)) == -<span style="color:#ff0;font-weight:bold">1</span>) {
        perror(<span style="color:#0ff;font-weight:bold">&#34;ioctl TUNSETIFF&#34;</span>);
        close(fd);
        exit(<span style="color:#ff0;font-weight:bold">1</span>);
    }

    <span style="color:#007f7f">/* After the ioctl call the fd is &#34;connected&#34; to tun device specified
</span><span style="color:#007f7f">     * by devname (&#34;tun0&#34;, &#34;tun1&#34;, etc)*/</span>

    <span style="color:#fff;font-weight:bold">return</span> fd;
}

<span style="color:#fff;font-weight:bold">int</span> Compiletf(<span style="color:#fff;font-weight:bold">char</span> *user_data)
{
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}

<span style="color:#fff;font-weight:bold">int</span> Sizetf(<span style="color:#fff;font-weight:bold">char</span> *user_data)
{
    <span style="color:#fff;font-weight:bold">return</span> (<span style="color:#ff0;font-weight:bold">32</span>);
}



<span style="color:#fff;font-weight:bold">int</span> Calltf(<span style="color:#fff;font-weight:bold">char</span> *user_data)
{
    <span style="color:#fff;font-weight:bold">int</span> fd, nbytes;
    <span style="color:#fff;font-weight:bold">char</span> buf[<span style="color:#ff0;font-weight:bold">1600</span>];

    vpiHandle systfref, args_iter, argh;

    vpiHandle mem_handle, elem;
    s_vpi_value *value;
    <span style="color:#fff;font-weight:bold">int</span> i;

    systfref = vpi_handle(vpiSysTfCall, <span style="color:#fff;font-weight:bold">NULL</span>);
    args_iter = vpi_iterate(vpiArgument, systfref);

    mem_handle = vpi_scan(args_iter);

    printf(<span style="color:#0ff;font-weight:bold">&#34;%x</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>, mem_handle);

    vpi_printf(<span style="color:#0ff;font-weight:bold">&#34;Hello World From VPI bootstrap</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>);
    fd = tun_open(<span style="color:#0ff;font-weight:bold">&#34;tun0&#34;</span>);      <span style="color:#007f7f">/* devname = ifr.if_name = &#34;tun0&#34; */</span>
    printf(<span style="color:#0ff;font-weight:bold">&#34;Device tun0 opened</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>);
    <span style="color:#fff;font-weight:bold">while</span> (<span style="color:#ff0;font-weight:bold">1</span>) {
        nbytes = read(fd, buf, <span style="color:#fff;font-weight:bold">sizeof</span>(buf));
        printf(<span style="color:#0ff;font-weight:bold">&#34;Read %d bytes from tun0</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>, nbytes);
        <span style="color:#fff;font-weight:bold">for</span> (i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; nbytes; i++) {
            elem = vpi_handle_by_index(mem_handle, i);

            value = (s_vpi_value *) malloc(<span style="color:#fff;font-weight:bold">sizeof</span>(s_vpi_value));
            value-&gt;format = vpiIntVal;
            value-&gt;value.integer = buf[i];
            vpi_put_value(elem, value, <span style="color:#fff;font-weight:bold">NULL</span>, vpiForceFlag);
            free(value);
            printf(<span style="color:#0ff;font-weight:bold">&#34;value[%d]=%x</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>, i, buf[i]);
        }


        <span style="color:#fff;font-weight:bold">break</span>;
    }
}

<span style="color:#fff;font-weight:bold">void</span> vpi_entrypoint()
{
    s_vpi_systf_data tf_data;
    s_cb_data cb_data_s;
    s_vpi_time time_s;

    tf_data.type = vpiSysTask;
    tf_data.sysfunctype = vpiSysTask;
    tf_data.tfname = <span style="color:#0ff;font-weight:bold">&#34;$read_tun&#34;</span>;
    tf_data.calltf = Calltf;
    tf_data.compiletf = Compiletf;
    tf_data.sizetf = Sizetf;
    vpi_register_systf(&amp;tf_data);

}

<span style="color:#fff;font-weight:bold">void</span> (*vlog_startup_routines[])() = {
    vpi_entrypoint,
    <span style="color:#ff0;font-weight:bold">0</span>
};

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>WireGuard and Linux kernel</title>
            <link>/posts/2023/01/wireguard-and-linux-kernel/</link>
            <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
            
            <guid>/posts/2023/01/wireguard-and-linux-kernel/</guid>
            <description>This post is hello world into vpn technologies (which i am not an expert in), technologies like openVPN and WireGuard and other good stuff.
Back story Over the years, I mentained my own openVPN server on VPS machine and that setup was working for me. There were several advantages, well, it was cheap (actually free!) considering I was hosting my blog on that machine. But now that i am too old for sh!</description>
            <content type="html"><![CDATA[<p>This post is hello world into vpn technologies (which i am not an expert in), technologies like openVPN and WireGuard and other good stuff.</p>
<h1 id="back-story">Back story</h1>
<p>Over the years, I mentained my own openVPN server on VPS machine and that setup was working for me. There were several advantages, well, it was cheap (actually free!) considering I was hosting my blog on that machine. But now that i am too old for sh!t and gave up that machine, and After soe research, I got myself Nordvpn. So naturally, I wanted to check if they use openVPN or WireGuard. Let&rsquo;s see.</p>
<h1 id="wireguard">WireGuard</h1>
<p>A quick look at <code>ippadd</code> output show it&rsquo;s a tun network device called <code>nordlynx</code> which is an interesting name.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">6: nordlynx: &lt;POINTOPOINT,UP,LOWER_UP&gt; mtu <span style="color:#ff0;font-weight:bold">1420</span> qdisc noqueue state UNKNOWN group default qlen <span style="color:#ff0;font-weight:bold">1000</span>
</code></pre></div><p>Anyway, nordvpn supports says the following, I guess it WireGuard after all.</p>
<blockquote>
<p>NordLynx is NordVPN’s revolutionary technology built around the WireGuard® VPN protocol. It helps you connect to NordVPN servers faster and improves your VPN connection speeds without compromising security or privacy.</p>
</blockquote>
<p>from WireGuard website:</p>
<blockquote>
<p>WireGuard® is an extremely simple yet fast and modern VPN that utilizes state-of-the-art cryptography. It aims to be faster, simpler, leaner, and more useful than IPsec, while avoiding the massive headache.</p>
</blockquote>
<p>IPSEC as defined in <a href="https://www.ietf.org/rfc/rfc4301.txt">RFC4301</a> has been part of the kernel for long time but over the years, people complained about how bad it was. That&rsquo;s why things like openVPN projects started. At some point, they came up with WireGuard which started as off-tree kernel module and eventually got up-streamed into linux kernel.</p>
<p>The protocol sounds simple enough</p>
<p><img src="/wg.png" alt="Example image"></p>
<h1 id="wireguard-tools">WireGuard Tools</h1>
<p>The low level WireGuard configuration can be done through <code>wg</code>. The subcommands for <code>wg</code> are interesting as it can be used to configure the interface parameters.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">Available subcommands:
  show: Shows the current configuration and device information
  showconf: Shows the current configuration of a given WireGuard interface, <span style="color:#fff;font-weight:bold">for</span> use with <span style="color:#0ff;font-weight:bold">`</span>setconf<span style="color:#f00">&#39;</span>
  set: Change the current configuration, add peers, remove peers, or change peers
  setconf: Applies a configuration file to a WireGuard interface
  addconf: Appends a configuration file to a WireGuard interface
  syncconf: Synchronizes a configuration file to a WireGuard interface
  genkey: Generates a new private key and writes it to stdout
  genpsk: Generates a new preshared key and writes it to stdout
  pubkey: Reads a private key from stdin and writes a public key to stdout
</code></pre></div><p>I tried <code>wg</code> while i am connected, and i can see that Nordvpn already create the wireguard interface for us with the right parameters. For example, We can see the public and private(hidden though) keys. There is also endpoint(remote IP address for VPN server).</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo wg show
interface: nordlynx
  public key: ........
  private key: (hidden)
  listening port: ....
  fwmark: ....

peer: .... 
  endpoint: .....
  allowed ips: .....
</code></pre></div><h1 id="linux-kernel">Linux kernel</h1>
<p>As I mentioned, wireguard is part of the linux mainstream. So, Starting with module entry point where <code> wg_genetlink_init</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">
<span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">int</span> __init wg_mod_init(<span style="color:#fff;font-weight:bold">void</span>)
{
	<span style="color:#fff;font-weight:bold">int</span> ret;

	wg_noise_init();

	ret = wg_peer_init();
	<span style="color:#fff;font-weight:bold">if</span> (ret &lt; <span style="color:#ff0;font-weight:bold">0</span>)
		<span style="color:#fff;font-weight:bold">goto</span> err_peer;

	ret = wg_device_init();
	<span style="color:#fff;font-weight:bold">if</span> (ret &lt; <span style="color:#ff0;font-weight:bold">0</span>)
		<span style="color:#fff;font-weight:bold">goto</span> err_device;

	ret = wg_genetlink_init();
	<span style="color:#fff;font-weight:bold">if</span> (ret &lt; <span style="color:#ff0;font-weight:bold">0</span>)
		<span style="color:#fff;font-weight:bold">goto</span> err_netlink;

	pr_info(<span style="color:#0ff;font-weight:bold">&#34;WireGuard &#34;</span> WIREGUARD_VERSION <span style="color:#0ff;font-weight:bold">&#34; loaded. See www.wireguard.com for information.</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>);
	pr_info(<span style="color:#0ff;font-weight:bold">&#34;Copyright (C) 2015-2019 Jason A. Donenfeld &lt;Jason@zx2c4.com&gt;. All Rights Reserved.</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>);
</code></pre></div><p><code> wg_gentlink_init</code> is important because it registers the netlink interface with <code>genl_family</code>. <code>genl_family</code> is part of linux netlink interface.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">struct</span> genl_ops genl_ops[] = {
	{
		.cmd = WG_CMD_GET_DEVICE,
		.start = wg_get_device_start,
		.dumpit = wg_get_device_dump,
		.done = wg_get_device_done,
		.flags = GENL_UNS_ADMIN_PERM
	}, {
		.cmd = WG_CMD_SET_DEVICE,
		.doit = wg_set_device,
		.flags = GENL_UNS_ADMIN_PERM
	}
};

<span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">struct</span> genl_family genl_family __ro_after_init = {
	.ops = genl_ops,
	.n_ops = ARRAY_SIZE(genl_ops),
	.resv_start_op = WG_CMD_SET_DEVICE + <span style="color:#ff0;font-weight:bold">1</span>,
	.name = WG_GENL_NAME,
	.version = WG_GENL_VERSION,
	.maxattr = WGDEVICE_A_MAX,
	.module = THIS_MODULE,
	.policy = device_policy,
	.netnsok = <span style="color:#fff;font-weight:bold">true</span>
};

<span style="color:#fff;font-weight:bold">int</span> __init wg_genetlink_init(<span style="color:#fff;font-weight:bold">void</span>)
{
	<span style="color:#fff;font-weight:bold">return</span> genl_register_family(&amp;genl_family);
}

</code></pre></div><p>Let&rsquo;s look at <code>wg_get_device_start</code> which calls <code>lookup_interface</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">int</span> wg_get_device_start(<span style="color:#fff;font-weight:bold">struct</span> netlink_callback *cb)
{
	<span style="color:#fff;font-weight:bold">struct</span> wg_device *wg;

	wg = lookup_interface(genl_dumpit_info(cb)-&gt;attrs, cb-&gt;skb);
	<span style="color:#fff;font-weight:bold">if</span> (IS_ERR(wg))
		<span style="color:#fff;font-weight:bold">return</span> PTR_ERR(wg);
	DUMP_CTX(cb)-&gt;wg = wg;
	<span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}
</code></pre></div><p><code>loop_interface</code> search and finds the device and returns the <code>priv</code> structure out of <code>dev</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">struct</span> wg_device *lookup_interface(<span style="color:#fff;font-weight:bold">struct</span> nlattr **attrs,
					  <span style="color:#fff;font-weight:bold">struct</span> sk_buff *skb)
{
	<span style="color:#fff;font-weight:bold">struct</span> net_device *dev = <span style="color:#fff;font-weight:bold">NULL</span>;

	<span style="color:#fff;font-weight:bold">if</span> (!attrs[WGDEVICE_A_IFINDEX] == !attrs[WGDEVICE_A_IFNAME])
		<span style="color:#fff;font-weight:bold">return</span> ERR_PTR(-EBADR);
	<span style="color:#fff;font-weight:bold">if</span> (attrs[WGDEVICE_A_IFINDEX])
		dev = dev_get_by_index(sock_net(skb-&gt;sk),
				       nla_get_u32(attrs[WGDEVICE_A_IFINDEX]));
	<span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">if</span> (attrs[WGDEVICE_A_IFNAME])
		dev = dev_get_by_name(sock_net(skb-&gt;sk),
				      nla_data(attrs[WGDEVICE_A_IFNAME]));
	<span style="color:#fff;font-weight:bold">if</span> (!dev)
		<span style="color:#fff;font-weight:bold">return</span> ERR_PTR(-ENODEV);
	<span style="color:#fff;font-weight:bold">if</span> (!dev-&gt;rtnl_link_ops || !dev-&gt;rtnl_link_ops-&gt;kind ||
	    strcmp(dev-&gt;rtnl_link_ops-&gt;kind, KBUILD_MODNAME)) {
		dev_put(dev);
		<span style="color:#fff;font-weight:bold">return</span> ERR_PTR(-EOPNOTSUPP);
	}
	<span style="color:#fff;font-weight:bold">return</span> netdev_priv(dev);
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python package highlight: Easy progress bar - tqdm</title>
            <link>/posts/2022/12/python-package-highlight-easy-progress-bar-tqdm/</link>
            <pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/12/python-package-highlight-easy-progress-bar-tqdm/</guid>
            <description>tqdm is nice package to show progress bar for loops. tqdm() takes iterable and returns another iterable with updating the bar. This is the comments from the tqdm class in tqdm/std.py
  &amp;quot;&amp;quot;&amp;quot; Decorate an iterable object, returning an iterator which acts exactly like the original iterable, but prints a dynamically updating progressbar every time a value is requested. &amp;quot;&amp;quot;&amp;quot;   Quick example of tqdm iterable in a loop.</description>
            <content type="html"><![CDATA[<p><code>tqdm</code> is nice package to show progress bar for loops. <code>tqdm()</code> takes iterable and returns another iterable with updating the bar. This is the comments from the tqdm class in <code>tqdm/std.py</code></p>
<blockquote>
<pre><code> &quot;&quot;&quot;
Decorate an iterable object, returning an iterator which acts exactly
like the original iterable, but prints a dynamically updating
progressbar every time a value is requested.
&quot;&quot;&quot;
</code></pre>
</blockquote>
<p>Quick example of <code>tqdm</code> iterable in a loop.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">import</span> time
<span style="color:#fff;font-weight:bold">from</span> tqdm <span style="color:#fff;font-weight:bold">import</span> tqdm
<span style="color:#fff;font-weight:bold">for</span> i in tqdm(<span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">100</span>)):
    time.sleep(<span style="color:#ff0;font-weight:bold">.25</span>)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python package of the week: colorama</title>
            <link>/posts/2022/12/python-package-of-the-week-colorama/</link>
            <pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/12/python-package-of-the-week-colorama/</guid>
            <description>colorama is nice little package to add color to console messages. It make the logs look better where you can spot important messages quickly.
I usually add the argument to disable coloring if i need to.
from colorama import Fore,Style import config if not config.batch: class DummyFore: BLACK=RED=GREEN=YELLOW=BLUE=MAGENTA=CYAN=WHITE=RESET=&amp;#39;&amp;#39; class DummyStyle: RESET_ALL = &amp;#34;&amp;#34; saved_Fore, Fore = Fore, DummyFore saved_Style, Style = Style, DummyStyle Then use my package instead using of using colorama directly.</description>
            <content type="html"><![CDATA[<p>colorama is nice little package to add color to console messages. It make the logs look better where you can spot important messages quickly.</p>
<p>I usually add the argument to disable coloring if i need to.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">from</span> colorama <span style="color:#fff;font-weight:bold">import</span> Fore,Style
<span style="color:#fff;font-weight:bold">import</span> config

<span style="color:#fff;font-weight:bold">if</span> not config.batch:
    <span style="color:#fff;font-weight:bold">class</span> DummyFore:
        BLACK=RED=GREEN=YELLOW=BLUE=MAGENTA=CYAN=WHITE=RESET=<span style="color:#0ff;font-weight:bold">&#39;&#39;</span>
    <span style="color:#fff;font-weight:bold">class</span> DummyStyle:
        RESET_ALL = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>
    saved_Fore, Fore = Fore, DummyFore
    saved_Style, Style = Style, DummyStyle
</code></pre></div><p>Then use my package instead using of using colorama directly. It&rsquo;s also good idea to use colors combined with python built-in logging module.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">from</span> common.colors <span style="color:#fff;font-weight:bold">import</span> Fore,Style

logging.info(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">{</span>Fore.GREEN<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">PASS</span><span style="color:#0ff;font-weight:bold">{</span>Style.RESET_ALL<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Cocotb - writing toggle coverage collctor in 20 lines</title>
            <link>/posts/2022/12/cocotb-writing-toggle-coverage-collctor-in-20-lines/</link>
            <pubDate>Mon, 26 Dec 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/12/cocotb-writing-toggle-coverage-collctor-in-20-lines/</guid>
            <description>This post is about poor man&amp;rsquo;s toggle coverage collector written purely in cocotb. You may ask why? and i will simply reply by with &amp;ldquo;why not?!&amp;rdquo;.
First thing is getting design signals through cocotb infrastructure. I know that signals would be of type ModifiableObject so i use dir to everything and register monitors on signal objects.
for i in dir(tb.top): o = getattr(tb.top,i) if (isinstance(o, ModifiableObject)): S = SignalToggleCov(o) sigs.append(S) cocotb.</description>
            <content type="html"><![CDATA[<p>This post is about poor man&rsquo;s toggle coverage collector written purely in cocotb. You may ask why? and i will simply reply by with &ldquo;why not?!&rdquo;.</p>
<p>First thing is getting design signals through cocotb infrastructure. I know that signals would be of type <code>ModifiableObject</code> so i use <code>dir</code> to everything and register monitors on signal objects.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">     <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">dir</span>(tb.top):
         o = <span style="color:#fff;font-weight:bold">getattr</span>(tb.top,i)
         <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">isinstance</span>(o, ModifiableObject)):
             S = SignalToggleCov(o)
             sigs.append(S)
             cocotb.start_soon(S.signal_mon())
</code></pre></div><p>So, what is <code>SignalToggleCov</code>? it&rsquo;s just wrapper over cocotb handle with the <code>signal_mon</code> waits on signal change and compare old and new values. Not the most efficient but good enough for what i am doing.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> <span style="color:#fff;font-weight:bold">class</span> SignalToggleCov:
     <span style="color:#fff;font-weight:bold">def</span> __init__(self, s):
         self.sig = s
         self.toggled = [<span style="color:#ff0;font-weight:bold">0</span>] * <span style="color:#fff;font-weight:bold">len</span>(self.sig)
 
     <span style="color:#fff;font-weight:bold">async</span> <span style="color:#fff;font-weight:bold">def</span> signal_mon(self):
         <span style="color:#fff;font-weight:bold">while</span> <span style="color:#fff;font-weight:bold">True</span>:
             old_value = <span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">{</span>self.sig<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>
             <span style="color:#fff;font-weight:bold">await</span> Edge(self.sig)
             new_value =  <span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">{</span>self.sig<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>
             <span style="color:#007f7f">#print(f&#34;signal change: {(self.sig._fullname)}:{old_value} -&gt; {new_value}&#34;)</span>
             <span style="color:#fff;font-weight:bold">for</span> idx in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#fff;font-weight:bold">len</span>(self.sig)):
                 <span style="color:#fff;font-weight:bold">if</span> (new_value[idx] != old_value[idx]):
                     self.toggled[idx] = <span style="color:#ff0;font-weight:bold">1</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>SAWD - the fun version</title>
            <link>/posts/2022/12/sawd-the-fun-version/</link>
            <pubDate>Fri, 23 Dec 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/12/sawd-the-fun-version/</guid>
            <description>Disclaimer: I am writing this post while recovering from 3-day covid-y fever. So, there is a chance that memes to technical details ratio is alarmingly high. If you want the boring technical stuff, read the paper :^)
This post is about dvcon paper titled SAWD: Systemverilog Assertions waveform based development tool which was a weekend project that escalated quickly.
Problem statement Starting with problem statement, I will just use this xkcd joke that I am big fan of :)</description>
            <content type="html"><![CDATA[<p>Disclaimer: I am writing this post while recovering from 3-day covid-y fever. So, there is a chance that memes to technical details ratio is alarmingly high. If you want the boring technical stuff, read the paper :^)</p>
<p>This post is about dvcon paper titled <code>SAWD: Systemverilog Assertions waveform based development tool</code> which was a weekend project that escalated quickly.</p>
<h1 id="problem-statement">Problem statement</h1>
<p>Starting with problem statement, I will just use this xkcd joke that I am big fan of :)</p>
<p><img src="/perl_problems.png" alt="Example image"></p>
<p>This is problem is not about regex but i find my problem very similar. let me explain, I have one problem to verify this design, so i decide to write an assertion, now i have 2 problems. right?! right!?</p>
<p>we all agree that writing SVA is a problem on it&rsquo;s own because SVA are complicated and it takes long time to write, test and debug assertion expressions.</p>
<p>Usually i start by creating handcrafted directed test with many assignments and delays. Just to make sure sequences and properties compile and have a heartbeat. Then start running the assertion in the bigger design env. Usually the design env takes 3-4 hours to compile/run. So, if i find a problem in my assertion i have to turn to wait these 3-4 hours.</p>
<p>well, One can&rsquo;t simply write an assertion</p>
<p><img src="/One-Does-Not-Simply.jpg" alt="Example image"></p>
<h1 id="the-back-story">The back story</h1>
<p>anyway, I was bored one weekend last Feb and was looking for something to do. so, i went to a pub in the city to kill some time. While i was doodling on coaster, I had the idea.</p>
<p>if WAL can evaluate expressions on waveform, why can&rsquo;t i evaluate assertions on VCD?</p>
<p>So, i wrote down the architecture and data structures(mainly time-aware expression tree) on cocktail napkin :)</p>
<p>I started writing each BNF line from LRM into Lark EBNF. Honestly,this was most boring part and it took all night to get all the basic BNF for basic assertion.</p>
<p><img src="/that-escalated-quickly.jpg" alt="Example image"></p>
<p>once i have that implemented, the engine came next on Sunday. It was hacky and literally quick-and-dirty code that only understands the delay <code>##1</code> but it worked. And then supporting the rest of sequence and property operators became about shaping the  syntax tree and supporting that operator in evaluation engine.</p>
<h1 id="sawd">SAWD</h1>
<p>at this point, i am planning to open-source the SAWD but until then, this is high level explanation of architecture. Please, enjoy the ASCII art!</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">SVA -&gt; SVA Frontend -&gt; |
                       | -&gt; evaluation engine -&gt; | (reports and diagrams)
VCD -&gt;VCD Frontend  -&gt; | 

</code></pre></div><p>the SVA front is basically the front end of compiler. I used Lark to generate syntax tree and cool feature from lark, is that i can transformations to convert the syntax tree to AST(abstract syntax tree)</p>
<p>This is snippet of SVA_GRAMMER variable that is fed to lark. I copied a lot of SV LRM BNF into lark EBNF for this work.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">SVA_GRAMMAR = <span style="color:#0ff;font-weight:bold">r</span><span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;
</span><span style="color:#0ff;font-weight:bold">    //
</span><span style="color:#0ff;font-weight:bold">    // body
</span><span style="color:#0ff;font-weight:bold">    //
</span><span style="color:#0ff;font-weight:bold">    ?body: (checker_or_generate_item)*
</span><span style="color:#0ff;font-weight:bold">    checker_or_generate_item:   concurrent_assertion_item
</span><span style="color:#0ff;font-weight:bold">                                | assertion_item_declaration
</span><span style="color:#0ff;font-weight:bold">    //
</span><span style="color:#0ff;font-weight:bold">    // Assertion declarations
</span><span style="color:#0ff;font-weight:bold">    //
</span><span style="color:#0ff;font-weight:bold">    concurrent_assertion_item: [ block_identifier &#34;:&#34; ] concurrent_assertion_statement
</span><span style="color:#0ff;font-weight:bold">    concurrent_assertion_statement: assert_property_statement
</span><span style="color:#0ff;font-weight:bold">    assert_property_statement: &#34;assert&#34; &#34;property&#34; &#34;(&#34; property_spec &#34;)&#34; action_block
</span><span style="color:#0ff;font-weight:bold">    property_instance: ps_or_hierarchical_property_identifier [ &#34;(&#34; [ property_list_of_arguments ] &#34;)&#34; ]
</span><span style="color:#0ff;font-weight:bold">    property_list_of_arguments: [ property_actual_arg ] ( &#34;,&#34; [ property_actual_arg ] )*
</span><span style="color:#0ff;font-weight:bold">    property_actual_arg: property_expr
</span><span style="color:#0ff;font-weight:bold">                         | sequence_actual_arg
</span><span style="color:#0ff;font-weight:bold">    assertion_item_declaration: property_declaration
</span><span style="color:#0ff;font-weight:bold">                                | sequence_declaration
</span></code></pre></div><p>once that&rsquo;s done, transformations kick in to transform the syntax tree into nodes</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> property_expr_implication1_rule(self,args):
        seq, prop = args
        nodes = [seq,prop]
        ast = Node(NodeType.AST_IMPLICATION1, *nodes)
        <span style="color:#fff;font-weight:bold">return</span> 
</code></pre></div><p>well, here is part of AST node for reference</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> NodeType(Enum):
    AST_NONE            = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>
    AST_LOGIC_AND       = <span style="color:#0ff;font-weight:bold">&#34;&amp;&amp;&#34;</span>
    AST_LOGIC_OR        = <span style="color:#0ff;font-weight:bold">&#34;||&#34;</span>
    AST_LOGIC_NOT       = <span style="color:#0ff;font-weight:bold">&#34;!&#34;</span>
    AST_BIT_AND         = <span style="color:#0ff;font-weight:bold">&#34;&amp;&#34;</span>
    AST_BIT_OR          = <span style="color:#0ff;font-weight:bold">&#34;|&#34;</span>
    AST_BIT_NOT         = <span style="color:#0ff;font-weight:bold">&#34;~&#34;</span>
</code></pre></div><p>On the other side, I also wrote vcd frontend as wrapper around vcdvcd.I had fun implementing <code>edge</code>, <code>Posedge</code>, <code>Negedge</code> API so that the engine can call these API and not vcdvcd low-level API</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> Signal(vcdvcd.Signal):
    <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34; Custom Signal class &#34;&#34;&#34;</span>

    <span style="color:#fff;font-weight:bold">def</span> __init__(self,*args):
        <span style="color:#fff;font-weight:bold">super</span>().__init__(self, *args)
        self.marker = <span style="color:#ff0;font-weight:bold">0</span>

    <span style="color:#fff;font-weight:bold">def</span> __call__(self, time):
        <span style="color:#fff;font-weight:bold">return</span> self[time]

    @property
    <span style="color:#fff;font-weight:bold">def</span> timestamps(self):
	....

    @property
    <span style="color:#fff;font-weight:bold">def</span> values(self):
	....

    @property
    <span style="color:#fff;font-weight:bold">def</span> edges(self):
	....
</code></pre></div><p>The third big component is the engine. Although the engine is the most interesting part. It&rsquo;s very consistent and systemic code. I talked about time-aware expression tree a lot. It&rsquo;s time we see it. it&rsquo;s very simple rooted tree with timestamps for start and end of an expression.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> Node:
    <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34; &#34;&#34;&#34;</span>
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, type_,  *args, **kargs):
        self.type_      : NodeType  = type_
        self.children   :[Node]     = <span style="color:#fff;font-weight:bold">list</span>(args)
        self.ts         : Result    = <span style="color:#fff;font-weight:bold">None</span>
        self.evaluated : Result    = <span style="color:#fff;font-weight:bold">None</span>
        self.tag        : <span style="color:#fff;font-weight:bold">str</span>       = <span style="color:#0ff;font-weight:bold">&#39;&#39;</span>.join(random.choices(string.ascii_letters + string.digits, k=<span style="color:#ff0;font-weight:bold">8</span>))

</code></pre></div><p>Finally, here is the output of the tool for each evaluation. The diagram uses the time-aware expression tree to show how each expression (and children expressions) are evaluated.</p>
<p><img src="/graph2.gv.png" alt="Example image"></p>
]]></content>
        </item>
        
        <item>
            <title>TP-Link TL-WN722N adapter - Linux driver - Part1</title>
            <link>/posts/2022/12/tp-link-tl-wn722n-adapter-linux-driver-part1/</link>
            <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/12/tp-link-tl-wn722n-adapter-linux-driver-part1/</guid>
            <description>This is the first post in a series about TP-link TL-WN722N wifi adapter. it&amp;rsquo;s a cool little gadget that provides wifi over USB. This post is about usb registration from the linux driver.
Let&amp;rsquo;s dive into the deep end which is the USB driver.The usb interface would eventually register network device and cfg80211 devices for ioctl
starting with entry point in the driver
module_init(rtw_drv_entry); module_exit(rtw_drv_halt); rtw_drv_entry calls usb_register to register this driver (short and sweet).</description>
            <content type="html"><![CDATA[<p>This is the first post in a series about TP-link TL-WN722N wifi adapter. it&rsquo;s a cool little gadget that provides wifi over USB. This post is about usb registration from the linux driver.</p>
<p>Let&rsquo;s dive into the deep end which is the USB driver.The usb interface would eventually register network device and cfg80211 devices for ioctl</p>
<p>starting with entry point in the driver</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">module_init(rtw_drv_entry);
module_exit(rtw_drv_halt);
</code></pre></div><p><code>rtw_drv_entry</code> calls <code>usb_register</code> to register this driver (short and sweet).</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">int</span> __init rtw_drv_entry(<span style="color:#fff;font-weight:bold">void</span>)
{
	ret = usb_register(&amp;usb_drv.usbdrv);
</code></pre></div><p>Note that <code>usb_drv</code> is global inside that file and defined as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">struct</span> rtw_usb_drv {
	<span style="color:#fff;font-weight:bold">struct</span> usb_driver usbdrv;
	<span style="color:#fff;font-weight:bold">int</span> drv_registered;
	u8 hw_type;
};

<span style="color:#fff;font-weight:bold">struct</span> rtw_usb_drv usb_drv = {
	.usbdrv.name = (<span style="color:#fff;font-weight:bold">char</span> *)DRV_NAME,
	.usbdrv.probe = rtw_drv_init,
	.usbdrv.disconnect = rtw_dev_remove,
	.usbdrv.id_table = rtw_usb_id_tbl,
	.usbdrv.suspend =  rtw_suspend,
	.usbdrv.resume = rtw_resume,
</code></pre></div><p>Well, that was easy! not so fast.  This is just the registration the usb ops that USB core will call to probe the devices.</p>
<p>in <code>rtw_drv_init</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">	<span style="color:#fff;font-weight:bold">if</span> (rtw_os_ndevs_init(dvobj) != _SUCCESS)
		<span style="color:#fff;font-weight:bold">goto</span> free_if_vir;
</code></pre></div><p><code>rtw_os_ndevs_init</code> is important beause it has import init methods <code>rtw_os_ndevs_register</code> and <code>rtw_os_ndevs_alloc</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">	<span style="color:#fff;font-weight:bold">if</span> (rtw_os_ndevs_alloc(dvobj) != _SUCCESS)
		<span style="color:#fff;font-weight:bold">goto</span> exit;

	<span style="color:#fff;font-weight:bold">if</span> (rtw_os_ndevs_register(dvobj) != _SUCCESS)
		<span style="color:#fff;font-weight:bold">goto</span> os_ndevs_free;
</code></pre></div><p>in <code>rtw_os_ndevs_alloc</code>, there is <code>rtw_os_ndev_alloc</code> called</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">status = rtw_os_ndev_alloc(adapter);
</code></pre></div><p>in <code>rtw_os_ndev_alloc</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">ndev = rtw_init_netdev(adapter);
</code></pre></div><p>in <code>rtw_init_netdev</code>, <code>rtw_hook_if_ops</code> is called.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">rtw_hook_if_ops(pnetdev);
</code></pre></div><p>in <code>rtw_hook_if_ops</code> the device ops are assigned.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">void</span> rtw_hook_if_ops(<span style="color:#fff;font-weight:bold">struct</span> net_device *ndev)
{
<span style="color:#0f0;font-weight:bold">#if (LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2, 6, 29))
</span><span style="color:#0f0;font-weight:bold"></span>	ndev-&gt;netdev_ops = &amp;rtw_netdev_ops;
<span style="color:#0f0;font-weight:bold">#else
</span><span style="color:#0f0;font-weight:bold"></span>	ndev-&gt;init = rtw_ndev_init;
	ndev-&gt;uninit = rtw_ndev_uninit;
	ndev-&gt;open = netdev_open;
	ndev-&gt;stop = netdev_close;
	ndev-&gt;hard_start_xmit = rtw_xmit_entry;
	ndev-&gt;set_mac_address = rtw_net_set_mac_address;
	ndev-&gt;get_stats = rtw_net_get_stats;
	ndev-&gt;do_ioctl = rtw_ioctl;
<span style="color:#0f0;font-weight:bold">#endif
</span><span style="color:#0f0;font-weight:bold"></span>}
</code></pre></div><p>and <code>rtw_netdev_ops</code> defines the net device ops for rtw device</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">struct</span> net_device_ops rtw_netdev_ops = {
	.ndo_init = rtw_ndev_init,
	.ndo_uninit = rtw_ndev_uninit,
	.ndo_open = netdev_open,
	.ndo_stop = netdev_close,
	.ndo_start_xmit = rtw_xmit_entry,
</code></pre></div><p>in the second important call is <code>rtw_os_ndevs_register</code>, there is <code>rtw_os_ndev_register</code> called</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">	<span style="color:#fff;font-weight:bold">if</span> (rtw_os_ndev_register(adapter, name) != _SUCCESS)
</code></pre></div><p>in <code>rtw_os_ndev_register</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">	<span style="color:#fff;font-weight:bold">if</span> (rtnl_lock_needed)
		ret = (register_netdev(ndev) == <span style="color:#ff0;font-weight:bold">0</span>) ? _SUCCESS : _FAIL;
	<span style="color:#fff;font-weight:bold">else</span>
		ret = (register_netdevice(ndev) == <span style="color:#ff0;font-weight:bold">0</span>) ? _SUCCESS : _FAIL;

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>DWARF primer for fun and fun</title>
            <link>/posts/2022/12/dwarf-primer-for-fun-and-fun/</link>
            <pubDate>Sat, 10 Dec 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/12/dwarf-primer-for-fun-and-fun/</guid>
            <description>If you used GDB before, This means you used some kind of debuggin info in the ELF. one of the famous ones is DWARF. Wiki one-liner is
 DWARF is a widely used, standardized debugging data format. DWARF was originally designed along with Executable and Linkable Format (ELF), although it is independent of object file formats
 Dwarf information is divided into several ELF sections and described with Debugging Information Entry (DIE).</description>
            <content type="html"><![CDATA[<p>If you used GDB before, This means you used some kind of debuggin info in the ELF. one of the famous ones is  DWARF. Wiki one-liner is</p>
<blockquote>
<p>DWARF is a widely used, standardized debugging data format. DWARF was originally designed along with Executable and Linkable Format (ELF), although it is independent of object file formats</p>
</blockquote>
<p>Dwarf information is divided into several ELF sections and described with Debugging Information Entry (DIE).</p>
<p>Let&rsquo;s start with small example and commands to dump the dwarf DIE&rsquo;s.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">     <span style="color:#ff0;font-weight:bold">1</span>	
     <span style="color:#ff0;font-weight:bold">2</span>	<span style="color:#fff;font-weight:bold">void</span> main(){
     <span style="color:#ff0;font-weight:bold">3</span>		<span style="color:#fff;font-weight:bold">int</span> a,b;
     <span style="color:#ff0;font-weight:bold">4</span>	
     <span style="color:#ff0;font-weight:bold">5</span>		a = <span style="color:#ff0;font-weight:bold">1</span>;
     <span style="color:#ff0;font-weight:bold">6</span>		b = <span style="color:#ff0;font-weight:bold">2</span>;
     <span style="color:#ff0;font-weight:bold">7</span>		b = a + b;
     <span style="color:#ff0;font-weight:bold">8</span>	}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gcc -g main.c
dwarfdump a.out
</code></pre></div><h1 id="variables">Variables</h1>
<p>Variables and scopes DIE&rsquo;s are defined in <code>.debug_info</code> section of the ELF. The DIE tag for variable <code>a</code> is defines as <code>DW_TAG_variable</code> and <code>DW_AT_type</code> points to the DIE for base type <code>DW_TAG_base_type</code>.</p>
<pre tabindex="0"><code>.debug_info


 26 &lt; 2&gt;&lt;0x0000004b&gt;      DW_TAG_variable
 27                         DW_AT_name                  a
 28                         DW_AT_decl_file             0x00000001 /dwarf/main.c
 29                         DW_AT_decl_line             0x00000003
 30                         DW_AT_decl_column           0x00000006
 31                         DW_AT_type                  &lt;0x00000066&gt;
 32                         DW_AT_location              len 0x0002: 9168: DW_OP_fbreg -24
</code></pre><p><code>DW_TAG_base_type</code> DIE is defined at <code>0x66</code> in the same section.</p>
<pre tabindex="0"><code> 40 &lt; 1&gt;&lt;0x00000066&gt;    DW_TAG_base_type
 41                       DW_AT_byte_size             0x00000004
 42                       DW_AT_encoding              DW_ATE_signed
 43                       DW_AT_name                  int
</code></pre><h1 id="line-info-section">Line info section</h1>
<p>another useful section is <code>.debug_line</code>. each lines maps address in the elf to line number in the compilation unit scope in the original file.</p>
<pre tabindex="0"><code> 45 .debug_line: line number info for a single cu
 46 Source lines (from CU-DIE at .debug_info offset 0x0000000b):
 47 
 48             NS new statement, BB new basic block, ET end of text sequence
 49             PE prologue end, EB epilogue begin
 50             IS=val ISA number, DI=val discriminator value
 51 &lt;pc&gt;        [lno,col] NS BB ET PE EB IS= DI= uri: &quot;filepath&quot;
 52 0x00001129  [   2,12] NS uri: &quot;/Downloads/dwarf/main.c&quot;
 53 0x00001131  [   5, 4] NS
 54 0x00001138  [   6, 4] NS
 55 0x0000113f  [   7, 4] NS
 56 0x00001145  [   8, 1] NS
 57 0x00001148  [   8, 1] NS ET
</code></pre><p>And using <code>objdump</code>, we can see that address for instructions <code>0x1129</code> and <code>0x1131</code></p>
<pre tabindex="0"><code>    1129:	f3 0f 1e fa          	endbr64 
    112d:	55                   	push   %rbp
    112e:	48 89 e5             	mov    %rsp,%rbp
	int a,b;

	a = 1;
    1131:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
</code></pre>]]></content>
        </item>
        
        <item>
            <title>DVcon random thoughts - Multiple discovery!</title>
            <link>/posts/2022/12/dvcon-random-thoughts-multiple-discovery/</link>
            <pubDate>Fri, 09 Dec 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/12/dvcon-random-thoughts-multiple-discovery/</guid>
            <description>Have you ever read a paper or while talking to someone, and you think this is a good idea. It&amp;rsquo;s really good that you had it before.
During DVcon this year, I attended a lot of presentations and had great discussions with awesome people. It is really weird how we sometimes have the same idea at the same time. Like exactly the same idea!
Apparently, This has a name &amp;ldquo;Multiple discovery&amp;rdquo;:</description>
            <content type="html"><![CDATA[<p>Have you ever read a paper or while talking to someone, and you think this is a good idea. It&rsquo;s really good that you had it before.</p>
<p>During DVcon this year, I attended a lot of presentations and had great discussions with awesome people. It is really weird how we sometimes have the same idea at the same time. Like exactly the same idea!</p>
<p>Apparently, This has a name &ldquo;Multiple discovery&rdquo;:</p>
<blockquote>
<p>The concept of multiple discovery (also known as simultaneous invention) is the hypothesis that most scientific discoveries and inventions are made independently and more or less simultaneously by multiple scientists and inventors</p>
</blockquote>
<p>It kinda makes sense. As in our industry, we have the same education, face the same problems, work with the same tools and have the same goals. Basically, there are a lot of smart people trying to do the same thing.</p>
<p>The problem is that most of the time, we can&rsquo;t share all ideas or solutions we come up with(maybe only inside our organizations). That&rsquo;s why dvcon and other conferences are so important. At least, it&rsquo;s a chance to air out these ideas and hope and they make sense to someone else.</p>
<p>I wish there is some kind of AI-Based system where I can write an idea anonymously and the system tells me if someone else has the same idea and we all can work on the idea. Any chance anyone has the same idea?!</p>
]]></content>
        </item>
        
        <item>
            <title>Python: bisect</title>
            <link>/posts/2022/11/python-bisect/</link>
            <pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/11/python-bisect/</guid>
            <description>bisect_left is documented by link. Basically, it returns the index to of sorted list to keep the list sorted.
 bisect.bisect_left(a, x, lo=0, hi=len(a), *, key=None) Locate the insertion point for x in a to maintain sorted order. The parameters lo and hi may be used to specify a subset of the list which should be considered; by default the entire list is used. If x is already present in a, the insertion point will be before (to the left of) any existing entries.</description>
            <content type="html"><![CDATA[<p><code>bisect_left</code> is documented by <a href="https://docs.python.org/3/library/bisect.html">link</a>. Basically, it returns the index to of sorted list to keep the list sorted.</p>
<blockquote>
<p>bisect.bisect_left(a, x, lo=0, hi=len(a), *, key=None)
Locate the insertion point for x in a to maintain sorted order. The parameters lo and hi may be used to specify a subset of the list which should be considered; by default the entire list is used. If x is already present in a, the insertion point will be before (to the left of) any existing entries. The return value is suitable for use as the first parameter to list.insert() assuming that a is already sorted.</p>
</blockquote>
<p>Well, bisect_right is the same but puts the duplicate element to the right.</p>
<blockquote>
<p>bisect.bisect_right(a, x, lo=0, hi=len(a), *, key=None)
bisect.bisect(a, x, lo=0, hi=len(a), *, key=None)
Similar to bisect_left(), but returns an insertion point which comes after (to the right of) any existing entries of x in a.</p>
</blockquote>
<p>Small and quick example of <code>bisect_right</code> and <code>bisect_left</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">In [7]: bisect.bisect_right([2,4,6,8], 6)
Out[7]: <span style="color:#ff0;font-weight:bold">3</span>

In [8]: bisect.bisect_left([2,4,6,8], 6)
Out[8]: <span style="color:#ff0;font-weight:bold">2</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>force-riscv hello world</title>
            <link>/posts/2022/11/force-riscv-hello-world/</link>
            <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/11/force-riscv-hello-world/</guid>
            <description>This post is force-riscv which is framework to generate random sequences of riscv instructions. I still need to dig deeper into the docs/code to understand the full feature list, but it seems very powerful with option to constraint the generation.
Building Building force-riscv as simple as calling make
git clone https://github.com/openhwgroup/force-riscv cd force-riscv source setenv.bash make Smoke test In README.md, A smoke test is mentioned as first example to run</description>
            <content type="html"><![CDATA[<p>This post is <a href="https://github.com/openhwgroup/force-riscv">force-riscv</a> which is framework to generate random sequences of riscv instructions. I still need to dig deeper into the docs/code to understand the full feature list, but it seems very powerful with option to constraint the generation.</p>
<h1 id="building">Building</h1>
<p>Building force-riscv as simple as calling make</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://github.com/openhwgroup/force-riscv
<span style="color:#fff;font-weight:bold">cd</span> force-riscv
<span style="color:#fff;font-weight:bold">source</span> setenv.bash
make
</code></pre></div><h1 id="smoke-test">Smoke test</h1>
<p>In <code>README.md</code>, A smoke test is mentioned as first example to run</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mkdir tmp &amp;&amp; <span style="color:#fff;font-weight:bold">cd</span> tmp
./../bin/friscv -t ../utils/smoke/test_force.py
</code></pre></div><p>In <code>test_force.py</code>,   <code>MainSequence</code> is defined and set to <code>MainSequenceClass</code> which seems like hooks the framework provided to customize the randomization.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">from</span> riscv.EnvRISCV <span style="color:#fff;font-weight:bold">import</span> EnvRISCV
<span style="color:#fff;font-weight:bold">from</span> riscv.GenThreadRISCV <span style="color:#fff;font-weight:bold">import</span> GenThreadRISCV
<span style="color:#fff;font-weight:bold">from</span> base.Sequence <span style="color:#fff;font-weight:bold">import</span> Sequence


<span style="color:#fff;font-weight:bold">class</span> MainSequence(Sequence):
    <span style="color:#fff;font-weight:bold">def</span> generate(self, **kargs):
        self.genInstruction(<span style="color:#0ff;font-weight:bold">&#34;ADD##RISCV&#34;</span>)
        self.genInstruction(<span style="color:#0ff;font-weight:bold">&#34;SRA##RISCV&#34;</span>)


<span style="color:#007f7f">#  Points to the MainSequence defined in this file</span>
MainSequenceClass = MainSequence

<span style="color:#007f7f">#  Using GenThreadRISCV by default, can be overriden with extended classes</span>
GenThreadClass = GenThreadRISCV

<span style="color:#007f7f">#  Using EnvRISCV by default, can be overriden with extended classes</span>
EnvClass = EnvRISCV
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Levenshtein similarity matrix and Affinity Propagation clustering</title>
            <link>/posts/2022/11/levenshtein-similarity-matrix-and-affinity-propagation-clustering/</link>
            <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/11/levenshtein-similarity-matrix-and-affinity-propagation-clustering/</guid>
            <description>This post is a breakdown of the code in link which uses levenshtein and affinity propagation to cluster string list.
In previous post, I wrote simple levenshtein implementation to calculate the similarity between strings. And it turns out to be a good metric for clustering. Basically, affinity propagation and distance similarity matrix is match made in heaven.
distance.levenshtein is called with each word in the wordlist to calculate the distance.</description>
            <content type="html"><![CDATA[<p>This post is a breakdown of the code in <a href="https://stats.stackexchange.com/questions/123060/clustering-a-long-list-of-strings-words-into-similarity-groups">link</a> which uses levenshtein and affinity propagation to cluster string list.</p>
<p>In previous post, I wrote simple levenshtein implementation to calculate the similarity between strings. And it turns out to be a good metric for clustering. Basically, affinity propagation and distance similarity matrix is match made in heaven.</p>
<p><code>distance.levenshtein</code> is called with each word in the wordlist to calculate the distance.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">lev_similarity = -<span style="color:#ff0;font-weight:bold">1</span>*np.array([[distance.levenshtein(w1,w2) <span style="color:#fff;font-weight:bold">for</span> w1 in words] <span style="color:#fff;font-weight:bold">for</span> w2 in words])
</code></pre></div><p>And calling <code>AffinityPropagation</code> from <code>sklearn.cluster</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">affprop = AffinityPropagation(affinity=<span style="color:#0ff;font-weight:bold">&#34;precomputed&#34;</span>, damping=<span style="color:#ff0;font-weight:bold">0.5</span>)
affprop.fit(lev_similarity)
</code></pre></div><p>The full example</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">import</span> distance
<span style="color:#fff;font-weight:bold">import</span> numpy <span style="color:#fff;font-weight:bold">as</span> np
<span style="color:#fff;font-weight:bold">from</span> sklearn.cluster <span style="color:#fff;font-weight:bold">import</span> AffinityPropagation
<span style="color:#fff;font-weight:bold">from</span> matplotlib <span style="color:#fff;font-weight:bold">import</span> pyplot <span style="color:#fff;font-weight:bold">as</span> plt


words = <span style="color:#0ff;font-weight:bold">&#34;YOUR WORDS HERE HE FOOOO fo&#34;</span>.split(<span style="color:#0ff;font-weight:bold">&#34; &#34;</span>)
words = np.asarray(words)
lev_similarity = -<span style="color:#ff0;font-weight:bold">1</span>*np.array([[distance.levenshtein(w1,w2) <span style="color:#fff;font-weight:bold">for</span> w1 in words] <span style="color:#fff;font-weight:bold">for</span> w2 in words])

<span style="color:#fff;font-weight:bold">print</span>(lev_similarity)

affprop = AffinityPropagation(affinity=<span style="color:#0ff;font-weight:bold">&#34;precomputed&#34;</span>, damping=<span style="color:#ff0;font-weight:bold">0.5</span>)
affprop.fit(lev_similarity)

<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;affprop.labels_: </span><span style="color:#0ff;font-weight:bold">{</span>affprop.labels_<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;affprop.cluster_centers_indices_: </span><span style="color:#0ff;font-weight:bold">{</span>affprop.cluster_centers_indices_<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
<span style="color:#fff;font-weight:bold">for</span> cluster_id in np.unique(affprop.labels_):
    exemplar = words[affprop.cluster_centers_indices_[cluster_id]]
    cluster = np.unique(words[np.nonzero(affprop.labels_==cluster_id)])
    cluster_str = <span style="color:#0ff;font-weight:bold">&#34;, &#34;</span>.join(cluster)
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34; - *</span><span style="color:#0ff;font-weight:bold">%s</span><span style="color:#0ff;font-weight:bold">:* </span><span style="color:#0ff;font-weight:bold">%s</span><span style="color:#0ff;font-weight:bold">&#34;</span> % (exemplar, cluster_str))
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Forget Schrodinger&#39;s cat, Let me tell you about Schrodinger&#39;s visa</title>
            <link>/posts/2022/11/forget-schrodingers-cat-let-me-tell-you-about-schrodingers-visa/</link>
            <pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/11/forget-schrodingers-cat-let-me-tell-you-about-schrodingers-visa/</guid>
            <description>We all know about Schrodinger&amp;rsquo;s cat, Well, At least whatever I remember from that undergrad physics. It&amp;rsquo;s a thought experiment that goes as follows:
 He imagined a box containing a radioactive atom, a vial of poison and a cat. Governed by quantum rules, the radioactive atom can either decay or not at any given moment. There’s no telling when the moment will come, but when it does decay, it breaks the vial, releases the poison and kills the cat.</description>
            <content type="html"><![CDATA[<p>We all know about Schrodinger&rsquo;s cat, Well, At least whatever I remember from that undergrad physics. It&rsquo;s a thought experiment that goes as follows:</p>
<blockquote>
<p>He imagined a box containing a radioactive atom, a vial of poison and a cat. Governed by quantum rules, the radioactive atom can either decay or not at any given moment. There’s no telling when the moment will come, but when it does decay, it breaks the vial, releases the poison and kills the cat.</p>
</blockquote>
<p>I think the important part here, that until we open the box</p>
<blockquote>
<p>cat may be considered simultaneously both alive and dead</p>
</blockquote>
<p>Anyway, The reason I randomly mentioning the poor cat, is that we can replace the cat with visa and I will work the same. To elaborate, Big part of any visa application is waiting for passport to come back. And for some reason, they don&rsquo;t say if you got the visa or not. So, until I have the passport in my hands and flip through the pages, I simultaneously have and don&rsquo;t have a visa. Funny, Right? but it does feel great when I see that shiny stamp.</p>
]]></content>
        </item>
        
        <item>
            <title>PyQt5 hello world</title>
            <link>/posts/2022/11/pyqt5-hello-world/</link>
            <pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/11/pyqt5-hello-world/</guid>
            <description>GUI can be fun but choosing the right library for the job can be daunting task. I recently evaluated several libraries GTK,wxWidgets and other libraries. and finally settled on Qt. and PyQt5 is great because it is easy to integrate with python application.
This is hello world and explanation to create and populate PyQt5 widgets.
Starting with QApplication instantiated from QtWidgets. The typical PyQt5 skelton uses and class from QMainWindow. In this example, it&amp;rsquo;s called MainWindow.</description>
            <content type="html"><![CDATA[<p>GUI can be fun but choosing the right library for the job can be daunting task. I recently evaluated several libraries GTK,wxWidgets and other libraries. and finally settled on Qt. and PyQt5 is great because it is easy to integrate with python application.</p>
<p>This is hello world and explanation to create and populate PyQt5 widgets.</p>
<p>Starting with <code>QApplication</code> instantiated from QtWidgets. The typical PyQt5 skelton uses and class from <code>QMainWindow</code>. In this example, it&rsquo;s called <code>MainWindow</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    app = QtWidgets.QApplication(sys.argv)
    main = MainWindow()
    sys.exit(app.exec_())
</code></pre></div><p>First widget is the <code>QLabel</code> with a lot of text to show the scroll functionality. and add the layout and add layout and then add layout to wrapper widget.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">50</span>):
            <span style="color:#fff;font-weight:bold">object</span> = QLabel(<span style="color:#0ff;font-weight:bold">&#34;TextLabel&#34;</span>)
            self.vbox.addWidget(<span style="color:#fff;font-weight:bold">object</span>)

        self.widget.setLayout(self.vbox)
</code></pre></div><p>The next step is to configure the scroll widget and add the widget created above in the scroll window.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        self.scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scroll.setWidgetResizable(<span style="color:#fff;font-weight:bold">True</span>)
        self.scroll.setWidget(self.widget)
</code></pre></div><p>finally, we add the scroll widget the current main app object.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        self.setCentralWidget(self.scroll)
</code></pre></div><p>Finally, configure few parameters in the main object and call <code>show</code> and we are golden.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        self.setGeometry(<span style="color:#ff0;font-weight:bold">600</span>, <span style="color:#ff0;font-weight:bold">100</span>, <span style="color:#ff0;font-weight:bold">1000</span>, <span style="color:#ff0;font-weight:bold">900</span>)
        self.setWindowTitle(<span style="color:#0ff;font-weight:bold">&#39;Scroll Area Demonstration&#39;</span>)
        self.show()
</code></pre></div><h1 id="the-full-example">The full example</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">from</span> PyQt5.QtWidgets <span style="color:#fff;font-weight:bold">import</span> (QWidget, QSlider, QLineEdit, QLabel, QPushButton, QScrollArea,QApplication,
                             QHBoxLayout, QVBoxLayout, QMainWindow)
<span style="color:#fff;font-weight:bold">from</span> PyQt5.QtCore <span style="color:#fff;font-weight:bold">import</span> Qt, QSize
<span style="color:#fff;font-weight:bold">from</span> PyQt5 <span style="color:#fff;font-weight:bold">import</span> QtWidgets, uic
<span style="color:#fff;font-weight:bold">import</span> sys


<span style="color:#fff;font-weight:bold">class</span> MainWindow(QMainWindow):

    <span style="color:#fff;font-weight:bold">def</span> __init__(self):
        <span style="color:#fff;font-weight:bold">super</span>().__init__()
        self.initUI()

    <span style="color:#fff;font-weight:bold">def</span> initUI(self):
        self.scroll = QScrollArea()             <span style="color:#007f7f"># Scroll Area which contains the widgets, set as the centralWidget</span>
        self.widget = QWidget()                 <span style="color:#007f7f"># Widget that contains the collection of Vertical Box</span>
        self.vbox = QVBoxLayout()               <span style="color:#007f7f"># The Vertical Box that contains the Horizontal Boxes of  labels and buttons</span>

        <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">50</span>):
            <span style="color:#fff;font-weight:bold">object</span> = QLabel(<span style="color:#0ff;font-weight:bold">&#34;TextLabel&#34;</span>)
            self.vbox.addWidget(<span style="color:#fff;font-weight:bold">object</span>)

        self.widget.setLayout(self.vbox)

        <span style="color:#007f7f">#Scroll Area Properties</span>
        self.scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scroll.setWidgetResizable(<span style="color:#fff;font-weight:bold">True</span>)
        self.scroll.setWidget(self.widget)

        self.setCentralWidget(self.scroll)

        self.setGeometry(<span style="color:#ff0;font-weight:bold">600</span>, <span style="color:#ff0;font-weight:bold">100</span>, <span style="color:#ff0;font-weight:bold">1000</span>, <span style="color:#ff0;font-weight:bold">900</span>)
        self.setWindowTitle(<span style="color:#0ff;font-weight:bold">&#39;Scroll Area Demonstration&#39;</span>)
        self.show()

        <span style="color:#fff;font-weight:bold">return</span>

<span style="color:#fff;font-weight:bold">def</span> main():
    app = QtWidgets.QApplication(sys.argv)
    main = MainWindow()
    sys.exit(app.exec_())

<span style="color:#fff;font-weight:bold">if</span> __name__ == <span style="color:#0ff;font-weight:bold">&#39;__main__&#39;</span>:
    main()

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python: Higher order functions - reduce</title>
            <link>/posts/2022/11/python-higher-order-functions-reduce/</link>
            <pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/11/python-higher-order-functions-reduce/</guid>
            <description>This post is about reduce. It&amp;rsquo;s higher order function part of functool package.
The documentation describes it as
 Apply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value.
 combing lambda and reduce can be save a lot of time while processing bunch of lists. It recently saved me some time to and all expressions in list of objects.</description>
            <content type="html"><![CDATA[<p>This post is about reduce. It&rsquo;s higher order function part of <code>functool</code> package.</p>
<p>The documentation describes it as</p>
<blockquote>
<p>Apply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value.</p>
</blockquote>
<p>combing lambda and reduce can be save a lot of time while processing bunch of lists. It recently saved me some time to and all expressions in list of objects. I guess it can be with list comprehension or something. who doesn&rsquo;t love hight order functions! they just sound fancy.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">value = reduce(<span style="color:#fff;font-weight:bold">lambda</span> a, b: a and b, [node.value <span style="color:#fff;font-weight:bold">for</span> node in nodes])
</code></pre></div><p>This small full example:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#fff;font-weight:bold">from</span> functools <span style="color:#fff;font-weight:bold">import</span> reduce

x = [ <span style="color:#ff0;font-weight:bold">1</span> , <span style="color:#ff0;font-weight:bold">1</span> , <span style="color:#ff0;font-weight:bold">1</span> ]

r = reduce(<span style="color:#fff;font-weight:bold">lambda</span> a, b: a + b, x)

<span style="color:#fff;font-weight:bold">print</span>(r)

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Using aircrack to get wifi password</title>
            <link>/posts/2022/11/using-aircrack-to-get-wifi-password/</link>
            <pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/11/using-aircrack-to-get-wifi-password/</guid>
            <description>It&amp;rsquo;s Thursday evening and I can&amp;rsquo;t think of something to do. So, decided to write about cracking my own wifi using airmon/aircrack. I had a README written long time ago, so i had to clean it up and publish.
first, we need to know the network interface, lets call it intf. We need to switch the interface to monitoring mode (if hardware supports of course).
sudo airmon-ng start intf The above command will remove that interface and add another with adding mon at the end.</description>
            <content type="html"><![CDATA[<p>It&rsquo;s Thursday evening and I can&rsquo;t think of something to do. So, decided to write about cracking my own wifi using airmon/aircrack. I had a README written long time ago, so i had to clean it up and publish.</p>
<p>first, we need to know the network interface, lets call it intf. We need to switch the interface to monitoring mode (if hardware supports of course).</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo airmon-ng start intf
</code></pre></div><p>The above command will remove that interface and add another with adding <code>mon</code> at the end.  The next step, is scanning the SSID around us and know the MAC and CH for that SSID</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo airodump-ng  intfmon
</code></pre></div><p>once we have that, we start the capture with that SSID, CH and of course the interface.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo airodump-ng -c &lt;CH&gt; --bssid &lt;SSID&gt; -w dump  intfmon
</code></pre></div><p>At this point, we need to force clients to connect to that SSID so that airodump can capture the required packets</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo aireplay-ng -0  -a &lt;MAC&gt;  intfmon
</code></pre></div><p>At this point, the cap file will have packets, so we need to pass password file and that cap to get the password.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">aircrack-ng -w password.lst -b &lt;MAC&gt;  dump-01.cap
</code></pre></div><p>and if I am luck enough (I  because i added my password to the password.lst :)), <code>aircrack</code> will print the following message with the passowrd.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">KEY FOUND! [ XXXXXXXX ]
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Latex - The minimal paper abstract</title>
            <link>/posts/2022/11/latex-the-minimal-paper-abstract/</link>
            <pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/11/latex-the-minimal-paper-abstract/</guid>
            <description>I recently submitted a paper abstract but the conference didn&amp;rsquo;t specify the format for the abstract. Obviously, I didn&amp;rsquo;t use word, This is minimal template for paper abstract i used instead.
\documentclass[a4paper]{article} \usepackage{amsmath} \usepackage{amsfonts} \usepackage{amssymb} \usepackage{graphicx} \usepackage{float} \usepackage{caption} \usepackage{subcaption} \usepackage{listings} \usepackage{xcolor} \usepackage[margin=0.5in]{geometry} \usepackage{tikz} \usepackage{pdfpages} \begin{document} \pagenumbering{arabic} \Large \begin{center} Title\\ %\hspace{10pt}  \large Author$^1$ \\ %\hspace{10pt}  \small $^1$company\\ email \end{center} %\hspace{10pt}  \normalsize \section{Related Work} Test \end{document} </description>
            <content type="html"><![CDATA[<p>I recently submitted a paper abstract but the conference didn&rsquo;t specify the format for the abstract. Obviously, I didn&rsquo;t use word, This is minimal template for paper abstract i used instead.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-latex" data-lang="latex"><span style="color:#fff;font-weight:bold">\documentclass</span><span style="color:#007f7f">[a4paper]</span><span style="color:#fff;font-weight:bold">{</span>article<span style="color:#fff;font-weight:bold">}</span>

<span style="color:#fff;font-weight:bold">\usepackage</span><span style="color:#fff;font-weight:bold">{</span>amsmath<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\usepackage</span><span style="color:#fff;font-weight:bold">{</span>amsfonts<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\usepackage</span><span style="color:#fff;font-weight:bold">{</span>amssymb<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\usepackage</span><span style="color:#fff;font-weight:bold">{</span>graphicx<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\usepackage</span><span style="color:#fff;font-weight:bold">{</span>float<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\usepackage</span><span style="color:#fff;font-weight:bold">{</span>caption<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\usepackage</span><span style="color:#fff;font-weight:bold">{</span>subcaption<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\usepackage</span><span style="color:#fff;font-weight:bold">{</span>listings<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\usepackage</span><span style="color:#fff;font-weight:bold">{</span>xcolor<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\usepackage</span><span style="color:#007f7f">[margin=0.5in]</span><span style="color:#fff;font-weight:bold">{</span>geometry<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\usepackage</span><span style="color:#fff;font-weight:bold">{</span>tikz<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\usepackage</span><span style="color:#fff;font-weight:bold">{</span>pdfpages<span style="color:#fff;font-weight:bold">}</span>


<span style="color:#fff;font-weight:bold">\begin</span><span style="color:#fff;font-weight:bold">{</span>document<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\pagenumbering</span><span style="color:#fff;font-weight:bold">{</span>arabic<span style="color:#fff;font-weight:bold">}</span>

<span style="color:#fff;font-weight:bold">\Large</span>
<span style="color:#fff;font-weight:bold">\begin</span><span style="color:#fff;font-weight:bold">{</span>center<span style="color:#fff;font-weight:bold">}</span>
    Title<span style="color:#fff;font-weight:bold">\\</span>
    <span style="color:#007f7f">%\hspace{10pt}
</span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">\large</span>
    Author<span style="color:#0ff;font-weight:bold">$</span><span style="color:#fff;font-weight:bold">^</span><span style="color:#ff0;font-weight:bold">1</span><span style="color:#0ff;font-weight:bold">$</span> <span style="color:#fff;font-weight:bold">\\</span>
    <span style="color:#007f7f">%\hspace{10pt}
</span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">\small</span>
    <span style="color:#0ff;font-weight:bold">$</span><span style="color:#fff;font-weight:bold">^</span><span style="color:#ff0;font-weight:bold">1</span><span style="color:#0ff;font-weight:bold">$</span>company<span style="color:#fff;font-weight:bold">\\</span>
    email
<span style="color:#fff;font-weight:bold">\end</span><span style="color:#fff;font-weight:bold">{</span>center<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#007f7f">%\hspace{10pt}
</span><span style="color:#007f7f"></span>
<span style="color:#fff;font-weight:bold">\normalsize</span>

<span style="color:#fff;font-weight:bold">\section</span><span style="color:#fff;font-weight:bold">{</span>Related Work<span style="color:#fff;font-weight:bold">}</span>
Test

<span style="color:#fff;font-weight:bold">\end</span><span style="color:#fff;font-weight:bold">{</span>document<span style="color:#fff;font-weight:bold">}</span>

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python packages of the week: Jinja2 and pystache</title>
            <link>/posts/2022/11/python-packages-of-the-week-jinja2-and-pystache/</link>
            <pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/11/python-packages-of-the-week-jinja2-and-pystache/</guid>
            <description>Let&amp;rsquo;s start with an important question: what is the plural of Hello world? Is it Hello worlds? Anyway, I recently used pystache because I wanted something simpler than Jinja2. So, Thought it would be nice to compare small hello world for both engines.
pystache pystche is very simple to use. Just render and passing template and variable dict.
import pystache template = &amp;#34;Hello World and {{ person }}&amp;#34; template_txt = pystache.</description>
            <content type="html"><![CDATA[<p>Let&rsquo;s start with an important question: what is the plural of Hello world? Is it Hello worlds?
Anyway, I recently used pystache because I wanted something simpler than Jinja2. So, Thought it would be nice to compare small hello world for both engines.</p>
<h1 id="pystache">pystache</h1>
<p>pystche is very simple to use. Just <code>render</code> and passing template and variable dict.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">import</span> pystache
template = <span style="color:#0ff;font-weight:bold">&#34;Hello World and {{ person }}&#34;</span>
template_txt = pystache.render(template, {<span style="color:#0ff;font-weight:bold">&#39;person&#39;</span>: <span style="color:#0ff;font-weight:bold">&#39;foobar&#39;</span>})
<span style="color:#fff;font-weight:bold">print</span>(template_txt)
</code></pre></div><h1 id="jinja2">Jinja2</h1>
<p>Jinja2 is slightly more complicated even for text replacement. It gets even more complicated with template loaders.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">import</span> jinja2
environment = jinja2.Environment()
template = environment.from_string(<span style="color:#0ff;font-weight:bold">&#34;Hello world and {{ person }}&#34;</span>)
template_txt = template.render(person=<span style="color:#0ff;font-weight:bold">&#34;foobar&#34;</span>)
<span style="color:#fff;font-weight:bold">print</span>(template_txt)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Cocotb Internals - xunit Reporter</title>
            <link>/posts/2022/11/cocotb-internals-xunit-reporter/</link>
            <pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/11/cocotb-internals-xunit-reporter/</guid>
            <description>cocotb generates results.xml file which xunit format (XML). I didn&amp;rsquo;t look that long for standard xunit schema because it doesn&amp;rsquo;t seem to exist. So, I analysed the xunit_reporter.py instead. Well, I can&amp;rsquo;t sleep anyway. so why not?!
I have to start by saying &amp;ldquo;xml.. ugh!&amp;rdquo;&amp;hellip; writing the IPXACT parser made me hate xml forever.
The xunit report from simple_dff would look like this:
&amp;lt;testsuites name=&amp;#34;results&amp;#34;&amp;gt; &amp;lt;testsuite name=&amp;#34;all&amp;#34; package=&amp;#34;all&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;random_seed&amp;#34; value=&amp;#34;1667509785&amp;#34; /&amp;gt; &amp;lt;testcase name=&amp;#34;dff_simple_test&amp;#34; classname=&amp;#34;test_dff&amp;#34; file=&amp;#34;~/examples/simple_dff/test_dff.</description>
            <content type="html"><![CDATA[<p>cocotb generates <code>results.xml</code> file which xunit format (XML). I didn&rsquo;t look that long for standard xunit schema because it doesn&rsquo;t seem to exist. So, I analysed the <code>xunit_reporter.py</code> instead. Well, I can&rsquo;t sleep anyway. so why not?!</p>
<p>I have to start by saying &ldquo;xml.. ugh!&rdquo;&hellip; writing the IPXACT parser made me hate xml forever.</p>
<p>The xunit report from <code>simple_dff</code> would look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">&lt;testsuites name=<span style="color:#0ff;font-weight:bold">&#34;results&#34;</span>&gt;
  &lt;testsuite name=<span style="color:#0ff;font-weight:bold">&#34;all&#34;</span> package=<span style="color:#0ff;font-weight:bold">&#34;all&#34;</span>&gt;
    &lt;property name=<span style="color:#0ff;font-weight:bold">&#34;random_seed&#34;</span> value=<span style="color:#0ff;font-weight:bold">&#34;1667509785&#34;</span> /&gt;
    &lt;testcase name=<span style="color:#0ff;font-weight:bold">&#34;dff_simple_test&#34;</span> classname=<span style="color:#0ff;font-weight:bold">&#34;test_dff&#34;</span> file=<span style="color:#0ff;font-weight:bold">&#34;~/examples/simple_dff/test_dff.py&#34;</span> lineno=<span style="color:#0ff;font-weight:bold">&#34;20&#34;</span> time=<span style="color:#0ff;font-weight:bold">&#34;0.11331820487976074&#34;</span> sim_time_ns=<span style="color:#0ff;font-weight:bold">&#34;106000&#34;</span> ratio_time=<span style="color:#0ff;font-weight:bold">&#34;935418.9833175886&#34;</span> /&gt;
  &lt;/testsuite&gt;
&lt;/testsuites&gt;
</code></pre></div><p>the module uses the python standard xml to create tree and add nodes to it.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> <span style="color:#ff0;font-weight:bold">28</span> <span style="color:#fff;font-weight:bold">import</span> xml.etree.ElementTree <span style="color:#fff;font-weight:bold">as</span> ET
 <span style="color:#ff0;font-weight:bold">29</span> <span style="color:#fff;font-weight:bold">from</span> xml.etree.ElementTree <span style="color:#fff;font-weight:bold">import</span> Element, SubElement
</code></pre></div><p>I will  The root node is <code>testsuites</code> with attribute <code>name=results</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> <span style="color:#ff0;font-weight:bold">32</span> <span style="color:#fff;font-weight:bold">class</span> XUnitReporter:
 <span style="color:#ff0;font-weight:bold">33</span>     <span style="color:#fff;font-weight:bold">def</span> __init__(self, filename=<span style="color:#0ff;font-weight:bold">&#34;results.xml&#34;</span>):
 <span style="color:#ff0;font-weight:bold">34</span>         self.results = Element(<span style="color:#0ff;font-weight:bold">&#34;testsuites&#34;</span>, name=<span style="color:#0ff;font-weight:bold">&#34;results&#34;</span>)
 <span style="color:#ff0;font-weight:bold">35</span>         self.filename = filename
 <span style="color:#ff0;font-weight:bold">36</span>
 <span style="color:#ff0;font-weight:bold">37</span>     <span style="color:#fff;font-weight:bold">def</span> add_testsuite(self, **kwargs):
 <span style="color:#ff0;font-weight:bold">38</span>         self.last_testsuite = SubElement(self.results, <span style="color:#0ff;font-weight:bold">&#34;testsuite&#34;</span>, **kwargs)
 <span style="color:#ff0;font-weight:bold">39</span>         <span style="color:#fff;font-weight:bold">return</span> self.last_testsuite
 <span style="color:#ff0;font-weight:bold">40</span>
 <span style="color:#ff0;font-weight:bold">41</span>     <span style="color:#fff;font-weight:bold">def</span> add_testcase(self, testsuite=<span style="color:#fff;font-weight:bold">None</span>, **kwargs):
 <span style="color:#ff0;font-weight:bold">42</span>         <span style="color:#fff;font-weight:bold">if</span> testsuite is <span style="color:#fff;font-weight:bold">None</span>:
 <span style="color:#ff0;font-weight:bold">43</span>             testsuite = self.last_testsuite
 <span style="color:#ff0;font-weight:bold">44</span>         self.last_testcase = SubElement(testsuite, <span style="color:#0ff;font-weight:bold">&#34;testcase&#34;</span>, **kwargs)
 <span style="color:#ff0;font-weight:bold">45</span>         <span style="color:#fff;font-weight:bold">return</span> self.last_testcase
</code></pre></div><p>So,  in <code>regression.py</code>, tree is created and node for each package is created by calling <code>add_testsuite</code>, which sets <code>last_testsuite</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#ff0;font-weight:bold">113</span>         self.xunit = XUnitReporter(filename=results_filename)
<span style="color:#ff0;font-weight:bold">114</span>
<span style="color:#ff0;font-weight:bold">115</span>         self.xunit.add_testsuite(name=suite_name, package=package_name)
</code></pre></div><p>And to add another testcase to that testsuite, <code>add_testcase</code> is called with <code>kargs</code> to be added  attributes to that node</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#ff0;font-weight:bold">486</span>
<span style="color:#ff0;font-weight:bold">487</span>         self.xunit.add_testcase(
<span style="color:#ff0;font-weight:bold">488</span>             name=test.__qualname__,
<span style="color:#ff0;font-weight:bold">489</span>             classname=test.__module__,
<span style="color:#ff0;font-weight:bold">490</span>             file=inspect.getfile(test._func),
<span style="color:#ff0;font-weight:bold">491</span>             lineno=<span style="color:#fff;font-weight:bold">repr</span>(lineno),
<span style="color:#ff0;font-weight:bold">492</span>             time=<span style="color:#fff;font-weight:bold">repr</span>(wall_time_s),
<span style="color:#ff0;font-weight:bold">493</span>             sim_time_ns=<span style="color:#fff;font-weight:bold">repr</span>(sim_time_ns),
<span style="color:#ff0;font-weight:bold">494</span>             ratio_time=<span style="color:#fff;font-weight:bold">repr</span>(ratio_time),
<span style="color:#ff0;font-weight:bold">495</span>         )

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Cocotb Internals - wavedrom dumper</title>
            <link>/posts/2022/11/cocotb-internals-wavedrom-dumper/</link>
            <pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/11/cocotb-internals-wavedrom-dumper/</guid>
            <description>One of the things I love about reading open source is randomly finding unused features. There are many reasons a part of the code is not used, It could can experimental, untested or it is only there because the developer had too much fun writing it :) Anyway, It&amp;rsquo;s interesting when i find these bits..
In cocotb,I found built-in utility to generate wavedrom. It&amp;rsquo;s defined in cocotb/wavedrom.py. From comments, I modified dff_simple_test to dump dut.</description>
            <content type="html"><![CDATA[<p>One of the things I love about reading open source is randomly finding unused features. There are many reasons a part of the code is not used, It could can experimental, untested or it is only there because the developer had too much fun writing it :) Anyway, It&rsquo;s interesting when i find these bits..</p>
<p>In cocotb,I found built-in utility to generate wavedrom. It&rsquo;s defined in <code>cocotb/wavedrom.py</code>. From comments, I modified <code>dff_simple_test</code> to dump <code>dut.q</code> and <code>dut.d</code> sampled on <code>dut.clk</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">@cocotb.test()
<span style="color:#fff;font-weight:bold">async</span> <span style="color:#fff;font-weight:bold">def</span> dff_simple_test(dut):
    <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;Test that d propagates to q&#34;&#34;&#34;</span>

    <span style="color:#fff;font-weight:bold">with</span> trace(dut.d, dut.q,  clk=dut.clk) <span style="color:#fff;font-weight:bold">as</span> waves:
        clock = Clock(dut.clk, <span style="color:#ff0;font-weight:bold">10</span>, units=<span style="color:#0ff;font-weight:bold">&#34;us&#34;</span>)  <span style="color:#007f7f"># Create a 10us period clock on port clk</span>
        cocotb.start_soon(clock.start())  <span style="color:#007f7f"># Start the clock</span>

        <span style="color:#fff;font-weight:bold">await</span> FallingEdge(dut.clk)  <span style="color:#007f7f"># Synchronize with the clock</span>
        <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">10</span>):
            val = random.randint(<span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">1</span>)
            dut.d.value = val  <span style="color:#007f7f"># Assign the random value val to the input port d</span>
            <span style="color:#fff;font-weight:bold">await</span> FallingEdge(dut.clk)
            <span style="color:#fff;font-weight:bold">assert</span> dut.q.value == val, <span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;output q was incorrect on the </span><span style="color:#0ff;font-weight:bold">{</span>i<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">th cycle&#34;</span>

        <span style="color:#007f7f"># Dump to JSON format compatible with WaveDrom</span>
        j = waves.dumpj()
        <span style="color:#fff;font-weight:bold">print</span>(j)

</code></pre></div><p>And the generated wavedrom json is generated. Super cool, Right!</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">{
    <span style="color:#0ff;font-weight:bold">&#34;signal&#34;</span>: [
        {
            <span style="color:#0ff;font-weight:bold">&#34;name&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;clock&#34;</span>,
            <span style="color:#0ff;font-weight:bold">&#34;wave&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;p..........&#34;</span>
        },
        {
            <span style="color:#0ff;font-weight:bold">&#34;name&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;d&#34;</span>,
            <span style="color:#0ff;font-weight:bold">&#34;wave&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;z010.10.101&#34;</span>
        },
        {
            <span style="color:#0ff;font-weight:bold">&#34;name&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;q&#34;</span>,
            <span style="color:#0ff;font-weight:bold">&#34;wave&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;z010.10.101&#34;</span>
        }
    ]
}
</code></pre></div><h1 id="deep-dive">Deep dive</h1>
<p>The context manager registers coroutine to <code>_monitor</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#ff0;font-weight:bold">162</span>     <span style="color:#fff;font-weight:bold">def</span> __enter__(self):
<span style="color:#ff0;font-weight:bold">163</span>         <span style="color:#fff;font-weight:bold">for</span> sig in self._signals:
<span style="color:#ff0;font-weight:bold">164</span>             sig.clear()
<span style="color:#ff0;font-weight:bold">165</span>         self.enable()
<span style="color:#ff0;font-weight:bold">166</span>         self._coro = cocotb.start_soon(self._monitor())
<span style="color:#ff0;font-weight:bold">167</span>         <span style="color:#fff;font-weight:bold">return</span> self

</code></pre></div><p><code>_monitor</code>  awaits on <code>_clock</code> and <code>sample</code> each signal</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#ff0;font-weight:bold">139</span>
<span style="color:#ff0;font-weight:bold">140</span>     <span style="color:#fff;font-weight:bold">async</span> <span style="color:#fff;font-weight:bold">def</span> _monitor(self):
<span style="color:#ff0;font-weight:bold">141</span>         self._clocks = <span style="color:#ff0;font-weight:bold">0</span>
<span style="color:#ff0;font-weight:bold">142</span>         <span style="color:#fff;font-weight:bold">while</span> <span style="color:#fff;font-weight:bold">True</span>:
<span style="color:#ff0;font-weight:bold">143</span>             <span style="color:#fff;font-weight:bold">await</span> RisingEdge(self._clock)
<span style="color:#ff0;font-weight:bold">144</span>             <span style="color:#fff;font-weight:bold">await</span> ReadOnly()
<span style="color:#ff0;font-weight:bold">145</span>             <span style="color:#fff;font-weight:bold">if</span> not self._enabled:
<span style="color:#ff0;font-weight:bold">146</span>                 <span style="color:#fff;font-weight:bold">continue</span>
<span style="color:#ff0;font-weight:bold">147</span>             self._clocks += <span style="color:#ff0;font-weight:bold">1</span>
<span style="color:#ff0;font-weight:bold">148</span>             <span style="color:#fff;font-weight:bold">for</span> sig in self._signals:
<span style="color:#ff0;font-weight:bold">149</span>                 sig.sample()
<span style="color:#ff0;font-weight:bold">150</span>

</code></pre></div><p><code>sample</code> is defined in <code>Wavedrom</code> not <code>trace</code>. It detects the change of signal and sample it. If not changed, <code>.</code> is used to indicate no-change in wavedrom.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> <span style="color:#ff0;font-weight:bold">42</span>
 <span style="color:#ff0;font-weight:bold">43</span>     <span style="color:#fff;font-weight:bold">def</span> sample(self):
 <span style="color:#ff0;font-weight:bold">44</span>         <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;Record a sample of the signal value at this point in time.&#34;&#34;&#34;</span>
 <span style="color:#ff0;font-weight:bold">45</span>
 <span style="color:#ff0;font-weight:bold">46</span>         <span style="color:#fff;font-weight:bold">def</span> _lastval(samples):
 <span style="color:#ff0;font-weight:bold">47</span>             <span style="color:#fff;font-weight:bold">for</span> x in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#fff;font-weight:bold">len</span>(samples) - <span style="color:#ff0;font-weight:bold">1</span>, -<span style="color:#ff0;font-weight:bold">1</span>, -<span style="color:#ff0;font-weight:bold">1</span>):
 <span style="color:#ff0;font-weight:bold">48</span>                 <span style="color:#fff;font-weight:bold">if</span> samples[x] not in <span style="color:#0ff;font-weight:bold">&#34;=.|&#34;</span>:
 <span style="color:#ff0;font-weight:bold">49</span>                     <span style="color:#fff;font-weight:bold">return</span> samples[x]
 <span style="color:#ff0;font-weight:bold">50</span>             <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">None</span>
 <span style="color:#ff0;font-weight:bold">51</span>
 <span style="color:#ff0;font-weight:bold">52</span>         <span style="color:#fff;font-weight:bold">for</span> name, hdl in self._hdls.items():
 <span style="color:#ff0;font-weight:bold">53</span>             val = hdl.value
 <span style="color:#ff0;font-weight:bold">54</span>             valstr = val.binstr.lower()
 <span style="color:#ff0;font-weight:bold">55</span>
 <span style="color:#ff0;font-weight:bold">56</span>             <span style="color:#007f7f"># Decide what character to use to represent this signal</span>
 <span style="color:#ff0;font-weight:bold">57</span>             <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">len</span>(valstr) == <span style="color:#ff0;font-weight:bold">1</span>:
 <span style="color:#ff0;font-weight:bold">58</span>                 char = valstr
 <span style="color:#ff0;font-weight:bold">59</span>             <span style="color:#fff;font-weight:bold">elif</span> <span style="color:#0ff;font-weight:bold">&#34;x&#34;</span> in valstr:
 <span style="color:#ff0;font-weight:bold">60</span>                 char = <span style="color:#0ff;font-weight:bold">&#34;x&#34;</span>
 <span style="color:#ff0;font-weight:bold">61</span>             <span style="color:#fff;font-weight:bold">elif</span> <span style="color:#0ff;font-weight:bold">&#34;u&#34;</span> in valstr:
 <span style="color:#ff0;font-weight:bold">62</span>                 char = <span style="color:#0ff;font-weight:bold">&#34;u&#34;</span>
 <span style="color:#ff0;font-weight:bold">63</span>             <span style="color:#fff;font-weight:bold">elif</span> <span style="color:#0ff;font-weight:bold">&#34;z&#34;</span> in valstr:
 <span style="color:#ff0;font-weight:bold">64</span>                 char = <span style="color:#0ff;font-weight:bold">&#34;z&#34;</span>
 <span style="color:#ff0;font-weight:bold">65</span>             <span style="color:#fff;font-weight:bold">else</span>:
 <span style="color:#ff0;font-weight:bold">66</span>                 <span style="color:#fff;font-weight:bold">if</span> (
 <span style="color:#ff0;font-weight:bold">67</span>                     <span style="color:#fff;font-weight:bold">len</span>(self._data[name])
 <span style="color:#ff0;font-weight:bold">68</span>                     and self._data[name][-<span style="color:#ff0;font-weight:bold">1</span>] == <span style="color:#fff;font-weight:bold">int</span>(val)
 <span style="color:#ff0;font-weight:bold">69</span>                     and self._samples[name][-<span style="color:#ff0;font-weight:bold">1</span>] in <span style="color:#0ff;font-weight:bold">&#34;=.&#34;</span>
 <span style="color:#ff0;font-weight:bold">70</span>                 ):
 <span style="color:#ff0;font-weight:bold">71</span>                     char = <span style="color:#0ff;font-weight:bold">&#34;.&#34;</span>
 <span style="color:#ff0;font-weight:bold">72</span>                 <span style="color:#fff;font-weight:bold">else</span>:
 <span style="color:#ff0;font-weight:bold">73</span>                     char = <span style="color:#0ff;font-weight:bold">&#34;=&#34;</span>
 <span style="color:#ff0;font-weight:bold">74</span>                     self._data[name].append(<span style="color:#fff;font-weight:bold">int</span>(val))
 <span style="color:#ff0;font-weight:bold">75</span>
 <span style="color:#ff0;font-weight:bold">76</span>             <span style="color:#007f7f"># Detect if this is unchanged</span>
 <span style="color:#ff0;font-weight:bold">77</span>             <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">len</span>(valstr) == <span style="color:#ff0;font-weight:bold">1</span> and char == _lastval(self._samples[name]):
 <span style="color:#ff0;font-weight:bold">78</span>                 char = <span style="color:#0ff;font-weight:bold">&#34;.&#34;</span>
 <span style="color:#ff0;font-weight:bold">79</span>             self._samples[name].append(char)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>The gamification of unfinished side projects</title>
            <link>/posts/2022/10/the-gamification-of-unfinished-side-projects/</link>
            <pubDate>Sun, 30 Oct 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/10/the-gamification-of-unfinished-side-projects/</guid>
            <description>Probably, you are wondering what that title means and what Bojack Horseman is doing here. Actually, This started as a serious question.
How to finish something when the reason to do that is elusive?
The thing is I have this bad habit of starting things purely for intellectual curiosity,So, I ended up with hundreds of README, dozens of git repos, half-written paper abstracts and earmarked books lurking around for years. There is too much to read and learn with very little time to do it.</description>
            <content type="html"><![CDATA[<p><img src="/bojack.png" alt="Example image"></p>
<p>Probably, you are wondering what that title means and what Bojack Horseman is doing here. Actually, This started as a serious question.</p>
<p>How to finish something when the reason to do that is elusive?</p>
<p>The thing is I have this bad habit of starting things purely for intellectual curiosity,So, I ended up with hundreds of README, dozens of git repos, half-written paper abstracts and earmarked books lurking around for years. There is too much to read and learn with very little time to do it. Now, the problem how to finish all of these projects when there is no good reason to start them?</p>
<p>The solution was the 40-minutes laptop. Allow me to explain. I have this 6-years old laptop with really bad battery that lasts around 30-40 minutes. So, whenever I start a new thing, I make sure to break it down to 30-minute chunks and try to finish it before my laptop battery dies. That&rsquo;s why  my posts are full of typos because I have only 30 minutes to do the technical work and write the post. I just don&rsquo;t have the time to proof-read what I just wrote.  Same for books, I plan how many pages i can read in 30 minutes depending on the book. It varies really. Some books are harder to read than other.</p>
<p>This is the only thing that worked for me: break it down, make it a challenge and enjoy the small win (If I can!)</p>
]]></content>
        </item>
        
        <item>
            <title>Cocotb Internals - python runner</title>
            <link>/posts/2022/10/cocotb-internals-python-runner/</link>
            <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/10/cocotb-internals-python-runner/</guid>
            <description>In older post, I went through cocotb Makefile and i wished if there python runner. Well, I should have wished for something better because I found there is already a runner. I just didn&amp;rsquo;t see it :)
The runner is called as follows to build and run test
runner = get_runner(sim)() runner.build( verilog_sources=verilog_sources, vhdl_sources=vhdl_sources, toplevel=&amp;#34;dff&amp;#34; ) runner.test(toplevel=&amp;#34;dff&amp;#34;, py_module=&amp;#34;test_dff&amp;#34;) Build In runner.py, get_runner returns the runner depending on simulator string. In case of icarus, Icarus is used</description>
            <content type="html"><![CDATA[<p>In older post, I went through cocotb Makefile and i wished if there python runner. Well, I should have wished for something better because I found there is already a runner. I just didn&rsquo;t see it :)</p>
<p>The runner is called as follows to build and run test</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">      runner = get_runner(sim)()
      runner.build(
          verilog_sources=verilog_sources, vhdl_sources=vhdl_sources, toplevel=<span style="color:#0ff;font-weight:bold">&#34;dff&#34;</span>
      )

      runner.test(toplevel=<span style="color:#0ff;font-weight:bold">&#34;dff&#34;</span>, py_module=<span style="color:#0ff;font-weight:bold">&#34;test_dff&#34;</span>)
</code></pre></div><h1 id="build">Build</h1>
<p>In <code>runner.py</code>, <code>get_runner</code> returns the runner depending on simulator string. In case of icarus, <code>Icarus</code> is used</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    sim_name = simulator_name.lower()
    supported_sims: Dict[<span style="color:#fff;font-weight:bold">str</span>, Type[Simulator]] = {
        <span style="color:#0ff;font-weight:bold">&#34;icarus&#34;</span>: Icarus,
        <span style="color:#0ff;font-weight:bold">&#34;questa&#34;</span>: Questa,
        <span style="color:#0ff;font-weight:bold">&#34;ghdl&#34;</span>: Ghdl,
        <span style="color:#0ff;font-weight:bold">&#34;riviera&#34;</span>: Riviera,
        <span style="color:#0ff;font-weight:bold">&#34;verilator&#34;</span>: Verilator,
        <span style="color:#0ff;font-weight:bold">&#34;xcelium&#34;</span>: Xcelium,
        <span style="color:#007f7f"># TODO: &#34;vcs&#34;: Vcs,</span>
    }
    <span style="color:#fff;font-weight:bold">try</span>:
        <span style="color:#fff;font-weight:bold">return</span> supported_sims[sim_name]

</code></pre></div><p>and <code>Icarus</code> extends <code>Simulator</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> Icarus(Simulator):
</code></pre></div><p>To build the files, <code>runner.build</code> is called which is defined in <code>Simulator</code>. In <code>build()</code>, <code>build_command</code> is called.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        cmds = self.build_command()
</code></pre></div><p><code>build_command</code> is defined in <code>Icarus</code> to construct</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
    <span style="color:#fff;font-weight:bold">def</span> build_command(self) -&gt; List[Command]:

        <span style="color:#fff;font-weight:bold">if</span> self.vhdl_sources:
            <span style="color:#fff;font-weight:bold">raise</span> ValueError(<span style="color:#0ff;font-weight:bold">&#34;This simulator does not support VHDL&#34;</span>)

        cmd = []
        <span style="color:#fff;font-weight:bold">if</span> outdated(self.sim_file, self.verilog_sources) or self.always:

            cmd = [
                [<span style="color:#0ff;font-weight:bold">&#34;iverilog&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;-o&#34;</span>, self.sim_file, <span style="color:#0ff;font-weight:bold">&#34;-D&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;COCOTB_SIM=1&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;-g2012&#34;</span>]
                + self.get_define_options(self.defines)
                + self.get_include_options(self.includes)
                + self.get_parameter_options(self.parameters)
                + self.compile_args
                + self.verilog_sources
            ]

        <span style="color:#fff;font-weight:bold">else</span>:
            <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;WARNING: Skipping compilation:&#34;</span> + self.sim_file)

        <span style="color:#fff;font-weight:bold">return</span> cmd

</code></pre></div><h1 id="run">Run</h1>
<p><code>runner.test</code> is used to run the test which follows the same pattern as <code>build</code>. In this case, <code>test</code> calls <code>_test_command</code> after setting some log files</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        <span style="color:#fff;font-weight:bold">if</span> pytest_current_test:
            self.current_test_name = pytest_current_test.split(<span style="color:#0ff;font-weight:bold">&#34;:&#34;</span>)[-<span style="color:#ff0;font-weight:bold">1</span>].split(<span style="color:#0ff;font-weight:bold">&#34; &#34;</span>)[<span style="color:#ff0;font-weight:bold">0</span>]
            results_xml_name = <span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">{</span>self.current_test_name<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">.results.xml&#34;</span>
        <span style="color:#fff;font-weight:bold">else</span>:
            self.current_test_name = <span style="color:#0ff;font-weight:bold">&#34;test&#34;</span>
            results_xml_name = <span style="color:#0ff;font-weight:bold">&#34;results.xml&#34;</span>

        results_xml_file = os.getenv(
            <span style="color:#0ff;font-weight:bold">&#34;COCOTB_RESULTS_FILE&#34;</span>, os.path.join(self.build_dir, results_xml_name)
        )

        self.env[<span style="color:#0ff;font-weight:bold">&#34;COCOTB_RESULTS_FILE&#34;</span>] = results_xml_file

        <span style="color:#fff;font-weight:bold">with</span> suppress(OSError):
            os.remove(results_xml_file)

        cmds = self.test_command()

</code></pre></div><p>And <code>test_command</code> build  iverilog command to run the build executable</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> test_command(self) -&gt; List[Command]:

        <span style="color:#fff;font-weight:bold">return</span> [
            [
                <span style="color:#0ff;font-weight:bold">&#34;vvp&#34;</span>,
                <span style="color:#0ff;font-weight:bold">&#34;-M&#34;</span>,
                cocotb.config.libs_dir,
                <span style="color:#0ff;font-weight:bold">&#34;-m&#34;</span>,
                cocotb.config.lib_name(<span style="color:#0ff;font-weight:bold">&#34;vpi&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;icarus&#34;</span>),
            ]
            + self.sim_args
            + [self.sim_file]
            + self.plus_args
        ]

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>verilator - Hello World and Beyond</title>
            <link>/posts/2022/10/verilator-hello-world-and-beyond/</link>
            <pubDate>Sun, 23 Oct 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/10/verilator-hello-world-and-beyond/</guid>
            <description>verilator is, well, I will just paste the wiki one-liner here
 Verilator is a free and open-source software tool which converts Verilog to a cycle-accurate behavioral model in C++ or SystemC.
 Similar to iverilog, It compiles verilog to a different language but verilator generates C++ not the iverilog-specific commands.
Installation git clone https://github.com/verilator/verilator autoconf ./configure --prefix=`pwd`/build make install Or we can use the pre-built packages. Whatever easier!
Hello World I am using an example shipped with verilator.</description>
            <content type="html"><![CDATA[<p>verilator is, well, I will just paste the wiki one-liner here</p>
<blockquote>
<p>Verilator is a free and open-source software tool which converts Verilog to a cycle-accurate behavioral model in C++ or SystemC.</p>
</blockquote>
<p>Similar to iverilog, It compiles verilog to a different language but verilator generates C++ not the iverilog-specific commands.</p>
<h1 id="installation">Installation</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://github.com/verilator/verilator
autoconf
./configure --prefix=<span style="color:#0ff;font-weight:bold">`</span><span style="color:#fff;font-weight:bold">pwd</span><span style="color:#0ff;font-weight:bold">`</span>/build
make install
</code></pre></div><p>Or we can use the pre-built packages. Whatever easier!</p>
<h1 id="hello-world">Hello World</h1>
<p>I am using an example shipped with verilator. This is the command to build the <code>top.v</code> and <code>sim_main.cpp</code> and run the compiled executable.</p>
<pre tabindex="0"><code>verilator -cc --exe top.v sim_main.cpp
cd obj_dir
make -f Vtop.mk
./Vtop
</code></pre><p>And the world famous hello world!</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">Hello World!
- top.v:11: Verilog $finish
</code></pre></div><p>For <code>top.v</code>, it doesn&rsquo;t need much explanation here</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">module</span> top;
   <span style="color:#fff;font-weight:bold">initial</span> <span style="color:#fff;font-weight:bold">begin</span>
      <span style="color:#fff;font-weight:bold">$display</span>(<span style="color:#0ff;font-weight:bold">&#34;Hello World!&#34;</span>);
      <span style="color:#fff;font-weight:bold">$finish</span>;
   <span style="color:#fff;font-weight:bold">end</span>
<span style="color:#fff;font-weight:bold">endmodule</span>
</code></pre></div><p>The verilator runner uses the generated C++ for <code>top</code> module and calls <code>eval()</code> until end of simulation.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;verilated.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&#34;Vtop.h&#34;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">int</span> main(<span style="color:#fff;font-weight:bold">int</span> argc, <span style="color:#fff;font-weight:bold">char</span>** argv, <span style="color:#fff;font-weight:bold">char</span>** env) {

    Vtop* top = <span style="color:#fff;font-weight:bold">new</span> Vtop;

    <span style="color:#fff;font-weight:bold">while</span> (!Verilated::gotFinish()) {
        top-&gt;eval();
    }

    top-&gt;<span style="color:#fff;font-weight:bold">final</span>();
    <span style="color:#fff;font-weight:bold">delete</span> top;

    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}
</code></pre></div><h1 id="beyond-hello-world">Beyond Hello world</h1>
<p>Now that we got hello world out of the way, Let&rsquo;s dig deeper into <code>Vtop.cpp</code> and <code>Vtop.h</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">  VL_MODULE(Vtop) {
    <span style="color:#fff;font-weight:bold">public</span>:

      Vtop(<span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">char</span>* name=<span style="color:#0ff;font-weight:bold">&#34;TOP&#34;</span>);
      ~Vtop();

      <span style="color:#fff;font-weight:bold">void</span> eval();
</code></pre></div><p><code>VL_MODULE</code> make <code>Vtop</code> inherits <code>VerilatedModule</code> Which probably have common methods called in the Vtop model, I assume.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#define VL_MODULE(modname) class modname VL_NOT_FINAL : public VerilatedModule
</span></code></pre></div><p>Starting with <code>eval</code> (I removed commants and debug messages to keep it short), I will go through <code>_eval_initial_loop</code> because it is short and sweet and good enough to show how <code>initial</code> is evaluated.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"> <span style="color:#fff;font-weight:bold">void</span> Vtop::eval() {
     VL_DEBUG_IF(VL_DBG_MSGF(<span style="color:#0ff;font-weight:bold">&#34;+++++TOP Evaluate Vtop::eval</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>); );
     Vtop__Syms* __restrict vlSymsp = <span style="color:#fff;font-weight:bold">this</span>-&gt;__VlSymsp;  <span style="color:#007f7f">// Setup global symbol table
</span><span style="color:#007f7f"></span>     Vtop* __restrict vlTOPp VL_ATTR_UNUSED = vlSymsp-&gt;TOPp;

     <span style="color:#007f7f">// Initialize
</span><span style="color:#007f7f"></span>     <span style="color:#fff;font-weight:bold">if</span> (VL_UNLIKELY(!vlSymsp-&gt;__Vm_didInit)) _eval_initial_loop(vlSymsp);

...
...
</code></pre></div><p><code>Vtop::_eval_initial</code> calls <code>Vtop::_initial__TOP__1</code> and <code>Vtop::_initial__TOP__1</code> calls methods generated to print `Hello World!'.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#fff;font-weight:bold">void</span> Vtop::_initial__TOP__1(Vtop__Syms* __restrict vlSymsp) {
    VL_DEBUG_IF(VL_DBG_MSGF(<span style="color:#0ff;font-weight:bold">&#34;+    Vtop::_initial__TOP__1</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>); );
    Vtop* __restrict vlTOPp VL_ATTR_UNUSED = vlSymsp-&gt;TOPp;
    <span style="color:#007f7f">// Body
</span><span style="color:#007f7f"></span>    <span style="color:#007f7f">// INITIAL at top.v:9
</span><span style="color:#007f7f"></span>    VL_WRITEF(<span style="color:#0ff;font-weight:bold">&#34;Hello World!</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>);
    VL_FINISH_MT(<span style="color:#0ff;font-weight:bold">&#34;top.v&#34;</span>,<span style="color:#ff0;font-weight:bold">11</span>,<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>);
}

...
...

<span style="color:#fff;font-weight:bold">void</span> Vtop::_eval_initial(Vtop__Syms* __restrict vlSymsp) {
    VL_DEBUG_IF(VL_DBG_MSGF(<span style="color:#0ff;font-weight:bold">&#34;+    Vtop::_eval_initial</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>); );
    Vtop* __restrict vlTOPp VL_ATTR_UNUSED = vlSymsp-&gt;TOPp;
    <span style="color:#007f7f">// Body
</span><span style="color:#007f7f"></span>    vlTOPp-&gt;_initial__TOP__1(vlSymsp);
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Longest common sequence</title>
            <link>/posts/2022/10/longest-common-sequence/</link>
            <pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/10/longest-common-sequence/</guid>
            <description>In previous post, I wrote about Levenshtein distance which is a good distance metric for sequences with different length. This post is about Longest common sub sequence (LCS)
 The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).
 The thing about LCS is that the common subsequence is not consecutive positions within the sequences.</description>
            <content type="html"><![CDATA[<p>In previous post, I wrote about Levenshtein distance which is a good distance metric for sequences with different length. This post is about Longest common sub sequence (LCS)</p>
<blockquote>
<p>The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).</p>
</blockquote>
<p>The thing about LCS is that the common subsequence is not consecutive positions within the sequences.</p>
<p>The first step is calculating the length matrix for each element in both sequences. With each matching elements, the length increases. In case of non-matching elements, the value <code>max(C[i][j - 1], C[i - 1][j])</code> is used to repeat the max of last 2 lengths.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(m+<span style="color:#ff0;font-weight:bold">1</span>):
        <span style="color:#fff;font-weight:bold">for</span> j in <span style="color:#fff;font-weight:bold">range</span>(n+<span style="color:#ff0;font-weight:bold">1</span>):
            <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;debug </span><span style="color:#0ff;font-weight:bold">{</span>i<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>a[i - <span style="color:#ff0;font-weight:bold">1</span>]<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> </span><span style="color:#0ff;font-weight:bold">{</span>j<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>b[j - <span style="color:#ff0;font-weight:bold">1</span>]<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
            <span style="color:#fff;font-weight:bold">if</span>  i == <span style="color:#ff0;font-weight:bold">0</span> or j == <span style="color:#ff0;font-weight:bold">0</span>:
                C[i][j] = <span style="color:#ff0;font-weight:bold">0</span>
            <span style="color:#fff;font-weight:bold">elif</span> (a[i - <span style="color:#ff0;font-weight:bold">1</span>] == b[j - <span style="color:#ff0;font-weight:bold">1</span>]):
                C[i][j] = C[i - <span style="color:#ff0;font-weight:bold">1</span>][j - <span style="color:#ff0;font-weight:bold">1</span>] + <span style="color:#ff0;font-weight:bold">1</span>;
            <span style="color:#fff;font-weight:bold">else</span>:
                C[i][j] = <span style="color:#fff;font-weight:bold">max</span>(C[i][j - <span style="color:#ff0;font-weight:bold">1</span>], C[i - <span style="color:#ff0;font-weight:bold">1</span>][j])
</code></pre></div><p>To calculate the LCS, we start with the end of sequences and backtrace in length distance to either to first col and row(row0 or col0).</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    lcs = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>
    (i,j) = (m,n)
    <span style="color:#fff;font-weight:bold">while</span> i &gt; <span style="color:#ff0;font-weight:bold">0</span> and j &gt; <span style="color:#ff0;font-weight:bold">0</span>:
        <span style="color:#fff;font-weight:bold">if</span> a[i-<span style="color:#ff0;font-weight:bold">1</span>] == b[j-<span style="color:#ff0;font-weight:bold">1</span>]:
            <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;match </span><span style="color:#0ff;font-weight:bold">{</span>a[i-<span style="color:#ff0;font-weight:bold">1</span>]<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>i<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> </span><span style="color:#0ff;font-weight:bold">{</span>b[j-<span style="color:#ff0;font-weight:bold">1</span>]<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>j<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
            lcs += a[i-<span style="color:#ff0;font-weight:bold">1</span>]
            i -= <span style="color:#ff0;font-weight:bold">1</span>
            j -= <span style="color:#ff0;font-weight:bold">1</span>
        <span style="color:#fff;font-weight:bold">elif</span> C[i-<span style="color:#ff0;font-weight:bold">1</span>][j] &gt; C[i][j-<span style="color:#ff0;font-weight:bold">1</span>]:
            <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;C </span><span style="color:#0ff;font-weight:bold">{</span>a[i-<span style="color:#ff0;font-weight:bold">1</span>]<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>i<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>C[i-<span style="color:#ff0;font-weight:bold">1</span>][j]<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> </span><span style="color:#0ff;font-weight:bold">{</span>b[j-<span style="color:#ff0;font-weight:bold">1</span>]<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>j<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>C[i][j-<span style="color:#ff0;font-weight:bold">1</span>]<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
            i -= <span style="color:#ff0;font-weight:bold">1</span>
        <span style="color:#fff;font-weight:bold">else</span>:
            <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;else </span><span style="color:#0ff;font-weight:bold">{</span>a[i-<span style="color:#ff0;font-weight:bold">1</span>]<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>i<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> </span><span style="color:#0ff;font-weight:bold">{</span>b[j-<span style="color:#ff0;font-weight:bold">1</span>]<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>j<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
            j -= <span style="color:#ff0;font-weight:bold">1</span>
</code></pre></div><p>For completeness, The whole code is found here</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> lcs_simple(a, b):
    m = <span style="color:#fff;font-weight:bold">len</span>(a)
    n = <span style="color:#fff;font-weight:bold">len</span>(b)

    <span style="color:#007f7f"># Calculate lcs length</span>
    C = []

    <span style="color:#fff;font-weight:bold">for</span>  i in <span style="color:#fff;font-weight:bold">range</span>(m + <span style="color:#ff0;font-weight:bold">1</span>):
        C.append([<span style="color:#ff0;font-weight:bold">0</span>] * (n + <span style="color:#ff0;font-weight:bold">1</span>))


    <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(m+<span style="color:#ff0;font-weight:bold">1</span>):
        <span style="color:#fff;font-weight:bold">for</span> j in <span style="color:#fff;font-weight:bold">range</span>(n+<span style="color:#ff0;font-weight:bold">1</span>):
            <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;debug </span><span style="color:#0ff;font-weight:bold">{</span>i<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>a[i - <span style="color:#ff0;font-weight:bold">1</span>]<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> </span><span style="color:#0ff;font-weight:bold">{</span>j<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>b[j - <span style="color:#ff0;font-weight:bold">1</span>]<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
            <span style="color:#fff;font-weight:bold">if</span>  i == <span style="color:#ff0;font-weight:bold">0</span> or j == <span style="color:#ff0;font-weight:bold">0</span>:
                C[i][j] = <span style="color:#ff0;font-weight:bold">0</span>
            <span style="color:#fff;font-weight:bold">elif</span> (a[i - <span style="color:#ff0;font-weight:bold">1</span>] == b[j - <span style="color:#ff0;font-weight:bold">1</span>]):
                C[i][j] = C[i - <span style="color:#ff0;font-weight:bold">1</span>][j - <span style="color:#ff0;font-weight:bold">1</span>] + <span style="color:#ff0;font-weight:bold">1</span>;
            <span style="color:#fff;font-weight:bold">else</span>:
                C[i][j] = <span style="color:#fff;font-weight:bold">max</span>(C[i][j - <span style="color:#ff0;font-weight:bold">1</span>], C[i - <span style="color:#ff0;font-weight:bold">1</span>][j]);

    <span style="color:#007f7f"># get the max lcs</span>
    lcs = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>
    (i,j) = (m,n)
    <span style="color:#fff;font-weight:bold">while</span> i &gt; <span style="color:#ff0;font-weight:bold">0</span> and j &gt; <span style="color:#ff0;font-weight:bold">0</span>:
        <span style="color:#fff;font-weight:bold">if</span> a[i-<span style="color:#ff0;font-weight:bold">1</span>] == b[j-<span style="color:#ff0;font-weight:bold">1</span>]:
            <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;match </span><span style="color:#0ff;font-weight:bold">{</span>a[i-<span style="color:#ff0;font-weight:bold">1</span>]<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>i<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> </span><span style="color:#0ff;font-weight:bold">{</span>b[j-<span style="color:#ff0;font-weight:bold">1</span>]<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>j<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
            lcs += a[i-<span style="color:#ff0;font-weight:bold">1</span>]
            i -= <span style="color:#ff0;font-weight:bold">1</span>
            j -= <span style="color:#ff0;font-weight:bold">1</span>
        <span style="color:#fff;font-weight:bold">elif</span> C[i-<span style="color:#ff0;font-weight:bold">1</span>][j] &gt; C[i][j-<span style="color:#ff0;font-weight:bold">1</span>]:
            <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;C </span><span style="color:#0ff;font-weight:bold">{</span>a[i-<span style="color:#ff0;font-weight:bold">1</span>]<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>i<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>C[i-<span style="color:#ff0;font-weight:bold">1</span>][j]<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> </span><span style="color:#0ff;font-weight:bold">{</span>b[j-<span style="color:#ff0;font-weight:bold">1</span>]<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>j<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>C[i][j-<span style="color:#ff0;font-weight:bold">1</span>]<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
            i -= <span style="color:#ff0;font-weight:bold">1</span>
        <span style="color:#fff;font-weight:bold">else</span>:
            <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;else </span><span style="color:#0ff;font-weight:bold">{</span>a[i-<span style="color:#ff0;font-weight:bold">1</span>]<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>i<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> </span><span style="color:#0ff;font-weight:bold">{</span>b[j-<span style="color:#ff0;font-weight:bold">1</span>]<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">{</span>j<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
            j -= <span style="color:#ff0;font-weight:bold">1</span>

    lcs = lcs[::-<span style="color:#ff0;font-weight:bold">1</span>]
    <span style="color:#fff;font-weight:bold">return</span> C[m][n], lcs, C

A = <span style="color:#0ff;font-weight:bold">&#34;ABCDGH&#34;</span>
B = <span style="color:#0ff;font-weight:bold">&#34;AEDFHR&#34;</span>
C = lcs_simple(A, B)
<span style="color:#fff;font-weight:bold">print</span>(A, <span style="color:#0ff;font-weight:bold">&#34; &#34;</span>, B)
<span style="color:#fff;font-weight:bold">print</span>(C)

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Cocotb Deepdive - Edge Trigger and cocotb trampoline</title>
            <link>/posts/2022/10/cocotb-deepdive-edge-trigger-and-cocotb-trampoline/</link>
            <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/10/cocotb-deepdive-edge-trigger-and-cocotb-trampoline/</guid>
            <description>I wrote a previous post about clock and Timer triggers in cocotb. Considering that all triggers yield to core scheduler, I thought to do another trigger (Posedge) and the trampoline.
Class hierarchy Starting with FallingEdge where it takes the signal handle, In this example, dut.clk is passed to FallingEdge
await FallingEdge(dut.clk) FallingEdge sets the edge type for generic _EdgeBase
class FallingEdge(_EdgeBase): &amp;#34;&amp;#34;&amp;#34;Fires on the falling edge of *signal*, on a transition from ``1`` to ``0``.</description>
            <content type="html"><![CDATA[<p>I wrote a previous post about clock and Timer triggers in cocotb. Considering that all triggers yield to core scheduler, I thought to do another trigger (Posedge) and the trampoline.</p>
<h1 id="class-hierarchy">Class hierarchy</h1>
<p>Starting  with <code>FallingEdge</code> where it takes the signal handle, In this example, <code>dut.clk</code> is passed to <code>FallingEdge</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> <span style="color:#fff;font-weight:bold">await</span> FallingEdge(dut.clk)
</code></pre></div><p><code>FallingEdge</code> sets the edge type for generic <code>_EdgeBase</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> <span style="color:#fff;font-weight:bold">class</span> FallingEdge(_EdgeBase):
     <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;Fires on the falling edge of *signal*, on a transition from ``1`` to ``0``.&#34;&#34;&#34;</span>

     __slots__ = ()
     _edge_type = <span style="color:#ff0;font-weight:bold">2</span>
</code></pre></div><p><code>_EdgeBase</code> defines the <code>prime</code> that registers <code>callback</code> with the simulator.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> _EdgeBase(GPITrigger, metaclass=_ParameterizedSingletonAndABC):

    <span style="color:#fff;font-weight:bold">def</span> __init__(self, signal):
        <span style="color:#fff;font-weight:bold">super</span>().__init__()
        self.signal = signal

    <span style="color:#fff;font-weight:bold">def</span> prime(self, callback):
        <span style="color:#fff;font-weight:bold">if</span> self.cbhdl is <span style="color:#fff;font-weight:bold">None</span>:
            self.cbhdl = simulator.register_value_change_callback(
                self.signal._handle, callback, <span style="color:#fff;font-weight:bold">type</span>(self)._edge_type, self
            )
        <span style="color:#fff;font-weight:bold">super</span>().prime(callback)
</code></pre></div><p><code>GPITrigger</code> is almost empty base class which extends <code>Trigger</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> GPITrigger(Trigger):
    __slots__ = (<span style="color:#0ff;font-weight:bold">&#34;cbhdl&#34;</span>,)

    <span style="color:#fff;font-weight:bold">def</span> __init__(self):
        Trigger.__init__(self)

        self.cbhdl = <span style="color:#fff;font-weight:bold">None</span>

</code></pre></div><p><code>Trigger</code> defines the <code>__await__</code> that yields self to the scheduler.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> Trigger(Awaitable):

    <span style="color:#fff;font-weight:bold">def</span> __init__(self):
        self.primed = <span style="color:#fff;font-weight:bold">False</span>

    <span style="color:#fff;font-weight:bold">def</span> prime(self, callback):
        self.primed = <span style="color:#fff;font-weight:bold">True</span>

    <span style="color:#fff;font-weight:bold">def</span> __await__(self):
        <span style="color:#007f7f"># hand the trigger back to the scheduler trampoline</span>
        <span style="color:#fff;font-weight:bold">return</span> (<span style="color:#fff;font-weight:bold">yield</span> self)

</code></pre></div><h1 id="prime-and-trampoline">prime and trampoline</h1>
<p>To explain the trampoline, We will have to dig into the scheduler. <code>_schedule</code> method is called on the trigger <code>&lt;NullTrigger for Start &lt;Test dff_simple_test&gt; at 0x7f8d48bc2cc0&gt;</code>. Note that <code>result</code> is returned to <code>_advance</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> <span style="color:#ff0;font-weight:bold">956</span>             result = coroutine._advance(send_outcome)
 <span style="color:#ff0;font-weight:bold">957</span>
 <span style="color:#ff0;font-weight:bold">973</span>             <span style="color:#fff;font-weight:bold">if</span> not coroutine.done():
 <span style="color:#ff0;font-weight:bold">979</span>                 <span style="color:#fff;font-weight:bold">try</span>:
 <span style="color:#ff0;font-weight:bold">980</span>                     result = self._trigger_from_any(result)
 <span style="color:#ff0;font-weight:bold">981</span>                 <span style="color:#fff;font-weight:bold">except</span> TypeError <span style="color:#fff;font-weight:bold">as</span> exc:
 <span style="color:#ff0;font-weight:bold">984</span>                     result = NullTrigger(outcome=outcomes.Error(exc))
 <span style="color:#ff0;font-weight:bold">985</span>
 <span style="color:#ff0;font-weight:bold">986</span>                 self._resume_coro_upon(coroutine, result)

</code></pre></div><p>And <code>_resume_coro_upon</code> calls <code>prime</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> <span style="color:#ff0;font-weight:bold">612</span>     <span style="color:#fff;font-weight:bold">def</span> _resume_coro_upon(self, coro, trigger):
 ...
 ...
 <span style="color:#ff0;font-weight:bold">634</span>             <span style="color:#fff;font-weight:bold">try</span>:
 <span style="color:#ff0;font-weight:bold">635</span>                 <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;trigger: Before prime&#34;</span>, trigger)
 <span style="color:#ff0;font-weight:bold">636</span>                 trigger.prime(self._react)
</code></pre></div><p>The next point of interest is where <code>_react</code> is called by the callback from simulator callback registered by the prime above.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> <span style="color:#ff0;font-weight:bold">361</span>
 <span style="color:#ff0;font-weight:bold">362</span>     <span style="color:#fff;font-weight:bold">def</span> _react(self, trigger):
 <span style="color:#ff0;font-weight:bold">381</span>         <span style="color:#007f7f"># start the event loop</span>
 <span style="color:#ff0;font-weight:bold">382</span>         self._is_reacting = <span style="color:#fff;font-weight:bold">True</span>
 <span style="color:#ff0;font-weight:bold">383</span>         <span style="color:#fff;font-weight:bold">try</span>:
 <span style="color:#ff0;font-weight:bold">385</span>             self._event_loop(trigger)
</code></pre></div><p><code>_react</code> calls <code>_event_loop</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> <span style="color:#ff0;font-weight:bold">389</span>     <span style="color:#fff;font-weight:bold">def</span> _event_loop(self, trigger):
 <span style="color:#ff0;font-weight:bold">480</span>                 <span style="color:#fff;font-weight:bold">for</span> coro in self._scheduling:
 ...
 ...
 <span style="color:#ff0;font-weight:bold">488</span>                     self._schedule(coro, trigger=trigger)
</code></pre></div><p><code>_event_loop</code> calls <code>_schedule</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> <span style="color:#ff0;font-weight:bold">934</span>     <span style="color:#fff;font-weight:bold">def</span> _schedule(self, coroutine, trigger=<span style="color:#fff;font-weight:bold">None</span>):
 ...
 ...
 <span style="color:#ff0;font-weight:bold">947</span>         <span style="color:#fff;font-weight:bold">with</span> self._task_context(coroutine):
 <span style="color:#ff0;font-weight:bold">948</span>             <span style="color:#fff;font-weight:bold">if</span> trigger is <span style="color:#fff;font-weight:bold">None</span>:
 <span style="color:#ff0;font-weight:bold">949</span>                 send_outcome = outcomes.Value(<span style="color:#fff;font-weight:bold">None</span>)
 <span style="color:#ff0;font-weight:bold">950</span>             <span style="color:#fff;font-weight:bold">else</span>:
 <span style="color:#ff0;font-weight:bold">951</span>                 send_outcome = trigger._outcome
 <span style="color:#ff0;font-weight:bold">952</span>             <span style="color:#fff;font-weight:bold">if</span> _debug:
 <span style="color:#ff0;font-weight:bold">953</span>                 self.log.debug(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;Scheduling with </span><span style="color:#0ff;font-weight:bold">{</span>send_outcome<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
 <span style="color:#ff0;font-weight:bold">954</span>
 <span style="color:#ff0;font-weight:bold">955</span>             coroutine._trigger = <span style="color:#fff;font-weight:bold">None</span>
 <span style="color:#ff0;font-weight:bold">956</span>             result = coroutine._advance(send_outcome)
</code></pre></div><p>and <code>_advance</code> sends to <code>outcome</code> which makes <code>yield self</code> above returns and <code>__await__</code> returns.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#ff0;font-weight:bold">205</span>     <span style="color:#fff;font-weight:bold">def</span> _advance(self, outcome: outcomes.Outcome) -&gt; typing.Any:
...
...
<span style="color:#ff0;font-weight:bold">215</span>         <span style="color:#fff;font-weight:bold">try</span>:
<span style="color:#ff0;font-weight:bold">216</span>             self._started = <span style="color:#fff;font-weight:bold">True</span>
<span style="color:#ff0;font-weight:bold">218</span>             <span style="color:#fff;font-weight:bold">return</span> outcome.send(self._coro)

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>python asyncio - user-defined await-able object</title>
            <link>/posts/2022/10/python-asyncio-user-defined-await-able-object/</link>
            <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/10/python-asyncio-user-defined-await-able-object/</guid>
            <description>__await__ method defines the behavior of class with await is called on class object.
 The await() magic method defines the behavior of an awaitable object. An awaitable object is used to implement asynchronous behavior in Python.
 __await__ is not async method but it returns closure __await__ from a closure method.
import asyncio from collections.abc import Awaitable class Trigger(Awaitable): def __init__(self): pass def __await__(self): async def c(): print(&amp;#34;Do async stuff here&amp;#34;) return self return c().</description>
            <content type="html"><![CDATA[<p><code>__await__</code> method defines the behavior of class with <code>await</code> is called on class object.</p>
<blockquote>
<p>The <strong>await</strong>() magic method defines the behavior of an awaitable object. An awaitable object is used to implement asynchronous behavior in Python.</p>
</blockquote>
<p><code>__await__</code> is not <code>async</code> method but it returns closure <code>__await__</code> from a closure method.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">import</span> asyncio
<span style="color:#fff;font-weight:bold">from</span> collections.abc <span style="color:#fff;font-weight:bold">import</span> Awaitable

<span style="color:#fff;font-weight:bold">class</span> Trigger(Awaitable):

    <span style="color:#fff;font-weight:bold">def</span> __init__(self):
        <span style="color:#fff;font-weight:bold">pass</span>

    <span style="color:#fff;font-weight:bold">def</span> __await__(self):
        <span style="color:#fff;font-weight:bold">async</span> <span style="color:#fff;font-weight:bold">def</span> c():
            <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;Do async stuff here&#34;</span>)
            <span style="color:#fff;font-weight:bold">return</span> self
        <span style="color:#fff;font-weight:bold">return</span> c().__await__()

<span style="color:#fff;font-weight:bold">class</span> Edge(Trigger):
    <span style="color:#fff;font-weight:bold">pass</span>

<span style="color:#fff;font-weight:bold">async</span> <span style="color:#fff;font-weight:bold">def</span> main():
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;main&#34;</span>)
    <span style="color:#fff;font-weight:bold">await</span> Edge()
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;done&#34;</span>)

asyncio.run(main())
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Cocotb Deepdive - start vs start_soon and scheduler implementation</title>
            <link>/posts/2022/10/cocotb-deepdive-start-vs-start_soon-and-scheduler-implementation/</link>
            <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/10/cocotb-deepdive-start-vs-start_soon-and-scheduler-implementation/</guid>
            <description>cocotb provides couple of routines to start concurrent coroutine. The implementation shows that start calls start_soon and yield for the forked process to start right now. That&amp;rsquo;s a big deal because start_soon doesn&amp;rsquo;t star the coro until the parent coro yields control (ie await from something).
def start_soon(coro: Union[Task, Coroutine]) -&amp;gt; Task: &amp;#34;&amp;#34;&amp;#34; Schedule a coroutine to be run concurrently. Note that this is not an async function, and the new task will not execute until the calling task yields control.</description>
            <content type="html"><![CDATA[<p>cocotb provides couple of routines to start concurrent coroutine. The implementation shows that <code>start</code> calls <code>start_soon</code> and yield for the forked process to start right now. That&rsquo;s a big deal because <code>start_soon</code> doesn&rsquo;t star the coro until the parent coro yields control (ie await from something).</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> start_soon(coro: Union[Task, Coroutine]) -&gt; Task:
    <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;
</span><span style="color:#0ff;font-weight:bold">    Schedule a coroutine to be run concurrently.
</span><span style="color:#0ff;font-weight:bold">
</span><span style="color:#0ff;font-weight:bold">    Note that this is not an async function,
</span><span style="color:#0ff;font-weight:bold">    and the new task will not execute until the calling task yields control.
</span><span style="color:#0ff;font-weight:bold">
</span><span style="color:#0ff;font-weight:bold">    .. versionadded:: 1.6.0
</span><span style="color:#0ff;font-weight:bold">    &#34;&#34;&#34;</span>
    <span style="color:#fff;font-weight:bold">return</span> scheduler.start_soon(coro)

</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">async</span> <span style="color:#fff;font-weight:bold">def</span> start(coro: Union[Task, Coroutine]) -&gt; Task:
    <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;
</span><span style="color:#0ff;font-weight:bold">    Schedule a coroutine to be run concurrently, then yield control to allow pending tasks to execute.
</span><span style="color:#0ff;font-weight:bold">
</span><span style="color:#0ff;font-weight:bold">    The calling task will resume execution before control is returned to the simulator.
</span><span style="color:#0ff;font-weight:bold">
</span><span style="color:#0ff;font-weight:bold">    .. versionadded:: 1.6.0
</span><span style="color:#0ff;font-weight:bold">    &#34;&#34;&#34;</span>
    task = scheduler.start_soon(coro)
    <span style="color:#fff;font-weight:bold">await</span> cocotb.triggers.NullTrigger()
    <span style="color:#fff;font-weight:bold">return</span> task
</code></pre></div><p>Let&rsquo;s jump into <code>start_soon</code> into the scheduler</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> start_soon(self, coro: Union[Coroutine, Task]) -&gt; Task:

        task = self.create_task(coro)

        <span style="color:#fff;font-weight:bold">if</span> _debug:
            self.log.debug(<span style="color:#0ff;font-weight:bold">&#34;Queueing a new coroutine </span><span style="color:#0ff;font-weight:bold">%s</span><span style="color:#0ff;font-weight:bold">&#34;</span> % task._coro.__qualname__)

        self._queue(task)
        <span style="color:#fff;font-weight:bold">return</span> task
</code></pre></div><p><code>create_task</code> always returns <code>Task</code>. if passed coroutine, It will return Task created from that coroutine.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    @staticmethod
    <span style="color:#fff;font-weight:bold">def</span> create_task(coroutine: Any) -&gt; Task:
        <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">isinstance</span>(coroutine, Task):
            <span style="color:#fff;font-weight:bold">return</span> coroutine
        <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">isinstance</span>(coroutine, Coroutine):
            <span style="color:#fff;font-weight:bold">return</span> Task(coroutine)
</code></pre></div><p><code>_queue</code> puts the task in <code>_pending_coros</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> _queue(self, coroutine):
        <span style="color:#fff;font-weight:bold">if</span> coroutine not in self._pending_coros:
            self._pending_coros.append(coroutine)
</code></pre></div><p><code>_pending_coros</code> is passed to <code>_schedule</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">                <span style="color:#007f7f"># Handle any newly queued coroutines that need to be scheduled</span>
                <span style="color:#fff;font-weight:bold">while</span> self._pending_coros:
                    task = self._pending_coros.pop(<span style="color:#ff0;font-weight:bold">0</span>)
                    ...
                    self._schedule(task)
</code></pre></div><p>in <code>_schedule</code>, <code>_advance</code> is called on that <code>Task</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        <span style="color:#fff;font-weight:bold">with</span> self._task_context(coroutine):
            <span style="color:#fff;font-weight:bold">if</span> trigger is <span style="color:#fff;font-weight:bold">None</span>:
                send_outcome = outcomes.Value(<span style="color:#fff;font-weight:bold">None</span>)
            <span style="color:#fff;font-weight:bold">else</span>:
                send_outcome = trigger._outcome
            <span style="color:#fff;font-weight:bold">if</span> _debug:
                self.log.debug(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;Scheduling with </span><span style="color:#0ff;font-weight:bold">{</span>send_outcome<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)

            coroutine._trigger = <span style="color:#fff;font-weight:bold">None</span>
            result = coroutine._advance(send_outcome)

</code></pre></div><p><code>_advance</code> is defined with <code>Task</code> which calls <code>outcome.send</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> _advance(self, outcome: outcomes.Outcome) -&gt; typing.Any:
        <span style="color:#fff;font-weight:bold">try</span>:
            self._started = <span style="color:#fff;font-weight:bold">True</span>
            <span style="color:#fff;font-weight:bold">return</span> outcome.send(self._coro)
</code></pre></div><p><code>send</code> in <code>Value</code> calls <code>gen.send()</code> and <code>gen</code> here is <code>self_coro</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> Value(Outcome):
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, value):
        self.value = value

    <span style="color:#fff;font-weight:bold">def</span> send(self, gen):
        <span style="color:#fff;font-weight:bold">return</span> gen.send(self.value)

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>elliptical curve crypto key exchange</title>
            <link>/posts/2022/10/elliptical-curve-crypto-key-exchange/</link>
            <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/10/elliptical-curve-crypto-key-exchange/</guid>
            <description>In previous post, I wrote simple Diffie-Hellman key exchange algorithm, so I wanted to do elliptical curve key exchange as well. Again, The math is there in crypto book. but the algorithm is simple(strangely simple).
The trick is calculating aP where P is point on the elliptical curve that satisfies y^2 = x^3+ a.x + y. The following algorithm calculates the addition (and incase 2 points are the same, it is doubling).</description>
            <content type="html"><![CDATA[<p>In previous post, I wrote simple Diffie-Hellman key exchange algorithm, so I wanted to do elliptical curve key exchange as well. Again, The math is there in crypto book. but the algorithm is simple(strangely simple).</p>
<p><img src="/elliptical-curve-algo.png" alt="Example image"></p>
<p>The trick is calculating <code>aP</code> where P is point on the elliptical curve that satisfies <code>y^2 =  x^3+ a.x + y</code>. The following algorithm calculates the addition (and incase 2 points are the same, it is doubling).</p>
<p><img src="/elliptical-curve.png" alt="Example image"></p>
<p>In the code below, A and B share public keys(should be random integers) and the both side calculate the key with using their own private key and key shared form other side.</p>
<pre tabindex="0"><code>A public key:(10,6)
B public key:(7,11)
A key: (13,10)
B key: (13,10)
</code></pre><p>The whole thing</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> EC():
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, x, y, a ,p):
        self.x = x
        self.y = y
        self.a = a
        self.p = p

    <span style="color:#fff;font-weight:bold">def</span> mult(self, m):
        <span style="color:#fff;font-weight:bold">assert</span>( m &gt;= <span style="color:#ff0;font-weight:bold">2</span> )

        <span style="color:#fff;font-weight:bold">def</span> add(x1, y1, x2, y2, a, p):
            <span style="color:#fff;font-weight:bold">if</span> x1 == x2 and y1 == y2:
                s = ((<span style="color:#ff0;font-weight:bold">3</span> * x1 * x1) + a) * <span style="color:#fff;font-weight:bold">pow</span>(<span style="color:#ff0;font-weight:bold">2</span> * y1, -<span style="color:#ff0;font-weight:bold">1</span>, p) % p
            <span style="color:#fff;font-weight:bold">else</span>:
                s = (y2-y1)* <span style="color:#fff;font-weight:bold">pow</span>(x2-x1,-<span style="color:#ff0;font-weight:bold">1</span>,p) % p

            x3 = <span style="color:#fff;font-weight:bold">pow</span>( (s*s) - x1 - x2     , <span style="color:#ff0;font-weight:bold">1</span>, p)
            y3 = <span style="color:#fff;font-weight:bold">pow</span>( (s *(x1 - x3)) - y1 , <span style="color:#ff0;font-weight:bold">1</span>, p)

            <span style="color:#fff;font-weight:bold">return</span> (x3,y3)

        (x3,y3) = add(self.x, self.y,self.x, self.y, self.a, self.p)

        <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(m-<span style="color:#ff0;font-weight:bold">2</span>):
            (x3,y3) = add(self.x, self.y, x3, y3,  self.a, self.p)

        r = EC(x3, y3, self.a, self.p)
        <span style="color:#fff;font-weight:bold">return</span> r

    <span style="color:#fff;font-weight:bold">def</span> __str__(self):
        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#39;(</span><span style="color:#0ff;font-weight:bold">{</span>self.x<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">,</span><span style="color:#0ff;font-weight:bold">{</span>self.y<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">)&#39;</span>

p = <span style="color:#ff0;font-weight:bold">17</span>
a = <span style="color:#ff0;font-weight:bold">2</span>
b = <span style="color:#ff0;font-weight:bold">2</span>

P = EC(<span style="color:#ff0;font-weight:bold">5</span>,<span style="color:#ff0;font-weight:bold">1</span>, a, p)

kpr_A = <span style="color:#ff0;font-weight:bold">3</span>
kpub_A = P.mult(kpr_A)

<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#39;A public key:</span><span style="color:#0ff;font-weight:bold">{</span>kpub_A<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#39;</span>)

kpr_B = <span style="color:#ff0;font-weight:bold">10</span>
kpub_B = P.mult(kpr_B)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#39;B public key:</span><span style="color:#0ff;font-weight:bold">{</span>kpub_B<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#39;</span>)

TabA = kpub_B.mult(kpr_A)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#39;A key: </span><span style="color:#0ff;font-weight:bold">{</span>TabA<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#39;</span>)

TabB = kpub_A.mult(kpr_B)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#39;B key: </span><span style="color:#0ff;font-weight:bold">{</span>TabB<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#39;</span>)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Portable Stimulus Standard for fun and profit</title>
            <link>/posts/2022/10/portable-stimulus-standard-for-fun-and-profit/</link>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/10/portable-stimulus-standard-for-fun-and-profit/</guid>
            <description>These are my notes while reading the Portable Stimulus Standard. I will keep updating on the go.
The specs define PSS as:
 The Portable Test and Stimulus Standard defines a specification for creating a single representation of stimulus and test scenarios, usable by a variety of users across different levels of integration under different configurations, enabling the generation of different implementations of a scenario that run on a variety of execution platforms, including, but not necessarily limited to, simulation, emulation, FPGA prototyping, and post-silicon.</description>
            <content type="html"><![CDATA[<p>These are my notes while reading the Portable Stimulus Standard. I will keep updating on the go.</p>
<p>The specs define PSS as:</p>
<blockquote>
<p>The Portable Test and Stimulus Standard defines a specification for creating a single representation of
stimulus and test scenarios, usable by a variety of users across different levels of integration under different
configurations, enabling the generation of different implementations of a scenario that run on a variety of
execution platforms, including, but not necessarily limited to, simulation, emulation, FPGA prototyping, and
post-silicon. With this standard, users can specify a set of behaviors once, from which multiple
implementations may be derived.</p>
</blockquote>
<p>So, it&rsquo;s basically it&rsquo;s abstract language to define tests and EDA tools can generate SV/UVM/C tests depending on target platform and integration level.</p>
<h1 id="13-modeling-basic">1.3 Modeling basic</h1>
<ul>
<li>Model: representation of some view of a system’s behavior, along with a set of abstract flows</li>
<li>Action: elements of behavior</li>
<li>objects: passive entities used by actions, such as resources, states, and data flow items, collectively called objects</li>
<li>Activities: The behaviors associated with an action are specified</li>
<li>Components: Actions and object definitions may be encapsulated in components to form reusable model piece</li>
<li>Package: All of these elements may also be encapsulated and extended in a package to allow for additional reuse and customization.</li>
<li>scenario: A particular instantiation of a given PSS model. Each scenario consists of a set of action instances and data object instances, as well as scheduling constraints and rules defining the relationships between them</li>
<li>A consistent scenario: is one that conforms to model rules and satisfies all constraints.</li>
<li>atomic actions: Actions may correspond directly to operations of the underlying system under test (SUT) and test environment, in which case they are called atomic actions.</li>
<li>Actions also use activities to encapsulate flows of simpler actions, constituting some joint activity or scenario intention</li>
</ul>
<h1 id="test-realization">Test realization</h1>
<blockquote>
<p>A key purpose of PSS is to automate the generation of test cases and test suites. Tests for electronic systems often involve code running on embedded controllers, exercising the underlying hardware and software layers.</p>
<p>From the PSS model perspective, these are called target files, and target languages, which jointly implement the test case for a target platform.</p>
</blockquote>
<h1 id="aggregate-literals">Aggregate literals</h1>
<p>Aggregate literals for use with arrays, lists, and sets</p>
<blockquote>
<p>value_list_literal ::= { expression { , expression } }</p>
</blockquote>
<blockquote>
<p>int c1[4] = {1, 2, 3, 4};
list <!-- raw HTML omitted --> l = {1,2,3};</p>
</blockquote>
<p>Map literals</p>
<blockquote>
<p>map_literal ::= { map_literal_item { , map_literal_item } }
map_literal_item ::= expression : expression</p>
</blockquote>
<blockquote>
<p>map&lt;int,bool&gt; m = {1:true, 2:false, 4:true, 8:false};</p>
</blockquote>
<p>Structure literals</p>
<blockquote>
<p>struct_literal ::= { struct_literal_item { , struct_literal_item } }
struct_literal_item ::= . identifier = expression</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>That time I found a typo in Portable Stimulus Standard</title>
            <link>/posts/2022/10/that-time-i-found-a-typo-in-portable-stimulus-standard/</link>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/10/that-time-i-found-a-typo-in-portable-stimulus-standard/</guid>
            <description>For few weeks, I was obsessed(for the lack of better word) with PSS and naturally I decided to write the BNF in LARK and I even stared on AST transformations. Anyway, while I am copying parts of BNF I noticed an error with type_identifier. When i looked at the rule, I noticed it is saying type_identifer_elem. See the issue there?
type_identifier: [ &amp;#34;::&amp;#34; ] type_identifer_elem ( &amp;#34;::&amp;#34; type_identifer_elem )* Now, i saw the glitch in the matrix, I have no idea how to report it.</description>
            <content type="html"><![CDATA[<p>For few weeks, I was obsessed(for the lack of better word) with PSS and naturally I decided to write the BNF in LARK and I even stared on AST transformations. Anyway, while I am copying parts of BNF I noticed an error with <code>type_identifier</code>. When i looked at the rule, I noticed it is saying <code>type_identifer_elem</code>. See the issue there?</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">type_identifier: [ <span style="color:#0ff;font-weight:bold">&#34;::&#34;</span> ] type_identifer_elem ( <span style="color:#0ff;font-weight:bold">&#34;::&#34;</span> type_identifer_elem )*
</code></pre></div><p>Now, i saw the glitch in the matrix, I have no idea how to report it. Back in the day, Systemverilog folks used Mantis to track standard issues, I wonder if Mantis is used with PSS as well.</p>
]]></content>
        </item>
        
        <item>
            <title>The short(pun intended) story of ELF and to parse them</title>
            <link>/posts/2022/10/the-shortpun-intended-story-of-elf-and-to-parse-them/</link>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/10/the-shortpun-intended-story-of-elf-and-to-parse-them/</guid>
            <description>This post is about ELF(Executable and Linkable Format) python parser but I will briefly go through ELF specs first. Funny story, I once gave couple of presentations about DPI and I thought it&amp;rsquo;s funny to have few slides about GCC and ELF. I called it &amp;ldquo;The short sort of ELF&amp;rdquo; and as expected, the joke didn&amp;rsquo;t land. Good thing I am a not comedian :)
The ELF ELF is UNIX standard for executable format supported by toolchains(compilers/linkers) and loaders.</description>
            <content type="html"><![CDATA[<p>This post is about ELF(Executable and Linkable Format) python parser but I will briefly go through ELF specs first. Funny story, I once gave couple of presentations about DPI and I thought it&rsquo;s funny to have few slides about GCC and ELF. I called it &ldquo;The short sort of ELF&rdquo; and as expected, the joke didn&rsquo;t land. Good thing I am a not comedian :)</p>
<h1 id="the-elf">The ELF</h1>
<p>ELF is UNIX standard for executable format supported by toolchains(compilers/linkers) and loaders. The figure,is from the specs, shows the two different views of linking and execution(loader) of ELF.</p>
<p><img src="/elf-view.png" alt="Example image"></p>
<p>The ELF Header contains important fields that parse uses to parse the following:</p>
<ul>
<li>section headers</li>
<li>program headers</li>
<li>string table</li>
</ul>
<p><img src="/elf-header.png" alt="Example image"></p>
<p>For implementation, I used OrderDict to represent the fields and created generic parse function to use <code>attr_size_map</code> to populate the fields.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> Elf64Hdr(BinResource):
    <span style="color:#fff;font-weight:bold">def</span> __init__(self):
        <span style="color:#fff;font-weight:bold">pass</span>
    <span style="color:#fff;font-weight:bold">def</span> size_map(self):
        attr_size_map = collections.OrderedDict()
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;e_ident&#34;</span>       ] =  BIT64_DATA_TYPE.Elf64_Char.value * <span style="color:#ff0;font-weight:bold">16</span>
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;e_type&#34;</span>        ] =  BIT64_DATA_TYPE.Elf64_Half.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;e_machine&#34;</span>     ] =  BIT64_DATA_TYPE.Elf64_Half.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;e_version&#34;</span>     ] =  BIT64_DATA_TYPE.Elf64_Word.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;e_entry&#34;</span>       ] =  BIT64_DATA_TYPE.Elf64_Addr.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;e_phoff&#34;</span>       ] =  BIT64_DATA_TYPE.Elf64_Off.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;e_shoff&#34;</span>       ] =  BIT64_DATA_TYPE.Elf64_Off.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;e_flags&#34;</span>       ] =  BIT64_DATA_TYPE.Elf64_Word.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;e_ehsize&#34;</span>      ] =  BIT64_DATA_TYPE.Elf64_Half.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;e_phentsize&#34;</span>   ] =  BIT64_DATA_TYPE.Elf64_Half.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;e_phnum&#34;</span>       ] =  BIT64_DATA_TYPE.Elf64_Half.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;e_shentsize&#34;</span>   ] =  BIT64_DATA_TYPE.Elf64_Half.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;e_shnum&#34;</span>       ] =  BIT64_DATA_TYPE.Elf64_Half.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;e_shstrndx&#34;</span>    ] =  BIT64_DATA_TYPE.Elf64_Half.value
        <span style="color:#fff;font-weight:bold">return</span> attr_size_map
</code></pre></div><p>The spec defines enum values for header fields. For that, I used <code>Enum</code> to match these enums.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> E_TYPE(Enum):
    ET_NONE     = <span style="color:#ff0;font-weight:bold">0</span>
    ET_REL      = <span style="color:#ff0;font-weight:bold">1</span>
    ET_EXEC     = <span style="color:#ff0;font-weight:bold">2</span>
    ET_DYN      = <span style="color:#ff0;font-weight:bold">3</span>
    ET_CORE     = <span style="color:#ff0;font-weight:bold">4</span>
    ET_LOOS     = <span style="color:#ff0;font-weight:bold">0xfe00</span>
    ET_HIOS     = <span style="color:#ff0;font-weight:bold">0xfeff</span>
    ET_LOPROC   = <span style="color:#ff0;font-weight:bold">0xff00</span>
    ET_HIPROC   = <span style="color:#ff0;font-weight:bold">0xffff</span>

<span style="color:#fff;font-weight:bold">class</span> E_MACHINE(Enum):  <span style="color:#007f7f"># TODO: x86 and x86-64 for now</span>
    EM_NONE     = <span style="color:#ff0;font-weight:bold">0</span>
    EM_386      = <span style="color:#ff0;font-weight:bold">3</span>
    EM_X86_64   = <span style="color:#ff0;font-weight:bold">62</span>

<span style="color:#fff;font-weight:bold">class</span> E_VERSION(Enum):
    EV_NONE     = <span style="color:#ff0;font-weight:bold">0</span>
    EV_CURRENT  = <span style="color:#ff0;font-weight:bold">1</span>
</code></pre></div><h1 id="sections">Sections</h1>
<p>section header table is array of <code>Elf32_Shdr</code>. The section header is defined as follows</p>
<p><img src="/elf-header.png" alt="Example image"></p>
<p>Similar to ELF header, I defined the section header with fields for the binary parser <code>segment</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> Elf64Shdr(BinResource):
    <span style="color:#fff;font-weight:bold">def</span> __init__(self,data):
        data_dict =  common.segment_bin(data,self.size_map() ,<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#0ff;font-weight:bold">&#39;lsb&#39;</span>)
        common.append_attr(self,data_dict)
    <span style="color:#fff;font-weight:bold">def</span> size_map(self):
        attr_size_map = collections.OrderedDict()
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;sh_name&#34;</span>      ]  =  BIT64_DATA_TYPE.Elf64_Word.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;sh_type&#34;</span>      ]  =  BIT64_DATA_TYPE.Elf64_Word.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;sh_flags&#34;</span>     ]  =  BIT64_DATA_TYPE.Elf64_Xword.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;sh_addr&#34;</span>      ]  =  BIT64_DATA_TYPE.Elf64_Addr.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;sh_offset&#34;</span>    ]  =  BIT64_DATA_TYPE.Elf64_Off.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;sh_size&#34;</span>      ]  =  BIT64_DATA_TYPE.Elf64_Xword.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;sh_link&#34;</span>      ]  =  BIT64_DATA_TYPE.Elf64_Word.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;sh_info&#34;</span>      ]  =  BIT64_DATA_TYPE.Elf64_Word.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;sh_addalign&#34;</span>  ]  =  BIT64_DATA_TYPE.Elf64_Xword.value
        attr_size_map[<span style="color:#0ff;font-weight:bold">&#34;sh_entsize&#34;</span>   ]  =  BIT64_DATA_TYPE.Elf64_Xword.value
        <span style="color:#fff;font-weight:bold">return</span> attr_size_map
</code></pre></div><p>The following fields of ELF header defines how to get the section header table</p>
<ul>
<li>e_shoff : offset of section header</li>
<li>e_shnum: number of section header</li>
<li>e_shentsize: size of section header</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">            start = common.bytearray_to_int(self.ehdr.e_shoff)
            <span style="color:#fff;font-weight:bold">for</span> x in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">0</span>, common.bytearray_to_int(self.ehdr.e_shnum)):
                end = start + common.bytearray_to_int(self.ehdr.e_shentsize)
                sh = Elf64Shdr(self.file_bin[start:end])
                start = end
                self.sh_tbl.append(sh)
</code></pre></div><h1 id="program-header">Program Header</h1>
<p>Same as section header, the program header is parsed.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        <span style="color:#007f7f">## parse program table if applicable</span>
        self.ph_tbl = []
        <span style="color:#fff;font-weight:bold">if</span>(common.bytearray_to_int(self.ehdr.e_phnum) &gt; <span style="color:#ff0;font-weight:bold">0</span>):
            start = common.bytearray_to_int(self.ehdr.e_phoff)
            <span style="color:#fff;font-weight:bold">for</span> x in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">0</span>, common.bytearray_to_int(self.ehdr.e_phnum)):
                end = start + common.bytearray_to_int(self.ehdr.e_phentsize)
                ph = Elf64Phdr(self.file_bin[start:end])
                start = end
                self.ph_tbl.append(ph)
</code></pre></div><h1 id="string-table">String Table</h1>
<p><code>e_shstrndx</code> is the index of string table section. So, we get that section header and parse it using <code>unpack_str_table</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        <span style="color:#007f7f">## parse e_shstrndx and back annotate the sh headers (sh_tbl)</span>
        sym_sh = self.sh_tbl[common.bytearray_to_int(self.ehdr.e_shstrndx)]
        start = common.bytearray_to_int(sym_sh.sh_addr) + common.bytearray_to_int(sym_sh.sh_offset)
        end   = common.bytearray_to_int(sym_sh.sh_addr) + common.bytearray_to_int(sym_sh.sh_offset) +common.bytearray_to_int(sym_sh.sh_size)
        strtab = common.unpack_str_table(self.file_bin[start:end])
        <span style="color:#fff;font-weight:bold">for</span> sh,nm in <span style="color:#fff;font-weight:bold">zip</span>(self.sh_tbl,strtab):
            sh.real_name = nm
</code></pre></div><p>Or we can just use <code>readelf</code> like a normal person.</p>
]]></content>
        </item>
        
        <item>
            <title>PCIE TLP Header python serializer</title>
            <link>/posts/2022/10/pcie-tlp-header-python-serializer/</link>
            <pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/10/pcie-tlp-header-python-serializer/</guid>
            <description>I always wanted to write scapy-like framework for PCIE TLP serialization and This is a quick and dirty prototype I wrote at 1 AM. So, Don&amp;rsquo;t judge me.
The final output of the serializer would be as follows. basically, something similar to scapy or wireshark breakdown of header fields.
name:memwr32 size:96 0000000000000000000000100000000000000000100000001100000001111111100000000000000010010000000000000 name:hdr size:32 000000000000000000000010000000000 name:RESERVED size:1 0 name:FMT size:2 00 name:TYPE size:5 00000 name:RESERVED size:1 0 name:TC size:3 000 name:RESERVED size:4 0000 name:TD size:1 0 name:EP size:1 0 name:ATTR size:2 00 name:AT size:2 00 name:LENGTH size:10 10000000000 name:requestID size:16 0000000100000001 name:BUS size:8 00000001 name:DEVICE size:4 0000 name:FUNCTION size:4 0001 name:TAG size:8 10000000 name:LASTDWBE size:4 1111 name:STDWBE size:4 1111 name:ADDR size:32 00000000000000010010000000000000 The PCIE TLP (Tranaction Layer Packet) header depends on type of transaction: Memory, I/O, Configuration, and Messages.</description>
            <content type="html"><![CDATA[<p>I always wanted to write scapy-like framework for PCIE TLP serialization and This is a quick and dirty prototype I wrote at 1 AM. So, Don&rsquo;t judge me.</p>
<p>The final output of the serializer would be as follows. basically, something similar to scapy or wireshark breakdown of header fields.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">name:memwr32 size:96 <span style="color:#ff0;font-weight:bold">0000000000000000000000100000000000000000100000001100000001111111100000000000000010010000000000000</span>
    name:hdr size:32 <span style="color:#ff0;font-weight:bold">000000000000000000000010000000000</span>
        name:RESERVED size:1 <span style="color:#ff0;font-weight:bold">0</span>
        name:FMT size:2 <span style="color:#ff0;font-weight:bold">00</span>
        name:TYPE size:5 <span style="color:#ff0;font-weight:bold">00000</span>
        name:RESERVED size:1 <span style="color:#ff0;font-weight:bold">0</span>
        name:TC size:3 <span style="color:#ff0;font-weight:bold">000</span>
        name:RESERVED size:4 <span style="color:#ff0;font-weight:bold">0000</span>
        name:TD size:1 <span style="color:#ff0;font-weight:bold">0</span>
        name:EP size:1 <span style="color:#ff0;font-weight:bold">0</span>
        name:ATTR size:2 <span style="color:#ff0;font-weight:bold">00</span>
        name:AT size:2 <span style="color:#ff0;font-weight:bold">00</span>
        name:LENGTH size:10 <span style="color:#ff0;font-weight:bold">10000000000</span>
    name:requestID size:16 <span style="color:#ff0;font-weight:bold">0000000100000001</span>
        name:BUS size:8 <span style="color:#ff0;font-weight:bold">00000001</span>
        name:DEVICE size:4 <span style="color:#ff0;font-weight:bold">0000</span>
        name:FUNCTION size:4 <span style="color:#ff0;font-weight:bold">0001</span>
    name:TAG size:8 <span style="color:#ff0;font-weight:bold">10000000</span>
    name:LASTDWBE size:4 <span style="color:#ff0;font-weight:bold">1111</span>
    name:STDWBE size:4 <span style="color:#ff0;font-weight:bold">1111</span>
    name:ADDR size:32 <span style="color:#ff0;font-weight:bold">00000000000000010010000000000000</span>
</code></pre></div><p>The PCIE TLP (Tranaction Layer Packet) header depends on type of transaction: Memory, I/O, Configuration, and Messages. Also, there is routing type which depends on type of transaction:</p>
<ul>
<li>Address: used with Memory and IO</li>
<li>ID: used with configuration</li>
<li>implicit: used with messages</li>
</ul>
<p>This the header format for Memory  Read 32bit address.</p>
<p><img src="/pci_memrd32.png" alt="Example image"></p>
<p>I wanted scalable infrastructure to create difference types of headers. So, I wrote <code>Field</code> base-class which contains <code>value</code> attribute</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> <span style="color:#ff0;font-weight:bold">53</span> <span style="color:#fff;font-weight:bold">class</span> Field:
 <span style="color:#ff0;font-weight:bold">54</span>     <span style="color:#fff;font-weight:bold">def</span> __init__(self, name, size, value=<span style="color:#ff0;font-weight:bold">0x0</span>):
 <span style="color:#ff0;font-weight:bold">55</span>         self.name = name
 <span style="color:#ff0;font-weight:bold">56</span>         self.size = size
 <span style="color:#ff0;font-weight:bold">57</span>         self.value =  value
</code></pre></div><p>The attribute <code>value</code> is important because it can work raw int value or parent field containing sub-fields</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> <span style="color:#ff0;font-weight:bold">79</span>     <span style="color:#fff;font-weight:bold">def</span> binary(self):
 <span style="color:#ff0;font-weight:bold">80</span>         v = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>
 <span style="color:#ff0;font-weight:bold">81</span>         <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">type</span>(self.value) is <span style="color:#fff;font-weight:bold">list</span>:
 <span style="color:#ff0;font-weight:bold">82</span>             <span style="color:#fff;font-weight:bold">for</span> f in self.value:
 <span style="color:#ff0;font-weight:bold">83</span>                 v += f.binary()
 <span style="color:#ff0;font-weight:bold">84</span>         <span style="color:#fff;font-weight:bold">else</span>:
 <span style="color:#ff0;font-weight:bold">85</span>             v = <span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#39;</span><span style="color:#0ff;font-weight:bold">{</span>self.value<span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">0</span><span style="color:#0ff;font-weight:bold">{</span>self.size<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">b</span><span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#39;</span>
 <span style="color:#ff0;font-weight:bold">86</span>         <span style="color:#fff;font-weight:bold">return</span> v

</code></pre></div><p>This is the full code for Memory 32bit Address Header.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">from</span> enum <span style="color:#fff;font-weight:bold">import</span> Enum
<span style="color:#fff;font-weight:bold">import</span> collections

<span style="color:#fff;font-weight:bold">class</span> Field:
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, name, size, value=<span style="color:#ff0;font-weight:bold">0x0</span>):
        self.name = name
        self.size = size
        self.value =  value

    <span style="color:#fff;font-weight:bold">def</span> _printf(self, lvl):
        space = lvl * <span style="color:#0ff;font-weight:bold">&#34;    &#34;</span>
        <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">{</span>space<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">name:</span><span style="color:#0ff;font-weight:bold">{</span>self.name<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> size:</span><span style="color:#0ff;font-weight:bold">{</span>self.size<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> </span><span style="color:#0ff;font-weight:bold">{</span>self.binary()<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
        <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">type</span>(self.value) is <span style="color:#fff;font-weight:bold">list</span>:
            <span style="color:#fff;font-weight:bold">for</span> i in self.value:
                i._printf(lvl+<span style="color:#ff0;font-weight:bold">1</span>)
    <span style="color:#fff;font-weight:bold">def</span> printf(self):
        self._printf(<span style="color:#ff0;font-weight:bold">0</span>)

    <span style="color:#fff;font-weight:bold">def</span> binary(self):
        v = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>
        <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">type</span>(self.value) is <span style="color:#fff;font-weight:bold">list</span>:
            <span style="color:#fff;font-weight:bold">for</span> f in self.value:
                v += f.binary()
        <span style="color:#fff;font-weight:bold">else</span>:
            v = <span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#39;</span><span style="color:#0ff;font-weight:bold">{</span>self.value<span style="color:#0ff;font-weight:bold">:</span><span style="color:#0ff;font-weight:bold">0</span><span style="color:#0ff;font-weight:bold">{</span>self.size<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">b</span><span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#39;</span>
        <span style="color:#fff;font-weight:bold">return</span> v

    <span style="color:#fff;font-weight:bold">def</span> __getattr__(self,name):
        <span style="color:#fff;font-weight:bold">for</span> i in self.value:
            <span style="color:#fff;font-weight:bold">if</span> i.name == name:
                <span style="color:#fff;font-weight:bold">return</span> i
        <span style="color:#fff;font-weight:bold">raise</span> AttributeError(<span style="color:#0ff;font-weight:bold">&#34;can&#39;t get attribute&#34;</span>)


<span style="color:#fff;font-weight:bold">class</span> TLPHdr(Field):
    <span style="color:#fff;font-weight:bold">def</span> __init__(self):
        <span style="color:#fff;font-weight:bold">super</span>(TLPHdr, self).__init__(<span style="color:#0ff;font-weight:bold">&#34;hdr&#34;</span>, <span style="color:#ff0;font-weight:bold">4</span> * <span style="color:#ff0;font-weight:bold">8</span>, value=[])
        self.value.append(Field(<span style="color:#0ff;font-weight:bold">&#34;RESERVED&#34;</span>, <span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">0x0</span>))
        self.value.append(Field(<span style="color:#0ff;font-weight:bold">&#34;FMT&#34;</span>, <span style="color:#ff0;font-weight:bold">2</span>))
        self.value.append(Field(<span style="color:#0ff;font-weight:bold">&#34;TYPE&#34;</span>, <span style="color:#ff0;font-weight:bold">5</span>))
        self.value.append(Field(<span style="color:#0ff;font-weight:bold">&#34;RESERVED&#34;</span>, <span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">0x0</span>))
        self.value.append(Field(<span style="color:#0ff;font-weight:bold">&#34;TC&#34;</span>, <span style="color:#ff0;font-weight:bold">3</span>))
        self.value.append(Field(<span style="color:#0ff;font-weight:bold">&#34;RESERVED&#34;</span>, <span style="color:#ff0;font-weight:bold">4</span>, <span style="color:#ff0;font-weight:bold">0x0</span>))
        self.value.append(Field(<span style="color:#0ff;font-weight:bold">&#34;TD&#34;</span>, <span style="color:#ff0;font-weight:bold">1</span>))
        self.value.append(Field(<span style="color:#0ff;font-weight:bold">&#34;EP&#34;</span>, <span style="color:#ff0;font-weight:bold">1</span>))
        self.value.append(Field(<span style="color:#0ff;font-weight:bold">&#34;ATTR&#34;</span>, <span style="color:#ff0;font-weight:bold">2</span>))
        self.value.append(Field(<span style="color:#0ff;font-weight:bold">&#34;AT&#34;</span>, <span style="color:#ff0;font-weight:bold">2</span>))
        self.value.append(Field(<span style="color:#0ff;font-weight:bold">&#34;LENGTH&#34;</span>, <span style="color:#ff0;font-weight:bold">10</span>))

<span style="color:#fff;font-weight:bold">class</span> RequestID(Field):
    <span style="color:#fff;font-weight:bold">def</span> __init__(self):
        <span style="color:#fff;font-weight:bold">super</span>(RequestID, self).__init__(<span style="color:#0ff;font-weight:bold">&#34;requestID&#34;</span>, <span style="color:#ff0;font-weight:bold">2</span> * <span style="color:#ff0;font-weight:bold">8</span>, value=[])
        self.value.append(Field(<span style="color:#0ff;font-weight:bold">&#34;BUS&#34;</span>, <span style="color:#ff0;font-weight:bold">8</span>, <span style="color:#ff0;font-weight:bold">0x0</span>))
        self.value.append(Field(<span style="color:#0ff;font-weight:bold">&#34;DEVICE&#34;</span>, <span style="color:#ff0;font-weight:bold">4</span>, <span style="color:#ff0;font-weight:bold">0x0</span>))
        self.value.append(Field(<span style="color:#0ff;font-weight:bold">&#34;FUNCTION&#34;</span>, <span style="color:#ff0;font-weight:bold">4</span>, <span style="color:#ff0;font-weight:bold">0x0</span>))

<span style="color:#fff;font-weight:bold">class</span> MemWr32(Field):
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, bus, device, function, tag, addr, length):
        <span style="color:#fff;font-weight:bold">super</span>(MemWr32, self).__init__(<span style="color:#0ff;font-weight:bold">&#34;memwr32&#34;</span>, <span style="color:#ff0;font-weight:bold">4</span> * <span style="color:#ff0;font-weight:bold">8</span> * <span style="color:#ff0;font-weight:bold">3</span>,value=[])
        self.value.append(TLPHdr())
        self.value.append(RequestID())
        self.value.append(Field(<span style="color:#0ff;font-weight:bold">&#34;TAG&#34;</span>, <span style="color:#ff0;font-weight:bold">8</span>))
        self.value.append(Field(<span style="color:#0ff;font-weight:bold">&#34;LASTDWBE&#34;</span>, <span style="color:#ff0;font-weight:bold">4</span>))
        self.value.append(Field(<span style="color:#0ff;font-weight:bold">&#34;STDWBE&#34;</span>, <span style="color:#ff0;font-weight:bold">4</span>))
        self.value.append(Field(<span style="color:#0ff;font-weight:bold">&#34;ADDR&#34;</span>, <span style="color:#ff0;font-weight:bold">32</span>))

        self.TAG.value      = tag
        self.LASTDWBE.value = <span style="color:#fff;font-weight:bold">int</span> (<span style="color:#0ff;font-weight:bold">&#34;1111&#34;</span>, base=<span style="color:#ff0;font-weight:bold">2</span>)
        self.STDWBE.value   = <span style="color:#fff;font-weight:bold">int</span> (<span style="color:#0ff;font-weight:bold">&#34;1111&#34;</span>, base=<span style="color:#ff0;font-weight:bold">2</span>)
        self.ADDR.value     = addr

        self.hdr.FMT.value      = <span style="color:#fff;font-weight:bold">int</span> (<span style="color:#0ff;font-weight:bold">&#34;00&#34;</span>, base=<span style="color:#ff0;font-weight:bold">2</span>)
        self.hdr.TYPE.value     = <span style="color:#fff;font-weight:bold">int</span> (<span style="color:#0ff;font-weight:bold">&#34;00000&#34;</span>, base=<span style="color:#ff0;font-weight:bold">2</span>)
        self.hdr.TC.value       = <span style="color:#fff;font-weight:bold">int</span> (<span style="color:#0ff;font-weight:bold">&#34;0&#34;</span>, base=<span style="color:#ff0;font-weight:bold">2</span>)
        self.hdr.EP.value       = <span style="color:#fff;font-weight:bold">int</span> (<span style="color:#0ff;font-weight:bold">&#34;0&#34;</span>, base=<span style="color:#ff0;font-weight:bold">2</span>)
        self.hdr.ATTR.value     = <span style="color:#fff;font-weight:bold">int</span> (<span style="color:#0ff;font-weight:bold">&#34;0&#34;</span>, base=<span style="color:#ff0;font-weight:bold">2</span>)
        self.hdr.AT.value       = <span style="color:#fff;font-weight:bold">int</span> (<span style="color:#0ff;font-weight:bold">&#34;0&#34;</span>, base=<span style="color:#ff0;font-weight:bold">2</span>)
        self.hdr.LENGTH.value   = <span style="color:#fff;font-weight:bold">int</span>(length/<span style="color:#ff0;font-weight:bold">4</span>)

        self.requestID.BUS.value        = bus
        self.requestID.DEVICE.value     = device
        self.requestID.FUNCTION.value   = function

m  = MemWr32( bus=<span style="color:#ff0;font-weight:bold">1</span>, device=<span style="color:#ff0;font-weight:bold">0</span>,function=<span style="color:#ff0;font-weight:bold">1</span>, tag=<span style="color:#ff0;font-weight:bold">0x80</span>, addr=<span style="color:#ff0;font-weight:bold">0x12000</span>, length=<span style="color:#ff0;font-weight:bold">4096</span>)
m.printf()
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>AIG - And Inverter graph</title>
            <link>/posts/2022/10/aig-and-inverter-graph/</link>
            <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/10/aig-and-inverter-graph/</guid>
            <description>An and-inverter graph (AIG) is a directed, acyclic graph that represents a structural implementation of the logical functionality of a circuit or network. An AIG consists of two-input nodes representing logical conjunction, terminal nodes labeled with variable names, and edges optionally containing markers indicating logical negation. This representation of a logic function is rarely structurally efficient for large circuits, but is an efficient representation for manipulation of boolean functions. Typically, the abstract graph is represented as a data structure in software.</description>
            <content type="html"><![CDATA[<blockquote>
<p>An and-inverter graph (AIG) is a directed, acyclic graph that represents a structural implementation of the logical functionality of a circuit or network. An AIG consists of two-input nodes representing logical conjunction, terminal nodes labeled with variable names, and edges optionally containing markers indicating logical negation. This representation of a logic function is rarely structurally efficient for large circuits, but is an efficient representation for manipulation of boolean functions. Typically, the abstract graph is represented as a data structure in software.</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>The diffie hellman Key Exchange</title>
            <link>/posts/2022/10/the-diffie-hellman-key-exchange/</link>
            <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/10/the-diffie-hellman-key-exchange/</guid>
            <description>This post is about Diffie-Hellman exchange key protocol to be used for symmetric crypto protocol like AES. From Wiki:
 Diffie–Hellman key exchange[nb 1] is a method of securely exchanging cryptographic keys over a public channel and was one of the first public-key protocols as conceived by Ralph Merkle and named after Whitfield Diffie and Martin Hellman.
 Same as RSA, i am not going to go through the math, but the algorithm defines how Alice and Bob create the their keys and eventually create the common key.</description>
            <content type="html"><![CDATA[<p>This post is about Diffie-Hellman exchange key protocol to be used for symmetric crypto protocol like AES. From Wiki:</p>
<blockquote>
<p>Diffie–Hellman key exchange[nb 1] is a method of securely exchanging cryptographic keys over a public channel and was one of the first public-key protocols as conceived by Ralph Merkle and named after Whitfield Diffie and Martin Hellman.</p>
</blockquote>
<p>Same as RSA, i am not going to go through the math, but the algorithm defines how Alice and Bob create the their keys and eventually create the common key.
<img src="/dh.png" alt="Example image"></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> <span style="color:#fff;font-weight:bold">import</span> random

 <span style="color:#fff;font-weight:bold">class</span> DH():
     <span style="color:#fff;font-weight:bold">def</span> __init__(self, p, alfa):
         self.p   = p
         self.alfa = alfa

         self.a = self.kpr_A = random.randrange(<span style="color:#ff0;font-weight:bold">2</span>, self.p-<span style="color:#ff0;font-weight:bold">1</span>)
         self.kpub_A = <span style="color:#fff;font-weight:bold">pow</span>(self.alfa,self.a)
         self.A =  self.kpub_A % self.p
         <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;A=</span><span style="color:#0ff;font-weight:bold">{</span>self.A<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)

         self.b = self.kpr_B = random.randrange(<span style="color:#ff0;font-weight:bold">2</span>, self.p-<span style="color:#ff0;font-weight:bold">1</span>)
         self.kpub_B = <span style="color:#fff;font-weight:bold">pow</span>(self.alfa,self.b)
         self.B = self.kpub_B % self.p
         <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;B=</span><span style="color:#0ff;font-weight:bold">{</span>self.B<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)

         <span style="color:#007f7f"># Alice B^a mode P</span>
         self.Kab1 = <span style="color:#fff;font-weight:bold">pow</span>(self.B, self.a , self.p)
         <span style="color:#fff;font-weight:bold">print</span>(self.Kab1)

         <span style="color:#007f7f"># Alice A^b mode P</span>
         self.Kab2 = <span style="color:#fff;font-weight:bold">pow</span>(self.A, self.b , self.p)
         <span style="color:#fff;font-weight:bold">print</span>(self.Kab2)


 p = <span style="color:#ff0;font-weight:bold">29</span>
 alfa = random.randrange(<span style="color:#ff0;font-weight:bold">2</span>, p-<span style="color:#ff0;font-weight:bold">1</span>) <span style="color:#007f7f"># 2, p-2</span>
 dh = DH(p, alfa)
</code></pre></div><p>And the output for Alice and Bob keys:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">A=<span style="color:#ff0;font-weight:bold">24</span>
B=<span style="color:#ff0;font-weight:bold">3</span>
<span style="color:#ff0;font-weight:bold">25</span>
<span style="color:#ff0;font-weight:bold">25</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Wavedrom to SVA generator</title>
            <link>/posts/2022/10/wavedrom-to-sva-generator/</link>
            <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/10/wavedrom-to-sva-generator/</guid>
            <description>WaveDrom is really great tool to generate timing diagram. It provide nice features to annotate the diagrams with arrows to link between edges. So, it was fun to invent simple convention using WaveDrom to generate simple SVA expressions.
I thought to start with 2 assertions:
 -~&amp;gt; Horizontal arrow between nodes -|&amp;gt; Vertical arrow between nodes  The first step is defining the nodes to anchor the arrows(Horizontal and Vertical).</description>
            <content type="html"><![CDATA[<p>WaveDrom is really great tool to generate timing diagram. It provide nice features to annotate the diagrams with arrows to link between edges. So, it was fun to invent simple convention using WaveDrom to generate simple SVA expressions.</p>
<p>I thought to start with 2 assertions:</p>
<ul>
<li><code>-~&gt;</code> Horizontal arrow between nodes</li>
<li><code>-|&gt;</code> Vertical arrow between nodes</li>
</ul>
<p>The first step is defining the nodes to anchor the arrows(Horizontal and  Vertical).</p>
<p>The horizontal specifies <code>delayed</code> between the events.</p>
<pre tabindex="0"><code>$rise(req) |-&gt; ##[1:N] $rise(ack);
</code></pre><p>The vertical specifies <code>zero-delay</code> between the events.</p>
<pre tabindex="0"><code>$rise(req) |-&gt; ($stable(ack); &amp;&amp; ack == 0
</code></pre><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">{
<span style="color:#0ff;font-weight:bold">&#34;signal&#34;</span>: [
  {<span style="color:#0ff;font-weight:bold">&#34;name&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;clk&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;wave&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;P.......&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;node&#34;</span>:<span style="color:#0ff;font-weight:bold">&#34;........&#34;</span>},
  {<span style="color:#0ff;font-weight:bold">&#34;name&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;req&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;wave&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;01...0..&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;node&#34;</span>:<span style="color:#0ff;font-weight:bold">&#34;.a.B.c.D&#34;</span>},
  {<span style="color:#0ff;font-weight:bold">&#34;name&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;ack&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;wave&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;0..1...0&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;node&#34;</span>:<span style="color:#0ff;font-weight:bold">&#34;.A.b.C.d&#34;</span>}
],
  <span style="color:#0ff;font-weight:bold">&#34;edge&#34;</span>   : [<span style="color:#0ff;font-weight:bold">&#34;a-~&gt;b 1:N&#34;</span>,
  				<span style="color:#0ff;font-weight:bold">&#34;b-~&gt;c 2&#34;</span>,
                <span style="color:#0ff;font-weight:bold">&#34;c-~&gt;d 2&#34;</span>,

  				<span style="color:#0ff;font-weight:bold">&#34;a-~&gt;c 1:</span>$<span style="color:#0ff;font-weight:bold">&#34;</span>,
  				<span style="color:#0ff;font-weight:bold">&#34;b-~&gt;d 1:</span>$<span style="color:#0ff;font-weight:bold">&#34;</span>,

  		  		<span style="color:#0ff;font-weight:bold">&#34;a-|&gt;A&#34;</span>,
  				<span style="color:#0ff;font-weight:bold">&#34;b-|&gt;B&#34;</span>,
  				<span style="color:#0ff;font-weight:bold">&#34;c-|&gt;C&#34;</span>,
  				<span style="color:#0ff;font-weight:bold">&#34;d-|&gt;D&#34;</span>

   ],
 <span style="color:#0ff;font-weight:bold">&#34;config&#34;</span>: {<span style="color:#0ff;font-weight:bold">&#34;hscale&#34;</span>:2,<span style="color:#0ff;font-weight:bold">&#34;scale&#34;</span>:2}
}
</code></pre></div><p>The generated diagram should something like the following:</p>
<p><img src="/wavedrom.png" alt="Example image"></p>
<p>And the generated SVA expressions:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$rise(req) |-&gt; <span style="color:#007f7f">##[1:N] $rise(ack);</span>
$rise(ack) |-&gt; <span style="color:#007f7f">##[2] $fell(req);</span>
$fell(req) |-&gt; <span style="color:#007f7f">##[2] $fell(ack);</span>
$rise(req) |-&gt; <span style="color:#007f7f">##[1:$] $fell(req);</span>
$rise(ack) |-&gt; <span style="color:#007f7f">##[1:$] $fell(ack);</span>
$rise(req) |-&gt; ($stable(ack); &amp;&amp; ack == <span style="color:#ff0;font-weight:bold">0</span>
$rise(ack) |-&gt; ($stable(req); &amp;&amp; req == <span style="color:#ff0;font-weight:bold">1</span>
$fell(req) |-&gt; ($stable(ack); &amp;&amp; ack == <span style="color:#ff0;font-weight:bold">1</span>
$fell(ack) |-&gt; ($stable(req); &amp;&amp; req == <span style="color:#ff0;font-weight:bold">0</span>
</code></pre></div><p>well, Not my proudest moment but it&rsquo;s Saturday and I will probably rewrite the whole thing again.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        <span style="color:#fff;font-weight:bold">for</span> i, n in <span style="color:#fff;font-weight:bold">enumerate</span>(node):
            <span style="color:#007f7f"># Parse labels</span>
            <span style="color:#fff;font-weight:bold">if</span> n != <span style="color:#0ff;font-weight:bold">&#34;.&#34;</span>:
                edge = mapping[wave[i]]

                <span style="color:#fff;font-weight:bold">assert</span> (edge in mapping.values())

                <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;
</span><span style="color:#0ff;font-weight:bold">                in case of 1 or 0, that is the correct value
</span><span style="color:#0ff;font-weight:bold">                in case of &#34;.&#34;, i need to get the last non-&#34;.&#34; value
</span><span style="color:#0ff;font-weight:bold">                &#34;&#34;&#34;</span>
                value = <span style="color:#fff;font-weight:bold">None</span>
                <span style="color:#fff;font-weight:bold">if</span> wave[i] != <span style="color:#0ff;font-weight:bold">&#34;.&#34;</span>:
                    value = wave[i]
                <span style="color:#fff;font-weight:bold">else</span>:
                    value = get_last_value(wave[<span style="color:#ff0;font-weight:bold">0</span>:i])
                <span style="color:#fff;font-weight:bold">assert</span>(value is not <span style="color:#fff;font-weight:bold">None</span>)

                nn = Node(n, sig_name, i , wave[i], value, edge)
                nodes.append(nn)

    <span style="color:#007f7f"># Parse edges for assertions</span>
    edges = []
    <span style="color:#fff;font-weight:bold">for</span> e in wd[<span style="color:#0ff;font-weight:bold">&#34;edge&#34;</span>]:
        ed = <span style="color:#fff;font-weight:bold">None</span>

        <span style="color:#007f7f"># a-~&gt;b DELAY</span>
        <span style="color:#007f7f"># a |-&gt; ##[DELAY] b</span>
        result = re.match(<span style="color:#0ff;font-weight:bold">&#34;([a-zA-Z])-~&gt;([a-zA-Z]) (.*)&#34;</span>, e)
        <span style="color:#fff;font-weight:bold">if</span> result:
            tokens = result.groups()

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>The slowest RSA implementation</title>
            <link>/posts/2022/09/the-slowest-rsa-implementation/</link>
            <pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/09/the-slowest-rsa-implementation/</guid>
            <description>This post is about the slowest and worst-ish implementation of RSA, RSA is an important public key encryption algorithm. From wiki:
 RSA (Rivest–Shamir–Adleman) is a public-key cryptosystem that is widely used for secure data transmission. It is also one of the oldest. The acronym &amp;ldquo;RSA&amp;rdquo; comes from the surnames of Ron Rivest, Adi Shamir and Leonard Adleman, who publicly described the algorithm in 1977
 The math behind RSA requires more mental calories than i can afford on Saturday morning.</description>
            <content type="html"><![CDATA[<p>This post is about the  slowest and worst-ish implementation of RSA, RSA is an important public key encryption algorithm. From wiki:</p>
<blockquote>
<p>RSA (Rivest–Shamir–Adleman) is a public-key cryptosystem that is widely used for secure data transmission. It is also one of the oldest. The acronym &ldquo;RSA&rdquo; comes from the surnames of Ron Rivest, Adi Shamir and Leonard Adleman, who publicly described the algorithm in 1977</p>
</blockquote>
<p>The math behind RSA requires more mental calories than i can afford on Saturday morning. Anyway, The algorithm is simple (simple-ish). These are steps to calculate integer public and private keys</p>
<p><img src="/rsa.png" alt="Example image"></p>
<p>For public key, I am using naive shot in the dark to generate random <code>e</code> and check if <code>gcd(e,phi) == 1</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#ff0;font-weight:bold">17</span>         self.e = random.randrange(<span style="color:#ff0;font-weight:bold">1</span>, self.phi)
<span style="color:#ff0;font-weight:bold">18</span>         res = math.gcd(self.e, self.phi)
<span style="color:#ff0;font-weight:bold">19</span>         <span style="color:#fff;font-weight:bold">while</span> res != <span style="color:#ff0;font-weight:bold">1</span>:
<span style="color:#ff0;font-weight:bold">20</span>             self.e = random.randrange(<span style="color:#ff0;font-weight:bold">1</span>, self.phi)
<span style="color:#ff0;font-weight:bold">21</span>             res = math.gcd(self.e , self.phi)
</code></pre></div><p>For private key, We need to calculate d where <code>e.d = 1 mod n</code>. apparently d can be calculated with Extended Euclidean algorithm but i am too lazy to write it. So, After little googling I found that it&rsquo;s the same as &ldquo;Modular multiplicative inverse&rdquo;</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#0ff;font-weight:bold">&#34;y = invmod(x, p) such that x*y == 1 ( mod p)&#34;</span>  
</code></pre></div><p>And that can be done with <code>pow()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#ff0;font-weight:bold">8</span>     <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">pow</span>(e, -<span style="color:#ff0;font-weight:bold">1</span>, phi)
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">  <span style="color:#ff0;font-weight:bold">4</span> <span style="color:#fff;font-weight:bold">import</span> math
  <span style="color:#ff0;font-weight:bold">5</span> <span style="color:#fff;font-weight:bold">import</span> random
  <span style="color:#ff0;font-weight:bold">6</span>
  <span style="color:#ff0;font-weight:bold">7</span> <span style="color:#fff;font-weight:bold">def</span> calc_private(e, phi):
  <span style="color:#ff0;font-weight:bold">8</span>     <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">pow</span>(e, -<span style="color:#ff0;font-weight:bold">1</span>, phi)
  <span style="color:#ff0;font-weight:bold">9</span>
 <span style="color:#ff0;font-weight:bold">10</span> <span style="color:#fff;font-weight:bold">class</span> RSA():
 <span style="color:#ff0;font-weight:bold">11</span>     <span style="color:#fff;font-weight:bold">def</span> __init__(self, a ,b):
 <span style="color:#ff0;font-weight:bold">12</span>         self.a, self.b = (a,b)
 <span style="color:#ff0;font-weight:bold">13</span>         self.n = self.a * self.b
 <span style="color:#ff0;font-weight:bold">14</span>         self.phi = (self.a - <span style="color:#ff0;font-weight:bold">1</span>) * (self.b - <span style="color:#ff0;font-weight:bold">1</span>)
 <span style="color:#ff0;font-weight:bold">15</span>
 <span style="color:#ff0;font-weight:bold">16</span>         <span style="color:#007f7f"># public key</span>
 <span style="color:#ff0;font-weight:bold">17</span>         self.e = random.randrange(<span style="color:#ff0;font-weight:bold">1</span>, self.phi)
 <span style="color:#ff0;font-weight:bold">18</span>         res = math.gcd(self.e, self.phi)
 <span style="color:#ff0;font-weight:bold">19</span>         <span style="color:#fff;font-weight:bold">while</span> res != <span style="color:#ff0;font-weight:bold">1</span>:
 <span style="color:#ff0;font-weight:bold">20</span>             self.e = random.randrange(<span style="color:#ff0;font-weight:bold">1</span>, self.phi)
 <span style="color:#ff0;font-weight:bold">21</span>             res = math.gcd(self.e, self.phi)
 <span style="color:#ff0;font-weight:bold">22</span>
 <span style="color:#ff0;font-weight:bold">23</span>         <span style="color:#007f7f"># private key</span>
 <span style="color:#ff0;font-weight:bold">24</span>         self.d = calc_private(self.e, self.phi)
 <span style="color:#ff0;font-weight:bold">25</span>
 <span style="color:#ff0;font-weight:bold">26</span>         <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;n:</span><span style="color:#0ff;font-weight:bold">{</span>self.n<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> phi:</span><span style="color:#0ff;font-weight:bold">{</span>self.phi<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> public key:</span><span style="color:#0ff;font-weight:bold">{</span>self.e<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> private key:</span><span style="color:#0ff;font-weight:bold">{</span>self.d<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
 <span style="color:#ff0;font-weight:bold">27</span>
 <span style="color:#ff0;font-weight:bold">28</span>     <span style="color:#fff;font-weight:bold">def</span> encrypt(self, text):
 <span style="color:#ff0;font-weight:bold">29</span>         cipher = (text ** self.e) % self.n
 <span style="color:#ff0;font-weight:bold">30</span>         <span style="color:#fff;font-weight:bold">return</span> cipher
 <span style="color:#ff0;font-weight:bold">31</span>
 <span style="color:#ff0;font-weight:bold">32</span>     <span style="color:#fff;font-weight:bold">def</span> decrypt(self, text):
 <span style="color:#ff0;font-weight:bold">33</span>         cipher = (text ** self.d) % self.n
 <span style="color:#ff0;font-weight:bold">34</span>         <span style="color:#fff;font-weight:bold">return</span> cipher
 <span style="color:#ff0;font-weight:bold">35</span>
 <span style="color:#ff0;font-weight:bold">36</span>
 <span style="color:#ff0;font-weight:bold">37</span> rsa = RSA(<span style="color:#ff0;font-weight:bold">11</span>,<span style="color:#ff0;font-weight:bold">17</span>)
 <span style="color:#ff0;font-weight:bold">38</span>
 <span style="color:#ff0;font-weight:bold">39</span> i = <span style="color:#ff0;font-weight:bold">5</span>
 <span style="color:#ff0;font-weight:bold">40</span> y  = rsa.encrypt(i)
 <span style="color:#ff0;font-weight:bold">41</span> z = rsa.decrypt(y)
 <span style="color:#ff0;font-weight:bold">42</span> <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;text:</span><span style="color:#0ff;font-weight:bold">{</span>i<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> encrypted:</span><span style="color:#0ff;font-weight:bold">{</span>y<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> decrepted:</span><span style="color:#0ff;font-weight:bold">{</span>z<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
 <span style="color:#ff0;font-weight:bold">43</span>

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM Internals - objections</title>
            <link>/posts/2022/09/uvm-internals-objections/</link>
            <pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/09/uvm-internals-objections/</guid>
            <description>This post is a deep dive into UVM objections implementation. Objections are UVM mechanism to control test shutdown(or stopping shutdown really).. It basically keeps things running until all important things stops running(ie objections are dropped).
raise_objection and drop_objection are used at the start and end of run_phase as follows
55 class test extends test_base; 56 `uvm_component_utils(test) 57 61 62 task run_phase(uvm_phase phase); 65 66 phase.raise_objection(this); ... ... 87 phase.drop_objection(this); 88 endtask RANT: Before I started this, It seemed simple enough but it turned out to be more complicated than I thought.</description>
            <content type="html"><![CDATA[<p>This post is a deep dive into UVM objections implementation. Objections are UVM mechanism to control test shutdown(or stopping shutdown really).. It basically keeps things running until all important things stops running(ie objections are dropped).</p>
<p><code>raise_objection</code> and <code>drop_objection</code> are used at the start and end of run_phase as follows</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#ff0;font-weight:bold">55</span> class test extends test_base;
<span style="color:#ff0;font-weight:bold">56</span>    `uvm_component_utils(test)
<span style="color:#ff0;font-weight:bold">57</span>
<span style="color:#ff0;font-weight:bold">61</span>
<span style="color:#ff0;font-weight:bold">62</span>    <span style="color:#fff;font-weight:bold">task</span> run_phase(uvm_phase phase);
<span style="color:#ff0;font-weight:bold">65</span>
<span style="color:#ff0;font-weight:bold">66</span>       phase.raise_objection(this);
    ...
    ...
<span style="color:#ff0;font-weight:bold">87</span>       phase.drop_objection(this);
<span style="color:#ff0;font-weight:bold">88</span>    <span style="color:#fff;font-weight:bold">endtask</span>
</code></pre></div><p>RANT: Before I started this, It seemed simple enough but it turned out to be more complicated than I thought. Actually, this is my third time trying to write this.</p>
<h1 id="raise_objection-and-drop_objection">raise_objection and drop_objection</h1>
<p><code>raise_objections</code> is called from <code>phase</code>. So,  Jumping to <code>raise_objection</code> defined in <code>uvm_phase.svh</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> uvm_phase::raise_objection (uvm_object obj,
                                                   <span style="color:#fff;font-weight:bold">string</span> description=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>,
                                                   <span style="color:#fff;font-weight:bold">int</span> count=<span style="color:#ff0;font-weight:bold">1</span>);
  phase_done.raise_objection(obj,description,count);
<span style="color:#fff;font-weight:bold">endfunction</span>

</code></pre></div><p><code>phase_done</code> variable is of type <code>uvm_objection</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">uvm_objection phase_done; <span style="color:#007f7f">// phase done objection
</span></code></pre></div><p>Jumping to <code>uvm_objection.svh</code>, <code>raise_objection</code> calls <code>m_raise</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  virtual <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> raise_objection (uvm_object obj=null,
                                         <span style="color:#fff;font-weight:bold">string</span> description=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>,
                                         <span style="color:#fff;font-weight:bold">int</span> count=<span style="color:#ff0;font-weight:bold">1</span>);
    <span style="color:#fff;font-weight:bold">if</span>(obj == null)
      obj = m_top;
    m_cleared = <span style="color:#ff0;font-weight:bold">0</span>;
    m_top_all_dropped = <span style="color:#ff0;font-weight:bold">0</span>;
    m_raise (obj, obj, description, count);
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p><code>m_raise</code> does a lot of things but mostly it does the bookkeeping for objections. In the snippet below, it increments the <code>m_total_count</code> and <code>m_source_count</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"> <span style="color:#ff0;font-weight:bold">398</span>   <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> m_raise (uvm_object obj,
 <span style="color:#ff0;font-weight:bold">399</span>                          uvm_object source_obj,
 <span style="color:#ff0;font-weight:bold">400</span>                          <span style="color:#fff;font-weight:bold">string</span> description=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>,
 <span style="color:#ff0;font-weight:bold">401</span>                          <span style="color:#fff;font-weight:bold">int</span> count=<span style="color:#ff0;font-weight:bold">1</span>);
 <span style="color:#ff0;font-weight:bold">402</span>     <span style="color:#fff;font-weight:bold">int</span> idx;
 <span style="color:#ff0;font-weight:bold">403</span>     uvm_objection_context_object ctxt;
 <span style="color:#ff0;font-weight:bold">404</span> 
 <span style="color:#ff0;font-weight:bold">405</span>     <span style="color:#fff;font-weight:bold">if</span> (m_total_count.exists(obj))
 <span style="color:#ff0;font-weight:bold">406</span>       m_total_count[obj] += count;
 <span style="color:#ff0;font-weight:bold">407</span>     <span style="color:#fff;font-weight:bold">else</span> 
 <span style="color:#ff0;font-weight:bold">408</span>       m_total_count[obj] = count;
 <span style="color:#ff0;font-weight:bold">409</span> 
 <span style="color:#ff0;font-weight:bold">410</span>     <span style="color:#fff;font-weight:bold">if</span> (source_obj==obj) <span style="color:#fff;font-weight:bold">begin</span>
 <span style="color:#ff0;font-weight:bold">411</span>       <span style="color:#fff;font-weight:bold">if</span> (m_source_count.exists(obj))
 <span style="color:#ff0;font-weight:bold">412</span>         m_source_count[obj] += count;
 <span style="color:#ff0;font-weight:bold">413</span>       <span style="color:#fff;font-weight:bold">else</span>
 <span style="color:#ff0;font-weight:bold">414</span>         m_source_count[obj] = count;
 <span style="color:#ff0;font-weight:bold">415</span>     <span style="color:#fff;font-weight:bold">end</span>

</code></pre></div><p>Next, it calls <code>raised</code> which calls <code>comp.raised</code> on that component and triggers <code>m_events</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    raised(obj, source_obj, description, count);
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"> <span style="color:#ff0;font-weight:bold">800</span>   virtual <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> raised (uvm_object obj,
 <span style="color:#ff0;font-weight:bold">801</span>                                 uvm_object source_obj,
 <span style="color:#ff0;font-weight:bold">802</span>                                 <span style="color:#fff;font-weight:bold">string</span> description,
 <span style="color:#ff0;font-weight:bold">803</span>                                 <span style="color:#fff;font-weight:bold">int</span> count);
 <span style="color:#ff0;font-weight:bold">804</span>     uvm_component comp;
 <span style="color:#ff0;font-weight:bold">805</span>     <span style="color:#fff;font-weight:bold">if</span> ($cast(comp,obj))
 <span style="color:#ff0;font-weight:bold">806</span>       comp.raised(this, source_obj, description, count);
 <span style="color:#ff0;font-weight:bold">807</span>     <span style="color:#fff;font-weight:bold">if</span> (m_events.exists(obj))
 <span style="color:#ff0;font-weight:bold">808</span>        -&gt;m_events[obj].raised;
 <span style="color:#ff0;font-weight:bold">809</span>   <span style="color:#fff;font-weight:bold">endfunction</span>

</code></pre></div><p>Enough about <code>raise_objection</code>, Let&rsquo;s look at <code>drop_objection</code>, It calls <code>m_drop</code> which backtracks everything <code>m_raise</code> does.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"> <span style="color:#ff0;font-weight:bold">587</span>   <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> m_drop (uvm_object obj,
 <span style="color:#ff0;font-weight:bold">588</span>                         uvm_object source_obj,
 <span style="color:#ff0;font-weight:bold">589</span>                         <span style="color:#fff;font-weight:bold">string</span> description=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>,
 <span style="color:#ff0;font-weight:bold">590</span>                         <span style="color:#fff;font-weight:bold">int</span> count=<span style="color:#ff0;font-weight:bold">1</span>,
 <span style="color:#ff0;font-weight:bold">591</span>                         <span style="color:#fff;font-weight:bold">int</span> in_top_thread=<span style="color:#ff0;font-weight:bold">0</span>);
 <span style="color:#ff0;font-weight:bold">592</span>
 <span style="color:#ff0;font-weight:bold">600</span>
 <span style="color:#ff0;font-weight:bold">601</span>     <span style="color:#fff;font-weight:bold">if</span> (obj == source_obj) <span style="color:#fff;font-weight:bold">begin</span>
 <span style="color:#ff0;font-weight:bold">602</span>       <span style="color:#fff;font-weight:bold">if</span> (!m_source_count.exists(obj) || (count &gt; m_source_count[obj])) <span style="color:#fff;font-weight:bold">begin</span>
 <span style="color:#ff0;font-weight:bold">603</span>         <span style="color:#fff;font-weight:bold">if</span>(m_cleared)
 <span style="color:#ff0;font-weight:bold">604</span>           <span style="color:#fff;font-weight:bold">return</span>;
 <span style="color:#ff0;font-weight:bold">605</span>         uvm_report_fatal(<span style="color:#0ff;font-weight:bold">&#34;OBJTN_ZERO&#34;</span>, {<span style="color:#0ff;font-weight:bold">&#34;Object </span><span style="color:#0ff;font-weight:bold">\&#34;</span><span style="color:#0ff;font-weight:bold">&#34;</span>, obj.get_full_name(),
 <span style="color:#ff0;font-weight:bold">606</span>           <span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">\&#34;</span><span style="color:#0ff;font-weight:bold"> attempted to drop objection &#39;&#34;</span>,this.get_name(),<span style="color:#0ff;font-weight:bold">&#34;&#39; count below zero&#34;</span>});
 <span style="color:#ff0;font-weight:bold">607</span>         <span style="color:#fff;font-weight:bold">return</span>;
 <span style="color:#ff0;font-weight:bold">608</span>       <span style="color:#fff;font-weight:bold">end</span>
 <span style="color:#ff0;font-weight:bold">609</span>       m_source_count[obj] -= count;
 <span style="color:#ff0;font-weight:bold">610</span>     <span style="color:#fff;font-weight:bold">end</span>
 <span style="color:#ff0;font-weight:bold">611</span>
 <span style="color:#ff0;font-weight:bold">612</span>     m_total_count[obj] -= count;
 <span style="color:#ff0;font-weight:bold">613</span>
</code></pre></div><p>The important part is updating <code>m_scheduled_list</code>. I will circle back to this.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">m_scheduled_list.push_back(ctxt);
</code></pre></div><h1 id="test-termination">Test Termination</h1>
<p>So far, I don&rsquo;t know how the objection stops test termination. Naturally, I look into <code>uvm_phase.svh</code> to understand the phase execution.</p>
<p><code>uvm_phase::execute_phase</code> forks several threads, One of those threads is <code>WAIT_FOR_ALL_DROPPED</code>. basically, it checks <code>m_top_all_dropped</code> and  goes into <code>wait_for</code> waiting for <code>UVM_ALL_DROPPED</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#ff0;font-weight:bold">1197</span>                  <span style="color:#fff;font-weight:bold">if</span> (!phase_done.m_top_all_dropped)
<span style="color:#ff0;font-weight:bold">1198</span>                    phase_done.wait_for(UVM_ALL_DROPPED, top);
</code></pre></div><p><code>wait_for</code> is waiting for m_events to get <code>all_dropped</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"> <span style="color:#ff0;font-weight:bold">880</span>      m_events[obj].waiters++;
 <span style="color:#ff0;font-weight:bold">881</span>      <span style="color:#fff;font-weight:bold">case</span> (objt_event)
 <span style="color:#ff0;font-weight:bold">882</span>        UVM_RAISED:      @(m_events[obj].raised);
 <span style="color:#ff0;font-weight:bold">883</span>        UVM_DROPPED:     @(m_events[obj].dropped);
 <span style="color:#ff0;font-weight:bold">884</span>        UVM_ALL_DROPPED: @(m_events[obj].all_dropped);
 <span style="color:#ff0;font-weight:bold">885</span>      <span style="color:#fff;font-weight:bold">endcase</span>
 <span style="color:#ff0;font-weight:bold">886</span>
</code></pre></div><p><code>all_dropped</code> is the task that sends <code>m_events[obj].all_dropped</code> trigger</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"> <span style="color:#ff0;font-weight:bold">829</span>   <span style="color:#007f7f">// Function: all_dropped
</span><span style="color:#007f7f"></span> <span style="color:#ff0;font-weight:bold">830</span>   <span style="color:#007f7f">//
</span><span style="color:#007f7f"></span> <span style="color:#ff0;font-weight:bold">831</span>   <span style="color:#007f7f">// Objection callback that is called when a &lt;drop_objection&gt; has reached ~obj~,
</span><span style="color:#007f7f"></span> <span style="color:#ff0;font-weight:bold">832</span>   <span style="color:#007f7f">// and the total count for ~obj~ goes to zero. This callback is executed
</span><span style="color:#007f7f"></span> <span style="color:#ff0;font-weight:bold">833</span>   <span style="color:#007f7f">// after the drain time associated with ~obj~. The default implementation
</span><span style="color:#007f7f"></span> <span style="color:#ff0;font-weight:bold">834</span>   <span style="color:#007f7f">// calls &lt;uvm_component::all_dropped&gt;.
</span><span style="color:#007f7f"></span>
 <span style="color:#ff0;font-weight:bold">836</span>   virtual <span style="color:#fff;font-weight:bold">task</span> all_dropped (uvm_object obj,
 <span style="color:#ff0;font-weight:bold">837</span>                             uvm_object source_obj,
 <span style="color:#ff0;font-weight:bold">838</span>                             <span style="color:#fff;font-weight:bold">string</span> description,
 <span style="color:#ff0;font-weight:bold">839</span>                             <span style="color:#fff;font-weight:bold">int</span> count);
 <span style="color:#ff0;font-weight:bold">840</span>     uvm_component comp;
 <span style="color:#ff0;font-weight:bold">841</span>     <span style="color:#fff;font-weight:bold">if</span>($cast(comp,obj))
 <span style="color:#ff0;font-weight:bold">842</span>       comp.all_dropped(this, source_obj, description, count);
 <span style="color:#ff0;font-weight:bold">843</span>     <span style="color:#fff;font-weight:bold">if</span> (m_events.exists(obj))
 <span style="color:#ff0;font-weight:bold">844</span>        -&gt;m_events[obj].all_dropped;
 <span style="color:#ff0;font-weight:bold">845</span>     <span style="color:#fff;font-weight:bold">if</span> (obj == m_top)
 <span style="color:#ff0;font-weight:bold">846</span>       m_top_all_dropped = <span style="color:#ff0;font-weight:bold">1</span>;
 <span style="color:#ff0;font-weight:bold">847</span>   <span style="color:#fff;font-weight:bold">endtask</span>
</code></pre></div><p>What calls <code>all_dropped</code>? I will trace from the end here and work my way backward.</p>
<p><code>all_dropped</code> is called from <code>m_forked_drain</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">all_dropped(obj,source_obj,description, count)
</code></pre></div><p>and <code>m_forked_drain</code> is called from <code>m_execute_scheduled_forks</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"> <span style="color:#ff0;font-weight:bold">697</span> `endif
 <span style="color:#ff0;font-weight:bold">698</span>                       <span style="color:#007f7f">// Execute the forked drain
</span><span style="color:#007f7f"></span> <span style="color:#ff0;font-weight:bold">699</span>                       objection.m_forked_drain(ctxt.obj, ctxt.source_obj, ctxt.description, ctxt.count, <span style="color:#ff0;font-weight:bold">1</span>);
</code></pre></div><p><code>m_execute_scheduled_forks</code> waits for m_scheduled_list to have something.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"> <span style="color:#ff0;font-weight:bold">662</span>   <span style="color:#007f7f">// background process; when non
</span><span style="color:#007f7f"></span> <span style="color:#ff0;font-weight:bold">663</span>   static <span style="color:#fff;font-weight:bold">task</span> m_execute_scheduled_forks();
 <span style="color:#ff0;font-weight:bold">664</span>     <span style="color:#fff;font-weight:bold">while</span>(<span style="color:#ff0;font-weight:bold">1</span>) <span style="color:#fff;font-weight:bold">begin</span>
 <span style="color:#ff0;font-weight:bold">665</span>       <span style="color:#fff;font-weight:bold">wait</span>(m_scheduled_list.size() != <span style="color:#ff0;font-weight:bold">0</span>);
 <span style="color:#ff0;font-weight:bold">666</span>       <span style="color:#fff;font-weight:bold">if</span>(m_scheduled_list.size() != <span style="color:#ff0;font-weight:bold">0</span>) <span style="color:#fff;font-weight:bold">begin</span>
 <span style="color:#ff0;font-weight:bold">667</span>           uvm_objection_context_object c;
 <span style="color:#ff0;font-weight:bold">668</span>           uvm_objection o;
</code></pre></div><p>Notes that <code>m_execute_scheduled_forks</code> is called from <code>m_init_objections</code> which is called from</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"> <span style="color:#ff0;font-weight:bold">764</span>   static <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> m_init_objections();
 <span style="color:#ff0;font-weight:bold">765</span>     <span style="color:#fff;font-weight:bold">fork</span>
 <span style="color:#ff0;font-weight:bold">766</span>       uvm_objection::m_execute_scheduled_forks();
 <span style="color:#ff0;font-weight:bold">767</span>     join_none
 <span style="color:#ff0;font-weight:bold">768</span>   <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#ff0;font-weight:bold">319</span> <span style="color:#fff;font-weight:bold">task</span> uvm_root::run_test(<span style="color:#fff;font-weight:bold">string</span> test_name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>);
<span style="color:#ff0;font-weight:bold">320</span>
<span style="color:#ff0;font-weight:bold">332</span>   <span style="color:#007f7f">// Set up the process that decouples the thread that drops objections from
</span><span style="color:#007f7f"></span><span style="color:#ff0;font-weight:bold">333</span>   <span style="color:#007f7f">// the process that processes drop/all_dropped objections. Thus, if the
</span><span style="color:#007f7f"></span><span style="color:#ff0;font-weight:bold">334</span>   <span style="color:#007f7f">// original calling thread (the &#34;dropper&#34;) gets killed, it does not affect
</span><span style="color:#007f7f"></span><span style="color:#ff0;font-weight:bold">335</span>   <span style="color:#007f7f">// drain-time and propagation of the drop up the hierarchy.
</span><span style="color:#007f7f"></span><span style="color:#ff0;font-weight:bold">336</span>   <span style="color:#007f7f">// Needs to be done in run_test since it needs to be in an
</span><span style="color:#007f7f"></span><span style="color:#ff0;font-weight:bold">337</span>   <span style="color:#007f7f">// initial block to fork a process.
</span><span style="color:#007f7f"></span><span style="color:#ff0;font-weight:bold">338</span>   uvm_objection::m_init_objections();
</code></pre></div><p>Back to <code>m_drop</code>m m_scheduled_list is updated with <code>ctxt</code> which activates the logic in <code>m_execute_scheduled_forks</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">m_scheduled_list.push_back(ctxt)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>python asyncio - not-so-deep dive into asyncio and cpython</title>
            <link>/posts/2022/09/python-asyncio-not-so-deep-dive-into-asyncio-and-cpython/</link>
            <pubDate>Fri, 23 Sep 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/09/python-asyncio-not-so-deep-dive-into-asyncio-and-cpython/</guid>
            <description>This post is about python asyncio. asyncio is python asynchronous implementation providing event loop functionality. From &amp;ldquo;event loop&amp;rdquo; wiki:
 In computer science, the event loop is a programming construct or design pattern that waits for and dispatches events or messages in a program. The event loop works by making a request to some internal or external &amp;ldquo;event provider&amp;rdquo; (that generally blocks the request until an event has arrived), then calls the relevant event handler (&amp;ldquo;dispatches the event&amp;rdquo;).</description>
            <content type="html"><![CDATA[<p>This post is about python asyncio. asyncio is python asynchronous implementation providing event loop functionality. From &ldquo;event loop&rdquo; wiki:</p>
<blockquote>
<p>In computer science, the event loop is a programming construct or design pattern that waits for and dispatches events or messages in a program. The event loop works by making a request to some internal or external &ldquo;event provider&rdquo; (that generally blocks the request until an event has arrived), then calls the relevant event handler (&ldquo;dispatches the event&rdquo;). The event loop is also sometimes referred to as the message dispatcher, message loop, message pump, or run loop.</p>
</blockquote>
<p>asyncio defines <code>awaitables</code>  and one important awaitables is <code>coroutine</code> which is a python task with keyword <code>async</code>. coroutines are called with <code>await</code> from other routines.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">In [<span style="color:#ff0;font-weight:bold">1</span>]: <span style="color:#fff;font-weight:bold">import</span> asyncio

In [<span style="color:#ff0;font-weight:bold">2</span>]: <span style="color:#fff;font-weight:bold">async</span> <span style="color:#fff;font-weight:bold">def</span> main():
   ...: ...     <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#39;hello&#39;</span>)
   ...: ...     <span style="color:#fff;font-weight:bold">await</span> asyncio.sleep(<span style="color:#ff0;font-weight:bold">1</span>)
   ...: ...     <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#39;world&#39;</span>)
   ...:

In [<span style="color:#ff0;font-weight:bold">3</span>]: main
Out[<span style="color:#ff0;font-weight:bold">3</span>]: &lt;function __main__.main()&gt;

In [<span style="color:#ff0;font-weight:bold">4</span>]: main()
Out[<span style="color:#ff0;font-weight:bold">4</span>]: &lt;coroutine <span style="color:#fff;font-weight:bold">object</span> main at <span style="color:#ff0;font-weight:bold">0x7f988a718040</span>&gt;

In [<span style="color:#ff0;font-weight:bold">5</span>]: asyncio.run(main())
hello
world
</code></pre></div><p><code>asyncio.run</code> starts the event loop and adds the coroutines. From the help:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">run(main, *, debug=None)
    Execute the coroutine and <span style="color:#fff;font-weight:bold">return</span> the result.

    This <span style="color:#fff;font-weight:bold">function</span> runs the passed coroutine, taking care of
    managing the asyncio event loop and finalizing asynchronous
    generators.

    This <span style="color:#fff;font-weight:bold">function</span> cannot be called when another asyncio event loop is
    running in the same thread.
</code></pre></div><p>At this point, I am not done yet. I thought to dip my toes into cpython. So, Jumping into cpython, <code>run</code> is imported from <code>cpython/Lib/asyncio/runners.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#ff0;font-weight:bold">188</span>     <span style="color:#fff;font-weight:bold">with</span> Runner(debug=debug) <span style="color:#fff;font-weight:bold">as</span> runner:
<span style="color:#ff0;font-weight:bold">189</span>         <span style="color:#fff;font-weight:bold">return</span> runner.run(main)
</code></pre></div><p>which calls <code>run</code> from <code>Runner</code> in the same file. The <code>_loop</code> is init with <code>self._loop = events.new_event_loop()</code> inside <code>_lazy_init</code>. Then <code>task</code> is created a and passed to <code>run_until_complete</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> <span style="color:#ff0;font-weight:bold">85</span>     <span style="color:#fff;font-weight:bold">def</span> run(self, coro, *, context=<span style="color:#fff;font-weight:bold">None</span>):

    ...
    ...

 <span style="color:#ff0;font-weight:bold">99</span>         task = self._loop.create_task(coro, context=context)
<span style="color:#ff0;font-weight:bold">100</span>
<span style="color:#ff0;font-weight:bold">101</span>         <span style="color:#fff;font-weight:bold">if</span> (threading.current_thread() is threading.main_thread()
<span style="color:#ff0;font-weight:bold">102</span>             and signal.getsignal(signal.SIGINT) is signal.default_int_handler
<span style="color:#ff0;font-weight:bold">103</span>         ):
<span style="color:#ff0;font-weight:bold">104</span>             sigint_handler = functools.partial(self._on_sigint, main_task=task)
<span style="color:#ff0;font-weight:bold">105</span>             <span style="color:#fff;font-weight:bold">try</span>:
<span style="color:#ff0;font-weight:bold">106</span>                 signal.signal(signal.SIGINT, sigint_handler)
<span style="color:#ff0;font-weight:bold">107</span>             <span style="color:#fff;font-weight:bold">except</span> ValueError:
<span style="color:#ff0;font-weight:bold">108</span>                 <span style="color:#007f7f"># `signal.signal` may throw if `threading.main_thread` does</span>
<span style="color:#ff0;font-weight:bold">109</span>                 <span style="color:#007f7f"># not support signals (e.g. embedded interpreter with signals</span>
<span style="color:#ff0;font-weight:bold">110</span>                 <span style="color:#007f7f"># not registered - see gh-91880)</span>
<span style="color:#ff0;font-weight:bold">111</span>                 sigint_handler = <span style="color:#fff;font-weight:bold">None</span>
<span style="color:#ff0;font-weight:bold">112</span>         <span style="color:#fff;font-weight:bold">else</span>:
<span style="color:#ff0;font-weight:bold">113</span>             sigint_handler = <span style="color:#fff;font-weight:bold">None</span>
<span style="color:#ff0;font-weight:bold">114</span>
<span style="color:#ff0;font-weight:bold">115</span>         self._interrupt_count = <span style="color:#ff0;font-weight:bold">0</span>
<span style="color:#ff0;font-weight:bold">116</span>         <span style="color:#fff;font-weight:bold">try</span>:
<span style="color:#ff0;font-weight:bold">117</span>             <span style="color:#fff;font-weight:bold">return</span> self._loop.run_until_complete(task)

</code></pre></div><p>There is section above where it uses <code>partial</code> to pass <code>task</code> to <code>self._on_sigint</code> when SIGINT happens.</p>
<p><code>create_task</code> is called to return task. <code>Task</code> is defined in <code>tasks.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> <span style="color:#ff0;font-weight:bold">429</span>     <span style="color:#fff;font-weight:bold">def</span> create_task(self, coro, *, name=<span style="color:#fff;font-weight:bold">None</span>, context=<span style="color:#fff;font-weight:bold">None</span>):
 <span style="color:#ff0;font-weight:bold">430</span>         <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;Schedule a coroutine object.
</span><span style="color:#0ff;font-weight:bold"> 431
</span><span style="color:#0ff;font-weight:bold"> 432         Return a task object.
</span><span style="color:#0ff;font-weight:bold"> 433         &#34;&#34;&#34;</span>
 <span style="color:#ff0;font-weight:bold">434</span>         self._check_closed()
 <span style="color:#ff0;font-weight:bold">435</span>         <span style="color:#fff;font-weight:bold">if</span> self._task_factory is <span style="color:#fff;font-weight:bold">None</span>:
 <span style="color:#ff0;font-weight:bold">436</span>             task = tasks.Task(coro, loop=self, name=name, context=context)
 <span style="color:#ff0;font-weight:bold">437</span>             <span style="color:#fff;font-weight:bold">if</span> task._source_traceback:
 <span style="color:#ff0;font-weight:bold">438</span>                 <span style="color:#fff;font-weight:bold">del</span> task._source_traceback[-<span style="color:#ff0;font-weight:bold">1</span>]
 <span style="color:#ff0;font-weight:bold">439</span>         <span style="color:#fff;font-weight:bold">else</span>:
 <span style="color:#ff0;font-weight:bold">440</span>             <span style="color:#fff;font-weight:bold">if</span> context is <span style="color:#fff;font-weight:bold">None</span>:
 <span style="color:#ff0;font-weight:bold">441</span>                 <span style="color:#007f7f"># Use legacy API if context is not needed</span>
 <span style="color:#ff0;font-weight:bold">442</span>                 task = self._task_factory(self, coro)
 <span style="color:#ff0;font-weight:bold">443</span>             <span style="color:#fff;font-weight:bold">else</span>:
 <span style="color:#ff0;font-weight:bold">444</span>                 task = self._task_factory(self, coro, context=context)
 <span style="color:#ff0;font-weight:bold">445</span>
 <span style="color:#ff0;font-weight:bold">446</span>             tasks._set_task_name(task, name)
 <span style="color:#ff0;font-weight:bold">447</span>
 <span style="color:#ff0;font-weight:bold">448</span>         <span style="color:#fff;font-weight:bold">return</span> task

</code></pre></div><p>my laptop battery is dying. So, I will have to do part 2 of whatever this is.</p>
]]></content>
        </item>
        
        <item>
            <title>10 years - Now what?</title>
            <link>/posts/2022/09/10-years-now-what/</link>
            <pubDate>Sat, 17 Sep 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/09/10-years-now-what/</guid>
            <description>2 AM Saturday 17 Sep 2022 Cork City
This might be the bad pizza I had earlier talking (BOOM Jerry Maguire reference!),but This year marks ten years since I graduated and I find myself thinking about this question, Should i retire, move to Peru, change my name to Javier, grow a ponytail, start Alpaca farm and never touch a computer never again? Probably Not. I could pull off a ponytail though.</description>
            <content type="html"><![CDATA[<p><img src="/now_what.png" alt="Example image"></p>
<p>2 AM Saturday 17 Sep 2022
Cork City</p>
<p>This might be the bad pizza I had earlier talking (BOOM Jerry Maguire reference!),but This year marks ten years since I graduated and I find myself thinking about this question, Should i retire, move to Peru, change my name to Javier, grow a ponytail, start Alpaca farm and never touch a computer never again?  Probably Not. I could pull off a ponytail though.</p>
<p>The answer is no because i love being an engineer. That&rsquo;s who I am. I love creating new things or breaking old ones to make them better. For me a job was a way to do just that(and pay the rent of course!).  That said, at this point, I need more than that from a job. I need to know I am making some kind of impact. If a tree falls in a forest and no one is around to hear it, does it make a sound?. Basically, I need to know I was successful but how can anyone define success. Is it money, authority, experience, Know-how, legacy? who knows?</p>
<p>The fact is I was lucky to work in an interesting industry with super smart people (way smarter than me), I got to travel a bit for work, Represent my team in front of customers, executives and dozens of industry experts. I worked with super smart nice hardworking people, whom I am still friend with. I got the chance to interview, hire and train many great engineers(even though i was never a manager) who ended up in companies all over the world and that&rsquo;s something I am proud of.</p>
<p>It wasn&rsquo;t not all roses. It can&rsquo;t be. I did quit academia after one year because I couldn&rsquo;t accept the toxic environment(maybe more in separate post). After that I moved to industry, and it&rsquo;s not ia secret that we are in stressful and competitive industry. There is always a new project, a new technology, new language, new standard, new everything. And of course endless stream of deadlines. Did it have a toll on me? yes, Do i regret it? sometimes.  Honestly, A long sabbatical doesn&rsquo;t sound like a bad idea right now. or does it?</p>
<p>Anyway, To answer the real question here &ldquo;Now, What?&rdquo;. No idea. Meanwhile, I will keep doing what i always did. &ldquo;Just keep swimming.&rdquo;..That&rsquo;s another finding nemo reference BTW :)</p>
]]></content>
        </item>
        
        <item>
            <title>Cocotb Deepdive - Makefiles</title>
            <link>/posts/2022/09/cocotb-deepdive-makefiles/</link>
            <pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/09/cocotb-deepdive-makefiles/</guid>
            <description>This post is about the Makefile shipped with cocotb. I will trace Makefiles targets for iverilog but most of the target are generic.
Startin with final outupt with &amp;ldquo;make -n&amp;rdquo; when running one of the examples examples/adder/tests/
cd cocotb/examples/adder/tests export PYTHONPATH=$PWD/../model:$PYTHONPATH echo &amp;#34;+timescale+1ns/1ps&amp;#34; &amp;gt; sim_build/cmds.f iverilog -o sim_build/sim.vvp -D COCOTB_SIM=1 -s adder -f sim_build/cmds.f -g2012 ../hdl/adder.sv MODULE=test_adder TESTCASE= TOPLEVEL=adder TOPLEVEL_LANG=verilog vvp -M ../../../.venv/lib/python3.8/site-packages/cocotb/libs -m libcocotbvpi_icarus sim_build/sim.vvp So, How do we get here?</description>
            <content type="html"><![CDATA[<p>This post is about the Makefile shipped with cocotb. I will trace Makefiles targets for iverilog but most of the target are generic.</p>
<p>Startin with final outupt with &ldquo;make -n&rdquo; when running one of the examples <code>examples/adder/tests/</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#fff;font-weight:bold">cd</span> cocotb/examples/adder/tests
<span style="color:#fff;font-weight:bold">export</span> PYTHONPATH=$PWD/../model:$PYTHONPATH
<span style="color:#fff;font-weight:bold">echo</span> <span style="color:#0ff;font-weight:bold">&#34;+timescale+1ns/1ps&#34;</span> &gt; sim_build/cmds.f
iverilog -o sim_build/sim.vvp -D COCOTB_SIM=<span style="color:#ff0;font-weight:bold">1</span> -s adder -f sim_build/cmds.f -g2012   ../hdl/adder.sv
MODULE=test_adder TESTCASE= TOPLEVEL=adder TOPLEVEL_LANG=verilog       vvp -M ../../../.venv/lib/python3.8/site-packages/cocotb/libs -m libcocotbvpi_icarus   sim_build/sim.vvp
</code></pre></div><p>So, How do we get here? Starting with  <code>examples/adder/tests/Makefile</code>, where <code>Makefile.sim</code> is included.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#f00">include</span> <span style="color:#fff;font-weight:bold">$(</span>shell cocotb-config --makefiles<span style="color:#fff;font-weight:bold">)</span><span style="color:#f00">/Makefile.sim</span>
</code></pre></div><p>And in <code>Makefile.sim</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#f00">include</span> <span style="color:#fff;font-weight:bold">$(</span>COCOTB_MAKEFILES_DIR<span style="color:#fff;font-weight:bold">)</span><span style="color:#f00">/simulators/Makefile.</span><span style="color:#fff;font-weight:bold">$(</span>SIM_LOWERCASE<span style="color:#fff;font-weight:bold">)</span>
</code></pre></div><p>And in <code>Makefile.icarus</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"> <span style="color:#ff0;font-weight:bold">65</span> COMPILE_ARGS += -f <span style="color:#fff;font-weight:bold">$(</span>SIM_BUILD<span style="color:#fff;font-weight:bold">)</span>/cmds.f -g2012 <span style="color:#007f7f"># Default to latest SystemVerilog standard</span>
 <span style="color:#ff0;font-weight:bold">66</span>
 <span style="color:#ff0;font-weight:bold">67</span> <span style="color:#007f7f"># Compilation phase</span>
 <span style="color:#ff0;font-weight:bold">68</span> <span style="color:#fff;font-weight:bold">$(</span>SIM_BUILD<span style="color:#fff;font-weight:bold">)</span>/sim.vvp: <span style="color:#fff;font-weight:bold">$(</span>VERILOG_SOURCES<span style="color:#fff;font-weight:bold">)</span> <span style="color:#fff;font-weight:bold">$(</span>CUSTOM_COMPILE_DEPS<span style="color:#fff;font-weight:bold">)</span> | <span style="color:#fff;font-weight:bold">$(</span>SIM_BUILD<span style="color:#fff;font-weight:bold">)</span>
 <span style="color:#ff0;font-weight:bold">69</span>     @echo <span style="color:#0ff;font-weight:bold">&#34;+timescale+</span><span style="color:#fff;font-weight:bold">$(</span>COCOTB_HDL_TIMEUNIT<span style="color:#fff;font-weight:bold">)</span><span style="color:#0ff;font-weight:bold">/</span><span style="color:#fff;font-weight:bold">$(</span>COCOTB_HDL_TIMEPRECISION<span style="color:#fff;font-weight:bold">)</span><span style="color:#0ff;font-weight:bold">&#34;</span> &gt; <span style="color:#fff;font-weight:bold">$(</span>SIM_BUILD<span style="color:#fff;font-weight:bold">)</span>/cmds.f
 <span style="color:#ff0;font-weight:bold">70</span>     <span style="color:#fff;font-weight:bold">$(</span>CMD<span style="color:#fff;font-weight:bold">)</span> -o <span style="color:#fff;font-weight:bold">$(</span>SIM_BUILD<span style="color:#fff;font-weight:bold">)</span>/sim.vvp -D COCOTB_SIM=<span style="color:#ff0;font-weight:bold">1</span> <span style="color:#fff;font-weight:bold">$(</span>TOPMODULE_ARG<span style="color:#fff;font-weight:bold">)</span> <span style="color:#fff;font-weight:bold">$(</span>COMPILE_ARGS<span style="color:#fff;font-weight:bold">)</span> <span style="color:#fff;font-weight:bold">$(</span>EXTRA_ARGS<span style="color:#fff;font-weight:bold">)</span> <span style="color:#fff;font-weight:bold">$(</span>VERILOG_SOURCES<span style="color:#fff;font-weight:bold">)</span>
 <span style="color:#ff0;font-weight:bold">71</span>
 <span style="color:#ff0;font-weight:bold">72</span> <span style="color:#007f7f"># Execution phase</span>
 <span style="color:#ff0;font-weight:bold">73</span>
 <span style="color:#ff0;font-weight:bold">74</span> <span style="color:#fff;font-weight:bold">$(</span>COCOTB_RESULTS_FILE<span style="color:#fff;font-weight:bold">)</span>: <span style="color:#fff;font-weight:bold">$(</span>SIM_BUILD<span style="color:#fff;font-weight:bold">)</span>/sim.vvp <span style="color:#fff;font-weight:bold">$(</span>CUSTOM_SIM_DEPS<span style="color:#fff;font-weight:bold">)</span>
 <span style="color:#ff0;font-weight:bold">75</span>     <span style="color:#fff;font-weight:bold">$(</span>RM<span style="color:#fff;font-weight:bold">)</span> <span style="color:#fff;font-weight:bold">$(</span>COCOTB_RESULTS_FILE<span style="color:#fff;font-weight:bold">)</span>
 <span style="color:#ff0;font-weight:bold">76</span>
 <span style="color:#ff0;font-weight:bold">77</span>     MODULE=<span style="color:#fff;font-weight:bold">$(</span>MODULE<span style="color:#fff;font-weight:bold">)</span> TESTCASE=<span style="color:#fff;font-weight:bold">$(</span>TESTCASE<span style="color:#fff;font-weight:bold">)</span> TOPLEVEL=<span style="color:#fff;font-weight:bold">$(</span>TOPLEVEL<span style="color:#fff;font-weight:bold">)</span> TOPLEVEL_LANG=<span style="color:#fff;font-weight:bold">$(</span>TOPLEVEL_LANG<span style="color:#fff;font-weight:bold">)</span> <span style="color:#0ff;font-weight:bold">\
</span><span style="color:#0ff;font-weight:bold"></span> <span style="color:#ff0;font-weight:bold">78</span>         <span style="color:#fff;font-weight:bold">$(</span>SIM_CMD_PREFIX<span style="color:#fff;font-weight:bold">)</span> <span style="color:#fff;font-weight:bold">$(</span>ICARUS_BIN_DIR<span style="color:#fff;font-weight:bold">)</span>/vvp -M <span style="color:#fff;font-weight:bold">$(</span>shell cocotb-config --lib-dir<span style="color:#fff;font-weight:bold">)</span> -m <span style="color:#fff;font-weight:bold">$(</span>shell cocotb-config --lib-name vpi icarus<span style="color:#fff;font-weight:bold">)</span> <span style="color:#fff;font-weight:bold">$(</span>SIM_ARGS<span style="color:#fff;font-weight:bold">)</span> <span style="color:#fff;font-weight:bold">$(</span>EXTRA_ARGS<span style="color:#fff;font-weight:bold">)</span> <span style="color:#fff;font-weight:bold">$(</span>SIM_    BUILD<span style="color:#fff;font-weight:bold">)</span>/sim.vvp <span style="color:#fff;font-weight:bold">$(</span>PLUSARGS<span style="color:#fff;font-weight:bold">)</span>
 <span style="color:#ff0;font-weight:bold">79</span>
 <span style="color:#ff0;font-weight:bold">80</span>     <span style="color:#fff;font-weight:bold">$(</span>call check_for_results_file<span style="color:#fff;font-weight:bold">)</span>
</code></pre></div><p>Also, in <code>Makefile.inc</code> is included where all common targets and env vars  are defined.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#f00">include</span> <span style="color:#fff;font-weight:bold">$(</span>shell cocotb-config --makefiles<span style="color:#fff;font-weight:bold">)</span><span style="color:#f00">/Makefile.inc</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Recruiting - My 2cents </title>
            <link>/posts/2022/09/recruiting-my-2cents/</link>
            <pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/09/recruiting-my-2cents/</guid>
            <description>I have been seeing a lot hate towards recruiters these days and i can&amp;rsquo;t really understand why. really Why?
The more I think about it, recruiting is a hard job. I know it may sound simplistic(and I may be totally wrong here), It is a sales job but it is about selling the idea of candidate to a company and selling the idea of company to a candidate. It is about finding the perfect person for the perfect job at the perfect time.</description>
            <content type="html"><![CDATA[<p>I have been seeing a lot hate towards recruiters these days and i can&rsquo;t really understand why. really Why?</p>
<p>The more I think about it, recruiting is a hard job. I know it may sound simplistic(and I may be totally wrong here), It is a sales job but it is about selling the idea of candidate to a company and selling the idea of company to a candidate. It is about finding the perfect person for the perfect job at the perfect time.</p>
<p>Sure, Like any profession, There are bad apples but generalization and prejudice is not helpful. if you meet bad one, Just move on.  And let&rsquo;s face it, people in tech are not exactly the easiest people to recruit. So, there is that.</p>
<p>Also, I hear people saying they ignore recruiters all the time and I don&rsquo;t like hearing that. We can always reply and say thank you. That&rsquo;s just professional courtesy.</p>
]]></content>
        </item>
        
        <item>
            <title>Cocotb Deepdive - Clock and Timer Trigger</title>
            <link>/posts/2022/09/cocotb-deepdive-clock-and-timer-trigger/</link>
            <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/09/cocotb-deepdive-clock-and-timer-trigger/</guid>
            <description>cocob provides a periodic clock class Clock which depends on Timer trigger. I will start with an examples of Clock usage.
clock = Clock(dut.clk, 10, units=&amp;#34;us&amp;#34;) cocotb.start_soon(clock.start()) Note That start_soon is just starting cocotb coroutine after the current routines yields. Any let&amp;rsquo;s focus on Clock
In Clock, The initialization __init__ sets some local vars (most importantly period and half_period)
118 BaseClock.__init__(self, signal) 126 self.period = get_sim_steps(period, units) 127 self.half_period = get_sim_steps(period / 2.</description>
            <content type="html"><![CDATA[<p>cocob provides a periodic clock class <code>Clock</code> which depends on <code>Timer</code> trigger. I will start with an examples of <code>Clock</code> usage.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">clock = Clock(dut.clk, <span style="color:#ff0;font-weight:bold">10</span>, units=<span style="color:#0ff;font-weight:bold">&#34;us&#34;</span>)
cocotb.start_soon(clock.start())
</code></pre></div><p>Note That <code>start_soon</code> is just starting cocotb coroutine after the current routines yields. Any let&rsquo;s focus on <code>Clock</code></p>
<p>In <code>Clock</code>, The initialization <code>__init__</code> sets some local vars (most importantly period and half_period)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#ff0;font-weight:bold">118</span>         BaseClock.__init__(self, signal)
<span style="color:#ff0;font-weight:bold">126</span>         self.period = get_sim_steps(period, units)
<span style="color:#ff0;font-weight:bold">127</span>         self.half_period = get_sim_steps(period / <span style="color:#ff0;font-weight:bold">2.0</span>, units)
<span style="color:#ff0;font-weight:bold">128</span>         self.frequency = <span style="color:#ff0;font-weight:bold">1.0</span> / get_time_from_sim_steps(self.period, units=<span style="color:#0ff;font-weight:bold">&#34;us&#34;</span>)
<span style="color:#ff0;font-weight:bold">130</span>         self.signal = signal
</code></pre></div><p>Side note, <code>get_sim_steps</code> calculates steps from real time passed to <code>Clock</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#ff0;font-weight:bold">122</span> <span style="color:#fff;font-weight:bold">def</span> get_sim_steps(
<span style="color:#ff0;font-weight:bold">123</span>     time: Union[Real, Decimal], units: <span style="color:#fff;font-weight:bold">str</span> = <span style="color:#0ff;font-weight:bold">&#34;step&#34;</span>, *, round_mode: <span style="color:#fff;font-weight:bold">str</span> = <span style="color:#0ff;font-weight:bold">&#34;error&#34;</span>
<span style="color:#ff0;font-weight:bold">124</span> ) -&gt; <span style="color:#fff;font-weight:bold">int</span>:
<span style="color:#ff0;font-weight:bold">125</span>     <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;Calculates the number of simulation time steps for a given amount of *time*.
</span></code></pre></div><p><code>start</code> creates a <code>Timer</code> and keeps toggling when that timer triggers. See lines 157-160 below.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#ff0;font-weight:bold">148</span>         t = Timer(self.half_period)
<span style="color:#ff0;font-weight:bold">149</span>         <span style="color:#fff;font-weight:bold">if</span> cycles is <span style="color:#fff;font-weight:bold">None</span>:
<span style="color:#ff0;font-weight:bold">150</span>             it = itertools.count()
<span style="color:#ff0;font-weight:bold">151</span>         <span style="color:#fff;font-weight:bold">else</span>:
<span style="color:#ff0;font-weight:bold">152</span>             it = <span style="color:#fff;font-weight:bold">range</span>(cycles)
<span style="color:#ff0;font-weight:bold">153</span>
<span style="color:#ff0;font-weight:bold">154</span>         <span style="color:#007f7f"># branch outside for loop for performance (decision has to be taken only once)</span>
<span style="color:#ff0;font-weight:bold">155</span>         <span style="color:#fff;font-weight:bold">if</span> start_high:
<span style="color:#ff0;font-weight:bold">156</span>             <span style="color:#fff;font-weight:bold">for</span> _ in it:
<span style="color:#ff0;font-weight:bold">157</span>                 self.signal.value = <span style="color:#ff0;font-weight:bold">1</span>
<span style="color:#ff0;font-weight:bold">158</span>                 <span style="color:#fff;font-weight:bold">await</span> t
<span style="color:#ff0;font-weight:bold">159</span>                 self.signal.value = <span style="color:#ff0;font-weight:bold">0</span>
<span style="color:#ff0;font-weight:bold">160</span>                 <span style="color:#fff;font-weight:bold">await</span> t
<span style="color:#ff0;font-weight:bold">161</span>         <span style="color:#fff;font-weight:bold">else</span>:
<span style="color:#ff0;font-weight:bold">162</span>             <span style="color:#fff;font-weight:bold">for</span> _ in it:
<span style="color:#ff0;font-weight:bold">163</span>                 self.signal.value = <span style="color:#ff0;font-weight:bold">0</span>
<span style="color:#ff0;font-weight:bold">164</span>                 <span style="color:#fff;font-weight:bold">await</span> t
<span style="color:#ff0;font-weight:bold">165</span>                 self.signal.value = <span style="color:#ff0;font-weight:bold">1</span>
<span style="color:#ff0;font-weight:bold">166</span>                 <span style="color:#fff;font-weight:bold">await</span> t
</code></pre></div><p>In <code>Timer</code>, <code>cbhdl</code> is set to <code>register_timed_callback</code> with required time and callback.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#ff0;font-weight:bold">167</span> <span style="color:#fff;font-weight:bold">class</span> Timer(GPITrigger):
<span style="color:#ff0;font-weight:bold">168</span>     <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;Fire after the specified simulation time period has elapsed.&#34;&#34;&#34;</span>
<span style="color:#ff0;font-weight:bold">169</span>
...
...
 <span style="color:#ff0;font-weight:bold">270</span>     <span style="color:#fff;font-weight:bold">def</span> prime(self, callback):
 <span style="color:#ff0;font-weight:bold">271</span>         <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;Register for a timed callback.&#34;&#34;&#34;</span>
 <span style="color:#ff0;font-weight:bold">272</span>         <span style="color:#fff;font-weight:bold">if</span> self.cbhdl is <span style="color:#fff;font-weight:bold">None</span>:
 <span style="color:#ff0;font-weight:bold">273</span>             self.cbhdl = simulator.register_timed_callback(
 <span style="color:#ff0;font-weight:bold">274</span>                 self.sim_steps, callback, self
 <span style="color:#ff0;font-weight:bold">275</span>             )
 <span style="color:#ff0;font-weight:bold">276</span>             <span style="color:#fff;font-weight:bold">if</span> self.cbhdl is <span style="color:#fff;font-weight:bold">None</span>:
 <span style="color:#ff0;font-weight:bold">277</span>                 <span style="color:#fff;font-weight:bold">raise</span> TriggerException(<span style="color:#0ff;font-weight:bold">&#34;Unable set up </span><span style="color:#0ff;font-weight:bold">%s</span><span style="color:#0ff;font-weight:bold"> Trigger&#34;</span> % (<span style="color:#fff;font-weight:bold">str</span>(self)))
 <span style="color:#ff0;font-weight:bold">278</span>         GPITrigger.prime(self, callback)
</code></pre></div><p><code>register_timed_callback</code> is cpython implementation to register VPI callback that calls the routine passed from python.  scheduler is the one calling the `prime() with callback coro.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"> <span style="color:#ff0;font-weight:bold">523</span>     gpi_sim_hdl sig_hdl = ((gpi_hdl_Object&lt;gpi_sim_hdl&gt; *)pSigHdl)-&gt;hdl;
 <span style="color:#ff0;font-weight:bold">524</span>
 <span style="color:#ff0;font-weight:bold">525</span>     <span style="color:#007f7f">// Extract the callback function
</span><span style="color:#007f7f"></span> <span style="color:#ff0;font-weight:bold">526</span>     PyObject *function = PyTuple_GetItem(args, <span style="color:#ff0;font-weight:bold">1</span>);
 <span style="color:#ff0;font-weight:bold">527</span>     if (!PyCallable_Check(function)) {
 <span style="color:#ff0;font-weight:bold">528</span>         PyErr_SetString(PyExc_TypeError,
 <span style="color:#ff0;font-weight:bold">529</span>                         <span style="color:#0ff;font-weight:bold">&#34;Attempt to register value change callback without &#34;</span>
 <span style="color:#ff0;font-weight:bold">530</span>                         <span style="color:#0ff;font-weight:bold">&#34;passing a callable callback!</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>);
 <span style="color:#ff0;font-weight:bold">531</span>         <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">NULL</span>;
 <span style="color:#ff0;font-weight:bold">532</span>     }
 <span style="color:#ff0;font-weight:bold">533</span>     Py_INCREF(function);
 <span style="color:#ff0;font-weight:bold">534</span>
 <span style="color:#ff0;font-weight:bold">535</span>     PyObject *pedge = PyTuple_GetItem(args, <span style="color:#ff0;font-weight:bold">2</span>);
 <span style="color:#ff0;font-weight:bold">536</span>     <span style="color:#fff;font-weight:bold">int</span> edge = (<span style="color:#fff;font-weight:bold">int</span>)PyLong_AsLong(pedge);
 <span style="color:#ff0;font-weight:bold">537</span>
 <span style="color:#ff0;font-weight:bold">538</span>     <span style="color:#007f7f">// Remaining args for function
</span><span style="color:#007f7f"></span> <span style="color:#ff0;font-weight:bold">539</span>     PyObject *fArgs = PyTuple_GetSlice(args, <span style="color:#ff0;font-weight:bold">3</span>, numargs);  <span style="color:#007f7f">// New reference
</span><span style="color:#007f7f"></span> <span style="color:#ff0;font-weight:bold">540</span>     if (fArgs == <span style="color:#fff;font-weight:bold">NULL</span>) {
 <span style="color:#ff0;font-weight:bold">541</span>         <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">NULL</span>;
 <span style="color:#ff0;font-weight:bold">542</span>     }
 <span style="color:#ff0;font-weight:bold">543</span>
 <span style="color:#ff0;font-weight:bold">544</span>     callback_data *cb_data = callback_data_new(function, fArgs, <span style="color:#fff;font-weight:bold">NULL</span>);
 <span style="color:#ff0;font-weight:bold">545</span>     if (cb_data == <span style="color:#fff;font-weight:bold">NULL</span>) {
 <span style="color:#ff0;font-weight:bold">546</span>         <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">NULL</span>;
</code></pre></div><p>For completeness, <code>GPITrigger</code> and <code>Trigger</code> classes are below. The important part in <code>Trigger</code> is <code>__await__</code> as this is what get back when await is called. Note that Trigger is <code>Awaitable</code> with <code>__await__</code> return <code>self</code> when coro tries to await the trigger</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#ff0;font-weight:bold">142</span> <span style="color:#fff;font-weight:bold">class</span> GPITrigger(Trigger):
<span style="color:#ff0;font-weight:bold">143</span>     <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;Base Trigger class for GPI triggers.
</span><span style="color:#0ff;font-weight:bold">...
</span><span style="color:#0ff;font-weight:bold">...
</span><span style="color:#0ff;font-weight:bold">150     def __init__(self):
</span><span style="color:#0ff;font-weight:bold">151         Trigger.__init__(self)
</span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#ff0;font-weight:bold">65</span> <span style="color:#fff;font-weight:bold">class</span> Trigger(Awaitable):
<span style="color:#ff0;font-weight:bold">66</span>     <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;Base class to derive from.&#34;&#34;&#34;</span>
...
...
<span style="color:#ff0;font-weight:bold">121</span>     @property
<span style="color:#ff0;font-weight:bold">122</span>     <span style="color:#fff;font-weight:bold">def</span> _outcome(self):
<span style="color:#ff0;font-weight:bold">123</span>         <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;The result that `await this_trigger` produces in a coroutine.
</span><span style="color:#0ff;font-weight:bold">124
</span><span style="color:#0ff;font-weight:bold">125         The default is to produce the trigger itself, which is done for
</span><span style="color:#0ff;font-weight:bold">126         ease of use with :class:`~cocotb.triggers.First`.
</span><span style="color:#0ff;font-weight:bold">127         &#34;&#34;&#34;</span>
<span style="color:#ff0;font-weight:bold">128</span>         <span style="color:#fff;font-weight:bold">return</span> outcomes.Value(self)
<span style="color:#ff0;font-weight:bold">129</span>
<span style="color:#ff0;font-weight:bold">130</span>     <span style="color:#fff;font-weight:bold">def</span> __await__(self):
<span style="color:#ff0;font-weight:bold">131</span>         <span style="color:#007f7f"># hand the trigger back to the scheduler trampoline</span>
<span style="color:#ff0;font-weight:bold">132</span>         <span style="color:#fff;font-weight:bold">return</span> (<span style="color:#fff;font-weight:bold">yield</span> self)
<span style="color:#ff0;font-weight:bold">133</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Solving Magic Square using Systemverilog Constraints</title>
            <link>/posts/2022/09/solving-magic-square-using-systemverilog-constraints/</link>
            <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/09/solving-magic-square-using-systemverilog-constraints/</guid>
            <description>This is probably the last post in this series, at least until i find an interesting problem.
Magic square is an interesting one problem indeed. From wiki:
 In recreational mathematics, a square array of numbers, usually positive integers, is called a magic square if the sums of the numbers in each row, each column, and both main diagonals are the same
 It&amp;rsquo;s interesting because constraints span across rows, columns and diagonals.</description>
            <content type="html"><![CDATA[<p>This is probably the last post in this series, at least until i find an interesting problem.</p>
<p>Magic square is an interesting one problem indeed. From <a href="https://en.wikipedia.org/wiki/Magic_square">wiki</a>:</p>
<blockquote>
<p>In recreational mathematics, a square array of numbers, usually positive integers, is called a magic square if the sums of the numbers in each row, each column, and both main diagonals are the same</p>
</blockquote>
<p><img src="/magic-square.png" alt="Example image"></p>
<p>It&rsquo;s interesting because constraints span across rows, columns and diagonals. So, I used the same technique as in the no-three-line problem but extending to diagonals(positive and negative) as well.</p>
<p>Starting with declarations</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    <span style="color:#fff;font-weight:bold">parameter</span> SIZE=<span style="color:#ff0;font-weight:bold">3</span>;
    rand <span style="color:#fff;font-weight:bold">int</span> S;
    rand <span style="color:#fff;font-weight:bold">int</span> grid[SIZE][SIZE];
    rand <span style="color:#fff;font-weight:bold">int</span> gridt[SIZE][SIZE];
    rand <span style="color:#fff;font-weight:bold">int</span> diagp[SIZE];
    rand <span style="color:#fff;font-weight:bold">int</span> diagn[SIZE];
</code></pre></div><p><code>S</code> variable is the sum. I initially put it down as  <code>0:100</code> but i can force it with inline constraints anyway. The other constraints are for rows and columns which are the same as no-three-in-line.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    constraint S_value{S inside {[<span style="color:#ff0;font-weight:bold">0</span>:<span style="color:#ff0;font-weight:bold">100</span>]};}

    constraint grid_value  { foreach(grid[i,j]) grid[i][j] inside {[<span style="color:#ff0;font-weight:bold">0</span>:S]}; }
    constraint grid_row  {foreach(grid[i])  grid[i].sum() == S;}

    constraint gridt_value { foreach(gridt[i,j])  gridt[i][j] inside {[<span style="color:#ff0;font-weight:bold">0</span>:S]}; }
    constraint gridt_row {foreach(gridt[i])  gridt[i].sum() == S;}

    constraint cols {
        foreach(grid[i, j]) {
            grid[i][j] == gridt[j][i];
        }
    }
</code></pre></div><p>For positive diagonal, <code>grid[i][i]</code> works perfectly (well it is a square). for negative diagonal, <code>grid[i][N-1-i]</code> should works as well. as we move down rows, the negative diagonal move left from last column (N-1) to column 0.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    constraint diagp_value { foreach(diagp[i]) diagp[i] inside {[<span style="color:#ff0;font-weight:bold">0</span>:S]};}
    constraint diagp_row   { diagp.sum() == S;}

    constraint pdaig {
        foreach(grid[i]) {
               (grid[i][i] == diagp[i]);
        }
    }
    constraint diagn_value  { foreach(diagn[i]) diagn[i] inside {[<span style="color:#ff0;font-weight:bold">0</span>:S]};}
    constraint diagn_row    { diagn.sum() == S ;}

    constraint ndaig {
        foreach(grid[i]) {
                (grid[i][SIZE-<span style="color:#ff0;font-weight:bold">1</span>-i] == diagn[i]);
        }
    }
</code></pre></div><p>Finally, <code>S</code> should be solved before other constraints(if i don&rsquo;t use inline constraints). So, I am using <code>solve before</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    constraint sum_c {
        solve S before grid;
        solve S before gridt;
        solve S before diagp;
        solve S before diagn;
    }
</code></pre></div><p>And the output for <code>S=15</code> would be</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#ff0;font-weight:bold">2</span> <span style="color:#ff0;font-weight:bold">7</span> <span style="color:#ff0;font-weight:bold">6</span>
<span style="color:#ff0;font-weight:bold">9</span> <span style="color:#ff0;font-weight:bold">5</span> <span style="color:#ff0;font-weight:bold">1</span>
<span style="color:#ff0;font-weight:bold">4</span> <span style="color:#ff0;font-weight:bold">3</span> <span style="color:#ff0;font-weight:bold">8</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Commentary on Jerry Maguire mission statement</title>
            <link>/posts/2022/09/commentary-on-jerry-maguire-mission-statement/</link>
            <pubDate>Mon, 05 Sep 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/09/commentary-on-jerry-maguire-mission-statement/</guid>
            <description>Jerry Maguire is one of my all-time favourite movies. I find the mission statement Jerry wrote in his Miami hotel room the most interesting part. The idea of having a moment of clarity (breakhthrough not a breakdown) is life-changing. He (i know Jerry is not real :) ) wrote a genius document that applies to any profession really not just sports agents.
Cameron Crowe released the full mission statement on the 20th anniversary at link.</description>
            <content type="html"><![CDATA[<p>Jerry Maguire is one of my all-time favourite movies. I find the mission statement Jerry wrote in his Miami hotel room the most interesting part. The idea of having a moment of clarity (breakhthrough not a breakdown) is life-changing. He (i know Jerry is not real :) ) wrote a genius document that applies to any profession really not just sports agents.</p>
<p>Cameron Crowe released the full mission statement on the 20th anniversary at <a href="https://www.theuncool.com/2016/04/25/jerry-maguire-mission-statement/">link</a>. Jerry reads parts of it in the movie but when I read the whole thing, I couldn&rsquo;t believe how it spoke to me.</p>
<p>The mission statement is titled &ldquo;THE THINGS WE THINK AND DO NOT SAY&rdquo;. Below are some of my favourite paragraphs and my commentary.</p>
<blockquote>
<p>And yet, as I sit here in the wonderful Miami Hilton, I have never been so happy to be alive. I have said “later” to most anything that required true sacrifice. Later I will spend a weekend reading real books, not just magazines. Later I will visit my grandmother who is 100 and unable to really know the difference. Later I will visit the clients whose careers are over, but of course I promised to stay in touch. Later later later later. It is too easy to say “later” because we all believe our work to be too important to stop, minute to minute, for something that might interfere with the restless and relentless pursuit of forward motion. Of greater success. Make no mistake, I am a huge fan of success. But tonight, I propose a better kind of success. I could be wrong, but if you keep reading and I keep writing, we might get there together.</p>
</blockquote>
<p>Well, I couldn&rsquo;t have said it better. it&rsquo;s all about moving forward and success. Right? You work and expect that would make you successful and maybe then you would be happy. Maybe!? Maybe not.</p>
<blockquote>
<p>Somehow all this has been bubbling up inside me. A man is the sum total of his experiences. And it is now that I am interested in shaping the experiences to come. What is the future of what we do? Give me a goal, and I will achieve it. That has been my secret design for most of my life. Perhaps you are the same. We’re all goal-oriented, so I hereby present a goal.</p>
</blockquote>
<blockquote>
<p>How can we do something surprising, and memorable with our lives? How can we turn this job, in small but important ways, into a better representation of ourselves? Most of us would easily say that we are our jobs. That’s obvious from the late hours we all keep. So then, it is bigger than work, isn’t it? It is about us.</p>
</blockquote>
<p>The idea of experiences defining a person (and their future) is interesting. Are our jobs representation of how we are? when someone says &ldquo;i am my job&rdquo;, Does it even make sense? I thought of myself as a person who would say that. but now i am not too sure.</p>
<blockquote>
<p>I have never been a writer, but I can see how this great lost art will never truly die. Putting words to paper is a sacred thing. It’s more than a phone conversation, it is a document. It is something you are putting on paper. The relationship between a phone call and a letter is the difference between a magazine and a phone book. One you leave on a plane, the other you save.</p>
</blockquote>
<p>&ldquo;Putting words in paper&rdquo;, as he puts it, is an art that will live forever. Abraham Lincoln said &lsquo;The written word may be man&rsquo;s greatest invention. It allows us to converse with the dead, the absent, and the unborn&rsquo; and it does seem like the greatest invention. In this context, Jerry is comparing a letter to phone call. But it explains why he is writing his mission statement. somethings are meant to be read and admired. it is like &ldquo;If a tree falls in the forest with no ears to hear does it make a sound&rdquo; situation.</p>
]]></content>
        </item>
        
        <item>
            <title>Linux tap interface - Hello World</title>
            <link>/posts/2022/09/linux-tap-interface-hello-world/</link>
            <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/09/linux-tap-interface-hello-world/</guid>
            <description>tap network interface is a way to forward data layer packets (ethernet) to user space. it is very similar to tun(actually they share command and /dev). note that run works on network layer (forwards IP packets to user space).
We will use 3 shells in this examples
Shell 1 Create interface and start a ping
sudo ip tuntap add mode tap dev tap0 sudo ip addr add 10.0.3.0/24 dev tap0 sudo ip link set dev tap0 up ip route get 10.</description>
            <content type="html"><![CDATA[<p>tap network interface is a way to forward data layer packets (ethernet) to user space. it is very similar to tun(actually they share command and /dev). note that run works on network layer (forwards IP packets to user space).</p>
<p>We will use 3 shells in this examples</p>
<h1 id="shell-1">Shell 1</h1>
<p>Create interface and start a ping</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo ip tuntap add mode tap dev tap0
sudo ip addr add 10.0.3.0/24 dev tap0
sudo ip link <span style="color:#fff;font-weight:bold">set</span> dev tap0 up
ip route get 10.0.3.50
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ping 10.0.3.30
</code></pre></div><h1 id="shell-2">Shell 2</h1>
<p>Start tcp capture.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo tcpdump -i tap0 -w samepl.pcap
tcpdump: listening on tap0, link-type EN10MB (Ethernet), capture size <span style="color:#ff0;font-weight:bold">262144</span> bytes
^C5 packets captured
<span style="color:#ff0;font-weight:bold">5</span> packets received by filter
</code></pre></div><p>Note, the message says is waiting on <code>link-type Ethernet</code>. but in case of tun it would be</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">tcpdump: listening on tun0, link-type RAW (Raw IP), capture size <span style="color:#ff0;font-weight:bold">262144</span> bytes
</code></pre></div><h1 id="shell-3">Shell 3</h1>
<p>The user space program is similar to tun but but with difference flags(IFF_TAP)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;fcntl.h&gt;  /* O_RDWR */</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;string.h&gt; /* memset(), memcpy() */</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;stdio.h&gt; /* perror(), printf(), fprintf() */</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;stdlib.h&gt; /* exit(), malloc(), free() */</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;sys/ioctl.h&gt; /* ioctl() */</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;unistd.h&gt; /* read(), close() */</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#007f7f">/* includes for struct ifreq, etc */</span>
<span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;sys/types.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;sys/socket.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;linux/if.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;linux/if_tun.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">int</span> tun_open(<span style="color:#fff;font-weight:bold">char</span> *devname)
{
  <span style="color:#fff;font-weight:bold">struct</span> ifreq ifr;
  <span style="color:#fff;font-weight:bold">int</span> fd, err;

  <span style="color:#fff;font-weight:bold">if</span> ( (fd = open(<span style="color:#0ff;font-weight:bold">&#34;/dev/net/tun&#34;</span>, O_RDWR)) == -<span style="color:#ff0;font-weight:bold">1</span> ) { perror(<span style="color:#0ff;font-weight:bold">&#34;open /dev/net/tun&#34;</span>);exit(<span style="color:#ff0;font-weight:bold">1</span>); }

  memset(&amp;ifr, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#fff;font-weight:bold">sizeof</span>(ifr));
  ifr.ifr_flags = IFF_TAP | IFF_NO_PI;
  strncpy(ifr.ifr_name, devname, IFNAMSIZ);

  <span style="color:#fff;font-weight:bold">if</span> ( (err = ioctl(fd, TUNSETIFF, (<span style="color:#fff;font-weight:bold">void</span> *) &amp;ifr)) == -<span style="color:#ff0;font-weight:bold">1</span> ) {
    perror(<span style="color:#0ff;font-weight:bold">&#34;ioctl TUNSETIFF&#34;</span>);close(fd);exit(<span style="color:#ff0;font-weight:bold">1</span>);
  }

  <span style="color:#fff;font-weight:bold">return</span> fd;
}

<span style="color:#fff;font-weight:bold">int</span> main(<span style="color:#fff;font-weight:bold">int</span> argc, <span style="color:#fff;font-weight:bold">char</span> *argv[])
{
  <span style="color:#fff;font-weight:bold">int</span> fd, nbytes;
  <span style="color:#fff;font-weight:bold">char</span> buf[<span style="color:#ff0;font-weight:bold">1600</span>];

  fd = tun_open(<span style="color:#0ff;font-weight:bold">&#34;tap0&#34;</span>); <span style="color:#007f7f">/* devname = ifr.if_name = &#34;tun0&#34; */</span>
  printf(<span style="color:#0ff;font-weight:bold">&#34;Device tap0 opened</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>);
  <span style="color:#fff;font-weight:bold">while</span>(<span style="color:#ff0;font-weight:bold">1</span>) {
    nbytes = read(fd, buf, <span style="color:#fff;font-weight:bold">sizeof</span>(buf));
    printf(<span style="color:#0ff;font-weight:bold">&#34;Read %d bytes from tap0</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>, nbytes);
  }
  <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}

</code></pre></div><p>When i compile and run the program above. It would print the following capture ethernet packet.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ./a.out
Device tap0 opened
Read <span style="color:#ff0;font-weight:bold">110</span> bytes from tap0
</code></pre></div><h1 id="cleanup">cleanup</h1>
<p>These commands remove the tap interface</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo ip link <span style="color:#fff;font-weight:bold">set</span> dev tap0 down
sudo ip tuntap del mode tun dev tap0
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Solving No-three-in-line puzzle using SV constraints</title>
            <link>/posts/2022/09/solving-no-three-in-line-puzzle-using-sv-constraints/</link>
            <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/09/solving-no-three-in-line-puzzle-using-sv-constraints/</guid>
            <description>Continuing the series on solving puzzles using SV constraints, This post is about no-three-in-line puzzle. From Wiki,
 The no-three-in-line problem in discrete geometry asks how many points can be placed in the NxN grid so that no three points lie on the same line.
 It&amp;rsquo;s nice problem because it&amp;rsquo;s more complicated than n-queen. Why more complicated? mainly because we need to include more than just 2 cells in the constraints.</description>
            <content type="html"><![CDATA[<p>Continuing the series on solving puzzles using SV constraints, This post is about no-three-in-line puzzle. From Wiki,</p>
<blockquote>
<p>The no-three-in-line problem in discrete geometry asks how many points can be placed in the NxN grid so that no three points lie on the same line.</p>
</blockquote>
<p>It&rsquo;s nice problem because it&rsquo;s more complicated than n-queen. Why more complicated? mainly because we need to include more than just 2 cells in the constraints. Let&rsquo;s start with the easy ones first.</p>
<h1 id="constraint-1---cells">constraint 1 - cells</h1>
<p>we need random value for each cell. So, this one is obvious.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">constraint a01 {foreach(grid[i][j]) grid[i][j] inside {[<span style="color:#ff0;font-weight:bold">0</span>:<span style="color:#ff0;font-weight:bold">1</span>]}}
</code></pre></div><h1 id="constraint-2---row">constraint 2 - row</h1>
<p>Number of full cells in each row between <code>[0:2]</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">constraint rows {foreach(grid[i][j]) grid[i].sum() inside {[<span style="color:#ff0;font-weight:bold">0</span>:<span style="color:#ff0;font-weight:bold">2</span>]};}
</code></pre></div><h1 id="the-problem">The problem</h1>
<p>Here where it gets interesting! I was stuck because i can&rsquo;t think of clean way to iterate over columns.
Then it hit me! why not define another grid and transpose the old into new grid and use the same constraints above the new grid.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#007f7f">// Here the magic
</span><span style="color:#007f7f"></span>constraint grid_tmp {
        foreach(grid[i][j]) {
            grid[i][j] == tmp[j][i]
    }
}

constraint a0_tmp {foreach(tmp[i][j]) tmp[i][j] inside {[<span style="color:#ff0;font-weight:bold">0</span>:<span style="color:#ff0;font-weight:bold">1</span>]}}
constraint rows_tmp {foreach(tmp[i][j]) tmp[i].sum() inside {[<span style="color:#ff0;font-weight:bold">0</span>:<span style="color:#ff0;font-weight:bold">2</span>]};}
</code></pre></div><p>And it worked! I think!</p>
]]></content>
        </item>
        
        <item>
            <title>systemd service - hello world</title>
            <link>/posts/2022/09/systemd-service-hello-world/</link>
            <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/09/systemd-service-hello-world/</guid>
            <description>In previous posts, I found a workaround for the iwlwifi crashing driver. In this post, I wrote small script to detect the crash and apply the workaround. Also, I installed systemd service to run the script on boot so i don&amp;rsquo;t have to.
Starting with the script. It&amp;rsquo;s basically while(1) to monitor the crash
found=0 while [ $found -eq 0 ] do rm -f /tmp/d.log dmesg &amp;gt; /tmp/d.log if tail -n 5 /tmp/d.</description>
            <content type="html"><![CDATA[<p>In previous posts, I found a workaround for the iwlwifi crashing driver. In this post, I wrote small script to detect the crash and apply the workaround. Also, I installed systemd service to run the script on boot so i don&rsquo;t have to.</p>
<p>Starting with the script. It&rsquo;s basically while(1) to monitor the crash</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">found=<span style="color:#ff0;font-weight:bold">0</span>
<span style="color:#fff;font-weight:bold">while</span> [ $found -eq <span style="color:#ff0;font-weight:bold">0</span> ]
<span style="color:#fff;font-weight:bold">do</span>
    rm -f /tmp/d.log
    dmesg &gt; /tmp/d.log
    <span style="color:#fff;font-weight:bold">if</span> tail -n <span style="color:#ff0;font-weight:bold">5</span> /tmp/d.log |grep -q <span style="color:#0ff;font-weight:bold">&#34;Failed to wake NIC for hcmd&#34;</span> ; <span style="color:#fff;font-weight:bold">then</span>
        <span style="color:#fff;font-weight:bold">echo</span> <span style="color:#0ff;font-weight:bold">&#34;Fixing iwlwifi&#34;</span>
        <span style="color:#fff;font-weight:bold">echo</span> <span style="color:#0ff;font-weight:bold">&#34;1&#34;</span> &gt; /sys/bus/pci/devices/0000:03:00.0/remove
        <span style="color:#fff;font-weight:bold">echo</span> <span style="color:#0ff;font-weight:bold">&#34;1&#34;</span> &gt; /sys/bus/pci/rescan
    <span style="color:#fff;font-weight:bold">fi</span>

    sleep <span style="color:#ff0;font-weight:bold">5</span>
<span style="color:#fff;font-weight:bold">done</span>
</code></pre></div><p>The service itself is very simple, just <code>ExecStart</code> to call the script.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">[Unit]
Description=Fix iwlwifi crash

[Service]
ExecStart=/bin/bash /home/user/fix-iwlwifi-crash.bash

[Install]
WantedBy=multi-user.target

</code></pre></div><p>To install the service, I just need to create <code>/etc/systemd/system/fixiwlwifi.service</code> and i am good to go.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo touch /etc/systemd/system/fixiwlwifi.service
</code></pre></div><p>The last thing is starting the service and enabling it.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo systemctl start fixiwlwifi <span style="color:#007f7f"># to start the serveice</span>
sudo systemctl <span style="color:#fff;font-weight:bold">enable</span> fixiwlwifi <span style="color:#007f7f"># to enable at boot time</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Wireshark protocol dissector</title>
            <link>/posts/2022/09/wireshark-protocol-dissector/</link>
            <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/09/wireshark-protocol-dissector/</guid>
            <description>Wireshark is popular protocol analyzer used for network or other packet based protocols. It uses dissectors for each protocol. The protocols are builtin but wireshark provides lua interface to define and register new dissectors.
Generating pcap with scapy I am using scapy to generate pcap for made-up protocol with two fields name and len. In this example, I am generating 2 packets in pcap.
from scapy.all import * class Disney(Packet): name = &amp;#34;DisneyPacket &amp;#34; fields_desc=[ ShortField(&amp;#34;len&amp;#34;,0), StrLenField(&amp;#39;name&amp;#39;,&amp;#34;&amp;#34;) ] pkt=[ Disney(len=6, name=&amp;#34;foobar&amp;#34;), Disney(len=7, name=&amp;#34;hhhfffk&amp;#34;)] wrpcap(&amp;#39;disney.</description>
            <content type="html"><![CDATA[<p>Wireshark is popular protocol analyzer used for network or other packet based protocols. It uses <code>dissectors</code> for each protocol. The protocols are builtin but wireshark provides lua interface to define and register new dissectors.</p>
<h1 id="generating-pcap-with-scapy">Generating pcap with scapy</h1>
<p>I am using scapy to generate pcap for made-up protocol with two fields <code>name</code> and <code>len</code>. In this example, I am generating 2 packets in pcap.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">from</span> scapy.all <span style="color:#fff;font-weight:bold">import</span> *

<span style="color:#fff;font-weight:bold">class</span> Disney(Packet):
    name = <span style="color:#0ff;font-weight:bold">&#34;DisneyPacket &#34;</span>
    fields_desc=[
                ShortField(<span style="color:#0ff;font-weight:bold">&#34;len&#34;</span>,<span style="color:#ff0;font-weight:bold">0</span>),
                StrLenField(<span style="color:#0ff;font-weight:bold">&#39;name&#39;</span>,<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>)
                ]

pkt=[ Disney(<span style="color:#fff;font-weight:bold">len</span>=<span style="color:#ff0;font-weight:bold">6</span>, name=<span style="color:#0ff;font-weight:bold">&#34;foobar&#34;</span>),
        Disney(<span style="color:#fff;font-weight:bold">len</span>=<span style="color:#ff0;font-weight:bold">7</span>, name=<span style="color:#0ff;font-weight:bold">&#34;hhhfffk&#34;</span>)]

wrpcap(<span style="color:#0ff;font-weight:bold">&#39;disney.pcap&#39;</span>, pkt, append=<span style="color:#fff;font-weight:bold">True</span>, linktype=DLT_NULL)
</code></pre></div><h1 id="dissector">Dissector</h1>
<p>To install the dissector, it is copied to <code>~/.local/lib/wireshark/plugins/</code>. wireshark (and tshark) load the lua scripts on start up.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cp t.lua ~/.local/lib/wireshark/plugins/t.lua
</code></pre></div><p>The dissector defines 2 fields <code>len</code> and <code>name</code>. and eventually registers the proto with <code>register_postdissector</code>. The dissector adds the two fields to wireshark tree with <code>subtree:add_le</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lua" data-lang="lua">print(<span style="color:#0ff;font-weight:bold">&#34;loaded&#34;</span>)

<span style="color:#fff;font-weight:bold">local</span> myproto = Proto(<span style="color:#0ff;font-weight:bold">&#34;swapper&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;Dummy proto to edit info column&#34;</span>)
<span style="color:#007f7f">-- the dissector function callback</span>

len      = ProtoField.int32(<span style="color:#0ff;font-weight:bold">&#34;swapper.len&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;len&#34;</span>, base.DEC)
name     = ProtoField.string(<span style="color:#0ff;font-weight:bold">&#34;swapper.name&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;name&#34;</span>)

myproto.fields = { len, name }

 <span style="color:#fff;font-weight:bold">function</span> myproto.dissector(buffer,pinfo,tree)

  length = buffer:len()
  <span style="color:#fff;font-weight:bold">if</span> length == <span style="color:#ff0;font-weight:bold">0</span> <span style="color:#fff;font-weight:bold">then</span> <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">end</span>

  pinfo.cols.protocol = myproto.name

  <span style="color:#fff;font-weight:bold">local</span> subtree = tree:add(myproto, buffer(), <span style="color:#0ff;font-weight:bold">&#34;swapper Protocol&#34;</span>)

  subtree:add(len, buffer(<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">2</span>))
  s = tonumber(buffer(<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">2</span>))
  print(s)
  subtree:add_le(name, buffer(<span style="color:#ff0;font-weight:bold">2</span>,s))
<span style="color:#fff;font-weight:bold">end</span>

register_postdissector(myproto)

</code></pre></div><p>Running tshark</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">tshark -V -r disney.pcap
</code></pre></div><p>and voila!</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">Frame 1: <span style="color:#ff0;font-weight:bold">8</span> bytes on wire (<span style="color:#ff0;font-weight:bold">64</span> bits), <span style="color:#ff0;font-weight:bold">8</span> bytes captured (<span style="color:#ff0;font-weight:bold">64</span> bits)
Null/Loopback
    Type: Unknown (0x666f)
Data (<span style="color:#ff0;font-weight:bold">4</span> bytes)

<span style="color:#ff0;font-weight:bold">0000</span>  6f <span style="color:#ff0;font-weight:bold">62</span> <span style="color:#ff0;font-weight:bold">61</span> <span style="color:#ff0;font-weight:bold">72</span>                                       obar
    Data: 6f626172
    [Length: 4]
swapper Protocol
    len: <span style="color:#ff0;font-weight:bold">6</span>
    name: foobar

Frame 2: <span style="color:#ff0;font-weight:bold">9</span> bytes on wire (<span style="color:#ff0;font-weight:bold">72</span> bits), <span style="color:#ff0;font-weight:bold">9</span> bytes captured (<span style="color:#ff0;font-weight:bold">72</span> bits)
Null/Loopback
    Type: Unknown (0x6868)
Data (<span style="color:#ff0;font-weight:bold">5</span> bytes)

<span style="color:#ff0;font-weight:bold">0000</span>  <span style="color:#ff0;font-weight:bold">68</span> <span style="color:#ff0;font-weight:bold">66</span> <span style="color:#ff0;font-weight:bold">66</span> <span style="color:#ff0;font-weight:bold">66</span> 6b                                    hfffk
    Data: 686666666b
    [Length: 5]
swapper Protocol
    len: <span style="color:#ff0;font-weight:bold">7</span>
    name: hhhfffk
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>iwlwifi driver crash - The problem and workaround</title>
            <link>/posts/2022/08/iwlwifi-driver-crash-the-problem-and-workaround/</link>
            <pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/08/iwlwifi-driver-crash-the-problem-and-workaround/</guid>
            <description>iwlwifi has been crashing a lot on me recently and it is driving me crazy because the only way to fix it is rebooting. The errors indicate that crash happens while NIC is waking up. I am currently using 5.4 kernel and i will see if updating the new version fixes it. At this point, I managed to produce the crash and test a workaround without rebooting.
The problem Starting with dmesg errors</description>
            <content type="html"><![CDATA[<p>iwlwifi has been crashing a lot on me recently and it is driving me crazy because the only way to fix it is rebooting. The errors indicate that crash happens while NIC is waking up. I am currently using 5.4 kernel and i will see if updating the new version fixes it. At this point, I managed to produce the crash and test a workaround without rebooting.</p>
<h1 id="the-problem">The problem</h1>
<p>Starting with  dmesg errors</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">[58632.320679] iwlwifi 0000:03:00.0: Failed to wake NIC <span style="color:#fff;font-weight:bold">for</span> hcmd
[58632.320871] iwlwifi 0000:03:00.0: Error sending STATISTICS_CMD: enqueue_hcmd failed: -5
...
...
[58644.928522] ------------[ cut here ]------------
[58644.928537] Timeout waiting <span style="color:#fff;font-weight:bold">for</span> hardware access (CSR_GP_CNTRL 0xffffffff)
</code></pre></div><p>The first error from <code>iwl_finish_nic_init</code> suggests  it is happening while the card is coming out of sleep(suspend or whatever).</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#ff0;font-weight:bold">444</span> int iwl_finish_nic_init(struct iwl_trans *trans)
<span style="color:#ff0;font-weight:bold">445</span> {
<span style="color:#ff0;font-weight:bold">446</span>     const struct iwl_cfg_trans_params *cfg_trans = trans-&gt;trans_cfg;
<span style="color:#ff0;font-weight:bold">447</span>     u32 poll_ready;
<span style="color:#ff0;font-weight:bold">448</span>     int err;
</code></pre></div><p>The error <code>Timeout waiting for hardware access (CSR_GP_CNTRL 0xffffffff)</code> suggests that hardware is not accessible anymore.</p>
<p>Based on this, I thought to try reseting the device and it worked like a charm.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#fff;font-weight:bold">echo</span> <span style="color:#0ff;font-weight:bold">&#34;1&#34;</span> &gt; /sys/bus/pci/devices/0000:03:00.0/reset
</code></pre></div><h1 id="the-workaround">The workaround</h1>
<p>The workaround is removing the device and force pci scan. This way, the kernel will reset and probe the device again and iwlwifi will pick it up again.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo <span style="color:#fff;font-weight:bold">echo</span> <span style="color:#0ff;font-weight:bold">&#34;1&#34;</span> &gt; /sys/bus/pci/devices/0000:03:00.0/remove
sudo <span style="color:#fff;font-weight:bold">echo</span> <span style="color:#0ff;font-weight:bold">&#34;1&#34;</span> &gt; /sys/bus/pci/rescan
</code></pre></div><p>Looking at dmesg, the device is detected again and all is good.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">[ 1880.826363] iwlwifi 0000:03:00.0: loaded firmware version 29.1654887522.0 op_mode iwlmvm
[ 1880.826473] iwlwifi 0000:03:00.0: Detected Intel(R) Dual Band Wireless AC 3165, REV=0x210
</code></pre></div><p>I think I will write a script in systemd service that detects the crash and remove/probe the device and fixes it.</p>
<p>Well, That was fun!</p>
]]></content>
        </item>
        
        <item>
            <title>PCIe SRIOV linux initialization</title>
            <link>/posts/2022/08/pcie-sriov-linux-initialization/</link>
            <pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/08/pcie-sriov-linux-initialization/</guid>
            <description>single root input/output virtualization (SR-IOV) is PCIe specifications that provide virtual function (in this context, the usual PCIe function would be physical function). virtual function is used VM for better performance. It allows flow the data like physical function with limited capabilities.
Finding SRIOV capabilities space 897 int pci_iov_init(struct pci_dev *dev) 898 { 899 int pos; 900 901 if (!pci_is_pcie(dev)) 902 return -ENODEV; 903 904 pos = pci_find_ext_capability(dev, PCI_EXT_CAP_ID_SRIOV); 905 if (pos) 906 return sriov_init(dev, pos); 907 908 return -ENODEV; 909 } pos is found by pci_find_ext_capability which calls pci_find_next_ext_capability to get the extended configuration capabilities with SRIOV ID.</description>
            <content type="html"><![CDATA[<p>single root input/output virtualization (SR-IOV) is PCIe specifications that provide virtual function (in this context, the usual PCIe function would be physical function). virtual function is used VM for better performance. It allows flow the data like physical function with limited capabilities.</p>
<h1 id="finding-sriov-capabilities-space">Finding SRIOV capabilities space</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"> <span style="color:#ff0;font-weight:bold">897</span> <span style="color:#fff;font-weight:bold">int</span> pci_iov_init(<span style="color:#fff;font-weight:bold">struct</span> pci_dev *dev)
 <span style="color:#ff0;font-weight:bold">898</span> {
 <span style="color:#ff0;font-weight:bold">899</span>     <span style="color:#fff;font-weight:bold">int</span> pos;
 <span style="color:#ff0;font-weight:bold">900</span>
 <span style="color:#ff0;font-weight:bold">901</span>     <span style="color:#fff;font-weight:bold">if</span> (!pci_is_pcie(dev))
 <span style="color:#ff0;font-weight:bold">902</span>         <span style="color:#fff;font-weight:bold">return</span> -ENODEV;
 <span style="color:#ff0;font-weight:bold">903</span>
 <span style="color:#ff0;font-weight:bold">904</span>     pos = pci_find_ext_capability(dev, PCI_EXT_CAP_ID_SRIOV);
 <span style="color:#ff0;font-weight:bold">905</span>     <span style="color:#fff;font-weight:bold">if</span> (pos)
 <span style="color:#ff0;font-weight:bold">906</span>         <span style="color:#fff;font-weight:bold">return</span> sriov_init(dev, pos);
 <span style="color:#ff0;font-weight:bold">907</span>
 <span style="color:#ff0;font-weight:bold">908</span>     <span style="color:#fff;font-weight:bold">return</span> -ENODEV;
 <span style="color:#ff0;font-weight:bold">909</span> }
</code></pre></div><p><code>pos</code> is found by <code>pci_find_ext_capability</code> which calls <code>pci_find_next_ext_capability</code> to get the extended configuration capabilities with SRIOV ID. Note the comare at line 566.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"> <span style="color:#ff0;font-weight:bold">540</span> u16 pci_find_next_ext_capability(<span style="color:#fff;font-weight:bold">struct</span> pci_dev *dev, u16 start, <span style="color:#fff;font-weight:bold">int</span> cap)
 <span style="color:#ff0;font-weight:bold">541</span> {
...
...
 <span style="color:#ff0;font-weight:bold">565</span>     <span style="color:#fff;font-weight:bold">while</span> (ttl-- &gt; <span style="color:#ff0;font-weight:bold">0</span>) {
 <span style="color:#ff0;font-weight:bold">566</span>         <span style="color:#fff;font-weight:bold">if</span> (PCI_EXT_CAP_ID(header) == cap &amp;&amp; pos != start)
 <span style="color:#ff0;font-weight:bold">567</span>             <span style="color:#fff;font-weight:bold">return</span> pos;
 <span style="color:#ff0;font-weight:bold">568</span>
 <span style="color:#ff0;font-weight:bold">569</span>         pos = PCI_EXT_CAP_NEXT(header);
 <span style="color:#ff0;font-weight:bold">570</span>         <span style="color:#fff;font-weight:bold">if</span> (pos &lt; PCI_CFG_SPACE_SIZE)
 <span style="color:#ff0;font-weight:bold">571</span>             <span style="color:#fff;font-weight:bold">break</span>;
 <span style="color:#ff0;font-weight:bold">572</span>
 <span style="color:#ff0;font-weight:bold">573</span>         <span style="color:#fff;font-weight:bold">if</span> (pci_read_config_dword(dev, pos, &amp;header) != PCIBIOS_SUCCESSFUL)
 <span style="color:#ff0;font-weight:bold">574</span>             <span style="color:#fff;font-weight:bold">break</span>;
 <span style="color:#ff0;font-weight:bold">575</span>     }
 <span style="color:#ff0;font-weight:bold">576</span>

</code></pre></div><p>Once we have the position, The next phase is reading SRIOV configuration space in <code>sriov_init</code></p>
<h1 id="iov-initialization">iov initialization</h1>
<p>The configuration space for SRIOV as follows
<img src="/sriov.png" alt="Example image"></p>
<p>in<code>sriov_init</code>, The first things is getting some parameter above.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"> <span style="color:#ff0;font-weight:bold">768</span>
 <span style="color:#ff0;font-weight:bold">769</span>     pci_read_config_word(dev, pos + PCI_SRIOV_TOTAL_VF, &amp;total);
 <span style="color:#ff0;font-weight:bold">770</span>     if (!total)
 <span style="color:#ff0;font-weight:bold">771</span>         <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
 <span style="color:#ff0;font-weight:bold">772</span>
 <span style="color:#ff0;font-weight:bold">773</span>     pci_read_config_dword(dev, pos + PCI_SRIOV_SUP_PGSIZE, &amp;pgsz);
 <span style="color:#ff0;font-weight:bold">774</span>     i = PAGE_SHIFT &gt; <span style="color:#ff0;font-weight:bold">12</span> ? PAGE_SHIFT - <span style="color:#ff0;font-weight:bold">12</span> : <span style="color:#ff0;font-weight:bold">0</span>;
 <span style="color:#ff0;font-weight:bold">775</span>     pgsz &amp;= ~((<span style="color:#ff0;font-weight:bold">1</span> &lt;&lt; i) - <span style="color:#ff0;font-weight:bold">1</span>);
 <span style="color:#ff0;font-weight:bold">776</span>     if (!pgsz)
 <span style="color:#ff0;font-weight:bold">777</span>         <span style="color:#fff;font-weight:bold">return</span> -EIO;
 <span style="color:#ff0;font-weight:bold">778</span>
 <span style="color:#ff0;font-weight:bold">779</span>     pgsz &amp;= ~(pgsz - <span style="color:#ff0;font-weight:bold">1</span>);
 <span style="color:#ff0;font-weight:bold">780</span>     pci_write_config_dword(dev, pos + PCI_SRIOV_SYS_PGSIZE, pgsz);
</code></pre></div><p>Next step is parsing the virtual function BAR(base address register) and store info in <code>iov</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"> <span style="color:#ff0;font-weight:bold">786</span>     nres = <span style="color:#ff0;font-weight:bold">0</span>;
 <span style="color:#ff0;font-weight:bold">787</span>     <span style="color:#fff;font-weight:bold">for</span> (i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; PCI_SRIOV_NUM_BARS; i++) {
 <span style="color:#ff0;font-weight:bold">788</span>         res = &amp;dev-&gt;resource[i + PCI_IOV_RESOURCES];
 <span style="color:#ff0;font-weight:bold">789</span>         <span style="color:#007f7f">/*
</span><span style="color:#007f7f"> 790          * If it is already FIXED, don&#39;t change it, something
</span><span style="color:#007f7f"> 791          * (perhaps EA or header fixups) wants it this way.
</span><span style="color:#007f7f"> 792          */</span>
 <span style="color:#ff0;font-weight:bold">793</span>         <span style="color:#fff;font-weight:bold">if</span> (res-&gt;flags &amp; IORESOURCE_PCI_FIXED)
 <span style="color:#ff0;font-weight:bold">794</span>             bar64 = (res-&gt;flags &amp; IORESOURCE_MEM_64) ? <span style="color:#ff0;font-weight:bold">1</span> : <span style="color:#ff0;font-weight:bold">0</span>;
 <span style="color:#ff0;font-weight:bold">795</span>         <span style="color:#fff;font-weight:bold">else</span>
 <span style="color:#ff0;font-weight:bold">796</span>             bar64 = __pci_read_base(dev, pci_bar_unknown, res,
 <span style="color:#ff0;font-weight:bold">797</span>                         pos + PCI_SRIOV_BAR + i * <span style="color:#ff0;font-weight:bold">4</span>);
 <span style="color:#ff0;font-weight:bold">798</span>         if (!res-&gt;flags)
 <span style="color:#ff0;font-weight:bold">799</span>             <span style="color:#fff;font-weight:bold">continue</span>;
 <span style="color:#ff0;font-weight:bold">800</span>         if (resource_size(res) &amp; (PAGE_SIZE - <span style="color:#ff0;font-weight:bold">1</span>)) {
 <span style="color:#ff0;font-weight:bold">801</span>             rc = -EIO;
 <span style="color:#ff0;font-weight:bold">802</span>             <span style="color:#fff;font-weight:bold">goto</span> failed;
 <span style="color:#ff0;font-weight:bold">803</span>         }
 <span style="color:#ff0;font-weight:bold">804</span>         iov-&gt;barsz[i] = resource_size(res);
 <span style="color:#ff0;font-weight:bold">805</span>         res-&gt;end = res-&gt;start + resource_size(res) * total - <span style="color:#ff0;font-weight:bold">1</span>;
 <span style="color:#ff0;font-weight:bold">806</span>         pci_info(dev, <span style="color:#0ff;font-weight:bold">&#34;VF(n)</span> BAR%d space: %pR (contains BAR%d <span style="color:#fff;font-weight:bold">for</span> %d VFs)<span style="color:#f00">\</span>n<span style="color:#0ff;font-weight:bold">&#34;,</span>
 <span style="color:#ff0;font-weight:bold">807</span>              i, res, i, total);
 <span style="color:#ff0;font-weight:bold">808</span>         i += bar64;
 <span style="color:#ff0;font-weight:bold">809</span>         nres++;
 <span style="color:#ff0;font-weight:bold">810</span>     }

</code></pre></div><p>once we have all the info in <code>iov</code>, <code>iov</code> is set to <code>dev-&gt;sriov</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"> <span style="color:#ff0;font-weight:bold">812</span>     iov-&gt;pos = pos;
 <span style="color:#ff0;font-weight:bold">813</span>     iov-&gt;nres = nres;
 <span style="color:#ff0;font-weight:bold">814</span>     iov-&gt;ctrl = ctrl;
 <span style="color:#ff0;font-weight:bold">815</span>     iov-&gt;total_VFs = total;
 <span style="color:#ff0;font-weight:bold">816</span>     iov-&gt;driver_max_VFs = total;
 <span style="color:#ff0;font-weight:bold">817</span>     pci_read_config_word(dev, pos + PCI_SRIOV_VF_DID, &amp;iov-&gt;vf_device);
 <span style="color:#ff0;font-weight:bold">818</span>     iov-&gt;pgsz = pgsz;
 <span style="color:#ff0;font-weight:bold">819</span>     iov-&gt;self = dev;
 <span style="color:#ff0;font-weight:bold">820</span>     iov-&gt;drivers_autoprobe = <span style="color:#fff;font-weight:bold">true</span>;
 <span style="color:#ff0;font-weight:bold">821</span>     pci_read_config_dword(dev, pos + PCI_SRIOV_CAP, &amp;iov-&gt;cap);
 <span style="color:#ff0;font-weight:bold">822</span>     pci_read_config_byte(dev, pos + PCI_SRIOV_FUNC_LINK, &amp;iov-&gt;link);
 <span style="color:#ff0;font-weight:bold">823</span>     if (pci_pcie_type(dev) == PCI_EXP_TYPE_RC_END)
 <span style="color:#ff0;font-weight:bold">824</span>         iov-&gt;link = PCI_DEVFN(PCI_SLOT(dev-&gt;devfn), iov-&gt;link);
 <span style="color:#ff0;font-weight:bold">825</span>
 <span style="color:#ff0;font-weight:bold">826</span>     if (pdev)
 <span style="color:#ff0;font-weight:bold">827</span>         iov-&gt;dev = pci_dev_get(pdev);
 <span style="color:#ff0;font-weight:bold">828</span>     <span style="color:#fff;font-weight:bold">else</span>
 <span style="color:#ff0;font-weight:bold">829</span>         iov-&gt;dev = dev;
 <span style="color:#ff0;font-weight:bold">830</span>
 <span style="color:#ff0;font-weight:bold">831</span>     dev-&gt;sriov = iov;
 <span style="color:#ff0;font-weight:bold">832</span>     dev-&gt;is_physfn = <span style="color:#ff0;font-weight:bold">1</span>;
 <span style="color:#ff0;font-weight:bold">833</span>     rc = compute_max_vf_buses(dev);
 <span style="color:#ff0;font-weight:bold">834</span>     if (rc)
 <span style="color:#ff0;font-weight:bold">835</span>         <span style="color:#fff;font-weight:bold">goto</span> fail_max_buses;
 <span style="color:#ff0;font-weight:bold">836</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>iwlwifi - Not The Hitchhiker&#39;s guide to intel wireless driver</title>
            <link>/posts/2022/08/iwlwifi-not-the-hitchhikers-guide-to-intel-wireless-driver/</link>
            <pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/08/iwlwifi-not-the-hitchhikers-guide-to-intel-wireless-driver/</guid>
            <description>This is the second post in a series about iwlwifi the linux intel wireless controller driver. Unlucky(or luck) me, this driver crashes randomly on my machine. I decided to debug the crash before giving up and bump up kernel and modules version. iwlwifi is basically PCIe driver but it also interacts with network stack and network configuration stack.
PCIe driver Starting with PCIe side, Drivers have to register with the PCIe subsystem and the PCIe core will iterate devices and match drivers to the devices.</description>
            <content type="html"><![CDATA[<p>This is the second post in a series about <code>iwlwifi</code> the linux intel wireless controller driver. Unlucky(or luck) me, this driver crashes randomly on my machine. I decided to debug the crash before giving up and bump up kernel and modules version. <code>iwlwifi</code> is basically PCIe driver but it also interacts with network stack and network configuration stack.</p>
<h1 id="pcie-driver">PCIe driver</h1>
<p>Starting with PCIe side, Drivers have to register with the PCIe subsystem and the PCIe core will iterate devices and match drivers to the devices.</p>
<p>iwlwifi registers the driver with <code>pci_register_driver</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">int</span> __must_check iwl_pci_register_driver(<span style="color:#fff;font-weight:bold">void</span>)
{
    <span style="color:#fff;font-weight:bold">int</span> ret;
    ret = pci_register_driver(&amp;iwl_pci_driver);
    <span style="color:#fff;font-weight:bold">if</span> (ret)
        pr_err(<span style="color:#0ff;font-weight:bold">&#34;Unable to initialize PCI module</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>);

    <span style="color:#fff;font-weight:bold">return</span> ret;
}
</code></pre></div><p><code>probe</code> is the most important one as it&rsquo;s called on every device enumerated.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">struct</span> pci_driver iwl_pci_driver = {
    .name = DRV_NAME,
    .id_table = iwl_hw_card_ids,
    .probe = iwl_pci_probe,
    .remove = iwl_pci_remove,
    .driver.pm = IWL_PM_OPS,
};
</code></pre></div><p>There is also pci ops that iwl wraps with <code>iwl_trans_ops</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">struct</span> iwl_trans_ops trans_ops_pcie = {
    IWL_TRANS_COMMON_OPS,
    .start_hw = iwl_trans_pcie_start_hw,
    .fw_alive = iwl_trans_pcie_fw_alive,
    .start_fw = iwl_trans_pcie_start_fw,
    .stop_device = iwl_trans_pcie_stop_device,

    .send_cmd = iwl_pcie_enqueue_hcmd,

    .tx = iwl_trans_pcie_tx,
    .reclaim = iwl_txq_reclaim,

    .txq_disable = iwl_trans_pcie_txq_disable,
    .txq_enable = iwl_trans_pcie_txq_enable,

    .txq_set_shared_mode = iwl_trans_pcie_txq_set_shared_mode,

    .wait_tx_queues_empty = iwl_trans_pcie_wait_txqs_empty,

    .freeze_txq_timer = iwl_trans_txq_freeze_timer,
    .block_txq_ptrs = iwl_trans_pcie_block_txq_ptrs,
<span style="color:#0f0;font-weight:bold">#ifdef CONFIG_IWLWIFI_DEBUGFS
</span><span style="color:#0f0;font-weight:bold"></span>    .debugfs_cleanup = iwl_trans_pcie_debugfs_cleanup,
<span style="color:#0f0;font-weight:bold">#endif
</span><span style="color:#0f0;font-weight:bold"></span>};
</code></pre></div><p>More about PCIe side in separate posts.</p>
<h1 id="configuration-path">Configuration path</h1>
<p>The configuration path starts with user space and ends with <code>iwlwifi</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">User land -&gt; nl80211 -&gt; cfg80211 -&gt; mac80211 -&gt; iwlwifi
</code></pre></div><ul>
<li>User land talks to the kernel through Netlink sockets (implmeneted in <code>nl80211</code>).</li>
<li>nl80211 interfaces with <code>cfg80211</code> layer</li>
<li>cfg80211 then passes it down to <code>mac80211</code>. <code>mac80211</code> registers with cfg80211 using <code>cfg80211_ops</code></li>
<li><code>iwlwifi</code> registers with mac80211 using <code>ieee80211_ops</code></li>
</ul>
<p>From nl80211 to iwlwifi, the files are as follow</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">./net/wireless/nl80211.c
./net/wireless/core.c
    cfg80211_ops ./net/mac80211/cfg.c
./net/mac80211
    ./drivers/net/wireless/intel/iwlwifi/mvm/mac80211.c ieee80211_ops
./net/wireless/intel/iwlwifi
</code></pre></div><p>Let&rsquo;s trace one configuration from netlink down to iwlwifi, <code>nl80211_new_interface</code> is one of the configuration APIs defined in NL80211 netlink. It is defined in <code>net/wireless/nl80211.c</code>.</p>
<p>It calls <code>_nl80211_new_interface</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">int</span> nl80211_new_interface(<span style="color:#fff;font-weight:bold">struct</span> sk_buff *skb, <span style="color:#fff;font-weight:bold">struct</span> genl_info *info)
{
    ...
    ret = _nl80211_new_interface(skb, info);
}
</code></pre></div><p>which calls <code>rdev_add_virtual_intf</code>  ending up at <code>rdev-&gt;ops-&gt;add_virtual_intf</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">inline</span> <span style="color:#fff;font-weight:bold">struct</span> wireless_dev
*rdev_add_virtual_intf(<span style="color:#fff;font-weight:bold">struct</span> cfg80211_registered_device *rdev, <span style="color:#fff;font-weight:bold">char</span> *name,
               <span style="color:#fff;font-weight:bold">unsigned</span> <span style="color:#fff;font-weight:bold">char</span> name_assign_type,
               <span style="color:#fff;font-weight:bold">enum</span> nl80211_iftype type,
               <span style="color:#fff;font-weight:bold">struct</span> vif_params *params)
{
    <span style="color:#fff;font-weight:bold">struct</span> wireless_dev *ret;
    trace_rdev_add_virtual_intf(&amp;rdev-&gt;wiphy, name, type);
    ret = rdev-&gt;ops-&gt;add_virtual_intf(&amp;rdev-&gt;wiphy, name, name_assign_type,
                      type, params);
    trace_rdev_return_wdev(&amp;rdev-&gt;wiphy, ret);
    <span style="color:#fff;font-weight:bold">return</span> ret;
}
</code></pre></div><p>ere we jump to <code>mac80211</code> layer as<code>add_virtual_intf</code> is part of cfg80211_ops which is defined  <code>./net/mac80211/cfg.c</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">struct</span> cfg80211_ops mac80211_config_ops = {
    .add_virtual_intf = ieee80211_add_iface,
    .del_virtual_intf = ieee80211_del_iface,
</code></pre></div><p>In <code>ieee80211_if_add</code>, ieee80211_dataif_ops is registered</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">int</span> ieee80211_if_add(<span style="color:#fff;font-weight:bold">struct</span> ieee80211_local *local, <span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">char</span> *name,
		     <span style="color:#fff;font-weight:bold">unsigned</span> <span style="color:#fff;font-weight:bold">char</span> name_assign_type,
		     <span style="color:#fff;font-weight:bold">struct</span> wireless_dev **new_wdev, <span style="color:#fff;font-weight:bold">enum</span> nl80211_iftype type,
		     <span style="color:#fff;font-weight:bold">struct</span> vif_params *params)
{

</code></pre></div><p>eventually <code>ieee80211_open</code> is called which starts the chain that calls the registered methods from <code>iwlwifi</code>.</p>
<p>In <code>net/mac80211/iface.c</code>, <code>ieee80211_open</code> is registered.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">struct</span> net_device_ops ieee80211_dataif_ops = {
	.ndo_open		= ieee80211_open,
	.ndo_stop		= ieee80211_stop,
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">int</span> ieee80211_open(<span style="color:#fff;font-weight:bold">struct</span> net_device *dev)
{
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">int</span> ieee80211_do_open(<span style="color:#fff;font-weight:bold">struct</span> wireless_dev *wdev, <span style="color:#fff;font-weight:bold">bool</span> coming_up)
{
</code></pre></div><p>In <code>net/mac80211/driver-ops.c</code>, <code>drv_add_interface</code> is eventually called</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">int</span> drv_add_interface(<span style="color:#fff;font-weight:bold">struct</span> ieee80211_local *local,
              <span style="color:#fff;font-weight:bold">struct</span> ieee80211_sub_if_data *sdata)
{
    ...
    ret = local-&gt;ops-&gt;add_interface(&amp;local-&gt;hw, &amp;sdata-&gt;vif);

</code></pre></div><p>And <code>add_interface</code> is defined <code>drivers/net/wireless/intel/iwlwifi/mvm/mac80211.c</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">struct</span> ieee80211_ops iwl_mvm_hw_ops = {
    ...
    .add_interface = iwl_mvm_mac_add_interface,
</code></pre></div><h1 id="data-path">Data path</h1>
<p>For data path (tx, rx), It again starts with user land and ends all the way down at <code>iwlwifi</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">User land -&gt; Socket layer -&gt; Network Stack (TCP/IP) -&gt; Network layer -&gt; mac80211 -&gt; iwlwifi
</code></pre></div><p>I will start at the interface between network layer and mac80211 interacts. in <code>net/mac80211/iface.c</code>, <code>net_devince_ops</code> is defined and registered with Network layer. on transmit path, <code>ndo_start_xmit</code> is called.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">struct</span> net_device_ops ieee80211_dataif_ops = {
	.ndo_open		= ieee80211_open,
	.ndo_stop		= ieee80211_stop,
	.ndo_uninit		= ieee80211_uninit,
	.ndo_start_xmit		= ieee80211_subif_start_xmit,
	.ndo_set_rx_mode	= ieee80211_set_multicast_list,
	.ndo_set_mac_address 	= ieee80211_change_mac,
	.ndo_select_queue	= ieee80211_netdev_select_queue,
	.ndo_get_stats64	= ieee80211_get_stats64,
};
</code></pre></div><p><code>ieee80211_subif_start_xmit</code> calls <code>__ieee80211_subif_start_xmit</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">netdev_tx_t ieee80211_subif_start_xmit(<span style="color:#fff;font-weight:bold">struct</span> sk_buff *skb,
				       <span style="color:#fff;font-weight:bold">struct</span> net_device *dev)
{

    ...
    ...
	} <span style="color:#fff;font-weight:bold">else</span> {
		__ieee80211_subif_start_xmit(skb, dev, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#fff;font-weight:bold">NULL</span>);
	}

	<span style="color:#fff;font-weight:bold">return</span> NETDEV_TX_OK;
}
</code></pre></div><p>After few calls down the rabbit hole, <code>drv_tx</code> is called and it calls <code>tx</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">inline</span> <span style="color:#fff;font-weight:bold">void</span> drv_tx(<span style="color:#fff;font-weight:bold">struct</span> ieee80211_local *local,
			  <span style="color:#fff;font-weight:bold">struct</span> ieee80211_tx_control *control,
			  <span style="color:#fff;font-weight:bold">struct</span> sk_buff *skb)
{
	local-&gt;ops-&gt;tx(&amp;local-&gt;hw, control, skb);
}
</code></pre></div><p><code>ops</code> here is <code>ieee80211_ops</code> registered by <code>iwlwifi</code> in <code>drivers/net/wireless/intel/iwlwifi/mvm/mac80211.c</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">struct</span> ieee80211_ops iwl_mvm_hw_ops = {
    .tx = iwl_mvm_mac_tx,
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>A 5 minute tour of my PCI wireless controller sysfs</title>
            <link>/posts/2022/08/a-5-minute-tour-of-my-pci-wireless-controller-sysfs/</link>
            <pubDate>Tue, 23 Aug 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/08/a-5-minute-tour-of-my-pci-wireless-controller-sysfs/</guid>
            <description>It started with me trying to debug iwlwifi kernel panic which brings down the network interface. So, I thought to write some stuff about the controller itself.
Starting with lspci output which basically reads sysfs (that would be /sys, more about sysfs in another post).
$ lspci -s 0000:03:00.0 -v 03:00.0 Network controller: Intel Corporation Dual Band Wireless-AC 3165 Plus Bluetooth (rev 99) Subsystem: Intel Corporation Dual Band Wireless-AC 3165 Plus Bluetooth Flags: bus master, fast devsel, latency 0, IRQ 125 Memory at 91000000 (64-bit, non-prefetchable) [size=8K] Capabilities: &amp;lt;access denied&amp;gt; Kernel driver in use: iwlwifi Kernel modules: iwlwifi Well, I can see all the information at /sys/bus/pci/devices/0000:03:00.</description>
            <content type="html"><![CDATA[<p>It started with me trying to debug <code>iwlwifi</code> kernel panic which brings down the network interface. So, I thought to write some stuff about the controller itself.</p>
<p>Starting with <code>lspci</code> output which basically reads sysfs (that would be /sys, more about sysfs in another post).</p>
<pre tabindex="0"><code>$ lspci -s 0000:03:00.0  -v
03:00.0 Network controller: Intel Corporation Dual Band Wireless-AC 3165 Plus Bluetooth (rev 99)
	Subsystem: Intel Corporation Dual Band Wireless-AC 3165 Plus Bluetooth
	Flags: bus master, fast devsel, latency 0, IRQ 125
	Memory at 91000000 (64-bit, non-prefetchable) [size=8K]
	Capabilities: &lt;access denied&gt;
	Kernel driver in use: iwlwifi
	Kernel modules: iwlwifi
</code></pre><p>Well, I can see all the information at <code>/sys/bus/pci/devices/0000:03:00.0</code> anyway, but lspci is nicer to look at. So, what is &lsquo;0000:03:00.0&rsquo;?</p>
<p>0000: Is the domain for that PCI bus(it&rsquo;s linux thing)
03: is bus number
00: is device number
.0: is function number</p>
<p>Actually, my network controller is 3rd port of PCI bridge.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">           +-1c.2-[03]----00.0  Intel Corporation Dual Band Wireless-AC <span style="color:#ff0;font-weight:bold">3165</span> Plus Bluetooth
</code></pre></div><p><code>1c</code> is a device number of PCI bridge on the bus 0 (connected to Host Bridge aka Root Complex).</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">00:1c.2 PCI bridge: Intel Corporation Atom/Celeron/Pentium Processor x5-E8000/J3xxx/N3xxx Series PCI Express Port <span style="color:#007f7f">#3 (rev 35)</span>
</code></pre></div><p>Back to wireless controller sysfs <code>/sys/bus/pci/devices/0000:03:00.0</code>. Here are some files sysfs gives us. Starting with <code>driver</code> which expected (see lspci out above)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ls -l driver
lrwxrwxrwx <span style="color:#ff0;font-weight:bold">1</span> root root <span style="color:#ff0;font-weight:bold">0</span> Aug <span style="color:#ff0;font-weight:bold">24</span> 18:33 driver -&gt; ../../../../bus/pci/drivers/iwlwifi
</code></pre></div><p>Then vendor and device ids which lspci looks up and translates to the text above.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ more device
0x3166
$ more vendor
0x8086
</code></pre></div><p>Side note, from <code>pciutils</code> the repo where lspci lives</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pciutils$ rg <span style="color:#ff0;font-weight:bold">3166</span> .
./pci.ids
31392:	<span style="color:#ff0;font-weight:bold">3166</span>  Dual Band Wireless-AC <span style="color:#ff0;font-weight:bold">3165</span> Plus Bluetooth
</code></pre></div><p>and <code>0x8086</code> is <code>Intel</code> for obvious reasons.</p>
<p>The speeds and link width(ie lanes) are there as well.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ more current_link_speed
2.5 GT/s
$ more current_link_width
<span style="color:#ff0;font-weight:bold">1</span>
</code></pre></div><p>And the part we all waiting. The PCI configuration space. The vendor and device at the start as expected.
<img src="/pci.png" alt="Example image"></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"> hexdump config
<span style="color:#ff0;font-weight:bold">0000000</span> <span style="color:#ff0;font-weight:bold">8086</span> <span style="color:#ff0;font-weight:bold">3166</span> <span style="color:#ff0;font-weight:bold">0406</span> <span style="color:#ff0;font-weight:bold">0010</span> <span style="color:#ff0;font-weight:bold">0099</span> <span style="color:#ff0;font-weight:bold">0280</span> <span style="color:#ff0;font-weight:bold">0000</span> <span style="color:#ff0;font-weight:bold">0000</span>
<span style="color:#ff0;font-weight:bold">0000010</span> <span style="color:#ff0;font-weight:bold">0004</span> <span style="color:#ff0;font-weight:bold">9100</span> <span style="color:#ff0;font-weight:bold">0000</span> <span style="color:#ff0;font-weight:bold">0000</span> <span style="color:#ff0;font-weight:bold">0000</span> <span style="color:#ff0;font-weight:bold">0000</span> <span style="color:#ff0;font-weight:bold">0000</span> <span style="color:#ff0;font-weight:bold">0000</span>
<span style="color:#ff0;font-weight:bold">0000020</span> <span style="color:#ff0;font-weight:bold">0000</span> <span style="color:#ff0;font-weight:bold">0000</span> <span style="color:#ff0;font-weight:bold">0000</span> <span style="color:#ff0;font-weight:bold">0000</span> <span style="color:#ff0;font-weight:bold">0000</span> <span style="color:#ff0;font-weight:bold">0000</span> <span style="color:#ff0;font-weight:bold">8086</span> <span style="color:#ff0;font-weight:bold">4210</span>
<span style="color:#ff0;font-weight:bold">0000030</span> <span style="color:#ff0;font-weight:bold">0000</span> <span style="color:#ff0;font-weight:bold">0000</span> 00c8 <span style="color:#ff0;font-weight:bold">0000</span> <span style="color:#ff0;font-weight:bold">0000</span> <span style="color:#ff0;font-weight:bold">0000</span> 01ff <span style="color:#ff0;font-weight:bold">0000</span>
<span style="color:#ff0;font-weight:bold">0000040</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python package of the week: vcdvcd</title>
            <link>/posts/2022/08/python-package-of-the-week-vcdvcd/</link>
            <pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/08/python-package-of-the-week-vcdvcd/</guid>
            <description>This post is about VCD parsing library called vcdvcd. It&amp;rsquo;s great way to load up vcd and do some processing instead of losing my mind looking at gtkwave. Honestly, The API documentation is not that great but there is an examples.py which helped a little.
So, I wrote this example which should be good enough to get started. It iterates the design hierarchy and gets tv (time and value) tuples for each signal.</description>
            <content type="html"><![CDATA[<p>This post is about VCD parsing library called <a href="https://github.com/ZihaoZhao/vcdvcd">vcdvcd</a>. It&rsquo;s great way to load up vcd and do some processing instead of losing my mind looking at gtkwave. Honestly, The API documentation is not that great but there is an <code>examples.py</code> which helped a little.</p>
<p>So, I wrote this example which should be good enough to get started. It iterates the design hierarchy and gets <code>tv</code> (time and value) tuples for each signal. After that i created my own wrapper with (<code>nextedge</code>, <code>prevedge</code>, <code>posedge</code>, <code>negedge</code>) but that&rsquo;s for anther post.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">from</span> vcdvcd <span style="color:#fff;font-weight:bold">import</span> VCDVCD,vcdvcd


<span style="color:#fff;font-weight:bold">def</span> _populate_scopes(scope):
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;===========================&#34;</span>)
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;Printing scope </span><span style="color:#0ff;font-weight:bold">{</span>scope<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;===========================&#34;</span>)
    <span style="color:#fff;font-weight:bold">for</span> key, subElement in scope.subElements.items():
        <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">isinstance</span>(subElement, <span style="color:#fff;font-weight:bold">str</span>):
            value = waves[subElement]
            <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;Signal =: </span><span style="color:#0ff;font-weight:bold">{</span>subElement<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
            <span style="color:#fff;font-weight:bold">for</span> t,v in value.tv:
                <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;     @</span><span style="color:#0ff;font-weight:bold">{</span>t<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> </span><span style="color:#0ff;font-weight:bold">{</span>v<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)

        <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">isinstance</span>(subElement, vcdvcd.Scope):
            _populate_scopes(subElement)

file_name = <span style="color:#0ff;font-weight:bold">&#34;dump.vcd&#34;</span>

waves =   VCDVCD(file_name, store_scopes=<span style="color:#fff;font-weight:bold">True</span>)

top_name = waves.signals[<span style="color:#ff0;font-weight:bold">0</span>].split(<span style="color:#0ff;font-weight:bold">&#34;.&#34;</span>)[<span style="color:#ff0;font-weight:bold">0</span>] <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">len</span>(waves.signals) &gt; <span style="color:#ff0;font-weight:bold">0</span> <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">None</span>

top_scope = waves[top_name]
_populate_scopes(top_scope)
</code></pre></div><p>and the output should be something like</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">===========================
Printing scope top
{
	PWRITE
	PWDATA[31:0]
	PSELx
	PREADY
	PRDATA[31:0]
	PENABLE
	PADDR[11:0]
	PCLK
	PRESETn
	m
	s
}
===========================
Signal =: top.PWRITE
     @0 x
     @36 <span style="color:#ff0;font-weight:bold">1</span>
Signal =: top.PWDATA[31:0]
     @0 x
     @36 <span style="color:#ff0;font-weight:bold">10</span>
Signal =: top.PSELx

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python classmethod vs static method</title>
            <link>/posts/2022/08/python-classmethod-vs-static-method/</link>
            <pubDate>Fri, 12 Aug 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/08/python-classmethod-vs-static-method/</guid>
            <description>classmethod and staticmethod are very similar. both are called by class but classmethod get passed class object as first argument(convention is to call it cls)
class c: @staticmethod def stmethod(arg): print(arg) @classmethod def clsmethod(cls, args): print(cls, args) c.stmethod(&amp;#34;static method&amp;#34;) c.clsmethod(&amp;#34;class method&amp;#34;) </description>
            <content type="html"><![CDATA[<p>classmethod and staticmethod are very similar. both are called by class but classmethod get passed class object as first argument(convention is to call it  <code>cls</code>)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> c:
    @staticmethod
    <span style="color:#fff;font-weight:bold">def</span> stmethod(arg):
        <span style="color:#fff;font-weight:bold">print</span>(arg)

    @classmethod
    <span style="color:#fff;font-weight:bold">def</span> clsmethod(cls, args):
        <span style="color:#fff;font-weight:bold">print</span>(cls, args)

c.stmethod(<span style="color:#0ff;font-weight:bold">&#34;static method&#34;</span>)
c.clsmethod(<span style="color:#0ff;font-weight:bold">&#34;class method&#34;</span>)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python Ellipsis</title>
            <link>/posts/2022/08/python-ellipsis/</link>
            <pubDate>Fri, 12 Aug 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/08/python-ellipsis/</guid>
            <description>I was today years old when i knew ellipsis can be used as empty body. handy if you want to define something but not sure what to write there. It&amp;rsquo;s basically same as pass.
class s: ... </description>
            <content type="html"><![CDATA[<p>I was today years old when i  knew ellipsis can be used as empty body. handy if you want to define something but not sure what to write there. It&rsquo;s basically same as <code>pass</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> s:
    ...
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>POSIX C client and server examples</title>
            <link>/posts/2022/08/posix-c-client-and-server-examples/</link>
            <pubDate>Mon, 08 Aug 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/08/posix-c-client-and-server-examples/</guid>
            <description>Funny story, 7 years ago, I accidentally built RCE(remove code execution protocol) between systemverilog and Matlab. The project died long time ago but still one the most fun project i have worked on. At the time, I started with a simple TCP client/server implementation and build binary parsers above it. Anyway,This post is about that simple TCP client/server sockets.
Posix sockets is the de-facto standard for network stack implementation. It evolved from BSD sockets (more details in wiki).</description>
            <content type="html"><![CDATA[<p>Funny story, 7 years ago, I accidentally built RCE(remove code execution protocol) between systemverilog and Matlab. The project died long time ago but still one the most fun project i have worked on. At the time, I started with a simple TCP client/server implementation and build binary parsers above it. Anyway,This post is about that simple TCP client/server sockets.</p>
<p>Posix sockets is the de-facto standard for network stack implementation. It evolved from BSD sockets (more details in <a href="https://en.wikipedia.org/wiki/Berkeley_sockets">wiki</a>). and it&rsquo;s supported with modern operating systems(windows API has it&rsquo;s quirks, DAMN YOU MS)</p>
<p>The minimal example is based on <a href="https://www.educative.io/answers/how-to-implement-tcp-sockets-in-c">post</a>.</p>
<h1 id="client">client</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;stdio.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;string.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;sys/socket.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;arpa/inet.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#0f0;font-weight:bold">#define BUFSIZE 1000
</span><span style="color:#0f0;font-weight:bold">#define PORT 2000
</span><span style="color:#0f0;font-weight:bold">#define IP &#34;127.0.0.1&#34;
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">int</span> main(<span style="color:#fff;font-weight:bold">void</span>)
{
    <span style="color:#fff;font-weight:bold">int</span> sock;
    <span style="color:#fff;font-weight:bold">struct</span> sockaddr_in serv_address;
    <span style="color:#fff;font-weight:bold">char</span> buffer[BUFSIZE];

    <span style="color:#007f7f">// create a socket
</span><span style="color:#007f7f"></span>    sock = socket(AF_INET, SOCK_STREAM, <span style="color:#ff0;font-weight:bold">0</span>);

    <span style="color:#007f7f">// con
</span><span style="color:#007f7f"></span>    serv_address.sin_family = AF_INET;
    serv_address.sin_port = htons(PORT);
    serv_address.sin_addr.s_addr = inet_addr(IP);

    connect(sock, (<span style="color:#fff;font-weight:bold">struct</span> sockaddr*)&amp;serv_address, <span style="color:#fff;font-weight:bold">sizeof</span>(serv_address));

    strcpy(buffer , <span style="color:#0ff;font-weight:bold">&#34;hello&#34;</span>);

    send(sock, buffer, strlen(buffer), <span style="color:#ff0;font-weight:bold">0</span>);

    close(sock);
}
</code></pre></div><h1 id="server">server</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;stdio.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;string.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;sys/socket.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;arpa/inet.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#0f0;font-weight:bold">#define BUFSIZE 1000
</span><span style="color:#0f0;font-weight:bold">#define PORT 2000
</span><span style="color:#0f0;font-weight:bold">#define IP &#34;127.0.0.1&#34;
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">int</span> main(<span style="color:#fff;font-weight:bold">void</span>)
{
    <span style="color:#fff;font-weight:bold">int</span> sock, client_sock, client_size;
    <span style="color:#fff;font-weight:bold">struct</span> sockaddr_in server_addr, client_addr;
    <span style="color:#fff;font-weight:bold">char</span> buffer[BUFSIZE];

    sock = socket(AF_INET, SOCK_STREAM, <span style="color:#ff0;font-weight:bold">0</span>);

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = inet_addr(IP);

    bind(sock, (<span style="color:#fff;font-weight:bold">struct</span> sockaddr*)&amp;server_addr, <span style="color:#fff;font-weight:bold">sizeof</span>(server_addr));

    listen(sock, <span style="color:#ff0;font-weight:bold">1</span>);

    client_size = <span style="color:#fff;font-weight:bold">sizeof</span>(client_addr);
    client_sock = accept(sock, (<span style="color:#fff;font-weight:bold">struct</span> sockaddr*)&amp;client_addr, &amp;client_size);

    recv(client_sock, buffer, <span style="color:#fff;font-weight:bold">sizeof</span>(buffer), <span style="color:#ff0;font-weight:bold">0</span>);
    printf(<span style="color:#0ff;font-weight:bold">&#34;Msg from client: %s</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>, buffer);

    close(client_sock);
    close(sock);
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>OpenGL Hello world</title>
            <link>/posts/2022/07/opengl-hello-world/</link>
            <pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/07/opengl-hello-world/</guid>
            <description>I have been playing with some opengl examples from the graphics bible Computer graphics Principles and Practice. The first step is getting hello world to work.
Hello World This example shows polygon by defining 4 points.
#include &amp;lt;GL/glut.h&amp;gt; void displayMe(void) { glClear(GL_COLOR_BUFFER_BIT); glBegin(GL_POLYGON); glVertex3f(0.0, 0.0, 0.0); glVertex3f(0.5, 0.0, 0.0); glVertex3f(0.5, 0.5, 0.0); glVertex3f(0.0, 0.5, 0.0); glEnd(); glFlush(); } int main(int argc, char **argv) { glutInit(&amp;amp;argc, argv); glutInitDisplayMode(GLUT_SINGLE); glutInitWindowSize(300, 300); glutInitWindowPosition(100, 100); glutCreateWindow(&amp;#34;Hello world&amp;#34;); glutDisplayFunc(displayMe); glutMainLoop(); return 0; } The generated graphics would be</description>
            <content type="html"><![CDATA[<p>I have been playing with some opengl examples from the graphics bible <code>Computer graphics Principles and Practice</code>. The first step is getting hello world to work.</p>
<h1 id="hello-world">Hello World</h1>
<p>This example shows polygon by defining 4 points.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;GL/glut.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">void</span> displayMe(<span style="color:#fff;font-weight:bold">void</span>)
{
    glClear(GL_COLOR_BUFFER_BIT);
    glBegin(GL_POLYGON);
    glVertex3f(<span style="color:#ff0;font-weight:bold">0.0</span>, <span style="color:#ff0;font-weight:bold">0.0</span>, <span style="color:#ff0;font-weight:bold">0.0</span>);
    glVertex3f(<span style="color:#ff0;font-weight:bold">0.5</span>, <span style="color:#ff0;font-weight:bold">0.0</span>, <span style="color:#ff0;font-weight:bold">0.0</span>);
    glVertex3f(<span style="color:#ff0;font-weight:bold">0.5</span>, <span style="color:#ff0;font-weight:bold">0.5</span>, <span style="color:#ff0;font-weight:bold">0.0</span>);
    glVertex3f(<span style="color:#ff0;font-weight:bold">0.0</span>, <span style="color:#ff0;font-weight:bold">0.5</span>, <span style="color:#ff0;font-weight:bold">0.0</span>);
    glEnd();
    glFlush();
}

<span style="color:#fff;font-weight:bold">int</span> main(<span style="color:#fff;font-weight:bold">int</span> argc, <span style="color:#fff;font-weight:bold">char</span> **argv)
{
    glutInit(&amp;argc, argv);
    glutInitDisplayMode(GLUT_SINGLE);

    glutInitWindowSize(<span style="color:#ff0;font-weight:bold">300</span>, <span style="color:#ff0;font-weight:bold">300</span>);
    glutInitWindowPosition(<span style="color:#ff0;font-weight:bold">100</span>, <span style="color:#ff0;font-weight:bold">100</span>);
    glutCreateWindow(<span style="color:#0ff;font-weight:bold">&#34;Hello world&#34;</span>);

    glutDisplayFunc(displayMe);

    glutMainLoop();
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}

</code></pre></div><p>The generated graphics would be</p>
<p><img src="/opengl-hw.png" alt="Example image"></p>
<p>To compile opengl application, libGL and libglut are linked. libraries are installed by installing <code>libopengl-dev</code> and <code>freeglut3</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">g++ main.cpp -lglut -lGL
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Latex - Adding bib ref files</title>
            <link>/posts/2022/06/latex-adding-bib-ref-files/</link>
            <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/06/latex-adding-bib-ref-files/</guid>
            <description>Adding references in Latex \begin{filecontents}{references.bib} @ARTICLE{KG:2022, author = {A1}, title = {FDA}, booktitle = {conf}, year = 2021 } \end{filecontents} Then add bib file
\bibliographystyle{ieeetr} \bibliography{references} \end{document} Then, pdflatex needs to run 3 times to generates references.bib first
pdflatex document.tex bibtex document.aux pdflatex document.tex pdflatex document.tex Count number of words in latex document untex file.tex | wc -w </description>
            <content type="html"><![CDATA[<h1 id="adding-references-in-latex">Adding references in Latex</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-latex" data-lang="latex"><span style="color:#fff;font-weight:bold">\begin</span><span style="color:#fff;font-weight:bold">{</span>filecontents<span style="color:#fff;font-weight:bold">}{</span>references.bib<span style="color:#fff;font-weight:bold">}</span>
@ARTICLE<span style="color:#fff;font-weight:bold">{</span>KG:2022,
  author        = <span style="color:#fff;font-weight:bold">{</span>A1<span style="color:#fff;font-weight:bold">}</span>,
  title         = <span style="color:#fff;font-weight:bold">{</span>FDA<span style="color:#fff;font-weight:bold">}</span>,
  booktitle     = <span style="color:#fff;font-weight:bold">{</span>conf<span style="color:#fff;font-weight:bold">}</span>,
  year          = 2021
<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\end</span><span style="color:#fff;font-weight:bold">{</span>filecontents<span style="color:#fff;font-weight:bold">}</span>
</code></pre></div><p>Then add <code>bib</code> file</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-latex" data-lang="latex"><span style="color:#fff;font-weight:bold">\bibliographystyle</span><span style="color:#fff;font-weight:bold">{</span>ieeetr<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\bibliography</span><span style="color:#fff;font-weight:bold">{</span>references<span style="color:#fff;font-weight:bold">}</span>

<span style="color:#fff;font-weight:bold">\end</span><span style="color:#fff;font-weight:bold">{</span>document<span style="color:#fff;font-weight:bold">}</span>
</code></pre></div><p>Then, pdflatex needs to run 3 times to generates <code>references.bib</code> first</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">	pdflatex document.tex
	bibtex document.aux
	pdflatex document.tex
	pdflatex document.tex
</code></pre></div><h1 id="count-number-of-words-in-latex-document">Count number of words in latex document</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">untex file.tex | wc -w
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Latex - The minimal Resume</title>
            <link>/posts/2022/06/latex-the-minimal-resume/</link>
            <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/06/latex-the-minimal-resume/</guid>
            <description>I have been using Latex to write documents including my resume for few years now. In this post, I am going through a minimal template i found online years ago and it has been working great for me.
\documentclass[margin, 10pt]{res} \usepackage{helvet} \setlength{\textwidth}{5.1in} \pagestyle{plain} \usepackage{hyperref} \begin{document} \moveleft.5\hoffset\centerline{\large\bf Name} \moveleft.5\hoffset\centerline{Email: EMAIL} \moveleft.5\hoffset\centerline{Linkedin: {LINK}} \moveleft.5\hoffset\centerline{Phone: } \moveleft.5\hoffset\centerline{Address: } \begin{resume} \section{ABOUT} \section{EDUCATION} \textbf{DEGREE} \hfill \textbf{DATE}\\ UNIVERSITY \\ \section{EXPERIENCE} {\sl \textbf{POSITION}} \hfill \textbf{DATE} \\ LOCATION \begin{itemize} \itemsep -2pt \item POINT ONE \end{itemize} \section{TECHNICAL \\ SKILLS} {\sl \textbf{SKILL1}} SKILL1 DETAILS \\ \section{PERSONAL \\ SKILLS} excessive blogger \end{resume} \end{document} res.</description>
            <content type="html"><![CDATA[<p>I have been using Latex to write documents including my resume for few years now. In this post, I am going through a minimal template i found online years ago and it has been working great for me.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-latex" data-lang="latex"><span style="color:#fff;font-weight:bold">\documentclass</span><span style="color:#007f7f">[margin, 10pt]</span><span style="color:#fff;font-weight:bold">{</span>res<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\usepackage</span><span style="color:#fff;font-weight:bold">{</span>helvet<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\setlength</span><span style="color:#fff;font-weight:bold">{</span><span style="color:#fff;font-weight:bold">\textwidth</span><span style="color:#fff;font-weight:bold">}{</span>5.1in<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\pagestyle</span><span style="color:#fff;font-weight:bold">{</span>plain<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\usepackage</span><span style="color:#fff;font-weight:bold">{</span>hyperref<span style="color:#fff;font-weight:bold">}</span>

<span style="color:#fff;font-weight:bold">\begin</span><span style="color:#fff;font-weight:bold">{</span>document<span style="color:#fff;font-weight:bold">}</span>

<span style="color:#fff;font-weight:bold">\moveleft</span>.5<span style="color:#fff;font-weight:bold">\hoffset\centerline</span><span style="color:#fff;font-weight:bold">{</span><span style="color:#fff;font-weight:bold">\large\bf</span> Name<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\moveleft</span>.5<span style="color:#fff;font-weight:bold">\hoffset\centerline</span><span style="color:#fff;font-weight:bold">{</span>Email: EMAIL<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\moveleft</span>.5<span style="color:#fff;font-weight:bold">\hoffset\centerline</span><span style="color:#fff;font-weight:bold">{</span>Linkedin: <span style="color:#fff;font-weight:bold">{</span>LINK<span style="color:#fff;font-weight:bold">}}</span>
<span style="color:#fff;font-weight:bold">\moveleft</span>.5<span style="color:#fff;font-weight:bold">\hoffset\centerline</span><span style="color:#fff;font-weight:bold">{</span>Phone: <span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\moveleft</span>.5<span style="color:#fff;font-weight:bold">\hoffset\centerline</span><span style="color:#fff;font-weight:bold">{</span>Address: <span style="color:#fff;font-weight:bold">}</span>

<span style="color:#fff;font-weight:bold">\begin</span><span style="color:#fff;font-weight:bold">{</span>resume<span style="color:#fff;font-weight:bold">}</span>

    <span style="color:#fff;font-weight:bold">\section</span><span style="color:#fff;font-weight:bold">{</span>ABOUT<span style="color:#fff;font-weight:bold">}</span>

    <span style="color:#fff;font-weight:bold">\section</span><span style="color:#fff;font-weight:bold">{</span>EDUCATION<span style="color:#fff;font-weight:bold">}</span>
    <span style="color:#fff;font-weight:bold">\textbf</span><span style="color:#fff;font-weight:bold">{</span>DEGREE<span style="color:#fff;font-weight:bold">}</span>  <span style="color:#fff;font-weight:bold">\hfill</span> <span style="color:#fff;font-weight:bold">\textbf</span><span style="color:#fff;font-weight:bold">{</span>DATE<span style="color:#fff;font-weight:bold">}</span><span style="color:#fff;font-weight:bold">\\</span>
    UNIVERSITY <span style="color:#fff;font-weight:bold">\\</span>

    <span style="color:#fff;font-weight:bold">\section</span><span style="color:#fff;font-weight:bold">{</span>EXPERIENCE<span style="color:#fff;font-weight:bold">}</span>
    <span style="color:#fff;font-weight:bold">{</span><span style="color:#fff;font-weight:bold">\sl</span> <span style="color:#fff;font-weight:bold">\textbf</span><span style="color:#fff;font-weight:bold">{</span>POSITION<span style="color:#fff;font-weight:bold">}}</span> <span style="color:#fff;font-weight:bold">\hfill</span> <span style="color:#fff;font-weight:bold">\textbf</span><span style="color:#fff;font-weight:bold">{</span>DATE<span style="color:#fff;font-weight:bold">}</span> <span style="color:#fff;font-weight:bold">\\</span>
    LOCATION
    <span style="color:#fff;font-weight:bold">\begin</span><span style="color:#fff;font-weight:bold">{</span>itemize<span style="color:#fff;font-weight:bold">}</span> <span style="color:#fff;font-weight:bold">\itemsep</span> -2pt
        <span style="color:#fff;font-weight:bold">\item</span> POINT ONE
    <span style="color:#fff;font-weight:bold">\end</span><span style="color:#fff;font-weight:bold">{</span>itemize<span style="color:#fff;font-weight:bold">}</span>

    <span style="color:#fff;font-weight:bold">\section</span><span style="color:#fff;font-weight:bold">{</span>TECHNICAL <span style="color:#fff;font-weight:bold">\\</span> SKILLS<span style="color:#fff;font-weight:bold">}</span>
    <span style="color:#fff;font-weight:bold">{</span><span style="color:#fff;font-weight:bold">\sl</span> <span style="color:#fff;font-weight:bold">\textbf</span><span style="color:#fff;font-weight:bold">{</span>SKILL1<span style="color:#fff;font-weight:bold">}}</span>
    SKILL1 DETAILS <span style="color:#fff;font-weight:bold">\\</span>

    <span style="color:#fff;font-weight:bold">\section</span><span style="color:#fff;font-weight:bold">{</span>PERSONAL <span style="color:#fff;font-weight:bold">\\</span> SKILLS<span style="color:#fff;font-weight:bold">}</span>
    excessive blogger

<span style="color:#fff;font-weight:bold">\end</span><span style="color:#fff;font-weight:bold">{</span>resume<span style="color:#fff;font-weight:bold">}</span>
<span style="color:#fff;font-weight:bold">\end</span><span style="color:#fff;font-weight:bold">{</span>document<span style="color:#fff;font-weight:bold">}</span>
</code></pre></div><p><code>res.cls</code> can be downloaded from <a href="/res.cls">link</a></p>
]]></content>
        </item>
        
        <item>
            <title>RGB to YCbCr and DCT/IDCT effects</title>
            <link>/posts/2022/06/rgb-to-ycbcr-and-dct/idct-effects/</link>
            <pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/06/rgb-to-ycbcr-and-dct/idct-effects/</guid>
            <description>I started this post with a attempt to show the difference between RGB and YCbCr. but that was easy enough so i added one round of dct/idct to see the effects on grey scale(if any).
 The main difference between RGB and YCbCr is that instead using Red/green/blue, YCbCr is using gray(luminance) and Red/Blue differences. It&amp;rsquo;s mainly due to the fact human eye detects gray scale better than color scale which allows more aggressive compression for color components.</description>
            <content type="html"><![CDATA[<p>I started this post with a attempt to show the difference between RGB and YCbCr. but that was easy enough so i added one round of dct/idct to see the effects on grey scale(if any).</p>
<h1 id="heading"></h1>
<p>The main difference between RGB and YCbCr is that instead using Red/green/blue, YCbCr is using gray(luminance) and Red/Blue differences. It&rsquo;s mainly due to the fact human eye detects gray scale better than color scale which allows more aggressive compression for color components.</p>
<p>The equation to convert from RGB to YCbCr is from <a href="https://en.wikipedia.org/wiki/YCbCr#JPEG_conversion">wiki</a>
<img src="/rgb_ycbcr.png" alt="Example image"></p>
<p>With that out the way, I thought it would be fun to do DCT then IDCT to see if DCT/IDCT makes visible change in the image. I found <code>dct2</code> and <code>idct2</code> from <a href="https://stackoverflow.com/questions/40104377/issiue-with-implementation-of-2d-discrete-cosine-transform-in-python">SO</a> (for 2-D DCT based on scipy 1-D DCT).</p>
<p>And there are no visible differences between original gray scale and final image after DCT/IDCT. I did subtract them and differences are mostly <code>1.42108547e-14</code>.</p>
<p><img src="/dct-idct-lenna.png" alt="Example image"></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">import</span> numpy <span style="color:#fff;font-weight:bold">as</span> np
<span style="color:#fff;font-weight:bold">from</span> scipy.fftpack <span style="color:#fff;font-weight:bold">import</span> dct, idct
<span style="color:#fff;font-weight:bold">import</span> imageio.v2 <span style="color:#fff;font-weight:bold">as</span> imageio
<span style="color:#fff;font-weight:bold">import</span> matplotlib.pyplot <span style="color:#fff;font-weight:bold">as</span> plt

<span style="color:#fff;font-weight:bold">def</span> rgb2ycbcr(image):
    R = image[:, :, <span style="color:#ff0;font-weight:bold">0</span>]
    G = image[:, :, <span style="color:#ff0;font-weight:bold">1</span>]
    B = image[:, :, <span style="color:#ff0;font-weight:bold">2</span>]

    Y  = <span style="color:#ff0;font-weight:bold">0</span>                          + <span style="color:#ff0;font-weight:bold">.299</span>     *  R + <span style="color:#ff0;font-weight:bold">.587</span>      * G  + <span style="color:#ff0;font-weight:bold">0.114</span>   * B
    <span style="color:#007f7f">#Cb = np.ones[image.shape] * 128 - 0.168736 *  R - 0.331264  * G  + 0.5      *</span>
B
    <span style="color:#007f7f">#Cr = np.ones[image.shape] * 128 + 0.5      *  R - 0.0.418688* G  - 0.081312 *</span>
B
    <span style="color:#fff;font-weight:bold">return</span> Y

rgb = imageio.imread(<span style="color:#0ff;font-weight:bold">&#39;./Lenna.png&#39;</span>)
ycbcr = rgb2ycbcr(rgb)

<span style="color:#007f7f"># DCT/IDCT</span>
gray = ycbcr
<span style="color:#fff;font-weight:bold">def</span> dct2(a):
    <span style="color:#fff;font-weight:bold">return</span> dct(dct(a.T, norm=<span style="color:#0ff;font-weight:bold">&#39;ortho&#39;</span>).T, norm=<span style="color:#0ff;font-weight:bold">&#39;ortho&#39;</span>)
<span style="color:#fff;font-weight:bold">def</span> idct2(a):
    <span style="color:#fff;font-weight:bold">return</span> idct(idct(a.T, norm=<span style="color:#0ff;font-weight:bold">&#39;ortho&#39;</span>).T, norm=<span style="color:#0ff;font-weight:bold">&#39;ortho&#39;</span>)

dct_im = dct2(gray)
idct_im = idct2(dct_im)

_, plots = plt.subplots(<span style="color:#ff0;font-weight:bold">2</span>)
plots[<span style="color:#ff0;font-weight:bold">0</span>].imshow(gray, cmap=<span style="color:#0ff;font-weight:bold">&#34;gray&#34;</span>)
plots[<span style="color:#ff0;font-weight:bold">1</span>].imshow(idct_im, cmap=<span style="color:#0ff;font-weight:bold">&#34;gray&#34;</span>)
plt.show()

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Arithmetic Coding</title>
            <link>/posts/2022/06/arithmetic-coding/</link>
            <pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/06/arithmetic-coding/</guid>
            <description>In previous post, I wrote quick post about Huffman Coding. Apparently, Arithmetic Coding is replaces Huffman. It&amp;rsquo;s optional in MPEG and it&amp;rsquo;s part VP9 specs.
wiki describes it as
 Arithmetic coding (AC) is a form of entropy encoding used in lossless data compression.
 The encoding works by sending a value in range of probability [0,1](as fixed-point). Basically, It is decision tree on steroids. I really like the diagram on the wiki.</description>
            <content type="html"><![CDATA[<p>In previous post, I wrote quick post about Huffman Coding. Apparently, Arithmetic Coding is replaces Huffman. It&rsquo;s optional in MPEG and it&rsquo;s part VP9 specs.</p>
<p><a href="https://en.wikipedia.org/wiki/Arithmetic_coding">wiki</a> describes it as</p>
<blockquote>
<p>Arithmetic coding (AC) is a form of entropy encoding used in lossless data compression.</p>
</blockquote>
<p>The encoding works by sending a value in range of probability <code>[0,1]</code>(as fixed-point). Basically, It is decision tree on steroids. I really like the diagram on the wiki.</p>
<p><img src="/arithmetic-coding.png" alt="Example image"></p>
<p>For this work, we need to define Probability for each symbol. Then process each symbol reducing the number as you go. The interesting part is sending more probable symbol means less digits which means less bandwidth needed. If we keep sending less probable symbols, The fraction gets bigger and more bits to encode the symbol stream. But who knows! I could be totally worng here.</p>
<p>The following example is a simple implementation of arithmetic coding. I found it in <a href="https://web.stanford.edu/class/ee398a/handouts/papers/WittenACM87ArithmCoding.pdf">course notes</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> encode(sym_id, low, high, freq):
    range_ = high - low
    high   =  low + range_ * freq[sym_id+<span style="color:#ff0;font-weight:bold">1</span>]
    low    =  low + range_ * freq[sym_id]
    <span style="color:#fff;font-weight:bold">return</span> (range_, low, high)


STR = <span style="color:#0ff;font-weight:bold">&#34;eaii!&#34;</span>
freq = [(<span style="color:#0ff;font-weight:bold">&#34;a&#34;</span>, <span style="color:#ff0;font-weight:bold">0.0</span>, <span style="color:#ff0;font-weight:bold">0.2</span>),
        (<span style="color:#0ff;font-weight:bold">&#34;e&#34;</span>, <span style="color:#ff0;font-weight:bold">0.2</span>, <span style="color:#ff0;font-weight:bold">0.5</span>),
        (<span style="color:#0ff;font-weight:bold">&#34;i&#34;</span>, <span style="color:#ff0;font-weight:bold">0.5</span>, <span style="color:#ff0;font-weight:bold">0.6</span>),
        (<span style="color:#0ff;font-weight:bold">&#34;o&#34;</span>, <span style="color:#ff0;font-weight:bold">0.6</span>, <span style="color:#ff0;font-weight:bold">0.8</span>),
        (<span style="color:#0ff;font-weight:bold">&#34;u&#34;</span>, <span style="color:#ff0;font-weight:bold">0.8</span>, <span style="color:#ff0;font-weight:bold">0.9</span>),
        (<span style="color:#0ff;font-weight:bold">&#34;!&#34;</span>, <span style="color:#ff0;font-weight:bold">0.9</span>, <span style="color:#ff0;font-weight:bold">1.0</span>)]

low = <span style="color:#ff0;font-weight:bold">0</span>
high = <span style="color:#ff0;font-weight:bold">1</span>

freq1 = [<span style="color:#ff0;font-weight:bold">0</span>] + [x[<span style="color:#ff0;font-weight:bold">2</span>] <span style="color:#fff;font-weight:bold">for</span> x in freq]

<span style="color:#fff;font-weight:bold">print</span>(freq1)

<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;===================&#34;</span>)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;char range low high&#34;</span>)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;===================&#34;</span>)
<span style="color:#fff;font-weight:bold">for</span> i in STR:
    index = [x[<span style="color:#ff0;font-weight:bold">0</span>] <span style="color:#fff;font-weight:bold">for</span> x in freq].index(i)
    (r, low, high) = encode(index, low, high, freq1)
    <span style="color:#fff;font-weight:bold">print</span>((i, r, low, high))
</code></pre></div><p>And output of the above code is</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">[0, 0.2, 0.5, 0.6, 0.8, 0.9, 1.0]
===================
char range low high
===================
(<span style="color:#0ff;font-weight:bold">&#39;e&#39;</span>, 1, 0.2, 0.5)
(<span style="color:#0ff;font-weight:bold">&#39;a&#39;</span>, 0.3, 0.2, 0.26)
(<span style="color:#0ff;font-weight:bold">&#39;i&#39;</span>, 0.06, 0.23, 0.23600000000000002)
(<span style="color:#0ff;font-weight:bold">&#39;i&#39;</span>, 0.006000000000000005, 0.233, 0.2336)
(<span style="color:#0ff;font-weight:bold">&#39;!&#39;</span>, 0.0005999999999999894, 0.23354, 0.2336)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Discrete Fourier Transform - DFT</title>
            <link>/posts/2022/06/discrete-fourier-transform-dft/</link>
            <pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/06/discrete-fourier-transform-dft/</guid>
            <description>DFT is one of most important transformation ever invented.It&amp;rsquo;s used in almost every application(compression, filters, etc). From wiki,
 In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.
 Basically, FT represents sum of basis frequencies (2pik/N) scaled with coefficients. DFT calculates these coefficients using the following equation</description>
            <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Discrete_Fourier_transform">DFT</a> is one of most important transformation ever invented.It&rsquo;s used in almost every application(compression, filters, etc). From wiki,</p>
<blockquote>
<p>In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.</p>
</blockquote>
<p>Basically, FT represents sum of basis frequencies (2<em>pi</em>k/N) scaled with coefficients. DFT calculates these coefficients using the following equation</p>
<p><img src="/dft-eq.png" alt="Example image"></p>
<p>Simple and inefficient implementation does O(n^2) multiplications and additions.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">import</span> numpy <span style="color:#fff;font-weight:bold">as</span> np
<span style="color:#fff;font-weight:bold">import</span> matplotlib.pyplot <span style="color:#fff;font-weight:bold">as</span> plt

<span style="color:#007f7f"># Input wave</span>
FS = <span style="color:#ff0;font-weight:bold">128</span>
T = <span style="color:#ff0;font-weight:bold">2</span>

x = np.arange(<span style="color:#ff0;font-weight:bold">0</span>, T, <span style="color:#ff0;font-weight:bold">1</span>/FS)
f1= np.sin(<span style="color:#ff0;font-weight:bold">2</span>* np.pi * <span style="color:#ff0;font-weight:bold">1</span> * x)
f = np.sin(<span style="color:#ff0;font-weight:bold">2</span>* np.pi * <span style="color:#ff0;font-weight:bold">8</span> * x) +  np.sin(<span style="color:#ff0;font-weight:bold">2</span>* np.pi * <span style="color:#ff0;font-weight:bold">4</span> * x) + f1

<span style="color:#007f7f"># DFT</span>
N = f.shape[<span style="color:#ff0;font-weight:bold">0</span>]
F = N * [<span style="color:#fff;font-weight:bold">complex</span>(<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">0</span>)]

<span style="color:#fff;font-weight:bold">for</span> k in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">0</span>, N):
    <span style="color:#fff;font-weight:bold">for</span> n in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">0</span>, N):
        F[k] +=  f[n] * np.exp(<span style="color:#fff;font-weight:bold">complex</span>(<span style="color:#ff0;font-weight:bold">0</span>, -<span style="color:#ff0;font-weight:bold">2</span>* np.pi * k * n/N))

<span style="color:#007f7f"># Calc and plotting</span>
freq = FS * np.arange(<span style="color:#ff0;font-weight:bold">0</span>, N)/ N
dft = np.abs((F))

freq1 = freq[<span style="color:#ff0;font-weight:bold">0</span>:N//<span style="color:#ff0;font-weight:bold">2</span>]
dft1  = dft[<span style="color:#ff0;font-weight:bold">0</span>:N//<span style="color:#ff0;font-weight:bold">2</span>]

_, plots = plt.subplots(<span style="color:#ff0;font-weight:bold">4</span>)

plots[<span style="color:#ff0;font-weight:bold">0</span>].plot(x,f1)
plots[<span style="color:#ff0;font-weight:bold">1</span>].plot(x,f)
plots[<span style="color:#ff0;font-weight:bold">2</span>].plot(freq, dft)
plots[<span style="color:#ff0;font-weight:bold">3</span>].plot(freq1, dft1)

plt.show()

</code></pre></div><p>The output shows the frequency domain. plot 3 shows the full the freq domain which is mirrored around <code>N/2</code>(DFT is symmetric around FS/2). Well, I think that&rsquo;s important considering the sampling freq <code>Nyquist frequency</code> is highest freq that can be represented by FS sampling.</p>
<p><img src="/dft.png" alt="Example image"></p>
]]></content>
        </item>
        
        <item>
            <title>Discrete Cosine Transform - DCT</title>
            <link>/posts/2022/06/discrete-cosine-transform-dct/</link>
            <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/06/discrete-cosine-transform-dct/</guid>
            <description>DCT is frequency domain transform with cosine frequencies. Wiki says it all:
 A discrete cosine transform (DCT) expresses a finite sequence of data points in terms of a sum of cosine functions oscillating at different frequencies
 The equation to calculate g[u][v] DCT coefficients for 8x8 matrix (used for JPEG).
Brute force calculation can be done with next loops. It sure can be better with caching cosine multiplication or better butterfly implementation.</description>
            <content type="html"><![CDATA[<p>DCT is frequency domain transform with cosine frequencies. <a href="https://en.wikipedia.org/wiki/Discrete_cosine_transform">Wiki</a> says it all:</p>
<blockquote>
<p>A discrete cosine transform (DCT) expresses a finite sequence of data points in terms of a sum of cosine functions oscillating at different frequencies</p>
</blockquote>
<p>The equation to calculate <code>g[u][v]</code> DCT coefficients  for 8x8 matrix (used for JPEG).</p>
<p><img src="/dct-eq.png" alt="Example image"></p>
<p>Brute force calculation can be done with next loops. It sure can be better with caching <code>cosine</code> multiplication or better butterfly implementation.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">import</span> math

mat = [
       [-<span style="color:#ff0;font-weight:bold">76</span>, -<span style="color:#ff0;font-weight:bold">73</span>, -<span style="color:#ff0;font-weight:bold">67</span>, -<span style="color:#ff0;font-weight:bold">62</span>, -<span style="color:#ff0;font-weight:bold">58</span>, -<span style="color:#ff0;font-weight:bold">67</span>, -<span style="color:#ff0;font-weight:bold">64</span>, -<span style="color:#ff0;font-weight:bold">55</span>],
       [-<span style="color:#ff0;font-weight:bold">65</span>, -<span style="color:#ff0;font-weight:bold">69</span>, -<span style="color:#ff0;font-weight:bold">73</span>, -<span style="color:#ff0;font-weight:bold">38</span>, -<span style="color:#ff0;font-weight:bold">19</span>, -<span style="color:#ff0;font-weight:bold">43</span>, -<span style="color:#ff0;font-weight:bold">59</span>, -<span style="color:#ff0;font-weight:bold">56</span>],
       [-<span style="color:#ff0;font-weight:bold">66</span>, -<span style="color:#ff0;font-weight:bold">69</span>, -<span style="color:#ff0;font-weight:bold">60</span>, -<span style="color:#ff0;font-weight:bold">15</span>,  <span style="color:#ff0;font-weight:bold">16</span>, -<span style="color:#ff0;font-weight:bold">24</span>, -<span style="color:#ff0;font-weight:bold">62</span>, -<span style="color:#ff0;font-weight:bold">55</span>],
       [-<span style="color:#ff0;font-weight:bold">65</span>, -<span style="color:#ff0;font-weight:bold">70</span>, -<span style="color:#ff0;font-weight:bold">57</span>, -<span style="color:#ff0;font-weight:bold">6</span>,   <span style="color:#ff0;font-weight:bold">26</span>, -<span style="color:#ff0;font-weight:bold">22</span>, -<span style="color:#ff0;font-weight:bold">58</span>, -<span style="color:#ff0;font-weight:bold">59</span>],
       [-<span style="color:#ff0;font-weight:bold">61</span>, -<span style="color:#ff0;font-weight:bold">67</span>, -<span style="color:#ff0;font-weight:bold">60</span>, -<span style="color:#ff0;font-weight:bold">24</span>, -<span style="color:#ff0;font-weight:bold">2</span>,  -<span style="color:#ff0;font-weight:bold">40</span>, -<span style="color:#ff0;font-weight:bold">60</span>, -<span style="color:#ff0;font-weight:bold">58</span>],
       [-<span style="color:#ff0;font-weight:bold">49</span>, -<span style="color:#ff0;font-weight:bold">63</span>, -<span style="color:#ff0;font-weight:bold">68</span>, -<span style="color:#ff0;font-weight:bold">58</span>, -<span style="color:#ff0;font-weight:bold">51</span>, -<span style="color:#ff0;font-weight:bold">60</span>, -<span style="color:#ff0;font-weight:bold">70</span>, -<span style="color:#ff0;font-weight:bold">53</span>],
       [-<span style="color:#ff0;font-weight:bold">43</span>, -<span style="color:#ff0;font-weight:bold">57</span>, -<span style="color:#ff0;font-weight:bold">64</span>, -<span style="color:#ff0;font-weight:bold">69</span>, -<span style="color:#ff0;font-weight:bold">73</span>, -<span style="color:#ff0;font-weight:bold">67</span>, -<span style="color:#ff0;font-weight:bold">63</span>, -<span style="color:#ff0;font-weight:bold">45</span>],
       [-<span style="color:#ff0;font-weight:bold">41</span>, -<span style="color:#ff0;font-weight:bold">49</span>, -<span style="color:#ff0;font-weight:bold">59</span>, -<span style="color:#ff0;font-weight:bold">60</span>, -<span style="color:#ff0;font-weight:bold">63</span>, -<span style="color:#ff0;font-weight:bold">52</span>, -<span style="color:#ff0;font-weight:bold">50</span>, -<span style="color:#ff0;font-weight:bold">34</span>],
       ]
<span style="color:#fff;font-weight:bold">def</span> A(idx):
    r = <span style="color:#ff0;font-weight:bold">1.0</span>/math.sqrt(<span style="color:#ff0;font-weight:bold">2</span>) <span style="color:#fff;font-weight:bold">if</span> idx == <span style="color:#ff0;font-weight:bold">0</span> <span style="color:#fff;font-weight:bold">else</span> <span style="color:#ff0;font-weight:bold">1.0</span>
    <span style="color:#fff;font-weight:bold">return</span> r

<span style="color:#fff;font-weight:bold">def</span> mydct(mat):
    N = <span style="color:#fff;font-weight:bold">len</span>(mat)
    <span style="color:#007f7f">#Fuv = N * [ N * [0.0]]</span>
    Fuv = [
           [-<span style="color:#ff0;font-weight:bold">76</span>, -<span style="color:#ff0;font-weight:bold">73</span>, -<span style="color:#ff0;font-weight:bold">67</span>, -<span style="color:#ff0;font-weight:bold">62</span>, -<span style="color:#ff0;font-weight:bold">58</span>, -<span style="color:#ff0;font-weight:bold">67</span>, -<span style="color:#ff0;font-weight:bold">64</span>, -<span style="color:#ff0;font-weight:bold">55</span>],
           [-<span style="color:#ff0;font-weight:bold">65</span>, -<span style="color:#ff0;font-weight:bold">69</span>, -<span style="color:#ff0;font-weight:bold">73</span>, -<span style="color:#ff0;font-weight:bold">38</span>, -<span style="color:#ff0;font-weight:bold">19</span>, -<span style="color:#ff0;font-weight:bold">43</span>, -<span style="color:#ff0;font-weight:bold">59</span>, -<span style="color:#ff0;font-weight:bold">56</span>],
           [-<span style="color:#ff0;font-weight:bold">66</span>, -<span style="color:#ff0;font-weight:bold">69</span>, -<span style="color:#ff0;font-weight:bold">60</span>, -<span style="color:#ff0;font-weight:bold">15</span>,  <span style="color:#ff0;font-weight:bold">16</span>, -<span style="color:#ff0;font-weight:bold">24</span>, -<span style="color:#ff0;font-weight:bold">62</span>, -<span style="color:#ff0;font-weight:bold">55</span>],
           [-<span style="color:#ff0;font-weight:bold">65</span>, -<span style="color:#ff0;font-weight:bold">70</span>, -<span style="color:#ff0;font-weight:bold">57</span>, -<span style="color:#ff0;font-weight:bold">6</span>,   <span style="color:#ff0;font-weight:bold">26</span>, -<span style="color:#ff0;font-weight:bold">22</span>, -<span style="color:#ff0;font-weight:bold">58</span>, -<span style="color:#ff0;font-weight:bold">59</span>],
           [-<span style="color:#ff0;font-weight:bold">61</span>, -<span style="color:#ff0;font-weight:bold">67</span>, -<span style="color:#ff0;font-weight:bold">60</span>, -<span style="color:#ff0;font-weight:bold">24</span>, -<span style="color:#ff0;font-weight:bold">2</span>,  -<span style="color:#ff0;font-weight:bold">40</span>, -<span style="color:#ff0;font-weight:bold">60</span>, -<span style="color:#ff0;font-weight:bold">58</span>],
           [-<span style="color:#ff0;font-weight:bold">49</span>, -<span style="color:#ff0;font-weight:bold">63</span>, -<span style="color:#ff0;font-weight:bold">68</span>, -<span style="color:#ff0;font-weight:bold">58</span>, -<span style="color:#ff0;font-weight:bold">51</span>, -<span style="color:#ff0;font-weight:bold">60</span>, -<span style="color:#ff0;font-weight:bold">70</span>, -<span style="color:#ff0;font-weight:bold">53</span>],
           [-<span style="color:#ff0;font-weight:bold">43</span>, -<span style="color:#ff0;font-weight:bold">57</span>, -<span style="color:#ff0;font-weight:bold">64</span>, -<span style="color:#ff0;font-weight:bold">69</span>, -<span style="color:#ff0;font-weight:bold">73</span>, -<span style="color:#ff0;font-weight:bold">67</span>, -<span style="color:#ff0;font-weight:bold">63</span>, -<span style="color:#ff0;font-weight:bold">45</span>],
           [-<span style="color:#ff0;font-weight:bold">41</span>, -<span style="color:#ff0;font-weight:bold">49</span>, -<span style="color:#ff0;font-weight:bold">59</span>, -<span style="color:#ff0;font-weight:bold">60</span>, -<span style="color:#ff0;font-weight:bold">63</span>, -<span style="color:#ff0;font-weight:bold">52</span>, -<span style="color:#ff0;font-weight:bold">50</span>, -<span style="color:#ff0;font-weight:bold">34</span>],
           ]

    <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(N):
        <span style="color:#fff;font-weight:bold">for</span> j in <span style="color:#fff;font-weight:bold">range</span>(N):

            sum_ = <span style="color:#ff0;font-weight:bold">0</span>
            <span style="color:#fff;font-weight:bold">for</span> x in <span style="color:#fff;font-weight:bold">range</span>(N):
                <span style="color:#fff;font-weight:bold">for</span> y in <span style="color:#fff;font-weight:bold">range</span>(N):
                    sum_ = sum_ +  mat[x][y] * math.cos((<span style="color:#ff0;font-weight:bold">2</span> * x + <span style="color:#ff0;font-weight:bold">1</span>) * i * math.pi / (<span style="color:#ff0;font-weight:bold">2</span> * N)) * math.cos((<span style="color:#ff0;font-weight:bold">2</span> * y + <span style="color:#ff0;font-weight:bold">1</span>) * j * math.pi / (<span style="color:#ff0;font-weight:bold">2</span> * N))

            Fuv[i][j] = (<span style="color:#ff0;font-weight:bold">1</span>/math.sqrt(<span style="color:#ff0;font-weight:bold">2</span> * N)) * A(i) * A(j) * sum_
    <span style="color:#fff;font-weight:bold">return</span> Fuv

r = mydct(mat)
<span style="color:#fff;font-weight:bold">print</span>(r)
</code></pre></div><p>The output coefficients are. Probably worth noting that first element ([0][0]) is called the DC coefficient which is the largest coefficient in the matrix.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">[[-415.3749999999999, -30.185717276809033, -61.1970619502957, 27.23932249600452, 56.124999999999964, -20.095173772334842, -2.387647095293558, 0.46181544244846645], [4.4655237014136855, -21.857439332259844, -60.75803811653402, 10.253636818417837, 13.145110120476232, -7.0874180078452005, -8.535436712969494, 4.8768884966804045], [-46.834484742312476, 7.370597353426694, 77.12938757875553, -24.561982249733376, -28.911688429320662, 9.933520952775087, 5.416815472394543, -5.648950862137469], [-48.53496666553105, 12.068360940019197, 34.09976717271505, -14.759411080801929, -10.240606801750438, 6.295967438373016, 1.8311650530957317, 1.945936514864812], [12.12499999999995, -6.553449928892075, -13.196120970971862, -3.951427727907836, -1.8749999999999893, 1.7452844510267367, -2.7872282503369483, 3.1352823039767697], [-7.7347436775991625, 2.905461382890558, 2.379795764875581, -5.939313935865533, -2.37779670673259, 0.9413915961413784, 4.303713343622748, 1.8486910259091216], [-1.030674013497251, 0.18306744355204074, 0.41681547239454186, -2.4155613745353888, -0.8777939199423077, -3.0193065522845317, 4.120612421244484, -0.6619484539385858], [-0.16537560203663063, 0.14160712244184515, -1.0715363895103496, -4.192912078044711, -1.170314092006254, -0.09776107933753686, 0.5012693916445825, 1.6754588169203766]]
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Huffman Coding</title>
            <link>/posts/2022/06/huffman-coding/</link>
            <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/06/huffman-coding/</guid>
            <description>Huffman code is one of the lossless compression algos. The idea is using a coding where more frequent symbols have shorter encoding and less frequent symbols with longer encoding(variable length encoding). A variant of Huffman is used for JPEG standard, so apparently it&amp;rsquo;s a big deal.
The simple algorithm on wiki is described as follows:
 Create a leaf node for each symbol and add it to the priority queue. While there is more than one node in the queue: Remove the two nodes of highest priority (lowest probability) from the queue Create a new internal node with these two nodes as children and with probability equal to the sum of the two nodes&#39; probabilities.</description>
            <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Huffman_coding">Huffman code</a> is one of the lossless compression algos. The idea is using a coding where more frequent symbols have shorter encoding and less frequent symbols with longer encoding(variable length encoding).  A variant of Huffman is used for JPEG standard, so apparently it&rsquo;s a big deal.</p>
<p>The simple algorithm on wiki is described as follows:</p>
<blockquote>
<p>Create a leaf node for each symbol and add it to the priority queue.
While there is more than one node in the queue:
Remove the two nodes of highest priority (lowest probability) from the queue
Create a new internal node with these two nodes as children and with probability equal to the sum of the two nodes' probabilities.
Add the new node to the queue.
The remaining node is the root node and the tree is complete.</p>
</blockquote>
<h1 id="the-algorithm">The algorithm</h1>
<p>First, we need to get the frequency of symbols. This is quick and (very) dirty way.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">TEXT = <span style="color:#0ff;font-weight:bold">&#34;A_DEAD_DAD_CEDED_A_BAD_BABE_A_BEADED_ABACA_BED&#34;</span>

<span style="color:#fff;font-weight:bold">def</span> calc_symbols_freq(txt):
    symbols = []

    txt = <span style="color:#fff;font-weight:bold">sorted</span>(<span style="color:#fff;font-weight:bold">list</span>(txt))

    start = <span style="color:#ff0;font-weight:bold">0</span>
    end = <span style="color:#ff0;font-weight:bold">0</span>
    i = <span style="color:#ff0;font-weight:bold">0</span>
    txt += [<span style="color:#0ff;font-weight:bold">&#39;$&#39;</span>]
    <span style="color:#fff;font-weight:bold">while</span> (i &lt; <span style="color:#fff;font-weight:bold">len</span>(txt)):
        <span style="color:#fff;font-weight:bold">if</span> i == <span style="color:#fff;font-weight:bold">len</span>(txt) - <span style="color:#ff0;font-weight:bold">1</span>:
            <span style="color:#fff;font-weight:bold">break</span>
        <span style="color:#fff;font-weight:bold">if</span> txt[i] != txt[i+<span style="color:#ff0;font-weight:bold">1</span>]:
            end = i
            symbols.append((txt[i], end-start+<span style="color:#ff0;font-weight:bold">1</span>))
            start = end + <span style="color:#ff0;font-weight:bold">1</span>
        i += <span style="color:#ff0;font-weight:bold">1</span>
    <span style="color:#fff;font-weight:bold">return</span> symbols
</code></pre></div><p>The algorithm mentions using priority queue to keep the queue sorted. Well, Life is too short. So, I used a normal list and kept sorting it (I am probably wanted by the performance police by now)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> Node:
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, sym, w, left=<span style="color:#fff;font-weight:bold">None</span>, right=<span style="color:#fff;font-weight:bold">None</span>, parent=<span style="color:#fff;font-weight:bold">None</span>):
        self.sym    = sym
        self.w      = w
        self.parent = parent
        self.left   = left
        self.right  = right
    <span style="color:#fff;font-weight:bold">def</span> __str__(self):
        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">{</span>self.sym<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">: </span><span style="color:#0ff;font-weight:bold">{</span>self.w<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>

<span style="color:#fff;font-weight:bold">class</span> Tree():

    <span style="color:#fff;font-weight:bold">def</span> __init__(self, syms):
        self.root = <span style="color:#fff;font-weight:bold">None</span>
        q = []

        <span style="color:#fff;font-weight:bold">for</span> sym in syms:
            q.append(Node(sym[<span style="color:#ff0;font-weight:bold">0</span>], sym[<span style="color:#ff0;font-weight:bold">1</span>]))

        q = <span style="color:#fff;font-weight:bold">sorted</span>(q, key=<span style="color:#fff;font-weight:bold">lambda</span> x: x.w, reverse=<span style="color:#fff;font-weight:bold">True</span>)

        <span style="color:#fff;font-weight:bold">while</span> ( <span style="color:#fff;font-weight:bold">len</span>(q) &gt; <span style="color:#ff0;font-weight:bold">1</span>):
            a = q.pop()
            b = q.pop()

            node = Node(a.sym + b.sym , a.w + b.w, a, b)
            a.parent = node
            b.parent = node

            q.append(node)
            q = <span style="color:#fff;font-weight:bold">sorted</span>(q, key=<span style="color:#fff;font-weight:bold">lambda</span> x: x.w, reverse=<span style="color:#fff;font-weight:bold">True</span>)


        <span style="color:#007f7f"># the remaining node is the root</span>
        <span style="color:#fff;font-weight:bold">assert</span>(<span style="color:#fff;font-weight:bold">len</span>(q) == <span style="color:#ff0;font-weight:bold">1</span>)
        self.root = q.pop()

        <span style="color:#007f7f"># traverse all paths to leaf nodes</span>
        <span style="color:#fff;font-weight:bold">def</span> traverse(n, path):
            <span style="color:#fff;font-weight:bold">if</span>(n.left):
                traverse(n.left, path+<span style="color:#0ff;font-weight:bold">&#34;0&#34;</span>)
            <span style="color:#fff;font-weight:bold">else</span>:
                <span style="color:#fff;font-weight:bold">print</span>(n, <span style="color:#0ff;font-weight:bold">&#34; &#34;</span>, path)
            <span style="color:#fff;font-weight:bold">if</span>(n.right):
                traverse(n.right, path+<span style="color:#0ff;font-weight:bold">&#34;1&#34;</span>)

        traverse(self.root, <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>)

    <span style="color:#fff;font-weight:bold">def</span> encode(self, txt):
        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">None</span>

syms = calc_symbols_freq(TEXT)
tree = Tree(syms)
</code></pre></div><p>And the output matches wiki results. hurrah!</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">_: <span style="color:#ff0;font-weight:bold">10</span>   <span style="color:#ff0;font-weight:bold">00</span>
D: <span style="color:#ff0;font-weight:bold">10</span>   <span style="color:#ff0;font-weight:bold">01</span>
A: <span style="color:#ff0;font-weight:bold">11</span>   <span style="color:#ff0;font-weight:bold">10</span>
E: <span style="color:#ff0;font-weight:bold">7</span>   <span style="color:#ff0;font-weight:bold">110</span>
C: <span style="color:#ff0;font-weight:bold">2</span>   <span style="color:#ff0;font-weight:bold">1110</span>
B: <span style="color:#ff0;font-weight:bold">6</span>   <span style="color:#ff0;font-weight:bold">1111</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Solving N-Queen using Systemverilog Constraints</title>
            <link>/posts/2022/06/solving-n-queen-using-systemverilog-constraints/</link>
            <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/06/solving-n-queen-using-systemverilog-constraints/</guid>
            <description>This time I will try to solve N-Queen problem using Systemverilog solver constraint. They really need to add systemverilog to leetcode. Kidding! All the cool kids use python these days :).
The Rules are simple:
 Queens can&amp;rsquo;t be on the same rows Queens can&amp;rsquo;t be on the same columns Queens can&amp;rsquo;t be on diagonal (this really expands to +ve and -ve diagonals)  // square can be 0 or 1 (1 means queen) constraint a01 {foreach(grid[i][j]) grid[i][j] inside {[0:1]};} // Each row can have one queen constraint rows {foreach(grid[i][j]) grid[i].</description>
            <content type="html"><![CDATA[<p>This time I will try to solve <a href="https://en.wikipedia.org/wiki/Eight_queens_puzzle">N-Queen</a> problem using Systemverilog solver constraint.  They really need to add systemverilog to leetcode. Kidding! All the cool kids use python these days :).</p>
<p>The Rules are simple:</p>
<ul>
<li>Queens can&rsquo;t be on the same rows</li>
<li>Queens can&rsquo;t be on the same columns</li>
<li>Queens can&rsquo;t be on diagonal (this really expands to +ve and -ve diagonals)</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#007f7f">// square can be 0 or 1 (1 means queen)
</span><span style="color:#007f7f"></span>constraint a01 {foreach(grid[i][j]) grid[i][j] inside {[<span style="color:#ff0;font-weight:bold">0</span>:<span style="color:#ff0;font-weight:bold">1</span>]};}

<span style="color:#007f7f">// Each row can have one queen
</span><span style="color:#007f7f"></span>constraint rows {foreach(grid[i][j]) grid[i].sum() == <span style="color:#ff0;font-weight:bold">1</span>;}

<span style="color:#007f7f">// Each col can have one queen
</span><span style="color:#007f7f"></span>consraint cols {
    foreach(grid[i][j]) {
        foreach(grid[r]) {
            (r != i) -&gt; (grid[i][j] +grid[r][j] &lt;=<span style="color:#ff0;font-weight:bold">1</span>);
        }
    }
}

<span style="color:#007f7f">// Diagnal can have one queen
</span><span style="color:#007f7f">// +ve diagonal where col+row is constant
</span><span style="color:#007f7f">// 0123
</span><span style="color:#007f7f">// 1234
</span><span style="color:#007f7f">// 2345
</span><span style="color:#007f7f">// 3456
</span><span style="color:#007f7f">//
</span><span style="color:#007f7f">// -ve diagonal where row-col is constant
</span><span style="color:#007f7f">// 0 -1 -2 -3
</span><span style="color:#007f7f">// 1  0 -1 -2
</span><span style="color:#007f7f">// 2  1  0 -1
</span><span style="color:#007f7f">// -3 2  1  0
</span><span style="color:#007f7f"></span>
consraint pdiag {
    foreach(grid[i][j]) {
        foreach(grid[x][y]) {
            ((i!=x &amp;&amp; j!=y) &amp;&amp; ((i + j) == (x + y))) -&gt; ((grid[i][j] + grid[x][y])&lt;=<span style="color:#ff0;font-weight:bold">1</span>);
        }
    }
}
consraint ndiag {
    foreach(grid[i][j]) {
        foreach(grid[x][y]) {
            ((i!=x &amp;&amp; j!=y) &amp;&amp; ((i - j) == (x - y))) -&gt; ((grid[i][j] + grid[x][y])&lt;=<span style="color:#ff0;font-weight:bold">1</span>);
        }
    }
}
</code></pre></div><p>The Output for 4x4 queen problem can be</p>
<pre tabindex="0"><code>0010
1000
0001
0100
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Ethernet MDIO Primer</title>
            <link>/posts/2022/06/ethernet-mdio-primer/</link>
            <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/06/ethernet-mdio-primer/</guid>
            <description>This post is about MDIO which is a part of MIIM (interface between MAC and PHY in ethernet 802 standard).
wiki provide some details (but the main reference is 802 spec)
 Management Data Input/Output (MDIO), also known as Serial Management Interface (SMI) or Media Independent Interface Management (MIIM), is a serial bus defined for the Ethernet family of IEEE 802.3 standards for the Media Independent Interface, or MII. The MII connects Media Access Control (MAC) devices with Ethernet physical layer (PHY) circuits.</description>
            <content type="html"><![CDATA[<p>This post is about MDIO which is a part of MIIM (interface between MAC and PHY in ethernet 802 standard).</p>
<p><a href="https://en.wikipedia.org/wiki/Management_Data_Input/Output">wiki</a> provide some details (but the main reference is 802 spec)</p>
<blockquote>
<p>Management Data Input/Output (MDIO), also known as Serial Management Interface (SMI) or Media Independent Interface Management (MIIM), is a serial bus defined for the Ethernet family of IEEE 802.3 standards for the Media Independent Interface, or MII. The MII connects Media Access Control (MAC) devices with Ethernet physical layer (PHY) circuits. The MAC device controlling the MDIO is called the Station Management Entity (SME).</p>
</blockquote>
<h1 id="frame-and-signals">Frame and signals</h1>
<p>MDIO is one of the 2-wire family(similar to I2C):</p>
<ul>
<li>MDC</li>
<li>MDIO</li>
</ul>
<p>MDIO frame has the following fields:</p>
<ul>
<li>Start (2&rsquo;b01)</li>
<li>Write/read (2&rsquo;b01 or 2&rsquo;b10)</li>
<li>PHY address (5&rsquo;bxxxxx)</li>
<li>Register address (5&rsquo;bxxxxx)</li>
<li>turnaround (2&rsquo;b10)</li>
<li>data (16&rsquo;hxxxx)</li>
</ul>
<h1 id="tx-example">TX Example</h1>
<p>The following waveform and snippet show a simple example of MDIO TX:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">module</span> mdio_tx(
    <span style="color:#fff;font-weight:bold">input</span> clk,
    <span style="color:#fff;font-weight:bold">input</span> rst,
    <span style="color:#fff;font-weight:bold">input</span> en,
    <span style="color:#fff;font-weight:bold">input</span>  write,
    <span style="color:#fff;font-weight:bold">input</span> [<span style="color:#ff0;font-weight:bold">4</span>:<span style="color:#ff0;font-weight:bold">0</span>] phy_addr,
    <span style="color:#fff;font-weight:bold">input</span> [<span style="color:#ff0;font-weight:bold">4</span>:<span style="color:#ff0;font-weight:bold">0</span>] reg_addr,
    <span style="color:#fff;font-weight:bold">input</span> [<span style="color:#ff0;font-weight:bold">15</span>:<span style="color:#ff0;font-weight:bold">0</span>] reg_data,
    <span style="color:#fff;font-weight:bold">output</span> <span style="color:#fff;font-weight:bold">reg</span> busy
);

<span style="color:#fff;font-weight:bold">wire</span> shift_bit;
<span style="color:#fff;font-weight:bold">wire</span> [<span style="color:#ff0;font-weight:bold">31</span>:<span style="color:#ff0;font-weight:bold">0</span>] shift_reg_wire = {<span style="color:#ff0;font-weight:bold">2</span><span style="color:#ff0;font-weight:bold">&#39;b01</span> , write, ~write, phy_addr, reg_addr,  <span style="color:#ff0;font-weight:bold">2</span><span style="color:#ff0;font-weight:bold">&#39;b10</span>, reg_data};
<span style="color:#fff;font-weight:bold">reg</span> [<span style="color:#ff0;font-weight:bold">31</span>:<span style="color:#ff0;font-weight:bold">0</span>] shift_reg;

<span style="color:#fff;font-weight:bold">always</span> @(<span style="color:#fff;font-weight:bold">posedge</span> clk) <span style="color:#fff;font-weight:bold">begin</span>
    <span style="color:#fff;font-weight:bold">if</span>(en) <span style="color:#fff;font-weight:bold">begin</span>
     shift_reg &lt;= {<span style="color:#ff0;font-weight:bold">2</span><span style="color:#ff0;font-weight:bold">&#39;b01</span> , write, ~write, phy_addr, reg_addr,  <span style="color:#ff0;font-weight:bold">2</span><span style="color:#ff0;font-weight:bold">&#39;b10</span>, reg_data};
    <span style="color:#fff;font-weight:bold">end</span>
    <span style="color:#fff;font-weight:bold">else</span>
        shift_reg[<span style="color:#ff0;font-weight:bold">31</span>:<span style="color:#ff0;font-weight:bold">0</span>] &lt;= {shift_reg[<span style="color:#ff0;font-weight:bold">30</span>:<span style="color:#ff0;font-weight:bold">0</span>], <span style="color:#ff0;font-weight:bold">1</span><span style="color:#ff0;font-weight:bold">&#39;b0</span>};
<span style="color:#fff;font-weight:bold">end</span>

<span style="color:#fff;font-weight:bold">assign</span> shift_bit = shift_reg[<span style="color:#ff0;font-weight:bold">31</span>];

<span style="color:#fff;font-weight:bold">endmodule</span>
</code></pre></div><p><img src="/mdio.png" alt="Example image"></p>
<p>The Standard defines registers that PHY implements to be 802 compliant(I am not going to copy them here). But that&rsquo;s for another post.</p>
]]></content>
        </item>
        
        <item>
            <title>Systemc Hello world</title>
            <link>/posts/2022/06/systemc-hello-world/</link>
            <pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/06/systemc-hello-world/</guid>
            <description>Compiling Systemc systemc library can be found on accellera. There are two ways to build it. CMake and good old autoconf. autoconf will do the job just fine.
cd systemc-2.3.3 ./configure --prefix=`pwd`/local make make install export SC_INSTALL=`pwd`/local And we are good to go.
Compiling application I got an example from systemc examples. Again there are several ways to build it But I am going for the minimal compilation command.
#include &amp;lt;systemc&amp;gt;#include &amp;lt;iostream&amp;gt; static const char *filename = &amp;#34;hello.</description>
            <content type="html"><![CDATA[<h1 id="compiling-systemc">Compiling Systemc</h1>
<p><code>systemc</code> library can be found on <a href="https://www.accellera.org/downloads/standards/systemc">accellera</a>. There are two ways to build it. CMake and good old autoconf. autoconf will do the job just fine.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#fff;font-weight:bold">cd</span> systemc-2.3.3
./configure --prefix=<span style="color:#0ff;font-weight:bold">`</span><span style="color:#fff;font-weight:bold">pwd</span><span style="color:#0ff;font-weight:bold">`</span>/local
make
make install
<span style="color:#fff;font-weight:bold">export</span> SC_INSTALL=<span style="color:#0ff;font-weight:bold">`</span><span style="color:#fff;font-weight:bold">pwd</span><span style="color:#0ff;font-weight:bold">`</span>/local
</code></pre></div><p>And we are good to go.</p>
<h1 id="compiling-application">Compiling application</h1>
<p>I got an example from systemc examples. Again there are several ways to build it But I am going for the minimal compilation command.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;systemc&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">char</span> *filename = <span style="color:#0ff;font-weight:bold">&#34;hello.cpp&#34;</span>;

SC_MODULE(hello) {
    SC_CTOR(hello){
        SC_THREAD(main_thread);
    }
    <span style="color:#fff;font-weight:bold">void</span> main_thread(<span style="color:#fff;font-weight:bold">void</span>) {
        std::cout &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34;Hello World!&#34;</span> &lt;&lt; std::endl;
    }
};

<span style="color:#fff;font-weight:bold">int</span> sc_main(<span style="color:#fff;font-weight:bold">int</span> sc_args, <span style="color:#fff;font-weight:bold">char</span> * sc_argv[]){
    hello hello_i(<span style="color:#0ff;font-weight:bold">&#34;hello&#34;</span>);
    sc_core::sc_start();
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}

</code></pre></div><p>Compilation command for hello world.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">g++ hello.cpp -I$SC_INSTALL/include -L$SC_INSTALL/lib-linux64 -lsystemc -o hello
<span style="color:#fff;font-weight:bold">export</span> LD_LIBRARY_PATH=$SC_INSTALL/lib-linux64
./hello
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Solving Sudoku using Systemverilog Constraints</title>
            <link>/posts/2022/06/solving-sudoku-using-systemverilog-constraints/</link>
            <pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/06/solving-sudoku-using-systemverilog-constraints/</guid>
            <description>In previous post, I used python SAT solver to solve sudoku. Naturally, SV constraints are perfect to solve suduko once we figure out the correct constraints.
For Wiki, Sudoku is:
 In classic Sudoku, the objective is to fill a 9 × 9 grid with digits so that each column, each row, and each of the nine 3 × 3 subgrids that compose the grid (also called &amp;ldquo;boxes&amp;rdquo;, &amp;ldquo;blocks&amp;rdquo;, or &amp;ldquo;regions&amp;rdquo;) contain all of the digits from 1 to 9.</description>
            <content type="html"><![CDATA[<p>In previous post, I used python SAT solver to solve sudoku. Naturally, SV constraints are perfect to solve suduko once we figure out the correct constraints.</p>
<p>For Wiki, Sudoku is:</p>
<blockquote>
<p>In classic Sudoku, the objective is to fill a 9 × 9 grid with digits so that each column, each row, and each of the nine 3 × 3 subgrids that compose the grid (also called &ldquo;boxes&rdquo;, &ldquo;blocks&rdquo;, or &ldquo;regions&rdquo;) contain all of the digits from 1 to 9.</p>
</blockquote>
<p>It&rsquo;s obvious we need 4 constraints(rows, cols and box) but the most important one is a constraint for each grid field.</p>
<h1 id="constraint-1">Constraint 1</h1>
<p>Using a quick loop and <code>inside</code> for each grid field.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">constraint a19 {foreach (grid[i][j]) grid[i][j] inside {[<span style="color:#ff0;font-weight:bold">1</span>:<span style="color:#ff0;font-weight:bold">9</span>]}; }
</code></pre></div><h1 id="constraint-2">Constraint 2</h1>
<p>For rows, It&rsquo;s easy to use <code>unique</code> on each row.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">constraint rows {foreach(grid[i]) unique {grid[i][<span style="color:#ff0;font-weight:bold">0</span>:<span style="color:#ff0;font-weight:bold">8</span>]};}
</code></pre></div><h1 id="constraint-3">Constraint 3</h1>
<p>The columns are tricky. The solution i thought about is using nested loop and make sure that constraints on work with fields in other rows. seems to work.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">constraint cols {
        foreach(grid[i,j]) {
            foreach(grid[r]) {
                (r != i) -&gt; grid[i][j] != grid[r][j];
            }
        }
}
</code></pre></div><h1 id="constraint-4">Constraint 4</h1>
<p>The last one is <code>unique box</code> which is the hardest. Here the constrain works only on points in the same box. Note that <code>index/3</code> returns the box for both x and y directions.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">constraint box {
        foreach(grid[i,j]) {
            foreach(grid[x,y]) {
                (i != x &amp;&amp; j != y &amp;&amp; (i/<span style="color:#ff0;font-weight:bold">3</span> == x/<span style="color:#ff0;font-weight:bold">3</span>) &amp;&amp; (j/<span style="color:#ff0;font-weight:bold">3</span> == y/<span style="color:#ff0;font-weight:bold">3</span>) ) -&gt; grid[i][j] != grid[x][y];
            }
        }
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>hash based message authentication HMAC</title>
            <link>/posts/2022/06/hash-based-message-authentication-hmac/</link>
            <pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/06/hash-based-message-authentication-hmac/</guid>
            <description>HMAC(wiki) is hash-based message authentication code which verifies data integrity and authenticity of a message. Basically, it ensure sender is really who they are and whatever they sent wasn&amp;rsquo;t changed.
The algorithm can be found on wiki which is easy enough to write(i am using sha256 from hashlib :)).
function hmac is input: key: Bytes // Array of bytes message: Bytes // Array of bytes to be hashed hash: Function // The hash function to use (e.</description>
            <content type="html"><![CDATA[<p>HMAC(<a href="https://en.wikipedia.org/wiki/HMAC">wiki</a>) is <code>hash-based message authentication code</code> which verifies data integrity and authenticity of a message. Basically, it ensure sender is really who they are and whatever they sent wasn&rsquo;t changed.</p>
<p>The algorithm can be found on wiki which is easy enough to write(i am using sha256 from hashlib :)).</p>
<pre tabindex="0"><code>function hmac is
    input:
        key:        Bytes    // Array of bytes
        message:    Bytes    // Array of bytes to be hashed
        hash:       Function // The hash function to use (e.g. SHA-1)
        blockSize:  Integer  // The block size of the hash function (e.g. 64 bytes for SHA-1)
        outputSize: Integer  // The output size of the hash function (e.g. 20 bytes for SHA-1)

    // Compute the block sized key
    block_sized_key = computeBlockSizedKey(key, hash, blockSize)

    o_key_pad ← block_sized_key xor [0x5c blockSize]   // Outer padded key
    i_key_pad ← block_sized_key xor [0x36 blockSize]   // Inner padded key

    return  hash(o_key_pad ∥ hash(i_key_pad ∥ message))

function computeBlockSizedKey is
    input:
        key:        Bytes    // Array of bytes
        hash:       Function // The hash function to use (e.g. SHA-1)
        blockSize:  Integer  // The block size of the hash function (e.g. 64 bytes for SHA-1)

    // Keys longer than blockSize are shortened by hashing them
    if (length(key) &gt; blockSize) then
        key = hash(key)

    // Keys shorter than blockSize are padded to blockSize by padding with zeros on the right
    if (length(key) &lt; blockSize) then
        return  Pad(key, blockSize) // Pad key with zeros to make it blockSize bytes long

    return  key

</code></pre><h1 id="python-implementation">Python implementation</h1>
<p>The main issue here is getting the bytes arithmetic right. I wrote small utility function <code>xor_bytes</code> for inner and outter hashes.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">import</span> hmac
<span style="color:#fff;font-weight:bold">import</span> base64
<span style="color:#fff;font-weight:bold">import</span> hashlib

<span style="color:#fff;font-weight:bold">def</span> Pad(key, blockSize):
    <span style="color:#fff;font-weight:bold">return</span> key + (<span style="color:#fff;font-weight:bold">bytes</span>(<span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">\x00</span><span style="color:#0ff;font-weight:bold">&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;UTF-8&#34;</span>) * (blockSize - <span style="color:#fff;font-weight:bold">len</span>(key)))

<span style="color:#fff;font-weight:bold">def</span> computeBlockSizedKey(key, hash_, blockSize):
    <span style="color:#007f7f"># Keys longer than blockSize are shortened by hashing them</span>
    <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">len</span>(key) &gt; blockSize):
        key = hash_(key)

    <span style="color:#007f7f"># Keys shorter than blockSize are padded to blockSize by padding with zeros on the right</span>
    <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">len</span>(key) &lt; blockSize):
        <span style="color:#fff;font-weight:bold">return</span>  Pad(key, blockSize) <span style="color:#007f7f"># Pad key with zeros to make it blockSize bytes long</span>

    <span style="color:#fff;font-weight:bold">return</span>  key

<span style="color:#fff;font-weight:bold">def</span> xor_bytes(v1 ,v2):
    x = [ ((a) ^ (b)) <span style="color:#fff;font-weight:bold">for</span> (a,b) in <span style="color:#fff;font-weight:bold">zip</span>(v1, v2) ]
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">bytes</span>(x)


<span style="color:#fff;font-weight:bold">def</span> my_hmac(key, message, hash_, blockSize, outputSize):
    block_sized_key = computeBlockSizedKey(key, hash_, blockSize)

    o_key_pad = xor_bytes(block_sized_key, <span style="color:#fff;font-weight:bold">bytes</span>(<span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">\x5c</span><span style="color:#0ff;font-weight:bold">&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;UTF-8&#34;</span>) * blockSize)
    i_key_pad = xor_bytes(block_sized_key, <span style="color:#fff;font-weight:bold">bytes</span>(<span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">\x36</span><span style="color:#0ff;font-weight:bold">&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;UTF-8&#34;</span>) * blockSize)

    h = hash_()
    h.update(i_key_pad + message)
    i = h.digest()

    h = hash_()
    h.update(o_key_pad +  i)
    o = h.digest()

    <span style="color:#fff;font-weight:bold">return</span> o

app_secret = <span style="color:#0ff;font-weight:bold">&#34;key&#34;</span>
access_token= <span style="color:#0ff;font-weight:bold">&#34;The quick brown fox jumps over the lazy dog&#34;</span>
digest = hmac.new(<span style="color:#fff;font-weight:bold">bytes</span>(app_secret, <span style="color:#0ff;font-weight:bold">&#39;UTF-8&#39;</span>), <span style="color:#fff;font-weight:bold">bytes</span>(access_token, <span style="color:#0ff;font-weight:bold">&#39;UTF-8&#39;</span>), hashlib.sha256)
signature = digest.hexdigest()
<span style="color:#fff;font-weight:bold">print</span>(signature)

my = my_hmac(<span style="color:#fff;font-weight:bold">bytes</span>(app_secret, <span style="color:#0ff;font-weight:bold">&#39;UTF-8&#39;</span>), <span style="color:#fff;font-weight:bold">bytes</span>(access_token, <span style="color:#0ff;font-weight:bold">&#39;UTF-8&#39;</span>), hashlib.sha256,  <span style="color:#ff0;font-weight:bold">64</span>, <span style="color:#ff0;font-weight:bold">32</span>)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#39;&#39;</span>.join(<span style="color:#0ff;font-weight:bold">&#39;</span><span style="color:#0ff;font-weight:bold">{:02x}</span><span style="color:#0ff;font-weight:bold">&#39;</span>.format(x) <span style="color:#fff;font-weight:bold">for</span> x in my))

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>RISCV riscv python model deepdive</title>
            <link>/posts/2022/05/riscv-riscv-python-model-deepdive/</link>
            <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/05/riscv-riscv-python-model-deepdive/</guid>
            <description>This post is about riscv python model. The doc describes it as:
 This is a python model of the RISC-V ISA. It is intended to be a resource for Python-based automated testing and verification. It is under development and not very useful yet, but can be used to generate random assembler codeThis is a python model of the RISC-V ISA. It is intended to be a resource for Python-based automated testing and verification.</description>
            <content type="html"><![CDATA[<p>This post is about <a href="https://github.com/wallento/riscv-python-model">riscv python model</a>. The doc describes it as:</p>
<blockquote>
<p>This is a python model of the RISC-V ISA. It is intended to be a resource for Python-based automated testing and verification. It is under development and not very useful yet, but can be used to generate random assembler codeThis is a python model of the RISC-V ISA. It is intended to be a resource for Python-based automated testing and verification. It is under development and not very useful yet, but can be used to generate random assembler code</p>
</blockquote>
<p>It provides many utils for generating, encoding and decoding riscv instructions. For example, It can generate random rv instructions.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ riscv-random-asm <span style="color:#ff0;font-weight:bold">100</span> -i add -i or -i slti
add x19, x5, x31
or x24, x19, x3
slti x4, x31, <span style="color:#ff0;font-weight:bold">1436</span>
add x19, x15, x30
or x28, x25, x14
or x26, x19, x19
slti x26, x26, -1747

</code></pre></div><p>Another utility is decoding back opcode to asm</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ riscv-machinsn-decode hexstring 0x007938b3
sltu x17, x18, x7
</code></pre></div><p>Cool! Right?</p>
<p>But the most interesting part is &ldquo;RISCV Model&rdquo; which can work as golden mode.</p>
<p>Starting with <code>Simulator</code> which defines the top level methods to load programs into program memory and initial memory contents and eventually <code>run</code> to reset model and start running instructions from program memory.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> Simulator:
  <span style="color:#fff;font-weight:bold">def</span> __init__(self, model):
    self.model = model
    self.program = []

  <span style="color:#fff;font-weight:bold">def</span> load_program(self, program, *, address=<span style="color:#ff0;font-weight:bold">0</span>):
    self.program = [i <span style="color:#fff;font-weight:bold">for</span> i in program]

  <span style="color:#fff;font-weight:bold">def</span> load_data(self, data = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, *, address=<span style="color:#ff0;font-weight:bold">0</span>):
    mem = self.model.state.memory.memory
    <span style="color:#fff;font-weight:bold">for</span> a in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#fff;font-weight:bold">int</span>(<span style="color:#fff;font-weight:bold">len</span>(data)/<span style="color:#ff0;font-weight:bold">4</span>)):
      mem[a] = struct.unpack(<span style="color:#0ff;font-weight:bold">&#34;&lt;L&#34;</span>, data[a*<span style="color:#ff0;font-weight:bold">4</span>:(a+<span style="color:#ff0;font-weight:bold">1</span>)*<span style="color:#ff0;font-weight:bold">4</span>])[<span style="color:#ff0;font-weight:bold">0</span>]

  <span style="color:#fff;font-weight:bold">def</span> run(self, *, pc=<span style="color:#ff0;font-weight:bold">0</span>):
    self.model.reset(pc=pc)
    cnt = <span style="color:#ff0;font-weight:bold">0</span>
    <span style="color:#fff;font-weight:bold">while</span> <span style="color:#fff;font-weight:bold">True</span>:
      <span style="color:#fff;font-weight:bold">try</span>:
        self.model.issue(self.program[<span style="color:#fff;font-weight:bold">int</span>(self.model.state.pc)&gt;&gt;<span style="color:#ff0;font-weight:bold">2</span>])

</code></pre></div><p>In <code>model.py</code>, <code>Model</code> creates important component <code>State</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> issue(self, insn):
        self.state.pc += <span style="color:#ff0;font-weight:bold">4</span>
        expected_pc = self.state.pc
        insn.execute(self)

        trace = self.state.changes()
        <span style="color:#fff;font-weight:bold">if</span> self.verbose is not <span style="color:#fff;font-weight:bold">False</span>:
            self.verbose_file.write(self.asm_tpl.format(<span style="color:#fff;font-weight:bold">str</span>(insn), <span style="color:#0ff;font-weight:bold">&#34;, &#34;</span>.join([<span style="color:#fff;font-weight:bold">str</span>(t) <span style="color:#fff;font-weight:bold">for</span> t in trace])))
        self.state.commit()
</code></pre></div><p>And <code>State</code> defines two methods <code>commit</code> and <code>change</code> which handle the update to register file and <code>memory</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> changes(self):
        c = self.intreg.changes()
        <span style="color:#fff;font-weight:bold">if</span> self.pc_update.value != self.pc.value + <span style="color:#ff0;font-weight:bold">4</span>:
            c.append(TracePC(self.pc_update.value))
        c += self.memory.changes()
        <span style="color:#fff;font-weight:bold">return</span> c

    <span style="color:#fff;font-weight:bold">def</span> commit(self):
        self.intreg.commit()
        self.pc.set(self.pc_update.value)
        self.memory.commit()
</code></pre></div><p>and <code>Memory</code> does the actual memory update</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> commit(self):
        <span style="color:#fff;font-weight:bold">for</span> update in self.memory_updates:
            address = update.addr
            base = address &gt;&gt; <span style="color:#ff0;font-weight:bold">2</span>
            offset = address &amp; <span style="color:#ff0;font-weight:bold">0x3</span>
            <span style="color:#fff;font-weight:bold">if</span> base not in self.memory:
                self.memory[base] = randrange(<span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">1</span> &lt;&lt; <span style="color:#ff0;font-weight:bold">32</span>)
            data = update.data
            <span style="color:#fff;font-weight:bold">if</span> update.gran == TraceMemory.GRANULARITY.BYTE:
                mask = ~(<span style="color:#ff0;font-weight:bold">0xFF</span> &lt;&lt; (offset*<span style="color:#ff0;font-weight:bold">8</span>)) &amp; <span style="color:#ff0;font-weight:bold">0xFFFFFFFF</span>
                data = (self.memory[base] &amp; mask) | (data &lt;&lt; (offset*<span style="color:#ff0;font-weight:bold">8</span>))
            self.memory[base] = data

        self.memory_updates = []
</code></pre></div><p>And for completeness, <code>RegisterFile</code> updates registers with <code>commit</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> commit(self):
        <span style="color:#fff;font-weight:bold">for</span> t in self.regs_updates:
            self.regs[t.id].set(t.value)
        self.regs_updates.clear()
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Network layers dissection using scapy</title>
            <link>/posts/2022/05/network-layers-dissection-using-scapy/</link>
            <pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/05/network-layers-dissection-using-scapy/</guid>
            <description>This post goes through network layers(ethernet, IP, TCP) of a packet using scapy. scapy is a package to create, send and sniff packets. Well, scapy docs say it all:
 Scapy is a Python program that enables the user to send, sniff and dissect and forge network packets. This capability allows construction of tools that can probe, scan or attack networks.
 Packet fields Starting with IP, RFC describes packets fields as follows</description>
            <content type="html"><![CDATA[<p>This post goes through network layers(ethernet, IP, TCP) of a packet using scapy. <code>scapy</code> is a package to create, send and sniff packets. Well, scapy docs say it all:</p>
<blockquote>
<p>Scapy is a Python program that enables the user to send, sniff and dissect and forge network packets. This capability allows construction of tools that can probe, scan or attack networks.</p>
</blockquote>
<h1 id="packet-fields">Packet fields</h1>
<p>Starting with IP, <a href="https://datatracker.ietf.org/doc/html/rfc791">RFC</a> describes packets fields  as follows</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">    <span style="color:#ff0;font-weight:bold">0</span>                   <span style="color:#ff0;font-weight:bold">1</span>                   <span style="color:#ff0;font-weight:bold">2</span>                   <span style="color:#ff0;font-weight:bold">3</span>
    <span style="color:#ff0;font-weight:bold">0</span> <span style="color:#ff0;font-weight:bold">1</span> <span style="color:#ff0;font-weight:bold">2</span> <span style="color:#ff0;font-weight:bold">3</span> <span style="color:#ff0;font-weight:bold">4</span> <span style="color:#ff0;font-weight:bold">5</span> <span style="color:#ff0;font-weight:bold">6</span> <span style="color:#ff0;font-weight:bold">7</span> <span style="color:#ff0;font-weight:bold">8</span> <span style="color:#ff0;font-weight:bold">9</span> <span style="color:#ff0;font-weight:bold">0</span> <span style="color:#ff0;font-weight:bold">1</span> <span style="color:#ff0;font-weight:bold">2</span> <span style="color:#ff0;font-weight:bold">3</span> <span style="color:#ff0;font-weight:bold">4</span> <span style="color:#ff0;font-weight:bold">5</span> <span style="color:#ff0;font-weight:bold">6</span> <span style="color:#ff0;font-weight:bold">7</span> <span style="color:#ff0;font-weight:bold">8</span> <span style="color:#ff0;font-weight:bold">9</span> <span style="color:#ff0;font-weight:bold">0</span> <span style="color:#ff0;font-weight:bold">1</span> <span style="color:#ff0;font-weight:bold">2</span> <span style="color:#ff0;font-weight:bold">3</span> <span style="color:#ff0;font-weight:bold">4</span> <span style="color:#ff0;font-weight:bold">5</span> <span style="color:#ff0;font-weight:bold">6</span> <span style="color:#ff0;font-weight:bold">7</span> <span style="color:#ff0;font-weight:bold">8</span> <span style="color:#ff0;font-weight:bold">9</span> <span style="color:#ff0;font-weight:bold">0</span> <span style="color:#ff0;font-weight:bold">1</span>
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |Version|  IHL  |Type of Service|          Total Length         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Identification        |Flags|      Fragment Offset    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Time to Live |    Protocol   |         Header Checksum       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       Source Address                          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Destination Address                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Options                    |    Padding    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                    Example Internet Datagram Header
</code></pre></div><p><a href="https://datatracker.ietf.org/doc/html/rfc793">TCP RFC</a> describes the  TCP fields including dest and source ports.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">    <span style="color:#ff0;font-weight:bold">0</span>                   <span style="color:#ff0;font-weight:bold">1</span>                   <span style="color:#ff0;font-weight:bold">2</span>                   <span style="color:#ff0;font-weight:bold">3</span>
    <span style="color:#ff0;font-weight:bold">0</span> <span style="color:#ff0;font-weight:bold">1</span> <span style="color:#ff0;font-weight:bold">2</span> <span style="color:#ff0;font-weight:bold">3</span> <span style="color:#ff0;font-weight:bold">4</span> <span style="color:#ff0;font-weight:bold">5</span> <span style="color:#ff0;font-weight:bold">6</span> <span style="color:#ff0;font-weight:bold">7</span> <span style="color:#ff0;font-weight:bold">8</span> <span style="color:#ff0;font-weight:bold">9</span> <span style="color:#ff0;font-weight:bold">0</span> <span style="color:#ff0;font-weight:bold">1</span> <span style="color:#ff0;font-weight:bold">2</span> <span style="color:#ff0;font-weight:bold">3</span> <span style="color:#ff0;font-weight:bold">4</span> <span style="color:#ff0;font-weight:bold">5</span> <span style="color:#ff0;font-weight:bold">6</span> <span style="color:#ff0;font-weight:bold">7</span> <span style="color:#ff0;font-weight:bold">8</span> <span style="color:#ff0;font-weight:bold">9</span> <span style="color:#ff0;font-weight:bold">0</span> <span style="color:#ff0;font-weight:bold">1</span> <span style="color:#ff0;font-weight:bold">2</span> <span style="color:#ff0;font-weight:bold">3</span> <span style="color:#ff0;font-weight:bold">4</span> <span style="color:#ff0;font-weight:bold">5</span> <span style="color:#ff0;font-weight:bold">6</span> <span style="color:#ff0;font-weight:bold">7</span> <span style="color:#ff0;font-weight:bold">8</span> <span style="color:#ff0;font-weight:bold">9</span> <span style="color:#ff0;font-weight:bold">0</span> <span style="color:#ff0;font-weight:bold">1</span>
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          Source Port          |       Destination Port        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        Sequence Number                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Acknowledgment Number                      |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Data |           |U|A|P|R|S|F|                               |
   | Offset| Reserved  |R|C|S|S|Y|I|            Window             |
   |       |           |G|K|H|T|N|N|                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Checksum            |         Urgent Pointer        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Options                    |    Padding    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             data                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                            TCP Header Format
</code></pre></div><h1 id="scapy-dissection">Scapy dissection</h1>
<p>This is an example of scapy docs where packet ETHER/IP/TCP and eventually HTTP GET request.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">from</span>  scapy.all  <span style="color:#fff;font-weight:bold">import</span> *

a=Ether(src=<span style="color:#0ff;font-weight:bold">&#34;ff:ff:ff:ff:ff:ff&#34;</span>)/IP(dst=<span style="color:#0ff;font-weight:bold">&#34;www.slashdot.org&#34;</span>)/TCP()/<span style="color:#0ff;font-weight:bold">&#34;GET /index.html HTTP/1.0 </span><span style="color:#0ff;font-weight:bold">\n\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>
a.pdfdump(layer_shift=<span style="color:#ff0;font-weight:bold">1</span>)
a.psdump(<span style="color:#0ff;font-weight:bold">&#34;/tmp/isakmp_pkt.eps&#34;</span>,layer_shift=<span style="color:#ff0;font-weight:bold">1</span>)
</code></pre></div><p><code>a.show()</code> will print the fields of the packets.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">In [5]: a.show()
<span style="color:#007f7f">###[ Ethernet ]###</span>
  dst       = ff:ff:ff:ff:ff:ff
  src       = ff:ff:ff:ff:ff:ff
  <span style="color:#fff;font-weight:bold">type</span>      = IPv4
<span style="color:#007f7f">###[ IP ]###</span>
     version   = <span style="color:#ff0;font-weight:bold">4</span>
     ihl       = None
     tos       = 0x0
     len       = None
     id        = <span style="color:#ff0;font-weight:bold">1</span>
     flags     =
     frag      = <span style="color:#ff0;font-weight:bold">0</span>
     ttl       = <span style="color:#ff0;font-weight:bold">64</span>
     proto     = tcp
     chksum    = None
     src       = 192.168.1.23
     dst       = Net(<span style="color:#0ff;font-weight:bold">&#34;www.slashdot.org/32&#34;</span>)
     <span style="color:#0ff;font-weight:bold">\o</span>ptions   <span style="color:#0ff;font-weight:bold">\
</span><span style="color:#0ff;font-weight:bold"></span><span style="color:#007f7f">###[ TCP ]###</span>
        sport     = ftp_data
        dport     = http
        seq       = <span style="color:#ff0;font-weight:bold">0</span>
        ack       = <span style="color:#ff0;font-weight:bold">0</span>
        dataofs   = None
        reserved  = <span style="color:#ff0;font-weight:bold">0</span>
        flags     = S
        window    = <span style="color:#ff0;font-weight:bold">8192</span>
        chksum    = None
        urgptr    = <span style="color:#ff0;font-weight:bold">0</span>
        options   = <span style="color:#0ff;font-weight:bold">&#39;&#39;</span>
<span style="color:#007f7f">###[ Raw ]###</span>
           load      = <span style="color:#0ff;font-weight:bold">&#39;GET /index.html HTTP/1.0 \n\n&#39;</span>
</code></pre></div><p>and scapy even generate nice diagram for headers
<img src="/scapy.png" alt="Example image"></p>
]]></content>
        </item>
        
        <item>
            <title>Levenshtein Distance</title>
            <link>/posts/2022/05/levenshtein-distance/</link>
            <pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/05/levenshtein-distance/</guid>
            <description>Levenshtein distance defines the distance between strings. It is used for spell checking and suggestions (among other applications). It is interesting as it reminded me of Hamming distance (I am looking at you, undergrad information theory course!) which led me the rabbit hole of string distance functions.
Well, wiki says it all
 In information theory, linguistics, and computer science, the Levenshtein distance is a string metric for measuring the difference between two sequences.</description>
            <content type="html"><![CDATA[<p>Levenshtein distance defines the distance between strings. It is used for spell checking and suggestions (among other applications). It is interesting as it reminded me of Hamming distance (I am looking at you, undergrad information theory course!) which led me the rabbit hole of string distance functions.</p>
<p>Well, <a href="https://en.wikipedia.org/wiki/Levenshtein_distance">wiki</a> says it all</p>
<blockquote>
<p>In information theory, linguistics, and computer science, the Levenshtein distance is a string metric for measuring the difference between two sequences. Informally, the Levenshtein distance between two words is the minimum number of single-character edits (insertions, deletions or substitutions) required to change one word into the other.</p>
</blockquote>
<p>Just looking at the piecewise function and pseudo-code in the wiki. It looked simple enough. and it was! I added some comments</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">import</span> sys

s1 = sys.argv[<span style="color:#ff0;font-weight:bold">1</span>]
s2 = sys.argv[<span style="color:#ff0;font-weight:bold">2</span>]

<span style="color:#fff;font-weight:bold">def</span> lev(t, s):
    <span style="color:#007f7f"># If one of the string is empty the distance is the lenght of the other string. DUH!</span>
    <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">len</span>(t)==<span style="color:#ff0;font-weight:bold">0</span>:
        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">len</span>(s)

    <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">len</span>(s)==<span style="color:#ff0;font-weight:bold">0</span>:
        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">len</span>(t)

    <span style="color:#007f7f"># checking the first char in each string, if they are the same, call lev again</span>
    <span style="color:#fff;font-weight:bold">if</span> s[<span style="color:#ff0;font-weight:bold">0</span>] == t[<span style="color:#ff0;font-weight:bold">0</span>]:
        <span style="color:#fff;font-weight:bold">return</span> lev(t[<span style="color:#ff0;font-weight:bold">1</span>:] , s[<span style="color:#ff0;font-weight:bold">1</span>:])

    <span style="color:#007f7f"># well, this is tricky, at this point, we know at least one char is difference (hence the 1 below). Then trying the least distance with and without that char in each string</span>
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">1</span> + <span style="color:#fff;font-weight:bold">min</span> ([
                        lev(t[<span style="color:#ff0;font-weight:bold">1</span>:], s),
                        lev(t, s[<span style="color:#ff0;font-weight:bold">1</span>:]),
                        lev(t[<span style="color:#ff0;font-weight:bold">1</span>:], s[<span style="color:#ff0;font-weight:bold">1</span>:]),
                    ])

x = lev(s1, s2)

<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;res=&#34;</span>, x)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Simple recursive solution to Maze path finding</title>
            <link>/posts/2022/05/simple-recursive-solution-to-maze-path-finding/</link>
            <pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/05/simple-recursive-solution-to-maze-path-finding/</guid>
            <description>Maze path finding is an interesting problem to find if there path(and the path) between start and dest points on grid. More details on wiki. There many solutions some of them are more complicate than others. I am looking at backtracking or A* search. Normally simple solution is model the grid (open cells) as graph nodes and try to find shorted path between two nodes.
In this instance of this problem, there is an extra requirement.</description>
            <content type="html"><![CDATA[<p>Maze path finding  is an interesting problem to find if there path(and the path) between start and dest points on grid. More details on <a href="https://en.wikipedia.org/wiki/Maze-solving_algorithm">wiki</a>. There many solutions some of them are more complicate than others. I am looking at backtracking or A* search. Normally simple solution is model the grid (open cells) as graph nodes and try to find shorted path between two nodes.</p>
<p>In this instance of this problem, there is an extra requirement. At each cell, you can only move into one of neighbours cells (left, right, up and down). so, recursion looks like a good solution here.</p>
<p>Starting from Point(or cell) class with some utility methods.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> Point:
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, x=<span style="color:#ff0;font-weight:bold">0</span>, y=<span style="color:#ff0;font-weight:bold">0</span>):
        self.x = x
        self.y = y

    <span style="color:#fff;font-weight:bold">def</span> randomize(self,N):
        self.x = random.randrange(<span style="color:#ff0;font-weight:bold">0</span>, N)
        self.y = random.randrange(<span style="color:#ff0;font-weight:bold">0</span>, N)

    <span style="color:#fff;font-weight:bold">def</span> __iter__(self):
        <span style="color:#fff;font-weight:bold">yield</span> self.x
        <span style="color:#fff;font-weight:bold">yield</span> self.y

    <span style="color:#fff;font-weight:bold">def</span> __str__(self):
            <span style="color:#fff;font-weight:bold">return</span> <span style="color:#0ff;font-weight:bold">&#34;(</span><span style="color:#0ff;font-weight:bold">{0}</span><span style="color:#0ff;font-weight:bold">,</span><span style="color:#0ff;font-weight:bold">{1}</span><span style="color:#0ff;font-weight:bold">)&#34;</span>.format(self.x,self.y)

    <span style="color:#fff;font-weight:bold">def</span> __eq__(self, other):
        <span style="color:#fff;font-weight:bold">if</span> (self.x == other.x and self.y == other.y):
            <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">True</span>
        <span style="color:#fff;font-weight:bold">else</span>:
            <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">False</span>
</code></pre></div><p>Another utility methos is <code>get_adj</code> which calculates the agj neighbours of given cell</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        <span style="color:#fff;font-weight:bold">def</span> get_adj(point):
            adj = []
            <span style="color:#fff;font-weight:bold">for</span> idx in [-<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">1</span>]:
                <span style="color:#fff;font-weight:bold">if</span> (point.x + idx &lt; self.N and point.x + idx &gt;=<span style="color:#ff0;font-weight:bold">0</span> ):
                    p = Point(point.x + idx, point.y)
                    adj.append(p)

                <span style="color:#fff;font-weight:bold">if</span> (point.y + idx &lt; self.N and point.y +idx &gt;=<span style="color:#ff0;font-weight:bold">0</span> ):
                    p = Point(point.x , point.y + idx)
                    adj.append(p)
            <span style="color:#fff;font-weight:bold">return</span> adj
</code></pre></div><p>Finally, The recursive function <code>move</code> iterates over open neighbours cells. The recursion breaks if dest is found or neighbours are iterated. Well, Something i had to do is limit recursion to neighbours except the one i already come from otherwise, it can get stuck between two points.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> run(self):


        <span style="color:#fff;font-weight:bold">def</span> move(point, prev, dest):

            <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;move called with </span><span style="color:#0ff;font-weight:bold">{</span>point<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
            <span style="color:#fff;font-weight:bold">if</span> point == dest:
                <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">True</span>

            adj = get_adj(point)

            <span style="color:#fff;font-weight:bold">for</span> p in adj:
                <span style="color:#fff;font-weight:bold">if</span> self.grid[<span style="color:#fff;font-weight:bold">tuple</span>(p)] and (not (p==prev)):
                    res =  move(p, point, dest)
                    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;Results:</span><span style="color:#0ff;font-weight:bold">{</span>res<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> point:</span><span style="color:#0ff;font-weight:bold">{</span>point<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> adj:</span><span style="color:#0ff;font-weight:bold">{</span>p<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> prev:</span><span style="color:#0ff;font-weight:bold">{</span>prev<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
                    <span style="color:#fff;font-weight:bold">if</span> res:
                        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">True</span>

            <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">False</span>
</code></pre></div><p>Finally, this is not really path between start and dest. <code>move</code> can return True if there is a path between and start and dest.
that said, the recursion can print the path while unrolling the recursive call. Maybe in another evening!</p>
]]></content>
        </item>
        
        <item>
            <title>Waveforms and WaveJSON - wavedrom and wavedrompy</title>
            <link>/posts/2022/05/waveforms-and-wavejson-wavedrom-and-wavedrompy/</link>
            <pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/05/waveforms-and-wavejson-wavedrom-and-wavedrompy/</guid>
            <description>Wavedrom is a tool to render SVG of waveforms using WaveJSON. WaveJSON is JSON based format docs to documents signal values with labels and annotations. wavedrom is written in javascript but there is wavedrompy which is the python implementation.
Example { &amp;#34;signal&amp;#34;: [ {&amp;#34;name&amp;#34;: &amp;#34;clk&amp;#34;, &amp;#34;wave&amp;#34;: &amp;#34;P............&amp;#34;, &amp;#34;node&amp;#34;:&amp;#34;.............&amp;#34;}, {&amp;#34;name&amp;#34;: &amp;#34;req&amp;#34;, &amp;#34;wave&amp;#34;: &amp;#34;01..0........&amp;#34;, &amp;#34;node&amp;#34;:&amp;#34;.a..b.C...D..&amp;#34;}, {&amp;#34;name&amp;#34;: &amp;#34;ack&amp;#34;, &amp;#34;wave&amp;#34;: &amp;#34;0.....1...0..&amp;#34;, &amp;#34;node&amp;#34;:&amp;#34;.A..B.c...d..&amp;#34;} ], &amp;#34;edge&amp;#34; : [ &amp;#34;b-~&amp;gt;c 1:N&amp;#34;, &amp;#34;a-~&amp;gt;b 5&amp;#34;, &amp;#34;c-~&amp;gt;d 8&amp;#34;, &amp;#34;a-|&amp;gt;A&amp;#34;, &amp;#34;b-|&amp;gt;B&amp;#34;, &amp;#34;c-|&amp;gt;C&amp;#34;, &amp;#34;d-|&amp;gt;D&amp;#34; ], &amp;#34;config&amp;#34;: {&amp;#34;hscale&amp;#34;:2,&amp;#34;scale&amp;#34;:2} } And output should be something like</description>
            <content type="html"><![CDATA[<p>Wavedrom is a tool to render SVG of waveforms using <code>WaveJSON</code>. <code>WaveJSON</code> is JSON based format <a href="https://github.com/wavedrom/schema/blob/master/WaveJSON.md">docs</a> to documents signal values with labels and annotations. wavedrom is written in javascript but there is <a href="https://github.com/wallento/wavedrompy">wavedrompy</a> which is the python implementation.</p>
<h1 id="example">Example</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
<span style="font-weight:bold">&#34;signal&#34;</span>: [
  {<span style="font-weight:bold">&#34;name&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;clk&#34;</span>, <span style="font-weight:bold">&#34;wave&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;P............&#34;</span>, <span style="font-weight:bold">&#34;node&#34;</span>:<span style="color:#0ff;font-weight:bold">&#34;.............&#34;</span>},
  {<span style="font-weight:bold">&#34;name&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;req&#34;</span>, <span style="font-weight:bold">&#34;wave&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;01..0........&#34;</span>, <span style="font-weight:bold">&#34;node&#34;</span>:<span style="color:#0ff;font-weight:bold">&#34;.a..b.C...D..&#34;</span>},
  {<span style="font-weight:bold">&#34;name&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;ack&#34;</span>, <span style="font-weight:bold">&#34;wave&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;0.....1...0..&#34;</span>, <span style="font-weight:bold">&#34;node&#34;</span>:<span style="color:#0ff;font-weight:bold">&#34;.A..B.c...d..&#34;</span>}
],

  <span style="font-weight:bold">&#34;edge&#34;</span>   : [
              <span style="color:#0ff;font-weight:bold">&#34;b-~&gt;c 1:N&#34;</span>,
  		  		<span style="color:#0ff;font-weight:bold">&#34;a-~&gt;b 5&#34;</span>,
                <span style="color:#0ff;font-weight:bold">&#34;c-~&gt;d 8&#34;</span>,
    			<span style="color:#0ff;font-weight:bold">&#34;a-|&gt;A&#34;</span>,
    			<span style="color:#0ff;font-weight:bold">&#34;b-|&gt;B&#34;</span>,
    			<span style="color:#0ff;font-weight:bold">&#34;c-|&gt;C&#34;</span>,
    			<span style="color:#0ff;font-weight:bold">&#34;d-|&gt;D&#34;</span>

   ],
 <span style="font-weight:bold">&#34;config&#34;</span>: {<span style="font-weight:bold">&#34;hscale&#34;</span>:<span style="color:#ff0;font-weight:bold">2</span>,<span style="font-weight:bold">&#34;scale&#34;</span>:<span style="color:#ff0;font-weight:bold">2</span>}
}

</code></pre></div><p>And output should be something like</p>
<p><img src="/wavedrom.png" alt="Example image"></p>
]]></content>
        </item>
        
        <item>
            <title>Linux tun device - Hello World</title>
            <link>/posts/2022/05/linux-tun-device-hello-world/</link>
            <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/05/linux-tun-device-hello-world/</guid>
            <description>tun device is virtual network interface that can send raw IP packets to user space instead of link/phy layer. tun/tap devices are used with IPSec application like OpenVPN. more details in the wiki. This is a write up based on the answer in SO
in this example, we will use 3 to create tun, run application and capture pacp.
Shell 1 - How to create tun device create the tun0 interface and update the route table for that device.</description>
            <content type="html"><![CDATA[<p>tun device is virtual network interface that can send raw IP packets to user space  instead of link/phy layer. tun/tap devices are used with IPSec application like OpenVPN. more details in the <a href="https://en.wikipedia.org/wiki/TUN/TAP">wiki</a>. This is a write up based on the answer in <a href="https://stackoverflow.com/questions/1003684/how-to-interface-with-the-linux-tun-driver">SO</a></p>
<p>in this example, we will use 3 to create tun, run application and capture pacp.</p>
<h1 id="shell-1---how-to-create-tun-device">Shell 1 - How to create tun device</h1>
<p>create the <code>tun0</code> interface and update the route table for that device.. and <code>up</code> to bring up the interface</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo ip tuntap add mode tun dev tun0
sudo ip addr add 10.0.3.0/24 dev tun0 
sudo ip link <span style="color:#fff;font-weight:bold">set</span> dev tun0 up
</code></pre></div><p>Then in the same shell, run ping to that IP</p>
<pre tabindex="0"><code>ping 10.0.3.50
</code></pre><h1 id="shell-2--how-can-user-space-read-the-virtual-tun-network-interface">Shell 2 -How can user-space read the virtual tun network interface</h1>
<p>From <a href="https://www.kernel.org/doc/html/v5.8/networking/tuntap.html">linux kernel docs</a>, The application has to <code>ioctl</code> to register <code>fd</code> to that <code>tun0</code> interface.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;fcntl.h&gt;  /* O_RDWR */</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;string.h&gt; /* memset(), memcpy() */</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;stdio.h&gt; /* perror(), printf(), fprintf() */</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;stdlib.h&gt; /* exit(), malloc(), free() */</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;sys/ioctl.h&gt; /* ioctl() */</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;unistd.h&gt; /* read(), close() */</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#007f7f">/* includes for struct ifreq, etc */</span>
<span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;sys/types.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;sys/socket.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;linux/if.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;linux/if_tun.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">int</span> tun_open(<span style="color:#fff;font-weight:bold">char</span> *devname)
{
  <span style="color:#fff;font-weight:bold">struct</span> ifreq ifr;
  <span style="color:#fff;font-weight:bold">int</span> fd, err;

  <span style="color:#fff;font-weight:bold">if</span> ( (fd = open(<span style="color:#0ff;font-weight:bold">&#34;/dev/net/tun&#34;</span>, O_RDWR)) == -<span style="color:#ff0;font-weight:bold">1</span> ) {
       perror(<span style="color:#0ff;font-weight:bold">&#34;open /dev/net/tun&#34;</span>);exit(<span style="color:#ff0;font-weight:bold">1</span>);
  }
  memset(&amp;ifr, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#fff;font-weight:bold">sizeof</span>(ifr));
  ifr.ifr_flags = IFF_TUN;
  strncpy(ifr.ifr_name, devname, IFNAMSIZ); <span style="color:#007f7f">// devname = &#34;tun0&#34; or &#34;tun1&#34;, etc
</span><span style="color:#007f7f"></span>
  <span style="color:#007f7f">/* ioctl will use ifr.if_name as the name of TUN
</span><span style="color:#007f7f">   * interface to open: &#34;tun0&#34;, etc. */</span>
  <span style="color:#fff;font-weight:bold">if</span> ( (err = ioctl(fd, TUNSETIFF, (<span style="color:#fff;font-weight:bold">void</span> *) &amp;ifr)) == -<span style="color:#ff0;font-weight:bold">1</span> ) {
    perror(<span style="color:#0ff;font-weight:bold">&#34;ioctl TUNSETIFF&#34;</span>);close(fd);exit(<span style="color:#ff0;font-weight:bold">1</span>);
  }

  <span style="color:#007f7f">/* After the ioctl call the fd is &#34;connected&#34; to tun device specified
</span><span style="color:#007f7f">   * by devname (&#34;tun0&#34;, &#34;tun1&#34;, etc)*/</span>

  <span style="color:#fff;font-weight:bold">return</span> fd;
}


<span style="color:#fff;font-weight:bold">int</span> main(<span style="color:#fff;font-weight:bold">int</span> argc, <span style="color:#fff;font-weight:bold">char</span> *argv[])
{
  <span style="color:#fff;font-weight:bold">int</span> fd, nbytes;
  <span style="color:#fff;font-weight:bold">char</span> buf[<span style="color:#ff0;font-weight:bold">1600</span>];

  fd = tun_open(<span style="color:#0ff;font-weight:bold">&#34;tun0&#34;</span>); <span style="color:#007f7f">/* devname = ifr.if_name = &#34;tun0&#34; */</span>
  printf(<span style="color:#0ff;font-weight:bold">&#34;Device tun0 opened</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>);
  <span style="color:#fff;font-weight:bold">while</span>(<span style="color:#ff0;font-weight:bold">1</span>) {
    nbytes = read(fd, buf, <span style="color:#fff;font-weight:bold">sizeof</span>(buf));
    printf(<span style="color:#0ff;font-weight:bold">&#34;Read %d bytes from tun0</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>, nbytes);
  }
  <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}
</code></pre></div><h1 id="shell-3---capture-pcap">Shell 3 - Capture pcap</h1>
<p>we can see the network traffic using tcpdump</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo tcpdump -i tun0 -w samepl.pcap
</code></pre></div><p>and using <code>thark</code>, we can that raw frame has IP and ICMP(the protocol for ping)..</p>
<pre tabindex="0"><code>Frame 1: 84 bytes on wire (672 bits), 84 bytes captured (672 bits)
    Encapsulation type: Raw IP (7)
    ....
    [Protocols in frame: raw:ip:icmp:data]
Raw packet data
Internet Protocol Version 4, Src: 10.0.3.0, Dst: 10.0.3.50
    ....
    Source: 10.0.3.0
    Destination: 10.0.3.50
Internet Control Message Protocol
    Type: 8 (Echo (ping) request)
    Code: 0
    ....

</code></pre>]]></content>
        </item>
        
        <item>
            <title>Book review - Open Verification Methodology Cookbook</title>
            <link>/posts/2022/05/book-review-open-verification-methodology-cookbook/</link>
            <pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/05/book-review-open-verification-methodology-cookbook/</guid>
            <description>The Open verification Methodology Cookbook is one my favorite books. I actually bought a hardcover and it&amp;rsquo;s small book so I always bring it with me while i am travelling :).
The book starts from very basic introduction to verification, then language features and eventually explaining few of the important features of OVM library. I really like the way it starts with basic non-ovm testbench and build up to OVM based TB.</description>
            <content type="html"><![CDATA[<p>The Open verification Methodology Cookbook is one my favorite books. I actually bought a hardcover and it&rsquo;s small book so I always bring it with me while i am travelling :).</p>
<p>The book starts from very basic introduction to verification, then language features and eventually explaining few of the important features of OVM library. I really like the way it starts with basic non-ovm testbench and build up to OVM based TB. I know what you are thinking, who uses OVM anymore? well, I guess some companies still have legacy codebases.Maybe?!  But the most importantly UVM is not that difference from OVM. Many core concepts are still valid. The components, TLM, phasing, reporting and configuration(well, resource_db not config_db).</p>
<p>The best thing about this book is that it so easy to read. I actually read it cover to cover on a 4-hour flight. Honestly,I think i learn something every time i read.</p>
<p>Finally, it&rsquo;s not surprise i gave solid 6 stars out of 5.</p>
]]></content>
        </item>
        
        <item>
            <title>My assumptions (pun intended) about SymbiYosys - part1 </title>
            <link>/posts/2022/05/my-assumptions-pun-intended-about-symbiyosys-part1/</link>
            <pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/05/my-assumptions-pun-intended-about-symbiyosys-part1/</guid>
            <description>I wanted to try yosys for long time. I played around with SAT solvers before but didn&amp;rsquo;t try full-blown formal proof before. I thought formal is complex to do. Finally, I proved myself wrong (again, pun intended).
SymbiYosys is open source formal engine based on Yosys. It&amp;rsquo;s easy and most importantly it&amp;rsquo;s free.
Installation This is summary for steps in official doc.
One caveat, installation requires root to copy scripts. I don&amp;rsquo;t like running script with sudo on my machine, so i used docker and i am good to go.</description>
            <content type="html"><![CDATA[<p>I wanted to try yosys for long time. I played around with SAT solvers before but didn&rsquo;t try full-blown formal proof before. I thought formal is complex to do. Finally, I proved myself wrong (again, pun intended).</p>
<p><code>SymbiYosys</code> is open source formal engine based on Yosys. It&rsquo;s easy and most importantly it&rsquo;s free.</p>
<h1 id="installation">Installation</h1>
<p>This is summary for steps in <a href="https://symbiyosys.readthedocs.io/en/latest/install.html">official doc</a>.</p>
<p>One caveat, installation requires root to copy scripts. I don&rsquo;t like running script with sudo on my machine, so i used docker and i am good to go.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo apt-get install build-essential clang bison flex libreadline-dev <span style="color:#0ff;font-weight:bold">\
</span><span style="color:#0ff;font-weight:bold"></span>                     gawk tcl-dev libffi-dev git mercurial graphviz   <span style="color:#0ff;font-weight:bold">\
</span><span style="color:#0ff;font-weight:bold"></span>                     xdot pkg-config python python3 libftdi-dev gperf <span style="color:#0ff;font-weight:bold">\
</span><span style="color:#0ff;font-weight:bold"></span>                     libboost-program-options-dev autoconf libgmp-dev <span style="color:#0ff;font-weight:bold">\
</span><span style="color:#0ff;font-weight:bold"></span>                     cmake

git clone https://github.com/YosysHQ/yosys.git yosys
<span style="color:#fff;font-weight:bold">cd</span> yosys
make -j<span style="color:#fff;font-weight:bold">$(</span>nproc<span style="color:#fff;font-weight:bold">)</span>
sudo make install

<span style="color:#fff;font-weight:bold">cd</span> ..

git clone https://github.com/YosysHQ/SymbiYosys.git SymbiYosys
<span style="color:#fff;font-weight:bold">cd</span> SymbiYosys
sudo make install

<span style="color:#fff;font-weight:bold">cd</span> ..


git clone https://github.com/SRI-CSL/yices2.git yices2
<span style="color:#fff;font-weight:bold">cd</span> yices2
autoconf
./configure
make -j<span style="color:#fff;font-weight:bold">$(</span>nproc<span style="color:#fff;font-weight:bold">)</span>
sudo make install
</code></pre></div><h1 id="hello-world">Hello World</h1>
<p>This is small example from <a href="https://symbiyosys.readthedocs.io/en/latest/quickstart.html">docs</a> <code>demo.sv</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"> <span style="color:#fff;font-weight:bold">module</span> demo (
  <span style="color:#fff;font-weight:bold">input</span> clk,
  <span style="color:#fff;font-weight:bold">output</span> <span style="color:#fff;font-weight:bold">reg</span> [<span style="color:#ff0;font-weight:bold">5</span>:<span style="color:#ff0;font-weight:bold">0</span>] counter
);
  <span style="color:#fff;font-weight:bold">initial</span> counter = <span style="color:#ff0;font-weight:bold">0</span>;

  <span style="color:#fff;font-weight:bold">always</span> @(<span style="color:#fff;font-weight:bold">posedge</span> clk) <span style="color:#fff;font-weight:bold">begin</span>
    <span style="color:#fff;font-weight:bold">if</span> (counter == <span style="color:#ff0;font-weight:bold">15</span>)
      counter &lt;= <span style="color:#ff0;font-weight:bold">0</span>;
    <span style="color:#fff;font-weight:bold">else</span>
      counter &lt;= counter + <span style="color:#ff0;font-weight:bold">1</span>;
  <span style="color:#fff;font-weight:bold">end</span>

`ifdef FORMAL
  <span style="color:#fff;font-weight:bold">always</span> @(<span style="color:#fff;font-weight:bold">posedge</span> clk) <span style="color:#fff;font-weight:bold">begin</span>
    assert (counter &lt; <span style="color:#ff0;font-weight:bold">32</span>);
  <span style="color:#fff;font-weight:bold">end</span>
`endif
<span style="color:#fff;font-weight:bold">endmodule</span>
</code></pre></div><p>demo.sby</p>
<pre tabindex="0"><code>[options]
mode bmc
depth 100

[engines]
smtbmc

[script]
read -formal demo.sv
prep -top demo

[files]
demo.sv
</code></pre><p>Running the engine</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sby demo.sby
</code></pre></div><p>and the output same as docs. hurrah!</p>
<pre tabindex="0"><code>SBY 22:44:11 [demo] engine_0: ##   0:00:00  Checking assertions in step 95..
SBY 22:44:11 [demo] engine_0: ##   0:00:00  Checking assumptions in step 96..
SBY 22:44:11 [demo] engine_0: ##   0:00:00  Checking assertions in step 96..
SBY 22:44:11 [demo] engine_0: ##   0:00:00  Checking assumptions in step 97..
SBY 22:44:11 [demo] engine_0: ##   0:00:00  Checking assertions in step 97..
SBY 22:44:11 [demo] engine_0: ##   0:00:00  Checking assumptions in step 98..
SBY 22:44:11 [demo] engine_0: ##   0:00:00  Checking assertions in step 98..
SBY 22:44:11 [demo] engine_0: ##   0:00:00  Checking assumptions in step 99..
SBY 22:44:11 [demo] engine_0: ##   0:00:00  Checking assertions in step 99..
SBY 22:44:11 [demo] engine_0: ##   0:00:00  Status: passed
SBY 22:44:11 [demo] engine_0: finished (returncode=0)
SBY 22:44:11 [demo] engine_0: Status returned by engine: pass
SBY 22:44:11 [demo] summary: Elapsed clock time [H:MM:SS (secs)]: 0:00:00 (0)
SBY 22:44:11 [demo] summary: Elapsed process time [H:MM:SS (secs)]: 0:00:00 (0)
SBY 22:44:11 [demo] summary: engine_0 (smtbmc) returned pass
SBY 22:44:11 [demo] DONE (PASS, rc=0)
</code></pre><p>Now into the rabbit holes that SMT and BMC are&hellip; more in upcoming posts..</p>
]]></content>
        </item>
        
        <item>
            <title>UVM Internals - set_drain_time</title>
            <link>/posts/2022/04/uvm-internals-set_drain_time/</link>
            <pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/04/uvm-internals-set_drain_time/</guid>
            <description>Set up In run_phase, set_drain_time is called from phase.phase_done which uvm_objection.
task run_phase(uvm_phase phase); phase.phase_done.set_drain_time(this, 10); endtask The set_drain_time sets drain in m_drain_time which is called m_forked_drain.
function void set_drain_time (uvm_object obj=null, time drain); if (obj==null) obj = m_top; m_drain_time[obj] = drain; m_set_hier_mode(obj); endfunction objection timeout In m_execute_scheduled_forks(), m_forked_drain is called
objection.m_forked_drain(ctxt.obj, ctxt.source_obj, ctxt.description, ctxt.count, 1); and m_forked_drain calls uvm_delay
task m_forked_drain (uvm_object obj, uvm_object source_obj, string description=&amp;#34;&amp;#34;, int count=1, int in_top_thread=0); int diff_count; if (m_drain_time.</description>
            <content type="html"><![CDATA[<h1 id="set-up">Set up</h1>
<p>In <code>run_phase</code>, <code>set_drain_time</code> is called from <code>phase.phase_done</code> which <code>uvm_objection</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">task</span> run_phase(uvm_phase phase);
    phase.phase_done.set_drain_time(this, <span style="color:#ff0;font-weight:bold">10</span>);
<span style="color:#fff;font-weight:bold">endtask</span>
</code></pre></div><p>The <code>set_drain_time</code> sets drain in <code>m_drain_time</code> which is called <code>m_forked_drain</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">   <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> set_drain_time (uvm_object obj=null, <span style="color:#fff;font-weight:bold">time</span> drain);
     <span style="color:#fff;font-weight:bold">if</span> (obj==null)
       obj = m_top;
     m_drain_time[obj] = drain;
     m_set_hier_mode(obj);
   <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><h1 id="objection-timeout">objection timeout</h1>
<p>In <code>m_execute_scheduled_forks()</code>, <code>m_forked_drain</code> is called</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    objection.m_forked_drain(ctxt.obj, ctxt.source_obj, ctxt.description, ctxt.count, <span style="color:#ff0;font-weight:bold">1</span>);
</code></pre></div><p>and <code>m_forked_drain</code> calls <code>uvm_delay</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">   <span style="color:#fff;font-weight:bold">task</span> m_forked_drain (uvm_object obj,
                        uvm_object source_obj,
                        <span style="color:#fff;font-weight:bold">string</span> description=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>,
                        <span style="color:#fff;font-weight:bold">int</span> count=<span style="color:#ff0;font-weight:bold">1</span>,
                        <span style="color:#fff;font-weight:bold">int</span> in_top_thread=<span style="color:#ff0;font-weight:bold">0</span>);

       <span style="color:#fff;font-weight:bold">int</span> diff_count;

       <span style="color:#fff;font-weight:bold">if</span> (m_drain_time.exists(obj))
         `uvm_delay(m_drain_time[obj])
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Systemverilog functional cheat-sheet</title>
            <link>/posts/2022/04/systemverilog-functional-cheat-sheet/</link>
            <pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/04/systemverilog-functional-cheat-sheet/</guid>
            <description>basic enum {r,d} color,color1; covergroup cg @(posedge clk); cp : coverpoint color; cp1 : coverpoint color1; xp : cross cp, cp; endgroup cg cg_i = new; embedded coverpoint class foo; enum {r,d} color,color1; covergroup cg @(posedge clk); cp : coverpoint color; cp1 : coverpoint color1; xp : cross cp, cp; endgroup function new(); cg =new; // embedded cg above instance is created automatically as cg is defined in class endfunction endclass implicit coverpoint color1 in cross create a coverpoint there.</description>
            <content type="html"><![CDATA[<h1 id="basic">basic</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">enum</span> {r,d} color,color1;
covergroup cg @(<span style="color:#fff;font-weight:bold">posedge</span> clk);

cp : coverpoint color;
cp1 : coverpoint color1;
xp : cross cp, cp;
endgroup

cg cg_i = new;
</code></pre></div><h1 id="embedded-coverpoint">embedded coverpoint</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class foo;
<span style="color:#fff;font-weight:bold">enum</span> {r,d} color,color1;
covergroup cg @(<span style="color:#fff;font-weight:bold">posedge</span> clk);

cp : coverpoint color;
cp1 : coverpoint color1;
xp : cross cp, cp;
endgroup

<span style="color:#fff;font-weight:bold">function</span> new();
cg =new; <span style="color:#007f7f">// embedded cg above instance is created automatically as cg is defined in class
</span><span style="color:#007f7f"></span><span style="color:#fff;font-weight:bold">endfunction</span>
endclass
</code></pre></div><h1 id="implicit-coverpoint">implicit coverpoint</h1>
<p>color1 in cross create a coverpoint there.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">enum</span> {r,d} color,color1;
covergroup cg @(<span style="color:#fff;font-weight:bold">posedge</span> clk);

cp : coverpoint color;
xp : cross cp, color1;
endgroup

cg cg_i = new;
</code></pre></div><h1 id="disable-iff">disable iff</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">enum</span> {r,d} color,color1;
covergroup cg @(<span style="color:#fff;font-weight:bold">posedge</span> clk);
cp : coverpoint color iff (!reset);

endgroup

cg cg_i = new;
</code></pre></div><h1 id="user-defined-bins">user-defined bins</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">logic</span> [<span style="color:#ff0;font-weight:bold">3</span>:<span style="color:#ff0;font-weight:bold">0</span>] color;
covergroup cg @(<span style="color:#fff;font-weight:bold">posedge</span> clk);
cp: coverpoint color {
    bins a = {<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">2</span>,<span style="color:#ff0;font-weight:bold">3</span>};
    bins b[] = {<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">2</span>,<span style="color:#ff0;font-weight:bold">3</span>};
    bins c[] = {[<span style="color:#ff0;font-weight:bold">1</span>:<span style="color:#ff0;font-weight:bold">3</span>]};
}
endgroup
</code></pre></div><h1 id="default-bins">default bins</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">covergroup cg @(<span style="color:#fff;font-weight:bold">posedge</span> clk);
cp: coverpoint color{
    bins a = {<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">2</span>,<span style="color:#ff0;font-weight:bold">3</span>};
    bins others[] = <span style="color:#fff;font-weight:bold">default</span>;
}
endgroup
</code></pre></div><h1 id="cross">cross</h1>
<pre tabindex="0"><code>logic [3:0] color;
logic [3:0] color1;

covergroup cg @(posedge clk);
cp: coverpoint color{
    bins a[] = {1,2,3}; // 3 bins
}
cp1: cp, color1 ; // 3 * 16 bins
endgroup
</code></pre><h1 id="cross-bins">cross bins</h1>
<pre tabindex="0"><code>logic [3:0] color;
logic [3:0] color1;

covergroup cg @(posedge clk);
cp: coverpoint color{
    bins a[] = {1,2,3};
}
cp1: cp, color1 ;
endgroup
</code></pre><h1 id="cross-bins-intersect">cross bins intersect</h1>
<pre tabindex="0"><code>logic [3:0] color;
logic [3:0] color1;

covergroup cg @(posedge clk);
cp: coverpoint color{
    bins a[] = {1,2,3};
}
cp1: cp, color1
 {
     bins zeros: binsof(cp) intersect {1}; // &lt;1,0&gt; &lt;1,1&gt; ...
 }
endgroup
</code></pre>]]></content>
        </item>
        
        <item>
            <title>UVM Internals - UVM_TIMEOUT</title>
            <link>/posts/2022/04/uvm-internals-uvm_timeout/</link>
            <pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/04/uvm-internals-uvm_timeout/</guid>
            <description>This posts explains how +UVM_TIMEOUT works.
Starting with how it is used
&amp;lt;sim command&amp;gt; +UVM_TIMEOUT=200000,NO UVM_TIMEOUT is read in uvm_root.svh which parses the value and override strings and calls set_timeout.
timeout_count = clp.get_arg_values(&amp;#34;+UVM_TIMEOUT=&amp;#34;, timeout_settings); if (timeout_count == 0) return; else begin timeout = timeout_settings[0]; if (timeout_count &amp;gt; 1) begin string timeout_list; string sep; for (int i = 0; i &amp;lt; timeout_settings.size(); i++) begin if (i != 0) sep = &amp;#34;; &amp;#34;; timeout_list = {timeout_list, sep, timeout_settings[i]}; end uvm_report_warning(&amp;#34;MULTTIMOUT&amp;#34;, $sformatf(&amp;#34;Multiple (%0d) +UVM_TIMEOUT arguments provided on the command line.</description>
            <content type="html"><![CDATA[<p>This posts explains how <code>+UVM_TIMEOUT</code> works.</p>
<p>Starting with how it is used</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">&lt;sim command&gt; +UVM_TIMEOUT=200000,NO
</code></pre></div><p><code>UVM_TIMEOUT</code> is read in <code>uvm_root.svh</code> which parses the value and override strings and calls <code>set_timeout</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  timeout_count = clp.get_arg_values(<span style="color:#0ff;font-weight:bold">&#34;+UVM_TIMEOUT=&#34;</span>, timeout_settings);
  <span style="color:#fff;font-weight:bold">if</span> (timeout_count ==  <span style="color:#ff0;font-weight:bold">0</span>)
    <span style="color:#fff;font-weight:bold">return</span>;
  <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">begin</span>
    timeout = timeout_settings[<span style="color:#ff0;font-weight:bold">0</span>];
    <span style="color:#fff;font-weight:bold">if</span> (timeout_count &gt; <span style="color:#ff0;font-weight:bold">1</span>) <span style="color:#fff;font-weight:bold">begin</span>
      <span style="color:#fff;font-weight:bold">string</span> timeout_list;
      <span style="color:#fff;font-weight:bold">string</span> sep;
      <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">int</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; timeout_settings.size(); i++) <span style="color:#fff;font-weight:bold">begin</span>
        <span style="color:#fff;font-weight:bold">if</span> (i != <span style="color:#ff0;font-weight:bold">0</span>)
          sep = <span style="color:#0ff;font-weight:bold">&#34;; &#34;</span>;
        timeout_list = {timeout_list, sep, timeout_settings[i]};
      <span style="color:#fff;font-weight:bold">end</span>
      uvm_report_warning(<span style="color:#0ff;font-weight:bold">&#34;MULTTIMOUT&#34;</span>,
        $sformatf(<span style="color:#0ff;font-weight:bold">&#34;Multiple (%0d) +UVM_TIMEOUT arguments provided on the command line.  &#39;%s&#39; will be used.  Provided list: %s.&#34;</span>,
        timeout_count, timeout, timeout_list), UVM_NONE);
    <span style="color:#fff;font-weight:bold">end</span>
    uvm_report_info(<span style="color:#0ff;font-weight:bold">&#34;TIMOUTSET&#34;</span>,
      $sformatf(<span style="color:#0ff;font-weight:bold">&#34;&#39;+UVM_TIMEOUT=%s&#39; provided on the command line is being applied.&#34;</span>, timeout), UVM_NONE);
      <span style="color:#fff;font-weight:bold">void</span>&#39;($sscanf(timeout,<span style="color:#0ff;font-weight:bold">&#34;%d,%s&#34;</span>,timeout_int,override_spec));
    <span style="color:#fff;font-weight:bold">case</span>(override_spec)
      <span style="color:#0ff;font-weight:bold">&#34;YES&#34;</span>   : set_timeout(timeout_int, <span style="color:#ff0;font-weight:bold">1</span>);
      <span style="color:#0ff;font-weight:bold">&#34;NO&#34;</span>    : set_timeout(timeout_int, <span style="color:#ff0;font-weight:bold">0</span>);
      <span style="color:#fff;font-weight:bold">default</span> : set_timeout(timeout_int, <span style="color:#ff0;font-weight:bold">1</span>);
    <span style="color:#fff;font-weight:bold">endcase</span>
  <span style="color:#fff;font-weight:bold">end</span>

</code></pre></div><p><code>set_timeout</code> sets the phase_timeout in <code>uvm_root</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> uvm_root::set_timeout(<span style="color:#fff;font-weight:bold">time</span> timeout, <span style="color:#fff;font-weight:bold">bit</span> overridable=<span style="color:#ff0;font-weight:bold">1</span>);
  static <span style="color:#fff;font-weight:bold">bit</span> m_uvm_timeout_overridable = <span style="color:#ff0;font-weight:bold">1</span>;
  <span style="color:#fff;font-weight:bold">if</span> (m_uvm_timeout_overridable == <span style="color:#ff0;font-weight:bold">0</span>) <span style="color:#fff;font-weight:bold">begin</span>
    uvm_report_info(<span style="color:#0ff;font-weight:bold">&#34;NOTIMOUTOVR&#34;</span>,
      $sformatf(<span style="color:#0ff;font-weight:bold">&#34;The global timeout setting of %0d is not overridable to %0d due to a previous setting.&#34;</span>,
         phase_timeout, timeout), UVM_NONE);
    <span style="color:#fff;font-weight:bold">return</span>;
  <span style="color:#fff;font-weight:bold">end</span>
  m_uvm_timeout_overridable = overridable;
  phase_timeout = timeout;
<span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p>then eventually when <code>task uvm_phase::execute_phase()</code> is called, it waits until for that timeout</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">                 <span style="color:#fff;font-weight:bold">if</span> (m_phase_trace)
                    `UVM_PH_TRACE(<span style="color:#0ff;font-weight:bold">&#34;PH/TRC/TO_WAIT&#34;</span>, $sformatf(<span style="color:#0ff;font-weight:bold">&#34;STARTING PHASE TIMEOUT WATCHDOG (timeout == %t)&#34;</span>, top.phase_timeout), this, UVM_HIGH)
                  `uvm_delay(top.phase_timeout)

</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#0f0;font-weight:bold">`define uvm_delay(TIME) #(TIME);
</span></code></pre></div><p>Side note, <code>UVM_DEFAULT_TIMEOUT</code> is set to 2900s by default which sounds like arbitrary number. Who chose it?</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#0f0;font-weight:bold">`define UVM_DEFAULT_TIMEOUT 9200s
</span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Systemverilog constrainted randomization cheat-sheet</title>
            <link>/posts/2022/04/systemverilog-constrainted-randomization-cheat-sheet/</link>
            <pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/04/systemverilog-constrainted-randomization-cheat-sheet/</guid>
            <description>This posts lists small snippets from LRM 1800.
set membership - inside class b; rand logic [2:0] x; constraint x_c1 {x inside {1,2};} constraint x_c2 {x inside {[0:3]};} // constraint x_c2 {!(x inside {[0:3]});} // negation endclass Distribution class b; rand logic [2:0] x; constraint x_c1 {x dist {1:=1 ,2 := 2};} // 1,2 constraint x_c1 {x dist {[1:2]:=1 ,3 := 2};} // 1, 1, 2 constraint x_c1 {x dist {[1:2]/=1 ,3 := 2};} // 1/2,1/2,2 endclass unique unique says x and y shouldn&amp;rsquo;t take the same value.</description>
            <content type="html"><![CDATA[<p>This posts lists small snippets from LRM 1800.</p>
<h1 id="set-membership---inside">set membership - inside</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class b;
rand <span style="color:#fff;font-weight:bold">logic</span> [<span style="color:#ff0;font-weight:bold">2</span>:<span style="color:#ff0;font-weight:bold">0</span>] x;
constraint x_c1 {x inside {<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">2</span>};}
constraint x_c2 {x inside {[<span style="color:#ff0;font-weight:bold">0</span>:<span style="color:#ff0;font-weight:bold">3</span>]};}     <span style="color:#007f7f">//
</span><span style="color:#007f7f"></span>constraint x_c2 {!(x inside {[<span style="color:#ff0;font-weight:bold">0</span>:<span style="color:#ff0;font-weight:bold">3</span>]});} <span style="color:#007f7f">// negation
</span><span style="color:#007f7f"></span>endclass
</code></pre></div><h1 id="distribution">Distribution</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class b;
rand <span style="color:#fff;font-weight:bold">logic</span> [<span style="color:#ff0;font-weight:bold">2</span>:<span style="color:#ff0;font-weight:bold">0</span>] x;
constraint x_c1 {x dist {<span style="color:#ff0;font-weight:bold">1</span>:=<span style="color:#ff0;font-weight:bold">1</span> ,<span style="color:#ff0;font-weight:bold">2</span> := <span style="color:#ff0;font-weight:bold">2</span>};}    <span style="color:#007f7f">// 1,2
</span><span style="color:#007f7f"></span>constraint x_c1 {x dist {[<span style="color:#ff0;font-weight:bold">1</span>:<span style="color:#ff0;font-weight:bold">2</span>]:=<span style="color:#ff0;font-weight:bold">1</span> ,<span style="color:#ff0;font-weight:bold">3</span> := <span style="color:#ff0;font-weight:bold">2</span>};} <span style="color:#007f7f">// 1, 1, 2
</span><span style="color:#007f7f"></span>constraint x_c1 {x dist {[<span style="color:#ff0;font-weight:bold">1</span>:<span style="color:#ff0;font-weight:bold">2</span>]/=<span style="color:#ff0;font-weight:bold">1</span> ,<span style="color:#ff0;font-weight:bold">3</span> := <span style="color:#ff0;font-weight:bold">2</span>};} <span style="color:#007f7f">// 1/2,1/2,2
</span><span style="color:#007f7f"></span>endclass
</code></pre></div><h1 id="unique">unique</h1>
<p><code>unique</code> says x and y shouldn&rsquo;t take the same value.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class b;
rand <span style="color:#fff;font-weight:bold">logic</span> [<span style="color:#ff0;font-weight:bold">2</span>:<span style="color:#ff0;font-weight:bold">0</span>] x;
rand <span style="color:#fff;font-weight:bold">logic</span> [<span style="color:#ff0;font-weight:bold">2</span>:<span style="color:#ff0;font-weight:bold">0</span>] y;
constraint x_c1 {unique {x, y};}
endclass
</code></pre></div><h1 id="implication">implication</h1>
<p>This eliminates {1,0}, {1,1}, {1,3} .. {1,9}</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class b;
rand <span style="color:#fff;font-weight:bold">logic</span> [<span style="color:#ff0;font-weight:bold">2</span>:<span style="color:#ff0;font-weight:bold">0</span>] x;
rand <span style="color:#fff;font-weight:bold">logic</span> [<span style="color:#ff0;font-weight:bold">2</span>:<span style="color:#ff0;font-weight:bold">0</span>] y;
constraint x_c1 { (x==<span style="color:#ff0;font-weight:bold">1</span>) -&gt; (y==<span style="color:#ff0;font-weight:bold">2</span>); }
endclass
</code></pre></div><h1 id="solver-ordering">solver ordering</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class b;
rand <span style="color:#fff;font-weight:bold">logic</span> [<span style="color:#ff0;font-weight:bold">2</span>:<span style="color:#ff0;font-weight:bold">0</span>] x;
rand <span style="color:#fff;font-weight:bold">logic</span> [<span style="color:#ff0;font-weight:bold">2</span>:<span style="color:#ff0;font-weight:bold">0</span>] y;
constraint x_c1 { (x==<span style="color:#ff0;font-weight:bold">1</span>) -&gt; (y==<span style="color:#ff0;font-weight:bold">2</span>); }
constraint x_c1 { solve x before y; }
endclass
</code></pre></div><h1 id="soft-constraint">soft constraint</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class b;
rand <span style="color:#fff;font-weight:bold">logic</span> [<span style="color:#ff0;font-weight:bold">2</span>:<span style="color:#ff0;font-weight:bold">0</span>] x;
constraint x_c1 { soft x inside {[<span style="color:#ff0;font-weight:bold">10</span>:<span style="color:#ff0;font-weight:bold">40</span>]};}
endclass
</code></pre></div><h1 id="inline-contraint">inline contraint</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class b;
rand <span style="color:#fff;font-weight:bold">logic</span> [<span style="color:#ff0;font-weight:bold">2</span>:<span style="color:#ff0;font-weight:bold">0</span>] x;
constraint x_c1 { soft x inside {[<span style="color:#ff0;font-weight:bold">10</span>:<span style="color:#ff0;font-weight:bold">40</span>]};}
endclass

b B =new;

B.randomize() with {x == <span style="color:#ff0;font-weight:bold">100</span>};
</code></pre></div><h1 id="disable-rand">Disable rand</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class b;
rand <span style="color:#fff;font-weight:bold">logic</span> [<span style="color:#ff0;font-weight:bold">2</span>:<span style="color:#ff0;font-weight:bold">0</span>] x;
constraint x_c1 { soft x inside {[<span style="color:#ff0;font-weight:bold">10</span>:<span style="color:#ff0;font-weight:bold">40</span>]};}
endclass

b B =new;

<span style="color:#007f7f">// Disable variable
</span><span style="color:#007f7f"></span>B.x.rand_mode(<span style="color:#ff0;font-weight:bold">0</span>);
<span style="color:#007f7f">// Disable for object
</span><span style="color:#007f7f"></span>B.rand_mode(<span style="color:#ff0;font-weight:bold">0</span>);

<span style="color:#007f7f">// Disable
</span><span style="color:#007f7f"></span>B.x_c1.contraint_mode(<span style="color:#ff0;font-weight:bold">0</span>);
</code></pre></div><h1 id="inline-random-variable-control">inline random variable control</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class b;
rand <span style="color:#fff;font-weight:bold">logic</span> [<span style="color:#ff0;font-weight:bold">2</span>:<span style="color:#ff0;font-weight:bold">0</span>] x,y;
constraint x_c1 { soft x inside {[<span style="color:#ff0;font-weight:bold">10</span>:<span style="color:#ff0;font-weight:bold">40</span>]};}
endclass

B.randomize(x); <span style="color:#007f7f">// y is state, x is random
</span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM Internals - UVM 2020-2.0 Early release diff Part1 - m_uvm_core_state</title>
            <link>/posts/2022/03/uvm-internals-uvm-2020-2.0-early-release-diff-part1-m_uvm_core_state/</link>
            <pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/03/uvm-internals-uvm-2020-2.0-early-release-diff-part1-m_uvm_core_state/</guid>
            <description>UVM 2020-2.0 early release is out and i thought it would be fun to deep dive into one of the differences and try to understand why that change was made.
I thought that was an interesting one!
&amp;lt; // we use a queue here only to avoid any problems on writing to variables &amp;lt; // inside an always_comb/latch/ff in case those call UVM &amp;lt; uvm_core_state m_uvm_core_state[$]; --- &amp;gt; uvm_core_state m_uvm_core_state = UVM_CORE_UNINITIALIZED; So, what does this comment mean?</description>
            <content type="html"><![CDATA[<p>UVM 2020-2.0 early release is out and i thought it would be fun to deep dive into one of the differences and try to understand why that change was made.</p>
<p>I thought that was an interesting one!</p>
<pre tabindex="0"><code>&lt; // we use a queue here only to avoid any problems on writing to variables
&lt; // inside an always_comb/latch/ff in case those call UVM
&lt; uvm_core_state m_uvm_core_state[$];
---
&gt; uvm_core_state m_uvm_core_state = UVM_CORE_UNINITIALIZED;
</code></pre><p>So, what does this comment mean? Let&rsquo;s start with <code>uvm_core_state</code>. well, that was easy.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">typedef</span> <span style="color:#fff;font-weight:bold">enum</span> {
	UVM_CORE_UNINITIALIZED,
        UVM_CORE_PRE_INIT,
        UVM_CORE_INITIALIZING,
	UVM_CORE_INITIALIZED, <span style="color:#007f7f">// UVM_CORE_POST_INIT
</span><span style="color:#007f7f"></span>	UVM_CORE_PRE_RUN,
	UVM_CORE_RUNNING,
	UVM_CORE_POST_RUN,
	UVM_CORE_FINISHED,
	UVM_CORE_PRE_ABORT,
	UVM_CORE_ABORTED
} uvm_core_state;
</code></pre></div><p>grepping through <code>src</code></p>
<pre tabindex="0"><code>./base/uvm_object_globals.svh:uvm_core_state m_uvm_core_state[$];
./base/uvm_root.svh:          m_uvm_core_state.push_front(UVM_CORE_PRE_ABORT);
./base/uvm_root.svh:          m_uvm_core_state.push_front(UVM_CORE_ABORTED);
./base/uvm_root.svh:        m_uvm_core_state.push_front(UVM_CORE_PRE_RUN);
./base/uvm_root.svh:        m_uvm_core_state.push_front(UVM_CORE_POST_RUN);
./base/uvm_root.svh:        m_uvm_core_state.push_front(UVM_CORE_FINISHED);
./base/uvm_globals.svh:   if (m_uvm_core_state.size() == 0) return UVM_CORE_UNINITIALIZED;
./base/uvm_globals.svh:   else return m_uvm_core_state[0];
./base/uvm_globals.svh:  m_uvm_core_state.push_front(UVM_CORE_PRE_INIT);
./base/uvm_globals.svh:  m_uvm_core_state.push_front(UVM_CORE_INITIALIZING);
./base/uvm_globals.svh:  m_uvm_core_state.push_front(UVM_CORE_INITIALIZED);
./base/uvm_phase.svh:  m_uvm_core_state.push_front(UVM_CORE_RUNNING);
</code></pre><p>There is a getter in <code>./base/uvm_globals.svh</code> which returns the first element in the queue</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">function</span> uvm_core_state get_core_state();
   <span style="color:#fff;font-weight:bold">if</span> (m_uvm_core_state.size() == <span style="color:#ff0;font-weight:bold">0</span>) <span style="color:#fff;font-weight:bold">return</span> UVM_CORE_UNINITIALIZED;
   <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">return</span> m_uvm_core_state[<span style="color:#ff0;font-weight:bold">0</span>];
<span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p>Which is called from the following places</p>
<pre tabindex="0"><code>./base/uvm_root.svh:          if (get_core_state() inside {UVM_CORE_PRE_ABORT,UVM_CORE_ABORTED})
./base/uvm_globals.svh:  if(get_core_state()!=UVM_CORE_UNINITIALIZED) begin
./base/uvm_globals.svh:    if (get_core_state() == UVM_CORE_PRE_INIT) begin
./base/uvm_registry.svh:     if (uvm_pkg::get_core_state() != UVM_CORE_UNINITIALIZED) begin
./base/uvm_registry.svh:     if (uvm_pkg::get_core_state() == UVM_CORE_UNINITIALIZED) begin
</code></pre><p>From what i see, state gets pushed in several places but never pop&rsquo;ed out. hmmmm! At this point, I am still baffled. The comment says</p>
<pre tabindex="0"><code>// we use a queue here only to avoid any problems on writing to variables
// inside an always_comb/latch/ff in case those call UVM
</code></pre><p>but who calls UVM inside <code>always</code>!???? Now i have to do part2.</p>
]]></content>
        </item>
        
        <item>
            <title>Python package of the week: tempfile</title>
            <link>/posts/2022/03/python-package-of-the-week-tempfile/</link>
            <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/03/python-package-of-the-week-tempfile/</guid>
            <description>tempfile is a useful to create files and directories under system temp path whatever that is.
To create a temp directory, tempfile.TemporaryDirectory returns a full path to temp directory.
In [8]: x = tempfile.TemporaryDirectory() In [9]: x.name Out[9]: &amp;#39;/tmp/tmp_olncqa8&amp;#39; To create a file, tempfile.NamedTemporaryFile does exactly that.
In [5]: x = tempfile.NamedTemporaryFile() In [6]: x.name Out[6]: &amp;#39;/tmp/tmpn7oud6l_&amp;#39; PS. the directory path is determined with following rules
 If dir is not None, the file will be created in that directory; otherwise, a default directory is used.</description>
            <content type="html"><![CDATA[<p><code>tempfile</code> is a useful to create files and directories under system temp path whatever that is.</p>
<p>To create a temp directory, <code>tempfile.TemporaryDirectory</code> returns a full path to temp directory.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">In [<span style="color:#ff0;font-weight:bold">8</span>]: x = tempfile.TemporaryDirectory()

In [<span style="color:#ff0;font-weight:bold">9</span>]: x.name
Out[<span style="color:#ff0;font-weight:bold">9</span>]: <span style="color:#0ff;font-weight:bold">&#39;/tmp/tmp_olncqa8&#39;</span>

</code></pre></div><p>To create a file, <code>tempfile.NamedTemporaryFile</code> does exactly that.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">In [<span style="color:#ff0;font-weight:bold">5</span>]: x = tempfile.NamedTemporaryFile()
In [<span style="color:#ff0;font-weight:bold">6</span>]: x.name
Out[<span style="color:#ff0;font-weight:bold">6</span>]: <span style="color:#0ff;font-weight:bold">&#39;/tmp/tmpn7oud6l_&#39;</span>
</code></pre></div><p>PS. the directory path is determined with following <a href="https://docs.python.org/3/library/tempfile.html">rules</a></p>
<blockquote>
<p>If dir is not None, the file will be created in that directory; otherwise, a default directory is used. The default directory is chosen from a platform-dependent list, but the user of the application can control the directory location by setting the TMPDIR, TEMP or TMP environment variables</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>UVM Internals - Sequence to Sequencer connection</title>
            <link>/posts/2022/03/uvm-internals-sequence-to-sequencer-connection/</link>
            <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/03/uvm-internals-sequence-to-sequencer-connection/</guid>
            <description>This post answers the following question &amp;ldquo;How the typical sequencer to sequence coonection works?!&amp;rdquo;
An example  Create sequencer class handle from vanilla uvm_sequencer  uvm_sequencer #(foo_req, foo_rsp) sqr;  Connect it to driver port in connect phase  drv.seq_item_port.connect(sqr.seq_item_export);  Define uvm_sequence with body  class foo_sequence extends uvm_sequence#(foo_seq_item); virtual task body(); start_item(item); // Create the seq item  ... finish_item(item); endtask endclass  Call the sequence with sequencer instance.</description>
            <content type="html"><![CDATA[<p>This post answers the following question &ldquo;How the typical sequencer to sequence coonection works?!&rdquo;</p>
<h1 id="an-example">An example</h1>
<ul>
<li>Create sequencer class handle from vanilla <code>uvm_sequencer</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">uvm_sequencer #(foo_req, foo_rsp) sqr;
</code></pre></div><ul>
<li>Connect it to driver port in connect phase</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">drv.seq_item_port.connect(sqr.seq_item_export);
</code></pre></div><ul>
<li>Define <code>uvm_sequence</code> with <code>body</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class foo_sequence extends uvm_sequence#(foo_seq_item);
  virtual <span style="color:#fff;font-weight:bold">task</span> body();

  start_item(item);
  <span style="color:#007f7f">// Create the seq item
</span><span style="color:#007f7f"></span>  ...
  finish_item(item);
  <span style="color:#fff;font-weight:bold">endtask</span>
endclass
</code></pre></div><ul>
<li>Call the sequence with sequencer instance.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">seq.start(sqr, null);
</code></pre></div><ul>
<li>Finally the driver can use <code>get_next_item</code> to get the sequence_item</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"> seq_item_port.get_next_item(req);
 <span style="color:#007f7f">// Do something with req
</span><span style="color:#007f7f"></span> seq_item_port.item_done();
</code></pre></div><h1 id="following-seqstart-down-the-rabbit-hole">Following seq.start down the rabbit hole</h1>
<p>let&rsquo;s start with <code>uvm_sequence</code> and <code>seq.start</code>, it turns out it&rsquo;s very lean class as most logic is define in <code>uvm_sequence_base</code> in <code>src/seq/uvm_sequence_base.svh</code></p>
<p><code>uvm_sequence_base</code> is a sub class of <code>uvm_sequence_item</code> with sequence phases to be overridden.</p>
<p>anyway, <code>start</code> eventually calls <code>body</code>. note that <code>body</code> is a virtual task that issues a warning if not overridden.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  virtual <span style="color:#fff;font-weight:bold">task</span> body();
    uvm_report_warning(<span style="color:#0ff;font-weight:bold">&#34;uvm_sequence_base&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;Body definition undefined&#34;</span>);
    <span style="color:#fff;font-weight:bold">return</span>;
  <span style="color:#fff;font-weight:bold">endtask</span>
</code></pre></div><h1 id="how-the-sequencer-and-sequence-are-linked-body-to-get_next_item">How the sequencer and sequence are linked? body to get_next_item.</h1>
<p>after creating the item, <code>body</code> calls <code>finish_item</code> to pass over control to sequencer. <code>finish_item</code> is defined in <code>src/seq/uvm_sequence_base.svh</code>, the task finish_item calls <code>send_request</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  virtual <span style="color:#fff;font-weight:bold">task</span> finish_item (uvm_sequence_item item,
                            <span style="color:#fff;font-weight:bold">int</span> set_priority = -<span style="color:#ff0;font-weight:bold">1</span>);
    ...
    sequencer.send_request(this, item);
    ...
  <span style="color:#fff;font-weight:bold">endtask</span>

</code></pre></div><p><code>sequencer.send_request</code> is defined in <code>src/seq/uvm_sequence.svh</code>. which uses <code>m_sequencer</code> to call <code>m_sequencer.send_sequest</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> send_request(uvm_sequence_item request, <span style="color:#fff;font-weight:bold">bit</span> rerandomize = <span style="color:#ff0;font-weight:bold">0</span>);
    REQ m_request;

  ...
    m_sequencer.send_request(this, m_request, rerandomize);
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p><code>m_sequencer.send_request</code> is called from sequencer is defined at <code>src/seq/uvm_sequencer_param_base.svh</code>.
and it pushes the item into tlm fifo <code>m_req_fifo</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">if</span> (m_req_fifo.try_put(param_t) != <span style="color:#ff0;font-weight:bold">1</span>) <span style="color:#fff;font-weight:bold">begin</span>
    uvm_report_fatal(get_full_name(), <span style="color:#0ff;font-weight:bold">&#34;Concurrent calls to get_next_item() not supported. Consider using a semaphore to ensure that concurrent processes take turns in the driver&#34;</span>, UVM_NONE);
  <span style="color:#fff;font-weight:bold">end</span>
</code></pre></div><p>at this point, we need to jump to the other side <code>seq_item_port.get_next_item(req);</code>
then returns the req in the <code>m_req_fifo</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">task</span> uvm_sequencer::get_next_item(<span style="color:#fff;font-weight:bold">output</span> REQ t);
  REQ req_item;
  ...
  m_req_fifo.peek(t);
<span style="color:#fff;font-weight:bold">endtask</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Ireland Rental Price Analysis</title>
            <link>/posts/2022/03/ireland-rental-price-analysis/</link>
            <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/03/ireland-rental-price-analysis/</guid>
            <description>While the world is on fire, I wanted something light to do to get my mind off the news. So, I decided to look at another crisis. Ireland Housing Crisis :)
Anyone who is familiar with Ireland knows about the housing shortage. So, Like everyone here, I check daft on daily basis(several times a day actually).
I thought it would be fun to scrap Daft.ie and do basic analysis on the data(nothing fancy!</description>
            <content type="html"><![CDATA[<p>While the world is on fire, I wanted something light to do to get my mind off the news. So, I decided to look at another crisis. Ireland Housing Crisis :)</p>
<p><img src="/this-is-fine.0.jpg" alt="Example image"></p>
<p>Anyone who is familiar with Ireland knows about the housing shortage. So, Like everyone here, I check daft on daily basis(several times a day actually).</p>
<p>I thought it would be fun to scrap Daft.ie and do basic analysis on the data(nothing fancy!). I am using jupyter notebooks because as all the cool kids use it :)</p>
<p>I am planning to setup cron job on AWS to scrap daft.ie and notify me once there is new listing. who needs daft.ie emails when you can send your own.</p>
<h1 id="the-packages">The packages</h1>
<p>Here is quick run down of the packages used:</p>
<ul>
<li>requests to handle HTTP session</li>
<li>pandas to store data in data frame for analysis</li>
<li>plotly to draw the locations on a map</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">import</span> os
<span style="color:#fff;font-weight:bold">import</span> json
<span style="color:#fff;font-weight:bold">import</span> pprint
<span style="color:#fff;font-weight:bold">import</span> datetime

<span style="color:#fff;font-weight:bold">import</span> requests
<span style="color:#fff;font-weight:bold">import</span> pandas <span style="color:#fff;font-weight:bold">as</span> pd
<span style="color:#fff;font-weight:bold">import</span> matplotlib.pyplot <span style="color:#fff;font-weight:bold">as</span> plt

<span style="color:#fff;font-weight:bold">import</span> plotly.express <span style="color:#fff;font-weight:bold">as</span> px
</code></pre></div><h1 id="http-session-and-rest-api">HTTP Session and REST API</h1>
<p>Well, Without documentation, I spent some time tracing xhr requests in the browser to extract the API endpoints and request/response JSON.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">s = requests.Session()

<span style="color:#007f7f"># constants</span>
DAFT_API=<span style="color:#0ff;font-weight:bold">&#34;https://search-gateway.dsch.ie/v1/listings&#34;</span>
AUTOCOMPLETE_URI = <span style="color:#0ff;font-weight:bold">&#34;https://daft-autocomplete-gateway.dsch.ie/v1/autocomplete&#34;</span>
PAGE_SIZE = <span style="color:#ff0;font-weight:bold">50</span>
CORK_ID = <span style="color:#ff0;font-weight:bold">35</span>

headers = {<span style="color:#0ff;font-weight:bold">&#34;User-Agent&#34;</span> : <span style="color:#0ff;font-weight:bold">&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36&#34;</span>,
          <span style="color:#0ff;font-weight:bold">&#34;platform&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;web&#34;</span>,
          <span style="color:#0ff;font-weight:bold">&#34;brand&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;daft&#34;</span>}
</code></pre></div><h1 id="getting-the-listings">Getting the listings</h1>
<p>Next, I needed to format the request JSON. Mainly, I needed <code>CORK_ID</code> so i had to grab that from the browser.</p>
<p>The way it works, I had to do it in two steps</p>
<ul>
<li>Get the pages pages</li>
<li>iterate over the pages one by one to get listings per page</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#007f7f"># Get listings</span>
<span style="color:#fff;font-weight:bold">def</span> get_listings(data, headers=headers):
    <span style="color:#007f7f"># Get paging info</span>
    r = s.post(DAFT_API, json=data, headers=headers)
    paging = r.json()[<span style="color:#0ff;font-weight:bold">&#34;paging&#34;</span>]

    <span style="color:#007f7f"># Get all listing</span>
    listings  = []
    start = <span style="color:#ff0;font-weight:bold">0</span>
    <span style="color:#fff;font-weight:bold">for</span> page in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">1</span>, paging[<span style="color:#0ff;font-weight:bold">&#34;totalPages&#34;</span>] + <span style="color:#ff0;font-weight:bold">1</span>):
        data[<span style="color:#0ff;font-weight:bold">&#39;paging&#39;</span>][<span style="color:#0ff;font-weight:bold">&#39;from&#39;</span>]  = start
        r = s.post(DAFT_API, json=data, headers=headers)
        listings.extend(r.json()[<span style="color:#0ff;font-weight:bold">&#34;listings&#34;</span>])
        start= r.json()[<span style="color:#0ff;font-weight:bold">&#34;paging&#34;</span>][<span style="color:#0ff;font-weight:bold">&#39;nextFrom&#39;</span>]

    <span style="color:#fff;font-weight:bold">return</span> listings

<span style="color:#007f7f"># Listings for cork</span>
data= {<span style="color:#0ff;font-weight:bold">&#39;section&#39;</span>: <span style="color:#0ff;font-weight:bold">&#39;renatls&#39;</span>,
  <span style="color:#0ff;font-weight:bold">&#39;filters&#39;</span>: [{<span style="color:#0ff;font-weight:bold">&#39;name&#39;</span>: <span style="color:#0ff;font-weight:bold">&#39;adState&#39;</span>, <span style="color:#0ff;font-weight:bold">&#39;values&#39;</span>: [<span style="color:#0ff;font-weight:bold">&#39;published&#39;</span>]}],
  <span style="color:#0ff;font-weight:bold">&#39;andFilters&#39;</span>: [],
  <span style="color:#0ff;font-weight:bold">&#39;ranges&#39;</span>: [],
  <span style="color:#0ff;font-weight:bold">&#39;paging&#39;</span>: {<span style="color:#0ff;font-weight:bold">&#39;from&#39;</span>: <span style="color:#0ff;font-weight:bold">&#39;0&#39;</span>, <span style="color:#0ff;font-weight:bold">&#39;pageSize&#39;</span>: <span style="color:#fff;font-weight:bold">str</span>(PAGE_SIZE)},
  <span style="color:#0ff;font-weight:bold">&#39;geoFilter&#39;</span>: {<span style="color:#0ff;font-weight:bold">&#39;storedShapeIds&#39;</span>: [<span style="color:#fff;font-weight:bold">str</span>(CORK_ID)], <span style="color:#0ff;font-weight:bold">&#39;geoSearchType&#39;</span>: <span style="color:#0ff;font-weight:bold">&#39;STORED_SHAPES&#39;</span>},
  <span style="color:#0ff;font-weight:bold">&#39;terms&#39;</span>: <span style="color:#0ff;font-weight:bold">&#39;&#39;</span>}


listings = get_listings(data)
listings
</code></pre></div><p>I am good to go.</p>
<h1 id="cleanup-and-pandas-frames">Cleanup and Pandas frames</h1>
<p>Next step, extract data from JSON object and flatten it in a dict that <code>pandas</code> can read. Also, I converted the weekly rates to monthly to keep it consistent.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">frame = []

<span style="color:#fff;font-weight:bold">for</span> l in listings:
    l = l[<span style="color:#0ff;font-weight:bold">&#39;listing&#39;</span>]
    tmp = {key: l[key] <span style="color:#fff;font-weight:bold">for</span> key in l.keys()
                               &amp; {<span style="color:#0ff;font-weight:bold">&#39;id&#39;</span>, <span style="color:#0ff;font-weight:bold">&#39;price&#39;</span>, <span style="color:#0ff;font-weight:bold">&#39;title&#39;</span>, <span style="color:#0ff;font-weight:bold">&#39;abbreviatedPrice&#39;</span>,<span style="color:#0ff;font-weight:bold">&#39;publishDate&#39;</span>, <span style="color:#0ff;font-weight:bold">&#39;numBedrooms&#39;</span>, <span style="color:#0ff;font-weight:bold">&#39;numBathrooms&#39;</span>,<span style="color:#0ff;font-weight:bold">&#39;propertyType&#39;</span>, <span style="color:#0ff;font-weight:bold">&#39;seoFriendlyPath&#39;</span>}}

    <span style="color:#fff;font-weight:bold">try</span>:
        tmp[<span style="color:#0ff;font-weight:bold">&#39;floorArea&#39;</span>] = l[<span style="color:#0ff;font-weight:bold">&#39;floorArea&#39;</span>][<span style="color:#0ff;font-weight:bold">&#39;value&#39;</span>]
    <span style="color:#fff;font-weight:bold">except</span> KeyError:
        tmp[<span style="color:#0ff;font-weight:bold">&#39;floorArea&#39;</span>] = <span style="color:#fff;font-weight:bold">None</span>

    tmp[<span style="color:#0ff;font-weight:bold">&#39;lat&#39;</span>]         = l[<span style="color:#0ff;font-weight:bold">&#39;point&#39;</span>][<span style="color:#0ff;font-weight:bold">&#39;coordinates&#39;</span>][<span style="color:#ff0;font-weight:bold">1</span>]
    tmp[<span style="color:#0ff;font-weight:bold">&#39;lon&#39;</span>]         = l[<span style="color:#0ff;font-weight:bold">&#39;point&#39;</span>][<span style="color:#0ff;font-weight:bold">&#39;coordinates&#39;</span>][<span style="color:#ff0;font-weight:bold">0</span>]

    <span style="color:#fff;font-weight:bold">try</span>:
        tmp[<span style="color:#0ff;font-weight:bold">&#39;ber&#39;</span>] = l[<span style="color:#0ff;font-weight:bold">&#39;ber&#39;</span>][<span style="color:#0ff;font-weight:bold">&#39;rating&#39;</span>]
    <span style="color:#fff;font-weight:bold">except</span> KeyError:
        tmp[<span style="color:#0ff;font-weight:bold">&#39;ber&#39;</span>] = <span style="color:#fff;font-weight:bold">None</span>
    frame.append(tmp)


df = pd.DataFrame(frame)

<span style="color:#007f7f"># clean up data</span>
df[<span style="color:#0ff;font-weight:bold">&#39;publishDate&#39;</span>] = pd.to_datetime(df[<span style="color:#0ff;font-weight:bold">&#39;publishDate&#39;</span>], unit=<span style="color:#0ff;font-weight:bold">&#39;ms&#39;</span>)
df[<span style="color:#0ff;font-weight:bold">&#39;period&#39;</span>] = df[<span style="color:#0ff;font-weight:bold">&#39;price&#39;</span>].str.extract(<span style="color:#0ff;font-weight:bold">&#39;per ([a-z]+)&#39;</span>)

df[<span style="color:#0ff;font-weight:bold">&#39;price&#39;</span>] = df[<span style="color:#0ff;font-weight:bold">&#39;price&#39;</span>].replace(<span style="color:#0ff;font-weight:bold">u</span><span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">\u20AC</span><span style="color:#0ff;font-weight:bold">&#34;</span>, <span style="color:#0ff;font-weight:bold">&#39;&#39;</span>, regex=<span style="color:#fff;font-weight:bold">True</span>).replace(<span style="color:#0ff;font-weight:bold">&#34;,&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, regex=<span style="color:#fff;font-weight:bold">True</span>).str.extract(<span style="color:#0ff;font-weight:bold">&#39;(\d+)&#39;</span>).astype(<span style="color:#fff;font-weight:bold">float</span>)
df = df[df[<span style="color:#0ff;font-weight:bold">&#39;price&#39;</span>].notna()]

<span style="color:#007f7f"># Sort by publish date</span>
df = df.sort_values(<span style="color:#0ff;font-weight:bold">&#39;publishDate&#39;</span>,ascending=<span style="color:#fff;font-weight:bold">False</span>)

<span style="color:#007f7f"># Adjust weekly rate</span>
df.loc[df[<span style="color:#0ff;font-weight:bold">&#39;period&#39;</span>] == <span style="color:#0ff;font-weight:bold">&#34;week&#34;</span>, <span style="color:#0ff;font-weight:bold">&#39;price&#39;</span>] *= <span style="color:#ff0;font-weight:bold">4.3</span>
df
</code></pre></div><h1 id="basic-analysis">Basic analysis</h1>
<p>Now i have a <code>DataFrame</code>, Calling Pandas <code>describe</code> to get some stats for prices</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[<span style="color:#0ff;font-weight:bold">&#34;price&#34;</span>].describe()
</code></pre></div><p>which prints something like</p>
<pre tabindex="0"><code>count      82.000000
mean      588.482927
std       127.536678
min       320.000000
25%       500.000000
50%       580.250000
75%       650.000000
max      1062.100000
Name: price, dtype: float64
</code></pre><h1 id="mapping-location-to-the-map">Mapping Location to the Map</h1>
<p>Finally mapping <code>lat</code> and <code>lon</code> to Map using <code>plotly</code>. Useless but looks nice :)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[<span style="color:#0ff;font-weight:bold">&#34;color&#34;</span>] = <span style="color:#0ff;font-weight:bold">&#34;blue&#34;</span>
fig = px.scatter_mapbox(df, lat=<span style="color:#0ff;font-weight:bold">&#34;lat&#34;</span>, lon=<span style="color:#0ff;font-weight:bold">&#34;lon&#34;</span>,hover_name=<span style="color:#0ff;font-weight:bold">&#39;price&#39;</span>)
fig.update_layout(mapbox_style=<span style="color:#0ff;font-weight:bold">&#34;open-street-map&#34;</span>)
fig.show()
</code></pre></div><p><img src="/daft_map.png" alt="Example image"></p>
]]></content>
        </item>
        
        <item>
            <title>Python package of the week: argparse</title>
            <link>/posts/2022/02/python-package-of-the-week-argparse/</link>
            <pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/02/python-package-of-the-week-argparse/</guid>
            <description>argparse is a great library to write CLI application with clean consistent interface. The main features are
 Sub-parsers Positional arguments Options arguments  Full docs can found at link
It&amp;rsquo;s definitely better than DIY parsing sys.argv.
An example This is an examples that shows the most important features. It even prints nifty help message like this
import argparse parser = argparse.ArgumentParser() subparsers = parser.add_subparsers(help=&amp;#39;Super duper commands&amp;#39;,dest=&amp;#39;command&amp;#39;) parser.add_argument(&amp;#39;--verbose&amp;#39;, help=&amp;#39;be more chatty&amp;#39;) parser_batch = subparsers.</description>
            <content type="html"><![CDATA[<p><code>argparse</code> is a great library to write CLI application with clean consistent interface. The main features are</p>
<ul>
<li>Sub-parsers</li>
<li>Positional arguments</li>
<li>Options arguments</li>
</ul>
<p>Full docs can found at <a href="https://docs.python.org/3/library/argparse.html">link</a></p>
<p>It&rsquo;s definitely better than DIY parsing <code>sys.argv</code>.</p>
<h1 id="an-example">An example</h1>
<p>This is an examples that shows the most important features. It even prints nifty help message like this</p>
<p><img src="/argparse.png" alt="Example image"></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">import</span> argparse

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(help=<span style="color:#0ff;font-weight:bold">&#39;Super duper  commands&#39;</span>,dest=<span style="color:#0ff;font-weight:bold">&#39;command&#39;</span>)

parser.add_argument(<span style="color:#0ff;font-weight:bold">&#39;--verbose&#39;</span>, help=<span style="color:#0ff;font-weight:bold">&#39;be more chatty&#39;</span>)

parser_batch = subparsers.add_parser(<span style="color:#0ff;font-weight:bold">&#39;batch&#39;</span>, help=<span style="color:#0ff;font-weight:bold">&#39;Run in Batch mode&#39;</span>)
parser_batch.add_argument(<span style="color:#0ff;font-weight:bold">&#39;input_file&#39;</span>, help=<span style="color:#0ff;font-weight:bold">&#39;input file&#39;</span>)

parser_gui = subparsers.add_parser(<span style="color:#0ff;font-weight:bold">&#39;gui&#39;</span>, help=<span style="color:#0ff;font-weight:bold">&#39;Run in GUI mode&#39;</span>)

args = parser.parse_args()
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python package of the week: Lark</title>
            <link>/posts/2022/02/python-package-of-the-week-lark/</link>
            <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/02/python-package-of-the-week-lark/</guid>
            <description>Do you know the ancient proverb that says &amp;ldquo;If you want to really understand something, parse or generate it!&amp;rdquo;. Just kidding :) I made that up. But doesn&amp;rsquo;t make less true through.
This post briefly explains BNF and how Lark uses it to build AST(Abstract syntax tree) which is basically the biggest computer science-y part of the job.
BNF BNF is used to define formal specifications of context-free grammars using Production Rules and Terminal symbols.</description>
            <content type="html"><![CDATA[<p>Do you know the ancient proverb that says &ldquo;If you want to really understand something, parse or generate it!&rdquo;.
Just kidding :) I made that up. But doesn&rsquo;t make less true through.</p>
<p>This post <em>briefly</em> explains BNF and how Lark uses it to build AST(Abstract syntax tree) which is basically the biggest computer science-y part of the job.</p>
<h1 id="bnf">BNF</h1>
<p>BNF is used to define formal specifications of context-free grammars using <code>Production Rules</code> and <code>Terminal symbols</code>. In this example from wiki, <code>twelve</code> is a production rule to terminals <code>&quot;1&quot;</code> and <code>&quot;2&quot;</code></p>
<pre tabindex="0"><code>twelve                          = &quot;1&quot;, &quot;2&quot; ;
two hundred one                 = &quot;2&quot;, &quot;0&quot;, &quot;1&quot; ;
three hundred twelve            = &quot;3&quot;, twelve ;
twelve thousand two hundred one = twelve, two hundred one ;
</code></pre><p>Standards like 1800 use BNF heavily to define language syntax (semantics is decribed by natural language whenever needed). So, parsers know what&rsquo;s legal and what&rsquo;s not.</p>
<h1 id="lark">Lark</h1>
<p>Lark is a python library to parse text based on CFG(context-free grammars). I will just copy from <a href="https://github.com/lark-parser/lark">Lark docs</a>.</p>
<blockquote>
<p>What can it do?</p>
<p>Parse all context-free grammars, and handle any ambiguity gracefully</p>
<p>Build an annotated parse-tree automagically, no construction code required.</p>
<p>Provide first-rate performance in terms of both Big-O complexity and measured run-time (considering that this is Python ;)</p>
<p>Run on every Python interpreter (it&rsquo;s pure-python)</p>
<p>Generate a stand-alone parser (for LALR(1) grammars)</p>
</blockquote>
<p>The important part is that Lark parses context-free grammars which can be written in <a href="https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form">EBNF</a> and generates AST parse tree. Then Transformers can be written to shape the generated tree.</p>
<p>To use lark,  Lark needs the grammar and start symbol.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">from</span> lark <span style="color:#fff;font-weight:bold">import</span> Lark

GRAMMAR = <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;
</span><span style="color:#0ff;font-weight:bold">body: foobar [optional] | bar
</span><span style="color:#0ff;font-weight:bold">foobar: CNAME
</span><span style="color:#0ff;font-weight:bold">bar: &#34;fff&#34;
</span><span style="color:#0ff;font-weight:bold">optional: &#34;dd&#34;
</span><span style="color:#0ff;font-weight:bold">
</span><span style="color:#0ff;font-weight:bold"></span><span style="color:#0ff;font-weight:bold">%i</span><span style="color:#0ff;font-weight:bold">mport common.WS
</span><span style="color:#0ff;font-weight:bold"></span><span style="color:#0ff;font-weight:bold">%i</span><span style="color:#0ff;font-weight:bold">mport common.CNAME
</span><span style="color:#0ff;font-weight:bold"> </span><span style="color:#0ff;font-weight:bold">%i</span><span style="color:#0ff;font-weight:bold">gnore WS
</span><span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;</span>

code = <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;
</span><span style="color:#0ff;font-weight:bold">ggg
</span><span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;</span>
parser = Lark(GRAMMAR, start=<span style="color:#0ff;font-weight:bold">&#39;body&#39;</span>)
ast_tree = parser.parse(code)

<span style="color:#fff;font-weight:bold">print</span>(ast_tree.pretty())
<span style="color:#fff;font-weight:bold">print</span>(ast_tree)
</code></pre></div><p>In this example. i am using lark <code>CNAME</code> which is identifier as terminal for the rule <code>foobar</code>. When printing the AST tree, <code>CNAME</code> takes <code>ggg</code> as it is matched by the production rule.</p>
<pre tabindex="0"><code>body
  foobar	ggg

Tree('body', [Tree('foobar', [Token('CNAME', 'ggg')])])
</code></pre><h1 id="lark-grammar">Lark Grammar</h1>
<p>Lark grammar can be found at <a href="https://lark-parser.readthedocs.io/en/latest/grammar.html">docs</a>. Basically, it combines EBNF and regex to provide clean pythonic way to parse text</p>
<ul>
<li>rule</li>
<li>TERMINAL</li>
<li>&ldquo;string literal&rdquo; or /regexp literal/</li>
<li>(item item ..) - Group items</li>
<li>[item item ..] - Maybe. Same as (item item ..)?, but when maybe_placeholders=True, generates None if there is no match.</li>
<li>item? - Zero or one instances of item (”maybe”)</li>
<li>item* - Zero or more instances of item</li>
<li>item+ - One or more instances of item</li>
</ul>
<p>For example, This is more complicated production rule for SVA sequence with optional, grouping and literal strings.</p>
<pre tabindex="0"><code>sequence_port_item: ( attribute_instance )* [ &quot;local&quot; [ sequence_lvar_port_direction ] ] sequence_formal_type formal_port_identifier (variable_dimension)* [ &quot;=&quot; sequence_actual_arg ]
</code></pre><p>That&rsquo;s it. Happy Parsing!</p>
]]></content>
        </item>
        
        <item>
            <title>UVM Internals - How do p_sequencer and m_sequencer work?</title>
            <link>/posts/2022/02/uvm-internals-how-do-p_sequencer-and-m_sequencer-work/</link>
            <pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/02/uvm-internals-how-do-p_sequencer-and-m_sequencer-work/</guid>
            <description>One of the most iconic DV interview questions is &amp;ldquo;What are m_sequencer and p_sequencer?&amp;rdquo;. So, A good way to impress the interviewer is to answer the question by explaining how they work :)
What are p_sequencer and m_sequencer? p_sequencer is declared using uvm_declare_p_sequencer in the sequence to have access to the correct specialization of uvm_sequencer.
class my_sequence extends uvm_sequence; ... ... `uvm_declare_p_sequencer(ubus_slave_sequencer) Which expands to the following where $cast will only work if m_sequencer can be cast to p_sequencer(ie cast from base class to parameterized derived class)</description>
            <content type="html"><![CDATA[<p>One of the most iconic DV interview questions is &ldquo;What are m_sequencer and p_sequencer?&rdquo;. So, A good way to impress the interviewer is to answer the question by explaining how they work :)</p>
<h1 id="what-are-p_sequencer-and-m_sequencer">What are p_sequencer and m_sequencer?</h1>
<p><code>p_sequencer</code> is declared using <code>uvm_declare_p_sequencer</code> in the sequence to have access to the correct specialization of <code>uvm_sequencer</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class my_sequence extends uvm_sequence;
...
...
`uvm_declare_p_sequencer(ubus_slave_sequencer)
</code></pre></div><p>Which expands to the following where <code>$cast</code> will only work if <code>m_sequencer</code> can be cast to <code>p_sequencer</code>(ie cast from base class to parameterized derived class)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#0f0;font-weight:bold">`define uvm_declare_p_sequencer(SEQUENCER) \
</span><span style="color:#0f0;font-weight:bold">  SEQUENCER p_sequencer;\
</span><span style="color:#0f0;font-weight:bold">  virtual function void m_set_p_sequencer();\
</span><span style="color:#0f0;font-weight:bold">    super.m_set_p_sequencer(); \
</span><span style="color:#0f0;font-weight:bold">    if( !$cast(p_sequencer, m_sequencer)) \
</span><span style="color:#0f0;font-weight:bold">        `uvm_fatal(&#34;DCLPSQ&#34;, \
</span><span style="color:#0f0;font-weight:bold">        $sformatf(&#34;%m %s Error casting p_sequencer, please verify that this sequence/sequence item is intended to execute on this type of sequencer&#34;, get_full_name())) \
</span><span style="color:#0f0;font-weight:bold">  endfunction
</span></code></pre></div><p>For <code>m_sequencer</code>, It is defined in <code>uvm_sequence_item</code> (The base class of uvm_sequence).</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class uvm_sequence_item extends uvm_transaction;
  ...
  ...
  protected  uvm_sequencer_base m_sequencer;
</code></pre></div><h1 id="who-sets--m_sequencer-and-p_sequencer">who sets  m_sequencer and p_sequencer?</h1>
<p>I will start with <code>p_sequencer</code> and work my way backward and <code>m_sequencer</code> will magically show up.</p>
<p><code>m_set_p_sequencer</code> is called from <code>set_sequencer</code> in <code>uvm_sequence_item.svh</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  virtual <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> set_sequencer(uvm_sequencer_base sequencer);
    m_sequencer = sequencer;
    m_set_p_sequencer();
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p>see?! <code>m_sequencer</code> showed up :)</p>
<p><code>set_sequencer</code> is called from <code>set_item_context</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> set_item_context(uvm_sequence_base  parent_seq,
                                 uvm_sequencer_base sequencer = null);
     set_sequencer(sequencer);
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p><code>set_item_context</code> is called from <code>start()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    virtual <span style="color:#fff;font-weight:bold">task</span> start (uvm_sequencer_base sequencer,
                        uvm_sequence_base parent_sequence = null,
                        <span style="color:#fff;font-weight:bold">int</span> this_priority = -<span style="color:#ff0;font-weight:bold">1</span>,
                        <span style="color:#fff;font-weight:bold">bit</span> call_pre_post = <span style="color:#ff0;font-weight:bold">1</span>);

      set_item_context(parent_sequence, sequencer);
</code></pre></div><p>and here we are,At the good old sequence start.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">m_myseq.start(m_myenv.m_seqr);
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM Internals - Transaction Recording Infrastructure</title>
            <link>/posts/2022/02/uvm-internals-transaction-recording-infrastructure/</link>
            <pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/02/uvm-internals-transaction-recording-infrastructure/</guid>
            <description>UVM has a builtin transaction recorder as part of uvm_transaciton. This is deepdive into how it works.
How to use transaction recorder First, The recording should be enabled. In this example, this is part of sequence body where enable_recording is called with stream name.
pkt = apb_rw::type_id::create(&amp;#34;apb_rw&amp;#34;); pkt.enable_recording(&amp;#34;packet_stream&amp;#34;); start_item(pkt); pkt.randomize(); finish_item(pkt); Next, run_phase can call accpet_tr, begin_tr and end_tr to log the transactions in the stream.
task run_phase(uvm_phase phase); forever begin seq_item_port.</description>
            <content type="html"><![CDATA[<p>UVM has a builtin transaction recorder as part of <code>uvm_transaciton</code>. This is deepdive into how it works.</p>
<h1 id="how-to-use-transaction-recorder">How to use transaction recorder</h1>
<p>First, The recording should be enabled. In this example, this is part of sequence body where <code>enable_recording</code> is called with <code>stream name</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    pkt = apb_rw::type_id::create(<span style="color:#0ff;font-weight:bold">&#34;apb_rw&#34;</span>);
    pkt.enable_recording(<span style="color:#0ff;font-weight:bold">&#34;packet_stream&#34;</span>);
    start_item(pkt);
    pkt.randomize();
    finish_item(pkt);
</code></pre></div><p>Next, <code>run_phase</code> can call <code>accpet_tr</code>, <code>begin_tr</code> and <code>end_tr</code> to log the transactions in the stream.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">task</span> run_phase(uvm_phase phase);
    <span style="color:#fff;font-weight:bold">forever</span> <span style="color:#fff;font-weight:bold">begin</span>
      seq_item_port.get_next_item(pkt);

      accept_tr(pkt);

      begin_tr(pkt);

      <span style="color:#007f7f">// driver signals
</span><span style="color:#007f7f"></span>      <span style="color:#007f7f">//...
</span><span style="color:#007f7f"></span>
      end_tr(pkt);


      seq_item_port.item_done();
    <span style="color:#fff;font-weight:bold">end</span>
  <span style="color:#fff;font-weight:bold">endtask</span>
</code></pre></div><p>The output is file <code>tr_db.log</code> with streams and transactions.</p>
<pre tabindex="0"><code>  CREATE_STREAM @0 {NAME:packet_stream T:TVM SCOPE: STREAM:1}
BEGIN @0 {TXH:2 STREAM:1 NAME:apb_rw TIME=0  TYPE=&quot;Begin_End, Link&quot; LABEL:&quot;&quot; DESC=&quot;&quot;}
  SET_ATTR @0 {TXH:2 NAME:accept_time VALUE:0   RADIX:UVM_TIME BITS=64}
END @0 {TXH:2 TIME=0}
FREE @0 {TXH:2}
BEGIN @0 {TXH:3 STREAM:1 NAME:apb_rw TIME=0  TYPE=&quot;Begin_No_Parent, Link&quot; LABEL:&quot;&quot; DESC=&quot;&quot;}
  SET_ATTR @0 {TXH:3 NAME:accept_time VALUE:0   RADIX:UVM_TIME BITS=64}
END @0 {TXH:3 TIME=0}
FREE @0 {TXH:3}
</code></pre><h1 id="uvm_component-infrastructure">uvm_component infrastructure</h1>
<p>Transaction recording methods are called in the components. They delegate the calls to <code>uvm_transaction</code>.
For example, <code>uvm_component::accept_tr</code>  calls <code>tr.accept_tr</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> uvm_component::accept_tr (uvm_transaction tr,
                                        <span style="color:#fff;font-weight:bold">time</span> accept_time=<span style="color:#ff0;font-weight:bold">0</span>);
  uvm_event e;
  tr.accept_tr(accept_time);
  do_accept_tr(tr);
  e = event_pool.get(<span style="color:#0ff;font-weight:bold">&#34;accept_tr&#34;</span>);
  <span style="color:#fff;font-weight:bold">if</span>(e!=null)
    e.trigger();
<span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p>And <code>uvm_component::begin_tr</code> calls <code>tr.begin_tr</code> or  <code>tr.begin_child_tr</code> depending the type of transaction.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  tr_h = <span style="color:#ff0;font-weight:bold">0</span>;
  <span style="color:#fff;font-weight:bold">if</span>(has_parent)
    link_tr_h = tr.begin_child_tr(begin_time, parent_handle);
  <span style="color:#fff;font-weight:bold">else</span>
    link_tr_h = tr.begin_tr(begin_time);
</code></pre></div><h1 id="uvm_transaction-infrastructure">uvm_transaction infrastructure</h1>
<p>In <code>uvm_transaction</code>, <code>enable_recording</code>  does the following:</p>
<ul>
<li>picks up the <code>uvm_default_recorder</code> if recorder is not passed.</li>
<li>creates stream in <code>m_recorder</code></li>
<li>sets <code>record_enable</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">if</span> (recorder == null)
    recorder = uvm_default_recorder;
  m_recorder = recorder;

  this.stream_handle = m_recorder.create_stream(stream, <span style="color:#0ff;font-weight:bold">&#34;TVM&#34;</span>, scope);
  record_enable = <span style="color:#ff0;font-weight:bold">1</span>;
</code></pre></div><p>And for <code>begin_tr</code> and other function, uvm_transaction delegates <code>uvm_recoder</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    <span style="color:#fff;font-weight:bold">if</span>(!has_parent)
      tr_handle = m_recorder.begin_tr(<span style="color:#0ff;font-weight:bold">&#34;Begin_No_Parent, Link&#34;</span>,
                    stream_handle, get_type_name(),<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>,this.begin_time);
    <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">begin</span>
      tr_handle = m_recorder.begin_tr(<span style="color:#0ff;font-weight:bold">&#34;Begin_End, Link&#34;</span>,
                    stream_handle, get_type_name(),<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>,this.begin_time);
      <span style="color:#fff;font-weight:bold">if</span>(parent_handle)
        m_recorder.link_tr(parent_handle, tr_handle, <span style="color:#0ff;font-weight:bold">&#34;child&#34;</span>);
    <span style="color:#fff;font-weight:bold">end</span>
</code></pre></div><h1 id="uvm_recorder-infrastructure">uvm_recorder infrastructure</h1>
<p>Finally, The last doll of this programmatic &ldquo;Russian dolls&rdquo; <code>uvm_recorder</code>!</p>
<p><code>uvm_default_recorder</code> is a singleton defined in <code>uvm_object_globals.svh</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">uvm_recorder uvm_default_recorder = new();
</code></pre></div><p>And <code>uvm_recoder</code> calls <code>$fdisplay</code> to print to log file.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  virtual <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">integer</span> begin_tr(<span style="color:#fff;font-weight:bold">string</span> txtype,
                                     <span style="color:#fff;font-weight:bold">integer</span> stream,
                                     <span style="color:#fff;font-weight:bold">string</span> nm,
                                     <span style="color:#fff;font-weight:bold">string</span> label=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>,
                                     <span style="color:#fff;font-weight:bold">string</span> desc=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>,
                                     <span style="color:#fff;font-weight:bold">time</span> begin_time=<span style="color:#ff0;font-weight:bold">0</span>);
    <span style="color:#fff;font-weight:bold">if</span> (open_file()) <span style="color:#fff;font-weight:bold">begin</span>
      m_handles[++handle] = <span style="color:#ff0;font-weight:bold">1</span>;
      <span style="color:#fff;font-weight:bold">$fdisplay</span>(file,<span style="color:#0ff;font-weight:bold">&#34;BEGIN @%0t {TXH:%0d STREAM:%0d NAME:%s TIME=%0t  TYPE=</span><span style="color:#0ff;font-weight:bold">\&#34;</span><span style="color:#0ff;font-weight:bold">%0s</span><span style="color:#0ff;font-weight:bold">\&#34;</span><span style="color:#0ff;font-weight:bold"> LABEL:</span><span style="color:#0ff;font-weight:bold">\&#34;</span><span style="color:#0ff;font-weight:bold">%0s</span><span style="color:#0ff;font-weight:bold">\&#34;</span><span style="color:#0ff;font-weight:bold"> DESC=</span><span style="color:#0ff;font-weight:bold">\&#34;</span><span style="color:#0ff;font-weight:bold">%0s</span><span style="color:#0ff;font-weight:bold">\&#34;</span><span style="color:#0ff;font-weight:bold">}&#34;</span>,
        <span style="color:#fff;font-weight:bold">$time</span>,handle,stream,nm,begin_time,txtype,label,desc);
      <span style="color:#fff;font-weight:bold">return</span> handle;
    <span style="color:#fff;font-weight:bold">end</span>
    <span style="color:#fff;font-weight:bold">return</span> -<span style="color:#ff0;font-weight:bold">1</span>;
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM Internals - Register model callbacks</title>
            <link>/posts/2022/01/uvm-internals-register-model-callbacks/</link>
            <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/01/uvm-internals-register-model-callbacks/</guid>
            <description>UVM register model defines several callback hooks. This is deepdive into how it works.
pre_read example First, we need to define callback class extending uvm_reg_cbs. I am using pre_read in this case.
class mycb extends uvm_reg_cbs; `uvm_object_utils(mycb) function new(string name=&amp;#34;&amp;#34;); super.new(name); endfunction virtual task pre_read(uvm_reg_item rw); $display(&amp;#34;cb called&amp;#34;); endtask endclass Then register the callback with required uvm register(not confusing at all!).
mycb m_mycb; virtual function void build_phase(uvm_phase phase); ... m_mycb = mycb::type_id::create(&amp;#34;m_mycb&amp;#34;); endfunction virtual function void connect_phase(uvm_phase phase); ,,, uvm_callbacks #(uvm_reg,mycb)::add( m_myblock_ral.</description>
            <content type="html"><![CDATA[<p>UVM register model defines several callback hooks. This is deepdive into how it works.</p>
<h1 id="pre_read-example">pre_read example</h1>
<p>First, we need to define callback class extending <code>uvm_reg_cbs</code>. I am using <code>pre_read</code> in this case.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class mycb extends uvm_reg_cbs;
  `uvm_object_utils(mycb)
  <span style="color:#fff;font-weight:bold">function</span> new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>);
    super.new(name);
  <span style="color:#fff;font-weight:bold">endfunction</span>

  virtual <span style="color:#fff;font-weight:bold">task</span> pre_read(uvm_reg_item rw);
    <span style="color:#fff;font-weight:bold">$display</span>(<span style="color:#0ff;font-weight:bold">&#34;cb called&#34;</span>);
  <span style="color:#fff;font-weight:bold">endtask</span>
endclass
</code></pre></div><p>Then register the callback with required uvm register(not confusing at all!).</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  mycb m_mycb;

  virtual <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> build_phase(uvm_phase phase);
    ...
    m_mycb = mycb::type_id::create(<span style="color:#0ff;font-weight:bold">&#34;m_mycb&#34;</span>);
  <span style="color:#fff;font-weight:bold">endfunction</span>

  virtual <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> connect_phase(uvm_phase phase);
    ,,,
    uvm_callbacks #(uvm_reg,mycb)::add( m_myblock_ral.m_myreg,m_mycb);
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><h1 id="calling-callback">Calling callback</h1>
<p>So, what happens when we call <code>m_myreg.read()</code>?</p>
<p><code>read</code> is defined in <code>uvm_reg.svh</code> which calls <code>XreadX</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">task</span> uvm_reg::read(<span style="color:#fff;font-weight:bold">output</span> uvm_status_e      status,
                   <span style="color:#fff;font-weight:bold">output</span> uvm_reg_data_t    value,
                   <span style="color:#fff;font-weight:bold">input</span>  uvm_path_e        path = UVM_DEFAULT_PATH,
                   <span style="color:#fff;font-weight:bold">input</span>  uvm_reg_map       map = null,
                   <span style="color:#fff;font-weight:bold">input</span>  uvm_sequence_base parent = null,
                   <span style="color:#fff;font-weight:bold">input</span>  <span style="color:#fff;font-weight:bold">int</span>               prior = -<span style="color:#ff0;font-weight:bold">1</span>,
                   <span style="color:#fff;font-weight:bold">input</span>  uvm_object        extension = null,
                   <span style="color:#fff;font-weight:bold">input</span>  <span style="color:#fff;font-weight:bold">string</span>            fname = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>,
                   <span style="color:#fff;font-weight:bold">input</span>  <span style="color:#fff;font-weight:bold">int</span>               lineno = <span style="color:#ff0;font-weight:bold">0</span>);
   XatomicX(<span style="color:#ff0;font-weight:bold">1</span>);
   XreadX(status, value, path, map, parent, prior, extension, fname, lineno);
   XatomicX(<span style="color:#ff0;font-weight:bold">0</span>);
<span style="color:#fff;font-weight:bold">endtask</span>: read
</code></pre></div><p><code>XreadX</code> calls <code>do_read</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">   do_read(rw);

   status = rw.status;
   value = rw.value[<span style="color:#ff0;font-weight:bold">0</span>];

<span style="color:#fff;font-weight:bold">endtask</span>: XreadX

</code></pre></div><p>Voila! <code>do_read</code> loops over callbacks from <code>cbs</code> and calls <code>pre_read</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">   <span style="color:#fff;font-weight:bold">for</span> (uvm_reg_cbs cb=cbs.first(); cb!=null; cb=cbs.next())
      cb.pre_read(rw);

</code></pre></div><h1 id="registering-callback">Registering callback</h1>
<h2 id="uvm_reg-callback-registration">uvm_reg callback registration</h2>
<p>Now, we know where <code>pre_read</code> is called, who populates <code>cbs</code>?</p>
<p>from <code>uvm_reg.svh</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">uvm_reg_cb_iter  cbs = new(this)
</code></pre></div><p>And</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">typedef</span> uvm_callback_iter#(uvm_reg, uvm_reg_cbs) uvm_reg_cb_iter;
</code></pre></div><p>And <code>uvm_callback_iter</code> is defined as an iterator wrapper for <code>uvm_callbacks</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">   <span style="color:#fff;font-weight:bold">function</span> CB first();
      m_cb = uvm_callbacks#(T,CB)::get_first(m_i, m_obj);
      <span style="color:#fff;font-weight:bold">return</span> m_cb;
   <span style="color:#fff;font-weight:bold">endfunction</span>

</code></pre></div><p>Weird! Let&rsquo;s circle back later.</p>
<p>For now, let&rsquo;s look at <code>uvm_reg.svh</code>, where <code>uvm_register_cb</code> macro is used</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">`uvm_register_cb(uvm_reg, uvm_reg_cbs)
</code></pre></div><p>Which leads to generic UVM callback infrastructure.In <code>uvm_callback_defines.svh</code>,</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#0f0;font-weight:bold">`define uvm_register_cb(T,CB) \
</span><span style="color:#0f0;font-weight:bold">  static local bit m_register_cb_``CB = uvm_callbacks#(T,CB)::m_register_pair(`&#34;T`&#34;,`&#34;CB`&#34;);
</span></code></pre></div><p>Which expands to</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  static local <span style="color:#fff;font-weight:bold">bit</span> m_register_cb_uvm_reg_cbs = uvm_callbacks#(uvm_reg,uvm_reg_cbs)::m_register_pair(<span style="color:#0ff;font-weight:bold">&#34;uvm_reg&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;uvm_reg_cbs&#34;</span>);
</code></pre></div><p><code>m_register_pair</code> is static function that sets <code>m_registered</code> to 1 and stored strings for both classes</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  static <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">bit</span> m_register_pair(<span style="color:#fff;font-weight:bold">string</span> tname=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, cbname=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>);
    this_type inst = get();

    m_typename = tname;
    super_type::m_typename = tname;
    m_typeid.typename = tname;

    m_cb_typename = cbname;
    m_cb_typeid.typename = cbname;

    inst.m_registered = <span style="color:#ff0;font-weight:bold">1</span>;

    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">1</span>;
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><h2 id="uvm-generic--callback-infrastructure">UVM generic  callback infrastructure</h2>
<p>At this point, we covered things <code>uvm_reg</code> does to register callback. But How does this work with <code>::add</code>?</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    uvm_callbacks #(uvm_reg,mycb)::add( m_myblock_ral.m_myreg,m_mycb);
</code></pre></div><p>Looking at <code>uvm_callback.svh</code>, <code>add</code> is static and there is a different one for each of <code>uvm_callback</code> specializations.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  static <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> add(T obj, uvm_callback cb, uvm_apprepend ordering=UVM_APPEND);
</code></pre></div><p>First it checks that object and cb are registered</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    <span style="color:#fff;font-weight:bold">if</span> (!m_base_inst.check_registration(obj,cb)) <span style="color:#fff;font-weight:bold">begin</span>

</code></pre></div><p><code>check_registration</code> should return 1 as <code>uvm_reg</code> used <code>uvm_register_cb</code> to register the callback.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">bit</span> check_registration(uvm_object obj, uvm_callback cb);
    this_type st, dt;

    <span style="color:#fff;font-weight:bold">if</span> (m_is_registered(obj,cb))
      <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">1</span>;

    <span style="color:#007f7f">// Need to look at all possible T/CB pairs of this type
</span><span style="color:#007f7f"></span>    foreach(m_this_type[i])
      <span style="color:#fff;font-weight:bold">if</span>(m_b_inst != m_this_type[i] &amp;&amp; m_this_type[i].m_is_registered(obj,cb))
        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">1</span>;

    <span style="color:#fff;font-weight:bold">if</span>(obj == null) <span style="color:#fff;font-weight:bold">begin</span>
      foreach(m_derived_types[i]) <span style="color:#fff;font-weight:bold">begin</span>
        dt = uvm_typeid_base::typeid_map[m_derived_types[i] ];
        <span style="color:#fff;font-weight:bold">if</span>(dt != null &amp;&amp; dt.check_registration(null,cb))
          <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">1</span>;
      <span style="color:#fff;font-weight:bold">end</span>
    <span style="color:#fff;font-weight:bold">end</span>

    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
</code></pre></div><p>Then, It looks up the callbacks for that type(uvm_reg)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">      q = m_base_inst.m_pool.get(obj);

      <span style="color:#fff;font-weight:bold">if</span> (q==null) <span style="color:#fff;font-weight:bold">begin</span>
        q=new;
        m_base_inst.m_pool.add(obj,q);
      <span style="color:#fff;font-weight:bold">end</span>

</code></pre></div><p>Then it pushes that cb to the queue, if not registered already</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">        <span style="color:#fff;font-weight:bold">void</span>&#39;(m_cb_find_name(q, cb.get_name(), {<span style="color:#0ff;font-weight:bold">&#34;object instance &#34;</span>, obj.get_full_name()}));
        <span style="color:#fff;font-weight:bold">if</span>(ordering == UVM_APPEND)
          q.push_back(cb);
        <span style="color:#fff;font-weight:bold">else</span>
          q.push_front(cb);
      <span style="color:#fff;font-weight:bold">end</span>
</code></pre></div><p>Wait! where is <code>cbs</code> populated and what is <code>uvm_callbacks</code>?</p>
<p>Actually, The queue <code>q</code> is coming from <code>m_base_inst</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">      q = m_base_inst.m_pool.get(obj);
</code></pre></div><p>which is of type <code>uvm_callbacks#(T,uvm_callback)</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">static uvm_callbacks#(T,uvm_callback) m_base_inst;
</code></pre></div><p>To sum up, <code>q</code> is inside <code>uvm_callbacks</code>. <code>uvm_callbacks_iterator</code> works as wrapper for <code>uvm_callbacks</code>. <code>cbs</code> type is <code>uvm_callback_iterator</code></p>
]]></content>
        </item>
        
        <item>
            <title>Python bits - PEP0380 Delegating to a Subgenerator - yield from</title>
            <link>/posts/2022/01/python-bits-pep0380-delegating-to-a-subgenerator-yield-from/</link>
            <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/01/python-bits-pep0380-delegating-to-a-subgenerator-yield-from/</guid>
            <description>This post is about PEP-0380
 A syntax is proposed for a generator to delegate part of its operations to another generator. This allows a section of code containing &amp;lsquo;yield&amp;rsquo; to be factored out and placed in another generator. Additionally, the subgenerator is allowed to return with a value, and the value is made available to the delegating generator.
 Basically, It&amp;rsquo;s a way to chain generators(generator is routine that yield to immediate caller.</description>
            <content type="html"><![CDATA[<p>This post is about <a href="https://www.python.org/dev/peps/pep-0380/">PEP-0380</a></p>
<blockquote>
<p>A syntax is proposed for a generator to delegate part of its operations to another generator. This allows a section of code containing &lsquo;yield&rsquo; to be factored out and placed in another generator. Additionally, the subgenerator is allowed to return with a value, and the value is made available to the delegating generator.</p>
</blockquote>
<p>Basically, It&rsquo;s a way to chain generators(generator is routine that <code>yield</code> to immediate caller. with <code>yield from</code>),And anthor iterator/generator can be used to return a value.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">yield from</span> &lt;expr&gt;
</code></pre></div><p>from <a href="https://www.python.org/dev/peps/pep-0380/">PEP-0380</a></p>
<blockquote>
<p>where <!-- raw HTML omitted --> is an expression evaluating to an iterable, from which an iterator is extracted. The iterator is run to exhaustion, during which time it yields and receives values directly to or from the caller of the generator containing the yield from expression (the &ldquo;delegating generator&rdquo;).</p>
<p>Furthermore, when the iterator is another generator, the subgenerator is allowed to execute a return statement with a value, and that value becomes the value of the yield from expression.</p>
</blockquote>
<p>Here is useful example for &ldquo;yield from&rdquo; where I used <code>yield from</code> to do DFS over a tree. <code>dfs_internal</code> is generator that recursively calls itself and returning one child at a time.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> __iter__(self):
        <span style="color:#fff;font-weight:bold">def</span> dfs_internal(node):
            <span style="color:#fff;font-weight:bold">yield</span> node
            <span style="color:#fff;font-weight:bold">for</span> child in node.children:
                <span style="color:#fff;font-weight:bold">yield from</span> dfs_internal(child)
        <span style="color:#fff;font-weight:bold">yield from</span> dfs_internal(self.root)

</code></pre></div><p>Here is the <code>yield from</code> is described</p>
<blockquote>
<p>The full semantics of the yield from expression can be described in terms of the generator protocol as follows:</p>
<p>Any values that the iterator yields are passed directly to the caller.</p>
<p>Any values sent to the delegating generator using send() are passed directly to the iterator. If the sent value is None, the iterator&rsquo;s <strong>next</strong>() method is called. If the sent value is not None, the iterator&rsquo;s send() method is called. If the call raises StopIteration, the delegating generator is resumed. Any other exception is propagated to the delegating generator.</p>
<p>Exceptions other than GeneratorExit thrown into the delegating generator are passed to the throw() method of the iterator. If the call raises StopIteration, the delegating generator is resumed. Any other exception is propagated to the delegating generator.</p>
<p>If a GeneratorExit exception is thrown into the delegating generator, or the close() method of the delegating generator is called, then the close() method of the iterator is called if it has one. If this call results in an exception, it is propagated to the delegating generator. Otherwise, GeneratorExit is raised in the delegating generator.</p>
<p>The value of the yield from expression is the first argument to the StopIteration exception raised by the iterator when it terminates.</p>
<p>return expr in a generator causes StopIteration(expr) to be raised upon exit from the generator.</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>VIM for fun and profit</title>
            <link>/posts/2022/01/vim-for-fun-and-profit/</link>
            <pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/01/vim-for-fun-and-profit/</guid>
            <description>Not to start a editor war or anything, but VIM is and always will be the best editor (emacs are vscode are okey).
I used different setups (.vimrc and plugins) over the years but for the last couple of years i found cool a setup that i like. Here is breakdown of some useful plugins and VIM built-in features that i use every day.
windows vs buffers vs tabs Probably everyone using vim used these feature in a way or another.</description>
            <content type="html"><![CDATA[<p>Not to start a editor war or anything, but VIM is and always will be the best editor (emacs are vscode are okey).</p>
<p>I used different setups (<code>.vimrc</code> and plugins) over the years but for the last couple of years i found cool a setup that i like. Here is breakdown of some useful plugins and VIM built-in features that i use every day.</p>
<p><img src="/vim.png" alt="Example image"></p>
<h1 id="windows-vs-buffers-vs-tabs">windows vs buffers vs tabs</h1>
<p>Probably everyone using vim used these feature in a way or another.</p>
<p>From vim docs:</p>
<blockquote>
<p>Summary:</p>
<p>A buffer is the in-memory text of a file.</p>
<p>A window is a viewport on a buffer.</p>
<p>A tab page is a collection of windows.</p>
<p>A window is a viewport onto a buffer.  You can use multiple windows on one
buffer, or several windows on different buffers.</p>
<p>A buffer is a file loaded into memory for editing.  The original file remains
unchanged until you write the buffer to the file.</p>
</blockquote>
<h2 id="buffers-cheat-sheet">Buffers cheat sheet</h2>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim">:e &lt;FILE&gt;<span style="color:#f00">
</span><span style="color:#f00"></span>:buffers<span style="color:#f00">
</span><span style="color:#f00"></span>:buffer &lt;n&gt;<span style="color:#f00">
</span></code></pre></div><h2 id="widows-cheat-sheet">Widows cheat sheet</h2>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim">open windows  &gt;&gt; :split<span style="color:#f00">
</span><span style="color:#f00"></span>open vertical &gt;&gt; :vsplit<span style="color:#f00">
</span><span style="color:#f00"></span>close window  &gt;&gt; :q<span style="color:#f00">
</span><span style="color:#f00"></span>&lt;CTRL-W&gt; Left<span style="color:#f00">
</span><span style="color:#f00"></span>&lt;CTRL-W&gt; Right<span style="color:#f00">
</span><span style="color:#f00"></span>&lt;CTRL-W&gt; Up<span style="color:#f00">
</span><span style="color:#f00"></span>&lt;CTRL-W&gt; Down<span style="color:#f00">
</span></code></pre></div><h2 id="tabs-cheat-sheet">Tabs cheat sheet</h2>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim">:tabclose<span style="color:#f00">
</span><span style="color:#f00"></span>:tabnew<span style="color:#f00">
</span><span style="color:#f00"></span>:tabnext<span style="color:#f00">
</span><span style="color:#f00"></span>:tabprev<span style="color:#f00">
</span><span style="color:#f00"></span>&lt;n&gt; g t<span style="color:#f00">
</span></code></pre></div><h1 id="plugins">plugins</h1>
<h2 id="vundle-vim-plugin-manager">Vundle vim plugin manager</h2>
<p><code>Vundle</code> downloads plugins from github with relative path. For example,</p>
<pre tabindex="0"><code class="language-vsim" data-lang="vsim">Plugin 'vim-airline/vim-airline'
</code></pre><p>To install all plugins</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim">:PluginInstall<span style="color:#f00">
</span></code></pre></div><h2 id="list-of-important-plugins">list of important plugins</h2>
<ul>
<li>vim-airline</li>
<li>nerdtree</li>
<li>buffergator (Move around buffers)</li>
<li>fzf</li>
</ul>
<h2 id="fzf-important-commands">fzf important commands</h2>
<p>To search for files</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim">:Files<span style="color:#f00">
</span></code></pre></div><p>To search for text</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim">:Rg &lt;TEXT&gt;<span style="color:#f00">
</span></code></pre></div><h1 id="sample-vimrc">Sample .vimrc</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim">set nocompatible              <span style="color:#007f7f">&#34; be iMproved, required</span><span style="color:#f00">
</span><span style="color:#f00"></span>filetype off                  <span style="color:#007f7f">&#34; required</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34; Vundle</span><span style="color:#f00">
</span><span style="color:#f00"></span>set rtp+=~<span style="color:#0ff;font-weight:bold">/.vim/</span>bundle/Vundle.vim<span style="color:#f00">
</span><span style="color:#f00"></span>call vundle#begin()<span style="color:#f00">
</span><span style="color:#f00"></span>Plugin <span style="color:#0ff;font-weight:bold">&#39;VundleVim/Vundle.vim&#39;</span><span style="color:#f00">
</span><span style="color:#f00">
</span><span style="color:#f00"></span>Plugin <span style="color:#0ff;font-weight:bold">&#39;vim-airline/vim-airline&#39;</span><span style="color:#f00">
</span><span style="color:#f00"></span>Plugin <span style="color:#0ff;font-weight:bold">&#39;vim-airline/vim-airline-themes&#39;</span><span style="color:#f00">
</span><span style="color:#f00"></span>Plugin <span style="color:#0ff;font-weight:bold">&#39;preservim/nerdtree&#39;</span><span style="color:#f00">
</span><span style="color:#f00"></span>Plugin <span style="color:#0ff;font-weight:bold">&#39;jeetsukumaran/vim-buffergator&#39;</span><span style="color:#f00">
</span><span style="color:#f00"></span>Plugin <span style="color:#0ff;font-weight:bold">&#39;frazrepo/vim-rainbow&#39;</span><span style="color:#f00">
</span><span style="color:#f00"></span>Plugin <span style="color:#0ff;font-weight:bold">&#39;junegunn/fzf&#39;</span><span style="color:#f00">
</span><span style="color:#f00"></span>Plugin <span style="color:#0ff;font-weight:bold">&#39;junegunn/fzf.vim&#39;</span><span style="color:#f00">
</span><span style="color:#f00">
</span><span style="color:#f00"></span>call vundle#end()            <span style="color:#007f7f">&#34; required</span><span style="color:#f00">
</span><span style="color:#f00"></span>filetype plugin indent on    <span style="color:#007f7f">&#34; required</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34; Configuration</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34; Search</span><span style="color:#f00">
</span><span style="color:#f00"></span>set incsearch<span style="color:#f00">
</span><span style="color:#f00"></span>set hlsearch<span style="color:#f00">
</span><span style="color:#f00"></span>highlight       Search    ctermfg=LightYellow<span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34;set spell spelllang=en_us</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34; Indentation</span><span style="color:#f00">
</span><span style="color:#f00"></span>set autoindent<span style="color:#f00">
</span><span style="color:#f00"></span>set smartindent<span style="color:#f00">
</span><span style="color:#f00"></span>autocmd FileType make setlocal noexpandtab<span style="color:#f00">
</span><span style="color:#f00"></span>set title<span style="color:#f00">
</span><span style="color:#f00"></span>set cursorline<span style="color:#f00">
</span><span style="color:#f00"></span>set hidden<span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34; highlight Spaces at the end</span><span style="color:#f00">
</span><span style="color:#f00"></span>highlight ExtraWhitespace ctermbg=red guibg=red<span style="color:#f00">
</span><span style="color:#f00"></span>match ExtraWhitespace <span style="color:#0ff;font-weight:bold">/\s\+$/</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34; Shortcuts</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34; map CTRL-SPACE to enter exit</span><span style="color:#f00">
</span><span style="color:#f00"></span>nnoremap &lt;C-@&gt; i<span style="color:#f00">
</span><span style="color:#f00"></span>inoremap &lt;C-@&gt; &lt;Esc&gt;<span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34; map CTRl-/ to comment</span><span style="color:#f00">
</span><span style="color:#f00"></span>nnoremap &lt;C-_&gt; I<span style="color:#0ff;font-weight:bold">//</span>&lt;Esc&gt;A&lt;Esc&gt;<span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34; map leader \s for search and replace</span><span style="color:#f00">
</span><span style="color:#f00"></span>nnoremap &lt;Leader&gt;s :%s<span style="color:#0ff;font-weight:bold">/\&lt;&lt;C-r&gt;&lt;C-w&gt;\&gt;/</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34; Tabs</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34;nnoremap &lt;C-Left&gt; 	:tabprevious&lt;CR&gt;</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34;nnoremap &lt;C-Right&gt;   	:tabnext&lt;CR&gt;</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34;nnoremap &lt;C-t&gt;     	:tabnew&lt;CR&gt;</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34;inoremap &lt;C-S&gt; 	   &lt;Esc&gt;:tabprevious&lt;CR&gt;i</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34;inoremap &lt;C-tab&gt;   &lt;Esc&gt;:tabnext&lt;CR&gt;i</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34;inoremap &lt;C-t&gt;     &lt;Esc&gt;:tabnew&lt;CR&gt;</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34;&#34; Buffers and Splits</span><span style="color:#f00">
</span><span style="color:#f00"></span>map &lt;C-Right&gt; :bn&lt;cr&gt;<span style="color:#f00">
</span><span style="color:#f00"></span>map &lt;C-Left&gt; :bp&lt;cr&gt;<span style="color:#f00">
</span><span style="color:#f00"></span>map gd :bp\|bd #&lt;cr&gt;  <span style="color:#007f7f">&#34; move to open buffer when one is closed</span><span style="color:#f00">
</span><span style="color:#f00">
</span><span style="color:#f00"></span>nnoremap  &lt;A-Up&gt; :wincmd k&lt;CR&gt;<span style="color:#f00">
</span><span style="color:#f00"></span>nnoremap  &lt;A-Down&gt; :wincmd j&lt;CR&gt;<span style="color:#f00">
</span><span style="color:#f00"></span>nnoremap  &lt;A-Left&gt; :wincmd h&lt;CR&gt;<span style="color:#f00">
</span><span style="color:#f00"></span>nnoremap  &lt;A-Right&gt; :wincmd l&lt;CR&gt;<span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34; NerdTree</span><span style="color:#f00">
</span><span style="color:#f00"></span>nnoremap &lt;leader&gt;n :NERDTreeToggle&lt;CR&gt;<span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34;nnoremap &lt;C-n&gt; :NERDTree&lt;CR&gt;</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34;nnoremap &lt;C-t&gt; :NERDTreeToggle&lt;CR&gt;</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34;nnoremap &lt;C-f&gt; :NERDTreeFind&lt;CR&gt;</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34;nnoremap &lt;leader&gt;n :NERDTreeFocus&lt;CR&gt;</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34; Start NERDTree when Vim is started without file arguments.</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34;autocmd StdinReadPre * let s:std_in=1</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34;autocmd VimEnter * if argc() == 0 &amp;&amp; !exists(&#39;s:std_in&#39;) | NERDTree | endif</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34; Start NERDTree. If a file is specified, move the cursor to its window.</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34;autocmd StdinReadPre * let s:std_in=1</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34;autocmd VimEnter * NERDTree | if argc() &gt; 0 || exists(&#34;s:std_in&#34;) | wincmd p | endif</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34; Start NERDTree when Vim starts with a directory argument.</span><span style="color:#f00">
</span><span style="color:#f00"></span>autocmd StdinReadPre * <span style="color:#fff;font-weight:bold">let</span> s:std_in=<span style="color:#ff0;font-weight:bold">1</span><span style="color:#f00">
</span><span style="color:#f00"></span>autocmd VimEnter * <span style="color:#fff;font-weight:bold">if</span> argc() == <span style="color:#ff0;font-weight:bold">1</span> &amp;&amp; isdirectory(argv()[<span style="color:#ff0;font-weight:bold">0</span>]) &amp;&amp; !exists(<span style="color:#0ff;font-weight:bold">&#39;s:std_in&#39;</span>) |<span style="color:#f00">
</span><span style="color:#f00"></span>    \ execute <span style="color:#0ff;font-weight:bold">&#39;NERDTree&#39;</span> argv()[<span style="color:#ff0;font-weight:bold">0</span>] | wincmd p | enew | execute <span style="color:#0ff;font-weight:bold">&#39;cd &#39;</span>.argv()[<span style="color:#ff0;font-weight:bold">0</span>] | <span style="color:#fff;font-weight:bold">endif</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34; Open the existing NERDTree on each new tab.</span><span style="color:#f00">
</span><span style="color:#f00"></span>autocmd BufWinEnter * silent NERDTreeMirror<span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34; Exit Vim if NERDTree is the only window left.</span><span style="color:#f00">
</span><span style="color:#f00"></span>autocmd BufEnter * <span style="color:#fff;font-weight:bold">if</span> tabpagenr(<span style="color:#0ff;font-weight:bold">&#39;$&#39;</span>) == <span style="color:#ff0;font-weight:bold">1</span> &amp;&amp; winnr(<span style="color:#0ff;font-weight:bold">&#39;$&#39;</span>) == <span style="color:#ff0;font-weight:bold">1</span> &amp;&amp; exists(<span style="color:#0ff;font-weight:bold">&#39;b:NERDTree&#39;</span>) &amp;&amp; b:NERDTree.isTabTree() |<span style="color:#f00">
</span><span style="color:#f00"></span>    \ quit | <span style="color:#fff;font-weight:bold">endif</span><span style="color:#f00">
</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#fff;font-weight:bold">let</span> g:NERDTreeWinSize=<span style="color:#ff0;font-weight:bold">40</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34;&#34; airline</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#fff;font-weight:bold">let</span> g:airline#extensions#tabline#enabled = <span style="color:#ff0;font-weight:bold">1</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#fff;font-weight:bold">let</span> g:airline#extensions#tabline#left_sep = <span style="color:#0ff;font-weight:bold">&#39; &#39;</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#fff;font-weight:bold">let</span> g:airline#extensions#tabline#left_alt_sep = <span style="color:#0ff;font-weight:bold">&#39;|&#39;</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#fff;font-weight:bold">let</span> g:airline#extensions#tabline#fnamemod = <span style="color:#0ff;font-weight:bold">&#39;:t&#39;</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34;&#34; fzf.vim</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">&#34; Search for work under cursor</span><span style="color:#f00">
</span><span style="color:#f00"></span>nnoremap &lt;silent&gt; &lt;C-f&gt; :Rg &lt;C-R&gt;&lt;C-W&gt;&lt;CR&gt;<span style="color:#f00">
</span><span style="color:#f00"></span>autocmd VimEnter * noremap &lt;silent&gt; &lt;C-p&gt; :Files &lt;CR&gt;<span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34;&#34; Buffergator</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#fff;font-weight:bold">let</span> g:buffergator_viewport_split_policy = <span style="color:#0ff;font-weight:bold">&#34;R&#34;</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#fff;font-weight:bold">let</span> g:buffergator_autoupdate=<span style="color:#ff0;font-weight:bold">1</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#fff;font-weight:bold">let</span> g:buffergator_autodismiss_on_select=<span style="color:#ff0;font-weight:bold">0</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34;&#34; Rainbow Parentheses</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#fff;font-weight:bold">let</span> g:rainbow_active = <span style="color:#ff0;font-weight:bold">1</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#007f7f">
</span><span style="color:#007f7f">&#34;&#34; Indent Guides</span><span style="color:#f00">
</span><span style="color:#f00"></span><span style="color:#fff;font-weight:bold">let</span> g:indent_guides_enable_on_vim_startup = <span style="color:#ff0;font-weight:bold">1</span><span style="color:#f00">
</span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Cocotb Internals - Cocotb Startup VPI bootstrap to Python</title>
            <link>/posts/2022/01/cocotb-internals-cocotb-startup-vpi-bootstrap-to-python/</link>
            <pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/01/cocotb-internals-cocotb-startup-vpi-bootstrap-to-python/</guid>
            <description>This post complements an earlier post about test discovery. This should close the gap between simulation start and actual cocotb test call.
cocotb hello-world in 2 minutes I will write down the basic commands to run the adder example that ships with cocotb. I am assuming latest iverilog is installed already.
virtualenv .venv source .venv/bin/activate cd cocotb pip install . cd examples/adder/tests make You will probably see something like this</description>
            <content type="html"><![CDATA[<p>This post complements an earlier post about test discovery. This should close the gap between simulation start and actual cocotb test call.</p>
<h1 id="cocotb-hello-world-in-2-minutes">cocotb hello-world in 2 minutes</h1>
<p>I will write down the basic commands to run the <code>adder</code> example that ships with cocotb. I am assuming latest <code>iverilog</code> is installed already.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">virtualenv .venv
<span style="color:#fff;font-weight:bold">source</span> .venv/bin/activate

<span style="color:#fff;font-weight:bold">cd</span> cocotb
pip install .
<span style="color:#fff;font-weight:bold">cd</span> examples/adder/tests
make
</code></pre></div><p>You will probably see something like this</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">     0.00ns INFO     Seeding Python random module with <span style="color:#ff0;font-weight:bold">1642336775</span>
     0.00ns WARNING  Pytest not found, assertion rewriting will not occur
     0.00ns INFO     Found <span style="color:#fff;font-weight:bold">test</span> test_adder.adder_basic_test
     0.00ns INFO     Found <span style="color:#fff;font-weight:bold">test</span> test_adder.adder_randomised_test
     0.00ns INFO     running adder_basic_test (1/2)
VCD info: dumpfile dump.vcd opened <span style="color:#fff;font-weight:bold">for</span> output.
     2.00ns INFO     adder_basic_test passed
     2.00ns INFO     running adder_randomised_test (2/2)
    22.00ns INFO     adder_randomised_test passed
    22.00ns INFO     ******************************************************************************************
                     ** TEST                              STATUS  SIM TIME (ns)  REAL TIME (s)  RATIO (ns/s) **
                     ******************************************************************************************
                     ** test_adder.adder_basic_test        PASS           2.00           0.00        869.36  **
                     ** test_adder.adder_randomised_test   PASS          20.00           0.00       5147.27  **
                     ******************************************************************************************
                     ** TESTS=<span style="color:#ff0;font-weight:bold">2</span> PASS=<span style="color:#ff0;font-weight:bold">2</span> FAIL=<span style="color:#ff0;font-weight:bold">0</span> SKIP=<span style="color:#ff0;font-weight:bold">0</span>                     22.00           0.04        615.90  **
                     ******************************************************************************************
</code></pre></div><p>You can try <code>make -n</code> and see iverlog build and run commands. These are the final iverilog commands to run the simulation(without Makefiles)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#fff;font-weight:bold">export</span> PYTHONPATH=$PWD/../model:$PYTHONPATH
iverilog -o sim_build/sim.vvp -D COCOTB_SIM=<span style="color:#ff0;font-weight:bold">1</span> -s adder -f sim_build/cmds.f -g2012   /examples/adder/tests/../hdl/adder.sv
MODULE=test_adder TESTCASE= TOPLEVEL=adder TOPLEVEL_LANG=verilog <span style="color:#0ff;font-weight:bold">\
</span><span style="color:#0ff;font-weight:bold"></span>         vvp -M ../../../.venv/lib/python3.8/site-packages/cocotb/libs -m libcocotbvpi_icarus   sim_build/sim.vvp
</code></pre></div><h1 id="the-infrastructure">The infrastructure</h1>
<p>The core of cocotb is compiled into the following shared objects</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ls  .venv/lib/python3.8/site-packages/cocotb/libs/
libcocotb.so            libcocotbvhpi_ius.so       libcocotbvpi_ghdl.so     libcocotbvpi_modelsim.so   libembed.so   libpygpilog.so
libcocotbutils.so       libcocotbvhpi_modelsim.so  libcocotbvpi_icarus.vpl  libcocotbvpi_vcs.so        libgpilog.so
libcocotbvhpi_aldec.so  libcocotbvpi_aldec.so      libcocotbvpi_ius.so      libcocotbvpi_verilator.so  libgpi.so
</code></pre></div><p><code>iverilog</code> load <code>libcocotbvpi_icarus.vpl</code> which loads the rest of cocotb libraries</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ldd  .venv/lib/python3.8/site-packages/cocotb/libs/libcocotbvpi_icarus.vpl
	libgpi.so =&gt; /.venv/lib/python3.8/site-packages/cocotb/libs/libgpi.so (0x00007f63699b4000)
	libgpilog.so =&gt; /.venv/lib/python3.8/site-packages/cocotb/libs/libgpilog.so (0x00007f63699af000)
	libcocotbutils.so =&gt; /.venv/lib/python3.8/site-packages/cocotb/libs/libcocotbutils.so (0x00007f63695a4000)
	libembed.so =&gt; /.venv/lib/python3.8/site-packages/cocotb/libs/libembed.so (0x00007f636959f000)
</code></pre></div><h1 id="compilation">Compilation</h1>
<p><code>setuptools</code> is used here to configure the build of external C/C++ files. In <code>setup.py</code>, the external modules are configured with <code>get_ext</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    ext_modules=get_ext(),
</code></pre></div><p><code>get_ext</code> first configures the common libraries used by all simulators</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> _get_common_lib_ext(include_dir, share_lib_dir):
    <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;
</span><span style="color:#0ff;font-weight:bold">    Defines common libraries.
</span><span style="color:#0ff;font-weight:bold">
</span><span style="color:#0ff;font-weight:bold">    All libraries go into the same directory to enable loading without modifying the library path (e.g. LD_LIBRARY_PATH).
</span><span style="color:#0ff;font-weight:bold">    In Makefile `LIB_DIR` (s) is used to point to this directory.
</span><span style="color:#0ff;font-weight:bold">    &#34;&#34;&#34;</span>

    <span style="color:#007f7f">#</span>
    <span style="color:#007f7f">#  libcocotbutils</span>
    <span style="color:#007f7f">#</span>
    libcocotbutils_sources = [
        os.path.join(share_lib_dir, <span style="color:#0ff;font-weight:bold">&#34;utils&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;cocotb_utils.cpp&#34;</span>)
    ]
    <span style="color:#fff;font-weight:bold">if</span> os.name == <span style="color:#0ff;font-weight:bold">&#34;nt&#34;</span>:
        libcocotbutils_sources += [<span style="color:#0ff;font-weight:bold">&#34;libcocotbutils.rc&#34;</span>]
    libcocotbutils_libraries = [<span style="color:#0ff;font-weight:bold">&#34;gpilog&#34;</span>]
    <span style="color:#fff;font-weight:bold">if</span> os.name != <span style="color:#0ff;font-weight:bold">&#34;nt&#34;</span>:
        libcocotbutils_libraries.append(<span style="color:#0ff;font-weight:bold">&#34;dl&#34;</span>)  <span style="color:#007f7f"># dlopen, dlerror, dlsym</span>
    libcocotbutils = Extension(
        os.path.join(<span style="color:#0ff;font-weight:bold">&#34;cocotb&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;libs&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;libcocotbutils&#34;</span>),
        define_macros=[(<span style="color:#0ff;font-weight:bold">&#34;COCOTBUTILS_EXPORTS&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>)] + _extra_defines,
        include_dirs=[include_dir],
        libraries=libcocotbutils_libraries,
        sources=libcocotbutils_sources,
    )

</code></pre></div><p>Then configures simulator-specific libraries. For icarus, <code>libcocotbvpi</code> is configured here</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#007f7f">#</span>
    <span style="color:#007f7f">#  Icarus Verilog</span>
    <span style="color:#007f7f">#</span>
    icarus_extra_lib = []
    logger.info(<span style="color:#0ff;font-weight:bold">&#34;Compiling libraries for Icarus Verilog&#34;</span>)
    <span style="color:#fff;font-weight:bold">if</span> os.name == <span style="color:#0ff;font-weight:bold">&#34;nt&#34;</span>:
        icarus_extra_lib = [<span style="color:#0ff;font-weight:bold">&#34;icarus&#34;</span>]

    icarus_vpi_ext = _get_vpi_lib_ext(
        include_dir=include_dir,
        share_lib_dir=share_lib_dir,
        sim_define=<span style="color:#0ff;font-weight:bold">&#34;ICARUS&#34;</span>,
        extra_lib=icarus_extra_lib,
    )
    ext.append(icarus_vpi_ext)

</code></pre></div><p>And core VPI files are configured here(common for all simualtors)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> _get_vpi_lib_ext(
    include_dir, share_lib_dir, sim_define, extra_lib=[], extra_lib_dir=[]
):
    lib_name = <span style="color:#0ff;font-weight:bold">&#34;libcocotbvpi_&#34;</span> + sim_define.lower()
    libcocotbvpi_sources = [
        os.path.join(share_lib_dir, <span style="color:#0ff;font-weight:bold">&#34;vpi&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;VpiImpl.cpp&#34;</span>),
        os.path.join(share_lib_dir, <span style="color:#0ff;font-weight:bold">&#34;vpi&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;VpiCbHdl.cpp&#34;</span>),
    ]

</code></pre></div><h1 id="bootstrap-and-python-interpreter-init">Bootstrap and Python interpreter init</h1>
<p>In <code>VpiImpl.cpp</code>, <code>vlog_startup_routines</code> called by simulator when shared objects are loaded</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp">COCOTBVPI_EXPORT void (*vlog_startup_routines[])() = {
    register_embed, gpi_load_extra_libs, register_initial_callback,
    register_final_callback, <span style="color:#fff;font-weight:bold">nullptr</span>};
</code></pre></div><p>These functions register implementations callbacks (VPI, VHPI, FLI). But the important one is <code>gpi_load_exra_libs</code> as it embeds python</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">    <span style="color:#007f7f">/* Finally embed Python */</span>
    embed_init_python();
</code></pre></div><p><code>embed_init_python</code> calls <code>_embed_init_python</code>(defined in <code>gpi_embed.cpp</code>) which start the interpreter</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">extern</span> <span style="color:#0ff;font-weight:bold">&#34;C&#34;</span> COCOTB_EXPORT <span style="color:#fff;font-weight:bold">void</span> _embed_init_python(<span style="color:#fff;font-weight:bold">void</span>) {
    assert(!gtstate);  <span style="color:#007f7f">// this function should not be called twice
</span><span style="color:#007f7f"></span>
    to_python();
    set_program_name_in_venv();
    Py_Initialize(); <span style="color:#007f7f">/* Initialize the interpreter */</span>
    PySys_SetArgvEx(<span style="color:#ff0;font-weight:bold">1</span>, argv, <span style="color:#ff0;font-weight:bold">0</span>);

    <span style="color:#007f7f">/* Swap out and return current thread state and release the GIL */</span>
    gtstate = PyEval_SaveThread();
    to_simulator();

</code></pre></div><h1 id="jump-to-python-sim_init">Jump to python (sim_init)</h1>
<p>At this point, python interpreter is initialized. But we need to jump to python to start the test discovery and execution.</p>
<p>Starting with <code>register_initial_callback</code> on VPI bootstrap list above</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">void</span> register_initial_callback() {
    sim_init_cb = new VpiStartupCbHdl(vpi_table);
    sim_init_cb-&gt;arm_callback();
}
</code></pre></div><p>And <code>arm_callback</code> registers <code>cb_rtn</code> to call <code>handle_vpi_callback</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">VpiCbHdl::VpiCbHdl(GpiImplInterface *impl) : GpiCbHdl(impl) {
    vpi_time.type = vpiSimTime;

    cb_data.cb_rtn = handle_vpi_callback;
}

</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">int</span> VpiCbHdl::arm_callback() {
    <span style="color:#fff;font-weight:bold">if</span> (m_state == GPI_PRIMED) {
        fprintf(stderr, <span style="color:#0ff;font-weight:bold">&#34;Attempt to prime an already primed trigger for %s!</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>,
                m_impl-&gt;reason_to_string(cb_data.reason));
    }

    <span style="color:#007f7f">// Only a problem if we have not been asked to deregister and register
</span><span style="color:#007f7f"></span>    <span style="color:#007f7f">// in the same simulation callback
</span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">if</span> (m_obj_hdl != <span style="color:#fff;font-weight:bold">NULL</span> &amp;&amp; m_state != GPI_DELETE) {
        fprintf(stderr, <span style="color:#0ff;font-weight:bold">&#34;We seem to already be registered, deregistering %s!</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>,
                m_impl-&gt;reason_to_string(cb_data.reason));
        cleanup_callback();
    }

    vpiHandle new_hdl = vpi_register_cb(&amp;cb_data);
</code></pre></div><p>And <code>handle_vpi_callback</code> calls <code>run_callback</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">    <span style="color:#fff;font-weight:bold">if</span> (old_state == GPI_PRIMED) {
        cb_hdl-&gt;set_call_state(GPI_CALL);
        cb_hdl-&gt;run_callback();

</code></pre></div><p>And <code>run_callback</code> calls <code>gpi_embed_init</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">int</span> VpiStartupCbHdl::run_callback() {
    ...
    ...
    gpi_embed_init(info.argc, info.argv);

    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}

</code></pre></div><p>In <code>GpiCommon.cpp</code>, <code>gpi_embed_init</code> calls <code>embed_sim_init</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">void</span> gpi_embed_init(<span style="color:#fff;font-weight:bold">int</span> argc, <span style="color:#fff;font-weight:bold">char</span> <span style="color:#fff;font-weight:bold">const</span> *<span style="color:#fff;font-weight:bold">const</span> *argv) {
    <span style="color:#fff;font-weight:bold">if</span> (embed_sim_init(argc, argv)) gpi_embed_end();
}
</code></pre></div><p>In <code>embed.cpp</code>,<code>embed_sim_init</code> calls <code>_embed_sim_init</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">extern</span> <span style="color:#0ff;font-weight:bold">&#34;C&#34;</span> <span style="color:#fff;font-weight:bold">int</span> embed_sim_init(<span style="color:#fff;font-weight:bold">int</span> argc, <span style="color:#fff;font-weight:bold">char</span> <span style="color:#fff;font-weight:bold">const</span> *<span style="color:#fff;font-weight:bold">const</span> *argv) {
    <span style="color:#fff;font-weight:bold">if</span> (init_failed) {
        <span style="color:#007f7f">// LCOV_EXCL_START
</span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">return</span> -<span style="color:#ff0;font-weight:bold">1</span>;
        <span style="color:#007f7f">// LCOV_EXCL_STOP
</span><span style="color:#007f7f"></span>    } <span style="color:#fff;font-weight:bold">else</span> {
        <span style="color:#fff;font-weight:bold">return</span> _embed_sim_init(argc, argv);
    }
}
</code></pre></div><p>In <code>gpi_embed.cpp</code>, <code>_embed_sim_init</code> gets the entry module and function for python</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">extern</span> <span style="color:#0ff;font-weight:bold">&#34;C&#34;</span> COCOTB_EXPORT <span style="color:#fff;font-weight:bold">int</span> _embed_sim_init(<span style="color:#fff;font-weight:bold">int</span> argc,
                                             <span style="color:#fff;font-weight:bold">char</span> <span style="color:#fff;font-weight:bold">const</span> *<span style="color:#fff;font-weight:bold">const</span> *argv) {

    <span style="color:#fff;font-weight:bold">auto</span> entry_utility_module = PyImport_ImportModule(<span style="color:#0ff;font-weight:bold">&#34;pygpi.entry&#34;</span>);

    <span style="color:#fff;font-weight:bold">auto</span> entry_info_tuple =
        PyObject_CallMethod(entry_utility_module, <span style="color:#0ff;font-weight:bold">&#34;load_entry&#34;</span>, <span style="color:#fff;font-weight:bold">NULL</span>);
    <span style="color:#fff;font-weight:bold">if</span> (!entry_info_tuple) {

</code></pre></div><p>Here is the lookup code for <code>pygpi/entry.py</code>, which looks for <code>cocotb:_initialise_testbench</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> load_entry() -&gt; Tuple[ModuleType, Callable]:
    <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;Gather entry point information by parsing :envvar:`PYGPI_ENTRY_POINT`.&#34;&#34;&#34;</span>
    entry_point_str = os.environ.get(<span style="color:#0ff;font-weight:bold">&#34;PYGPI_ENTRY_POINT&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;cocotb:_initialise_testbench&#34;</span>)
    <span style="color:#fff;font-weight:bold">try</span>:
        <span style="color:#fff;font-weight:bold">if</span> <span style="color:#0ff;font-weight:bold">&#34;:&#34;</span> not in entry_point_str:
            <span style="color:#fff;font-weight:bold">raise</span> ValueError(<span style="color:#0ff;font-weight:bold">&#34;Invalid PYGPI_ENTRY_POINT, missing entry function (no colon).&#34;</span>)
        entry_module_str, entry_func_str = entry_point_str.split(<span style="color:#0ff;font-weight:bold">&#34;:&#34;</span>, <span style="color:#ff0;font-weight:bold">1</span>)
        entry_module = importlib.import_module(entry_module_str)
        entry_func = reduce(<span style="color:#fff;font-weight:bold">getattr</span>, entry_func_str.split(<span style="color:#0ff;font-weight:bold">&#39;.&#39;</span>), entry_module)

</code></pre></div><p>Note that <code>_embed_sim_init</code> formats <code>argv</code> for <code>_initialise_testbench_</code> and then calls it.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">    <span style="color:#fff;font-weight:bold">auto</span> cocotb_retval =
        PyObject_CallFunctionObjArgs(entry_point, argv_list, <span style="color:#fff;font-weight:bold">NULL</span>);
</code></pre></div><p><code>_initialise_testbench_</code> is defined <code>cocotb/__init__.py</code> which calls <code>RegressionManager.from_discovery</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> _initialise_testbench_(argv_):
...
...
...
    <span style="color:#007f7f"># start Regression Manager</span>
    <span style="color:#fff;font-weight:bold">global</span> regression_manager
    regression_manager = RegressionManager.from_discovery(top)
    regression_manager.execute()
</code></pre></div><p>Fin.</p>
]]></content>
        </item>
        
        <item>
            <title>riscv picorv32 hello demystified</title>
            <link>/posts/2022/01/riscv-picorv32-hello-demystified/</link>
            <pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/01/riscv-picorv32-hello-demystified/</guid>
            <description>This is a post about hello test in piscorv32. I am not going to dig deep into picorv32 itself. Just the firmware.
Where to start As usual, It makes sense to start with Makefile and work backward.
make -n test After removing verilog related commands and tests, We have the following commands for the firmware.
/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi=ilp32 -march=rv32imc -o firmware/start.o firmware/start.S /opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi=ilp32 -march=rv32ic -Os --std=c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic -ffreestanding -nostdlib -o firmware/irq.</description>
            <content type="html"><![CDATA[<p>This is a post about hello test in <a href="https://github.com/YosysHQ/picorv32">piscorv32</a>. I am not going to dig deep into picorv32 itself. Just the firmware.</p>
<h1 id="where-to-start">Where to start</h1>
<p>As usual, It makes sense to start with <code>Makefile</code> and work backward.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">make -n <span style="color:#fff;font-weight:bold">test</span>
</code></pre></div><p>After removing verilog related commands and tests, We have the following commands for the firmware.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi=ilp32 -march=rv32imc -o firmware/start.o firmware/start.S

/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi=ilp32 -march=rv32ic -Os --std=c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/irq.o firmware/irq.c
/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi=ilp32 -march=rv32ic -Os --std=c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/print.o firmware/print.c
/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi=ilp32 -march=rv32ic -Os --std=c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/hello.o firmware/hello.c
/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi=ilp32 -march=rv32ic -Os --std=c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/sieve.o firmware/sieve.c
/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi=ilp32 -march=rv32ic -Os --std=c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/multest.o firmware/multest.c
/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi=ilp32 -march=rv32ic -Os --std=c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/stats.o firmware/stats.c

/opt/riscv32i/bin/riscv32-unknown-elf-gcc -Os -mabi=ilp32 -march=rv32imc -ffreestanding -nostdlib -o firmware/firmware.elf <span style="color:#0ff;font-weight:bold">\
</span><span style="color:#0ff;font-weight:bold"></span>	-Wl,--build-id=none,-Bstatic,-T,firmware/sections.lds,-Map,firmware/firmware.map,--strip-debug <span style="color:#0ff;font-weight:bold">\
</span><span style="color:#0ff;font-weight:bold"></span>	firmware/start.o firmware/irq.o firmware/print.o firmware/hello.o firmware/sieve.o firmware/multest.o firmware/stats.o -lgcc

/opt/riscv32i/bin/riscv32-unknown-elf-objcopy -O binary firmware/firmware.elf firmware/firmware.bin

python3 firmware/makehex.py firmware/firmware.bin <span style="color:#ff0;font-weight:bold">32768</span> &gt; firmware/firmware.hex
</code></pre></div><h1 id="startup-assembly">Startup assembly</h1>
<p>Probably the most important part(beside linking):</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi=ilp32 -march=rv32imc -o firmware/start.o firmware/start.S
</code></pre></div><h2 id="reset-vector">Reset Vector</h2>
<p>At the start of file <code>start.S</code>, <code>reseet_vector</code> label defines two instructions(2 * 4 Bytes), Then jumps to <code>start</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm">reset_vec:
        <span style="color:#f00">//</span> no more than <span style="color:#ff0;font-weight:bold">16</span> bytes here !
        picorv32_waitirq_insn(zero)
        picorv32_maskirq_insn(zero, zero)
        j start
</code></pre></div><p>The macros eventually expand to <code>.word</code> (which is 4  bytes). It literally stitch parts of the instruction together.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#007f7f">#define r_type_insn(_f7, _rs2, _rs1, _f3, _rd, _opc) \
</span><span style="color:#007f7f"></span><span style="color:#007f7f">.word</span> (((_f7) <span style="color:#f00">&lt;&lt;</span> <span style="color:#ff0;font-weight:bold">25</span>) <span style="color:#f00">|</span> ((_rs2) <span style="color:#f00">&lt;&lt;</span> <span style="color:#ff0;font-weight:bold">20</span>) <span style="color:#f00">|</span> ((_rs1) <span style="color:#f00">&lt;&lt;</span> <span style="color:#ff0;font-weight:bold">15</span>) <span style="color:#f00">|</span> ((_f3) <span style="color:#f00">&lt;&lt;</span> <span style="color:#ff0;font-weight:bold">12</span>) <span style="color:#f00">|</span> ((_rd) <span style="color:#f00">&lt;&lt;</span> <span style="color:#ff0;font-weight:bold">7</span>) <span style="color:#f00">|</span> ((_opc) <span style="color:#f00">&lt;&lt;</span> <span style="color:#ff0;font-weight:bold">0</span>))

<span style="color:#007f7f">#define picorv32_retirq_insn() \
</span><span style="color:#007f7f"></span>r_type_insn(<span style="color:#ff0;font-weight:bold">0</span>b0000010, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0</span>b000, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0</span>b0001011)

<span style="color:#007f7f">#define picorv32_maskirq_insn(_rd, _rs) \
</span><span style="color:#007f7f"></span>r_type_insn(<span style="color:#ff0;font-weight:bold">0</span>b0000011, <span style="color:#ff0;font-weight:bold">0</span>, regnum_ <span style="color:#007f7f">## _rs, 0b110, regnum_ ## _rd, 0b0001011)
</span></code></pre></div><h2 id="start-routine">Start routine</h2>
<p><code>start</code> zeros out GPRs.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm">start:
        <span style="color:#f00">/*</span> zero-initialize all registers *<span style="color:#f00">/</span>

        addi x1, zero, <span style="color:#ff0;font-weight:bold">0</span>
        addi x2, zero, <span style="color:#ff0;font-weight:bold">0</span>
        addi x3, zero, <span style="color:#ff0;font-weight:bold">0</span>
        addi x4, zero, <span style="color:#ff0;font-weight:bold">0</span>
<span style="color:#007f7f">...</span>
<span style="color:#007f7f">...</span>
</code></pre></div><p>Then initializes the stack pointer to <code>0x20000</code> as <code>lui</code> does the following</p>
<blockquote>
<p>LUI (load upper immediate) uses the same opcode as RV32I. LUI places the 20-bit U-immediate into bits 31–12 of register rd and places zero in the lowest 12 bits.</p>
</blockquote>
<p>so, <code>sp</code> will have <code>hex(128*1024) = 0x20000</code> which is the end of  the address space.</p>
<p>Then calls one of the test functions</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#007f7f">#ifdef ENABLE_HELLO
</span><span style="color:#007f7f"></span>        <span style="color:#f00">/*</span> set stack pointer *<span style="color:#f00">/</span>
        lui sp,(<span style="color:#ff0;font-weight:bold">128</span>*<span style="color:#ff0;font-weight:bold">1024</span>)<span style="color:#f00">&gt;&gt;</span><span style="color:#ff0;font-weight:bold">12</span>

        <span style="color:#f00">/*</span> call hello C code *<span style="color:#f00">/</span>
        jal ra,hello
<span style="color:#007f7f">#endif
</span></code></pre></div><h1 id="hello-example">hello example</h1>
<h2 id="software">Software</h2>
<p>For the sake of this post, the important files are <code>hello.c</code> and <code>print.c</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi=ilp32 -march=rv32ic -Os --std=c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/print.o firmware/print.c
/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi=ilp32 -march=rv32ic -Os --std=c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/hello.o firmware/hello.c
</code></pre></div><p>From <code>print.c</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">void</span> hello(<span style="color:#fff;font-weight:bold">void</span>)
{
        print_str(<span style="color:#0ff;font-weight:bold">&#34;hello world</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>);
}
</code></pre></div><p><code>print_str</code> is a loop to write to address <code>0x10000000</code> which should map to something(will see on <code>testbench.v</code>)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#0f0;font-weight:bold">#define OUTPORT 0x10000000
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">void</span> print_chr(<span style="color:#fff;font-weight:bold">char</span> ch)
{
        *((<span style="color:#fff;font-weight:bold">volatile</span> <span style="color:#fff;font-weight:bold">uint32_t</span>*)OUTPORT) = ch;
}

<span style="color:#fff;font-weight:bold">void</span> print_str(<span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">char</span> *p)
{
        <span style="color:#fff;font-weight:bold">while</span> (*p != <span style="color:#ff0;font-weight:bold">0</span>)
                *((<span style="color:#fff;font-weight:bold">volatile</span> <span style="color:#fff;font-weight:bold">uint32_t</span>*)OUTPORT) = *(p++);
}
</code></pre></div><p>And the assembly generated by GCC</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#f00">00000008</span> <span style="color:#f00">&lt;</span>print_str<span style="color:#f00">&gt;</span>:
   <span style="color:#f00">8:</span>   <span style="color:#f00">10000737</span>                lui     a4,<span style="color:#ff0;font-weight:bold">0x10000</span>

<span style="color:#f00">0000000</span>c <span style="color:#f00">&lt;</span>.L3<span style="color:#f00">&gt;</span>:
   c:   <span style="color:#f00">00054783</span>                lbu     a5,<span style="color:#ff0;font-weight:bold">0</span>(a0)
  <span style="color:#f00">10:</span>   e391                    bnez    a5,<span style="color:#ff0;font-weight:bold">14</span> &lt;.L4&gt;
  <span style="color:#f00">12:</span>   <span style="color:#f00">8082</span>                    ret

<span style="color:#f00">00000014</span> <span style="color:#f00">&lt;</span><span style="color:#007f7f">.L4</span><span style="color:#f00">&gt;</span>:
  <span style="color:#f00">14:</span>   <span style="color:#f00">0505</span>                    addi    a0,a0,<span style="color:#ff0;font-weight:bold">1</span>
  <span style="color:#f00">16:</span>   c31c                    sw      a5,<span style="color:#ff0;font-weight:bold">0</span>(a4)
  <span style="color:#f00">18:</span>   bfd5                    j       <span style="color:#ff0;font-weight:bold">c</span> &lt;.L3&gt;

</code></pre></div><h2 id="hardware">Hardware</h2>
<p>From Hardware side, address <code>0x10000000</code> should map to address space allocated for uart but for simulation, <code>testbench.v</code> just <code>$display</code> the characters.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">                <span style="color:#fff;font-weight:bold">if</span> (latched_waddr == <span style="color:#ff0;font-weight:bold">32&#39;h1000</span>_0000) <span style="color:#fff;font-weight:bold">begin</span>
                        <span style="color:#fff;font-weight:bold">if</span> (verbose) <span style="color:#fff;font-weight:bold">begin</span>
                                <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#ff0;font-weight:bold">32</span> &lt;= latched_wdata &amp;&amp; latched_wdata &lt; <span style="color:#ff0;font-weight:bold">128</span>)
                                        <span style="color:#fff;font-weight:bold">$display</span>(<span style="color:#0ff;font-weight:bold">&#34;OUT: &#39;%c&#39;&#34;</span>, latched_wdata[<span style="color:#ff0;font-weight:bold">7</span>:<span style="color:#ff0;font-weight:bold">0</span>]);
                                <span style="color:#fff;font-weight:bold">else</span>
                                        <span style="color:#fff;font-weight:bold">$display</span>(<span style="color:#0ff;font-weight:bold">&#34;OUT: %3d&#34;</span>, latched_wdata);
                        <span style="color:#fff;font-weight:bold">end</span> <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">begin</span>
                                <span style="color:#fff;font-weight:bold">$write</span>(<span style="color:#0ff;font-weight:bold">&#34;%c&#34;</span>, latched_wdata[<span style="color:#ff0;font-weight:bold">7</span>:<span style="color:#ff0;font-weight:bold">0</span>]);
`ifndef VERILATOR
                                $fflush();
`endif
                        <span style="color:#fff;font-weight:bold">end</span>
                <span style="color:#fff;font-weight:bold">end</span> <span style="color:#fff;font-weight:bold">else</span>
</code></pre></div><h1 id="linking">Linking</h1>
<p>There are several things to unpack in the linker command</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">/opt/riscv32i/bin/riscv32-unknown-elf-gcc -Os -mabi=ilp32 -march=rv32imc -ffreestanding -nostdlib -o firmware/firmware.elf <span style="color:#0ff;font-weight:bold">\
</span><span style="color:#0ff;font-weight:bold"></span>	-Wl,--build-id=none,-Bstatic,-T,firmware/sections.lds,-Map,firmware/firmware.map,--strip-debug <span style="color:#0ff;font-weight:bold">\
</span><span style="color:#0ff;font-weight:bold"></span>	firmware/start.o firmware/irq.o firmware/print.o firmware/hello.o firmware/sieve.o firmware/multest.o firmware/stats.o -lgcc
</code></pre></div><h2 id="options">Options</h2>
<p><strong><code>-ffreestanding</code></strong>
This one is important as we don&rsquo;t have libc here. So, we have to tell gcc that. from <a href="https://stackoverflow.com/questions/17692428/what-is-ffreestanding-option-in-gcc">Stack overflow</a></p>
<blockquote>
<p>A freestanding environment is one in which the standard library may not exist, and program startup may not necessarily be at &ldquo;main&rdquo;. The option -ffreestanding directs the compiler to not assume that standard functions have their usual definition.</p>
</blockquote>
<p><strong>-<code>-nostdlib</code></strong>
from <a href="https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html">GCC docs</a></p>
<blockquote>
<p>Do not use the standard system startup files or libraries when linking. No startup files and only the libraries you specify are passed to the linker, and options specifying linkage of the system libraries, such as -static-libgcc or -shared-libgcc, are ignored.</p>
</blockquote>
<h2 id="linker-script">Linker script</h2>
<p><code>sections.lds</code> sets <code>mem</code> to start of <code>0x0</code> and lenght of <code>96k</code>.  Note that sp pointer was init to point to <code>0x20000</code> which 128k. Which leaves 32k for stack. Other than that, typical text and data ELF section mapping.</p>
<pre tabindex="0"><code>MEMORY {
        /* the memory in the testbench is 128k in size;
         * set LENGTH=96k and leave at least 32k for stack */
        mem : ORIGIN = 0x00000000, LENGTH = 0x00018000
}

SECTIONS {
        .memory : {
                . = 0x000000;
                start*(.text);
                *(.text);
                *(*);
                end = .;
                . = ALIGN(4);
        } &gt; mem
}
</code></pre><h1 id="elf-to-bin-conversion">elf to bin Conversion</h1>
<p>That is straightforward <code>objcopy</code> to convert elf to binary</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">/opt/riscv32i/bin/riscv32-unknown-elf-objcopy -O binary firmware/firmware.elf firmware/firmware.bin
</code></pre></div><h1 id="bin-to-hex-conversion">bin to hex Conversion</h1>
<p>The final touch is converting bin file to hex file for <code>$readmemh</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">python3 firmware/makehex.py firmware/firmware.bin <span style="color:#ff0;font-weight:bold">32768</span> &gt; firmware/firmware.hex
</code></pre></div><p>Snippet from <code>makehex.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(nwords):
    <span style="color:#fff;font-weight:bold">if</span> i &lt; <span style="color:#fff;font-weight:bold">len</span>(bindata) // <span style="color:#ff0;font-weight:bold">4</span>:
        w = bindata[<span style="color:#ff0;font-weight:bold">4</span>*i : <span style="color:#ff0;font-weight:bold">4</span>*i+<span style="color:#ff0;font-weight:bold">4</span>]
        <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">%02x%02x%02x%02x</span><span style="color:#0ff;font-weight:bold">&#34;</span> % (w[<span style="color:#ff0;font-weight:bold">3</span>], w[<span style="color:#ff0;font-weight:bold">2</span>], w[<span style="color:#ff0;font-weight:bold">1</span>], w[<span style="color:#ff0;font-weight:bold">0</span>]))
    <span style="color:#fff;font-weight:bold">else</span>:
        <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;0&#34;</span>)
</code></pre></div><p>And <code>$readmemh</code> in <code>testbench.v</code> to load the <code>firmware.hex</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">        <span style="color:#fff;font-weight:bold">initial</span> <span style="color:#fff;font-weight:bold">begin</span>
                <span style="color:#fff;font-weight:bold">if</span> (!$value$plusargs(<span style="color:#0ff;font-weight:bold">&#34;firmware=%s&#34;</span>, firmware_file))
                        firmware_file = <span style="color:#0ff;font-weight:bold">&#34;firmware/firmware.hex&#34;</span>;
                <span style="color:#fff;font-weight:bold">$readmemh</span>(firmware_file, mem.memory);
        <span style="color:#fff;font-weight:bold">end</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>RISCV Memory Consistency Model Basics</title>
            <link>/posts/2022/01/riscv-memory-consistency-model-basics/</link>
            <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/01/riscv-memory-consistency-model-basics/</guid>
            <description>The memory consistency model is an important (and complicated) topic that defines how memory loads/stores work in multi-thread(Hart in rv lingo) environment. More detailed explanation of memory consistency can be found in A Primer on Memory Consitency and Cache Coherency
There are several chapters in the spec related to memory model. Listed here for reference
 Chapter 2: Fence instruction Chapter 3: Zifencei Instruction-Fetch Fence Chapter 8: A Standard Extension for Atomic Instructions Chapter 14: RVWMO Memory Consistency Modeal Chapter 22: Zam Standard Extension for Misaligned Atomics Chapter 23: Ztso Standard Extension for Total Store Ordering  RVWMO The following sections define instructions used for explicit sync of RISCV memory model RVWMO.</description>
            <content type="html"><![CDATA[<p>The memory consistency model is an important (and complicated) topic that defines how memory loads/stores work in multi-thread(Hart in rv lingo) environment.
More detailed explanation of memory consistency can be found in <a href="https://www.morganclaypool.com/doi/abs/10.2200/S00346ED1V01Y201104CAC016">A Primer on Memory Consitency and Cache Coherency</a></p>
<p>There are several chapters in the spec related to memory model. Listed here for reference</p>
<ul>
<li>Chapter 2: <code>Fence</code> instruction</li>
<li>Chapter 3: Zifencei Instruction-Fetch Fence</li>
<li><strong>Chapter 8: A Standard Extension for Atomic Instructions</strong></li>
<li><strong>Chapter 14: RVWMO Memory Consistency Modeal</strong></li>
<li>Chapter 22: Zam Standard Extension for Misaligned Atomics</li>
<li>Chapter 23: Ztso Standard Extension for Total Store Ordering</li>
</ul>
<h1 id="rvwmo">RVWMO</h1>
<p>The following sections define instructions used for explicit sync of RISCV memory model <code>RVWMO</code>. Chapter 14 defines <code>RVWMO</code> formal specifications in detail. I will put couple of important snippets here but probably needs a separate post.</p>
<blockquote>
<p>This chapter defines the RISC-V memory consistency model. A memory consistency model is a set of rules specifying the values that can be returned by loads of memory. RISC-V uses a memory model called “RVWMO” (RISC-V Weak Memory Ordering) which is designed to provide flexibility for architects to build high-performance scalable designs while simultaneously supporting a tractable programming model.</p>
</blockquote>
<blockquote>
<p>Under RVWMO, code running on a single hart appears to execute in order from the perspective of other memory instructions in the same hart, but memory instructions from another hart may observe the memory instructions from the first hart being executed in a different order.</p>
</blockquote>
<blockquote>
<p>Therefore, multithreaded code may require explicit synchronization to guarantee ordering between mem- ory instructions from different harts. The base RISC-V ISA provides a FENCE instruction for this purpose, described in Section 2.7, while the atomics extension “A” additionally defines load- reserved/store-conditional and atomic read-modify-write instructions.</p>
</blockquote>
<h1 id="memory-ordering-instructions---fence">Memory Ordering Instructions - FENCE</h1>
<p>Starting with <code>fence</code> which uses 2 operands to define the successor and preceding operations as follows</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm">	fence iorw, iorw
</code></pre></div><p><img src="/riscv_fence.png" alt="Image"></p>
<blockquote>
<p>The FENCE instruction is used to order device I/O and memory accesses as viewed by other RISC- V harts and external devices or coprocessors. Any combination of device input (I), device output (O), memory reads (R), and memory writes (W) may be ordered with respect to any combination of the same. Informally, no other RISC-V hart or external device can observe any operation in the successor set following a FENCE before any operation in the predecessor set preceding the FENCE.  Chapter 14 provides a precise description of the RISC-V memory consistency model.</p>
</blockquote>
<p>I see linux kernel using them after the <code>sc.w</code> instruction in the atomic wrappers which should wait for the previous writes.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">                <span style="color:#0ff;font-weight:bold">&#34;       sc.w.rl  %[rc], %[rc], %[c]</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>
                <span style="color:#0ff;font-weight:bold">&#34;       bnez     %[rc], 0b</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>
                <span style="color:#0ff;font-weight:bold">&#34;       fence    rw, rw</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>
</code></pre></div><h1 id="zifencei-instruction-fetch-fence---fencei">Zifencei Instruction-Fetch Fence - FENCE.I</h1>
<p>I can&rsquo;t write better description than the spec. So, Here it is.</p>
<blockquote>
<p>The FENCE.I instruction is used to synchronize the instruction and data streams. RISC-V does not guarantee that stores to instruction memory will be made visible to instruction fetches on a RISC-V hart until that hart executes a FENCE.I instruction</p>
</blockquote>
<p>And</p>
<blockquote>
<p>FENCE.I instruction ensures that a subsequent instruction fetch on a RISC-V hart will see any previous data stores already visible to the same RISC-V hart</p>
</blockquote>
<p>Basically, It ensures that all instructions see the updated memory for all memory operation before the <code>FENCE.i</code>. The spec mentions possible implementations. One of them is doing pipeline flush. This way the core will re-fetch the instruction and pipeline will see the new values.</p>
<blockquote>
<p>The FENCE.I instruction was designed to support a wide variety of implementations. A simple implementation can flush the local instruction cache and the instruction pipeline when the FENCE.I is executed</p>
</blockquote>
<h1 id="a-standard-extension-for-atomic-instructions">A Standard Extension for Atomic Instructions</h1>
<p>The <code>A extention</code> defines the following instructions for atomic read/write and operations on memory.</p>
<p><img src="/riscv_lr_sc.png" alt="Image"></p>
<blockquote>
<p>Complex atomic memory operations on a single memory word or doubleword are performed with the load-reserved (LR) and store-conditional (SC) instructions. LR.W loads a word from the address in rs1, places the sign-extended value in rd, and registers a reservation set—a set of bytes that subsumes the bytes in the addressed word. SC.W conditionally writes a word in rs2 to the address in rs1: the SC.W succeeds only if the reservation is still valid and the reservation set contains the bytes being written. If the SC.W succeeds, the instruction writes the word in rs2 to memory, and it writes zero to rd. If the SC.W fails, the instruction does not write to memory, and it writes a nonzero value to rd. Regardless of success or failure, executing an SC.W instruction invalidates any reservation held by this hart.</p>
</blockquote>
<p><img src="/risc_amo.png" alt="Image"></p>
<blockquote>
<p>The atomic memory operation (AMO) instructions perform read-modify-write operations for mul- tiprocessor synchronization and are encoded with an R-type instruction format. These AMO in- structions atomically load a data value from the address in rs1, place the value into register rd, apply a binary operator to the loaded value and the original value in rs2, then store the result back to the address in rs1. AMOs can either operate on 64-bit (RV64 only) or 32-bit words in memory.  For RV64, 32-bit AMOs always sign-extend the value placed in rd.</p>
</blockquote>
<h1 id="linux-kernel-atomic-wrappers">Linux Kernel Atomic wrappers</h1>
<p>Linux kernel defines atomic wrappers in <code>include/asm/atomic.h</code> using all the instruction above.</p>
<p><code>lr.w</code> and <code>sc.w</code> are used to define atomic add wrapper.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#007f7f">/* This is required to provide a full barrier on success. */</span>
<span style="color:#fff;font-weight:bold">static</span> __always_inline <span style="color:#fff;font-weight:bold">int</span> arch_atomic_fetch_add_unless(atomic_t *v, <span style="color:#fff;font-weight:bold">int</span> a, <span style="color:#fff;font-weight:bold">int</span> u)
{
       <span style="color:#fff;font-weight:bold">int</span> prev, rc;

        __asm__ __volatile__ (
                <span style="color:#0ff;font-weight:bold">&#34;0:     lr.w     %[p],  %[c]</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>
                <span style="color:#0ff;font-weight:bold">&#34;       beq      %[p],  %[u], 1f</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>
                <span style="color:#0ff;font-weight:bold">&#34;       add      %[rc], %[p], %[a]</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>
                <span style="color:#0ff;font-weight:bold">&#34;       sc.w.rl  %[rc], %[rc], %[c]</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>
                <span style="color:#0ff;font-weight:bold">&#34;       bnez     %[rc], 0b</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>
                <span style="color:#0ff;font-weight:bold">&#34;       fence    rw, rw</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>
                <span style="color:#0ff;font-weight:bold">&#34;1:</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>
                : [p]<span style="color:#0ff;font-weight:bold">&#34;=&amp;r&#34;</span> (prev), [rc]<span style="color:#0ff;font-weight:bold">&#34;=&amp;r&#34;</span> (rc), [c]<span style="color:#0ff;font-weight:bold">&#34;+A&#34;</span> (v-&gt;counter)
                : [a]<span style="color:#0ff;font-weight:bold">&#34;r&#34;</span> (a), [u]<span style="color:#0ff;font-weight:bold">&#34;r&#34;</span> (u)
                : <span style="color:#0ff;font-weight:bold">&#34;memory&#34;</span>);
        <span style="color:#fff;font-weight:bold">return</span> prev;
}
</code></pre></div><p>In the same file, AMO wrappers are defined with macro <code>ATOMIC_OP</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#0f0;font-weight:bold">#define ATOMIC_OP(op, asm_op, I, asm_type, c_type, prefix)              \
</span><span style="color:#0f0;font-weight:bold">static __always_inline                                                  \
</span><span style="color:#0f0;font-weight:bold">void arch_atomic##prefix##_##op(c_type i, atomic##prefix##_t *v)        \
</span><span style="color:#0f0;font-weight:bold">{                                                                       \
</span><span style="color:#0f0;font-weight:bold">        __asm__ __volatile__ (                                          \
</span><span style="color:#0f0;font-weight:bold">                &#34;       amo&#34; #asm_op &#34;.&#34; #asm_type &#34; zero, %1, %0&#34;      \
</span><span style="color:#0f0;font-weight:bold">                : &#34;+A&#34; (v-&gt;counter)                                     \
</span><span style="color:#0f0;font-weight:bold">                : &#34;r&#34; (I)                                               \
</span><span style="color:#0f0;font-weight:bold">                : &#34;memory&#34;);                                            \
</span><span style="color:#0f0;font-weight:bold">}
</span><span style="color:#0f0;font-weight:bold"></span>
ATOMIC_OPS(add, add,  i)
ATOMIC_OPS(sub, add, -i)
ATOMIC_OPS(and, and,  i)
ATOMIC_OPS( or,  or,  i)
ATOMIC_OPS(xor, xor,  i)
</code></pre></div><p>And finally,<code>fence.i</code> is used in <code>head.S</code> at the start of <code>_start_kernel</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm">ENTRY(_start_kernel)
        <span style="color:#f00">/*</span> Mask all interrupts *<span style="color:#f00">/</span>
        csrw CSR_IE, zero
        csrw CSR_IP, zero

<span style="color:#007f7f">#ifdef CONFIG_RISCV_M_MODE
</span><span style="color:#007f7f"></span>        <span style="color:#f00">/*</span> flush the instruction cache *<span style="color:#f00">/</span>
        fence.i
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>RISCV Privileged Specification and Linux Kernel Deep-ish Dive</title>
            <link>/posts/2022/01/riscv-privileged-specification-and-linux-kernel-deep-ish-dive/</link>
            <pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/01/riscv-privileged-specification-and-linux-kernel-deep-ish-dive/</guid>
            <description>This is a deep-ish dive into the riscv privileged specifications and Linux kernel syscall implementation.
Privileged specification tour To keep it short, There are 3 privilege levels
 U (user) : 0 S (supervisor) : 1 Reserved M (Machine) : 3  And specs describes them as
 At any time, a RISC-V hardware thread (hart) is running at some privilege level encoded as a mode in one or more CSRs (control and status registers).</description>
            <content type="html"><![CDATA[<p>This is a deep-ish dive into the riscv privileged <a href="https://github.com/riscv/riscv-isa-manual/releases/download/Priv-v1.12/riscv-privileged-20211203.pdf">specifications</a> and Linux kernel syscall implementation.</p>
<h1 id="privileged-specification-tour">Privileged specification tour</h1>
<p>To keep it short, There are 3 privilege levels</p>
<ul>
<li>U (user) : 0</li>
<li>S (supervisor) : 1</li>
<li>Reserved</li>
<li>M (Machine) : 3</li>
</ul>
<p>And specs describes them as</p>
<blockquote>
<p>At any time, a RISC-V hardware thread (hart) is running at some privilege level encoded as a mode in one or more CSRs (control and status registers).</p>
</blockquote>
<p>And</p>
<blockquote>
<p>All hardware implementations must provide M-mode, as this is the only mode that has unfettered access to the whole machine. The simplest RISC-V implementations may provide only M-mode, though this will provide no protection against incorrect or malicious application code</p>
</blockquote>
<h2 id="csrs">CSRs</h2>
<p>Chapter 2 describes two classes of instructions</p>
<blockquote>
<p>The SYSTEM major opcode is used to encode all privileged instructions in the RISC-V ISA. These can be divided into two main classes</p>
<p>those that atomically read-modify-write control and status registers (CSRs), which are defined in the Zicsr extension and other instructions</p>
</blockquote>
<p>Specs defines 12 bits for CSR encoding <code>csr[11:0]</code> and the last 4 bits encode permission and privilege.</p>
<ul>
<li>[11:10] write/read or read only</li>
<li>[9:8] privilege level that can access that register</li>
</ul>
<p>Table 2.1 describes CSR address ranges for example</p>
<blockquote>
<p>11 11 0XXX 0xF00-0xF7F Standard read-only</p>
</blockquote>
<p>Table 2.5 describes each of the these CSRs</p>
<blockquote>
<p>0xF11 MRO mvendorid Vendor ID</p>
</blockquote>
<p>Note: CSR instructions are defined in <strong>unprivileged specs chapter 9</strong> <code>“Zicsr”, Control and Status Register (CSR) Instructions</code></p>
<blockquote>
<p>RISC-V defines a separate address space of 4096 Control and Status registers associated with each hart. This chapter defines the full set of CSR instructions that operate on these CSRs.</p>
</blockquote>
<p><img src="/riscv_csr_instructions.png" alt="Example image"></p>
<h2 id="machine-level-isa">Machine-level ISA</h2>
<p>Section 3.1 defines the CSR (and Fields required) for M-level</p>
<blockquote>
<p>The mvendorid CSR is a 32-bit read-only register providing the JEDEC manufacturer ID of the provider of the core. This register must be readable in any implementation, but a value of 0 can be returned to indicate the field is not implemented or that this is a non-commercial implementation.</p>
</blockquote>
<p>Then in section 3.3, Machine-level instructions are:</p>
<ul>
<li>ECALL</li>
<li>MRET</li>
<li>WFI</li>
</ul>
<p>I will just put <code>ECALL</code> description for reference</p>
<blockquote>
<p>The ECALL instruction is used to make a request to the supporting execution environment.  When executed in U-mode, S-mode, or M-mode, it generates an environment-call-from-U-mode exception, environment-call-from-S-mode exception, or environment-call-from-M-mode exception, respectively, and performs no other operation.</p>
</blockquote>
<h1 id="deep-dive-into-linux-kernel">Deep Dive into Linux kernel</h1>
<p>Now that we had a quick tour through the specs Let&rsquo;s see it in action!</p>
<h2 id="kernel-csr-definitions">Kernel CSR definitions</h2>
<p><code>include/asm/csr.h</code> defines the CSRs. I didn&rsquo;t find <code>mvendorid</code> but i thought <code>mstatus</code> is important enough to highlight.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#0f0;font-weight:bold">#define CSR_MSTATUS             0x300
</span></code></pre></div><p><img src="/risv-mstatus.png" alt="Example image"></p>
<p>For example, <code>arch/riscv/kernel/entry.S</code> uses as follows</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">csrw CSR_SCRATCH, x0
</code></pre></div><h2 id="exception-handler-and-mret">Exception handler and mret</h2>
<p>I will start with <code>handle_exception</code> which calls <code>mret</code> and work my way backward</p>
<p><code>arch/riscv/kernel/entry.S</code> defines <code>handle_exception</code> which handle syscalls (among other exceptions).</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm">ENTRY(handle_exception)
</code></pre></div><p>Naturally, It has to use <code>mret</code> (or <code>sret</code>).</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#007f7f">#ifdef CONFIG_RISCV_M_MODE
</span><span style="color:#007f7f"></span>         mret
<span style="color:#007f7f">#else
</span><span style="color:#007f7f"></span>         sret
<span style="color:#007f7f">#endif
</span></code></pre></div><p>And <code>handle_exception</code> is installed in <code>_start</code> defined in <code>arch/riscv/kernel/head.S</code>. As far as i remember, <code>_start</code> is called from boot code(revisit later).</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm">        call setup_trap_vector
        tail smp_callin
<span style="color:#007f7f">#endif /* CONFIG_SMP */
</span><span style="color:#007f7f"></span>
<span style="color:#007f7f">.align</span> <span style="color:#ff0;font-weight:bold">2</span>
setup_trap_vector:
        <span style="color:#f00">/*</span> Set trap vector to exception handler *<span style="color:#f00">/</span>
        la a0, handle_exception
        csrw CSR_TVEC, a0

        <span style="color:#f00">/*</span>
         <span style="color:#f00">*</span> Set sup0 scratch register to <span style="color:#ff0;font-weight:bold">0</span>, indicating to exception vector that
         <span style="color:#f00">*</span> we are presently executing in kernel.
         <span style="color:#f00">*/</span>
        csrw CSR_SCRATCH, zero
        ret
</code></pre></div><p>And from the spec:</p>
<blockquote>
<p>The mtvec register is an MXLEN-bit WARL read/write register that holds trap vector configuration, consisting of a vector base address (BASE) and a vector mode (MODE)</p>
</blockquote>
<h2 id="calling-ecall">Calling ecall</h2>
<p>At this point, we can see the kernel side of the exception. Now, We need to see the user land calling <code>ecall</code>.
Initially i tried to find a way to write C code that generates syscall <code>ecall</code> but it didn&rsquo;t work. I think glibc does the <code>syscall</code>(will have cicle back later).</p>
<p>I grep&rsquo;ed through the kernel and found <code>syscall</code> after setting <code>syscall</code> number in <code>a7</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm">ENTRY(__vdso_getcpu)
        <span style="color:#007f7f">.cfi_startproc</span>
        <span style="color:#f00">/*</span> For now, just do the syscall. *<span style="color:#f00">/</span>
        li a7, __NR_getcpu
        ecall
        ret
        <span style="color:#007f7f">.cfi_endproc</span>
ENDPROC(__vdso_getcpu)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Reviving old project - IPXACT to UVM RAL Generator - ipxactral</title>
            <link>/posts/2022/01/reviving-old-project-ipxact-to-uvm-ral-generator-ipxactral/</link>
            <pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/01/reviving-old-project-ipxact-to-uvm-ral-generator-ipxactral/</guid>
            <description>This was a weekend project back in 2020 to build IPXACT parser and UVM register Model generator. As an example of the lack of imagination at that time, I decided to call it &amp;lsquo;ipaxctral&amp;rsquo;. Creative?! I know!
IPXACT I will just copy/paste the wiki here. But full Spec is on Accellera website
 IP-XACT is an XML format that defines and describes individual, re-usable electronic circuit designs (individual pieces of intellectual property, or IPs) to facilitate their use in creating integrated circuits (i.</description>
            <content type="html"><![CDATA[<p>This was a weekend project back in 2020 to build IPXACT parser and UVM register Model generator.
As an example of the lack of imagination at that time, I decided to call it &lsquo;ipaxctral&rsquo;. Creative?! I know!</p>
<h1 id="ipxact">IPXACT</h1>
<p>I will just copy/paste the wiki here. But full Spec is on Accellera website</p>
<blockquote>
<p>IP-XACT is an XML format that defines and describes individual, re-usable electronic circuit designs (individual pieces of intellectual property, or IPs) to facilitate their use in creating integrated circuits (i.e. microchips).</p>
</blockquote>
<p>The important section is <code>&lt;ipxact:register&gt;</code> as it specifies the registers and fields.</p>
<h1 id="uvm-ral">UVM RAL</h1>
<p>Well, if you haven&rsquo;t seen Register model before, I envy you. You had a good life so far.
I won&rsquo;t dive deep into UVM RAL here. I will just put this from UVM user guide</p>
<blockquote>
<p>The UVM register layer classes are used to create a high-level, object-oriented model for memory-mapped registers and memories in a design under verification (DUV)</p>
</blockquote>
<p>Basically, Once fields and registers are defined, RAL provides a consistent access API for registers read/write.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class foo_csr extends uvm_reg;
rand uvm_reg_field enable;
rand uvm_reg_field ID;
endclass
</code></pre></div><h1 id="design-and-implementation">Design and Implementation</h1>
<p>The plan was simple:</p>
<ul>
<li>Use <code>xml.etree</code> to parse IPXACT XML and extract registers and fields</li>
<li>Build dict for jinja2 <code>context</code></li>
<li>Write Jinja2 templates to consume the context.</li>
</ul>
<p>Easy enought. Right? I thought so. But XML is really really bad format to iterate. Anyway, I finally managed to build my own tree(nested dict really).</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">  <span style="color:#fff;font-weight:bold">for</span> reg in addressBlock.findall(<span style="color:#0ff;font-weight:bold">&#34;ipxact:register&#34;</span>, ns):
                    reg_context = {}
                    block_context[<span style="color:#0ff;font-weight:bold">&#34;registers&#34;</span>].append(reg_context)
                    reg_context[<span style="color:#0ff;font-weight:bold">&#34;name&#34;</span>] = reg.find(<span style="color:#0ff;font-weight:bold">&#34;ipxact:name&#34;</span>, ns).text
                    reg_context[<span style="color:#0ff;font-weight:bold">&#34;size&#34;</span>] = reg.find(<span style="color:#0ff;font-weight:bold">&#34;ipxact:size&#34;</span>, ns).text
                    reg_context[<span style="color:#0ff;font-weight:bold">&#34;addressOffset&#34;</span>] = reg.find(
                        <span style="color:#0ff;font-weight:bold">&#34;ipxact:addressOffset&#34;</span>, ns
                    ).text
                    reg_context[<span style="color:#0ff;font-weight:bold">&#34;fields&#34;</span>] = []
                    <span style="color:#fff;font-weight:bold">for</span> field in reg.findall(<span style="color:#0ff;font-weight:bold">&#34;ipxact:field&#34;</span>, ns):
                        field_context = {}
                        reg_context[<span style="color:#0ff;font-weight:bold">&#34;fields&#34;</span>].append(field_context)
                        field_context[<span style="color:#0ff;font-weight:bold">&#34;name&#34;</span>] = field.find(<span style="color:#0ff;font-weight:bold">&#34;ipxact:name&#34;</span>, ns).text
                        field_context[<span style="color:#0ff;font-weight:bold">&#34;description&#34;</span>] = field.find(
                            <span style="color:#0ff;font-weight:bold">&#34;ipxact:description&#34;</span>, ns
                        ).text
                        field_context[<span style="color:#0ff;font-weight:bold">&#34;bitOffset&#34;</span>] = field.find(
                            <span style="color:#0ff;font-weight:bold">&#34;ipxact:bitOffset&#34;</span>, ns
                        ).text
                        field_context[<span style="color:#0ff;font-weight:bold">&#34;bitWidth&#34;</span>] = field.find(
                            <span style="color:#0ff;font-weight:bold">&#34;ipxact:bitWidth&#34;</span>, ns
                        ).text
                        field_context[<span style="color:#0ff;font-weight:bold">&#34;access&#34;</span>] = access2short(
                            field.find(<span style="color:#0ff;font-weight:bold">&#34;ipxact:access&#34;</span>, ns).text
                        )
                        field_context[<span style="color:#0ff;font-weight:bold">&#34;reset&#34;</span>] = (
                            field.find(<span style="color:#0ff;font-weight:bold">&#34;ipxact:resets&#34;</span>, ns)
                            .find(<span style="color:#0ff;font-weight:bold">&#34;ipxact:reset&#34;</span>, ns)
                            .find(<span style="color:#0ff;font-weight:bold">&#34;ipxact:value&#34;</span>, ns)
                            .text
                        )
</code></pre></div><p>Once I have that working, I can pass the <code>contexts</code> to Jinja to render.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">                    reg_template = self.jinja_env.get_template(<span style="color:#0ff;font-weight:bold">&#34;reg.sv.jinja&#34;</span>)
                    txt = reg_template.render(context=reg_context)
                    <span style="color:#fff;font-weight:bold">print</span>(txt)
                block_template = self.jinja_env.get_template(<span style="color:#0ff;font-weight:bold">&#34;reg_block.sv.jinja&#34;</span>)
                txt = block_template.render(context=block_context)
                <span style="color:#fff;font-weight:bold">print</span>(txt)
</code></pre></div><p>The last step is to write the templates to consume the context.</p>
<pre tabindex="0"><code>class {{ context[&quot;name&quot;]}} extends uvm_reg;

  {% for field in context[&quot;fields&quot;] %}
  rand uvm_reg_field {{ field[&quot;name&quot;] }};
  {% endfor %}

  function new (string name = &quot;{{ context[&quot;name&quot;] }}&quot; );
    super.new (name, {{ context.size }} , UVM_NO_COVERAGE);
  endfunction


    virtual function void build ();

  {% for field in context[&quot;fields&quot;] %}
    this.{{ field[&quot;name&quot;] }}   = uvm_reg_field::type_id::create (&quot;{{ field[&quot;name&quot;] }}&quot;);
    this.{{ field[&quot;name&quot;] }}.configure (this, 
                                      {{ field[&quot;bitWidth&quot;] }},
                                       0, 
                                       &quot;{{ field[&quot;access&quot;] }}&quot;, 
                                       0, 
                                       1'h0,
                                       1,
                                       1,
                                       1);
  {% endfor %}

  endfunction
endclass
</code></pre><p>PS. I made the template flexible enough by passing it on CLI. But what I really wanted was to define a better data structure (context API) for Jinja2 to consume. Well, That&rsquo;s why i am reviving it :)</p>
]]></content>
        </item>
        
        <item>
            <title>How much riscv verilog I can write in 5 hours</title>
            <link>/posts/2022/01/how-much-riscv-verilog-i-can-write-in-5-hours/</link>
            <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/01/how-much-riscv-verilog-i-can-write-in-5-hours/</guid>
            <description>While I was waiting for my weekly chicken roast to cook, I had this really bad idea for a challenge. how much riscv verilog i can write from scratch in the next 2 hours until the chicken is done?
So, yeah that&amp;rsquo;s what I did on the last day of new year vacation.
2 hours to V hours I thought to start with a skeleton for single-cycle (See [H and H][1]) and try to build the blocks bottom up style.</description>
            <content type="html"><![CDATA[<p>While I was waiting for my weekly chicken roast to cook, I had this really bad idea for a challenge. <strong>how much riscv verilog i can write from scratch in the next 2 hours until the chicken is done?</strong></p>
<p>So, yeah that&rsquo;s what I did on the last day of new year vacation.</p>
<h1 id="2-hours-to-v-hours">2 hours to V hours</h1>
<p>I thought to start with a skeleton for single-cycle (See [H and H][1]) and try to build the blocks bottom up style.</p>
<p>At the 2 hour mark(minus the chicken prep time), I wrote</p>
<ul>
<li>Basic small blocks.</li>
<li>Loaded make-shift hex.</li>
<li>Spent 20 minutes to make VCD work with iverilog(I want that time back)</li>
</ul>
<p>Not bad but it was obvious I failed the 2-hour challenge. So, I changed  it to 5 hours instead. It seemed like a lucky number :)</p>
<h1 id="basic-blocks">Basic blocks</h1>
<ul>
<li>RAM</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">module</span> ram #(<span style="color:#fff;font-weight:bold">parameter</span> WIDTH=<span style="color:#ff0;font-weight:bold">32</span>, <span style="color:#fff;font-weight:bold">parameter</span> ADDR=<span style="color:#ff0;font-weight:bold">32</span>) (
	<span style="color:#fff;font-weight:bold">input</span> <span style="color:#fff;font-weight:bold">wire</span> clk,
	<span style="color:#fff;font-weight:bold">input</span> <span style="color:#fff;font-weight:bold">wire</span> we,
    <span style="color:#fff;font-weight:bold">input</span> <span style="color:#fff;font-weight:bold">wire</span> [ WIDTH - <span style="color:#ff0;font-weight:bold">1</span>: <span style="color:#ff0;font-weight:bold">0</span>] din,
    <span style="color:#fff;font-weight:bold">input</span> <span style="color:#fff;font-weight:bold">wire</span> [ADDR-<span style="color:#ff0;font-weight:bold">1</span> : <span style="color:#ff0;font-weight:bold">0</span>] addr,
    <span style="color:#fff;font-weight:bold">output</span> <span style="color:#fff;font-weight:bold">wire</span> [ WIDTH - <span style="color:#ff0;font-weight:bold">1</span>: <span style="color:#ff0;font-weight:bold">0</span>] dout
);
	<span style="color:#fff;font-weight:bold">reg</span> [WIDTH-<span style="color:#ff0;font-weight:bold">1</span>:<span style="color:#ff0;font-weight:bold">0</span>] mem [ <span style="color:#ff0;font-weight:bold">100</span> : <span style="color:#ff0;font-weight:bold">0</span>]; 

	<span style="color:#fff;font-weight:bold">assign</span> dout = mem[addr]; 


	<span style="color:#fff;font-weight:bold">always</span> @(<span style="color:#fff;font-weight:bold">posedge</span> clk) 	<span style="color:#fff;font-weight:bold">begin</span>
		<span style="color:#fff;font-weight:bold">if</span> (we) <span style="color:#fff;font-weight:bold">begin</span>
			<span style="color:#fff;font-weight:bold">$display</span>(<span style="color:#0ff;font-weight:bold">&#34;%t Writing ram[0x%0x]=0x%0x&#34;</span>, <span style="color:#fff;font-weight:bold">$time</span>, addr, din);
			mem[addr] = din;
		<span style="color:#fff;font-weight:bold">end</span>
	<span style="color:#fff;font-weight:bold">end</span>
<span style="color:#fff;font-weight:bold">endmodule</span>
</code></pre></div><ul>
<li>ROM</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">
<span style="color:#fff;font-weight:bold">module</span> rom #(<span style="color:#fff;font-weight:bold">parameter</span> WIDTH=<span style="color:#ff0;font-weight:bold">32</span>, <span style="color:#fff;font-weight:bold">parameter</span> ADDR=<span style="color:#ff0;font-weight:bold">32</span>) (
    <span style="color:#fff;font-weight:bold">input</span>  <span style="color:#fff;font-weight:bold">wire</span> [ADDR  - <span style="color:#ff0;font-weight:bold">1</span> : <span style="color:#ff0;font-weight:bold">0</span>] addr,
    <span style="color:#fff;font-weight:bold">output</span> <span style="color:#fff;font-weight:bold">wire</span> [WIDTH - <span style="color:#ff0;font-weight:bold">1</span> : <span style="color:#ff0;font-weight:bold">0</span>] dout
);

	<span style="color:#fff;font-weight:bold">reg</span> [WIDTH-<span style="color:#ff0;font-weight:bold">1</span>:<span style="color:#ff0;font-weight:bold">0</span>] mem [ <span style="color:#ff0;font-weight:bold">100</span> : <span style="color:#ff0;font-weight:bold">0</span>];

	<span style="color:#fff;font-weight:bold">assign</span> dout = mem[addr]; 
<span style="color:#fff;font-weight:bold">endmodule</span>
</code></pre></div><ul>
<li>Register file</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">module</span> regfile#(<span style="color:#fff;font-weight:bold">parameter</span> WIDTH=<span style="color:#ff0;font-weight:bold">32</span>) (
	<span style="color:#fff;font-weight:bold">input</span> clk,
	<span style="color:#fff;font-weight:bold">input</span> [<span style="color:#ff0;font-weight:bold">4</span>:<span style="color:#ff0;font-weight:bold">0</span>] addr1,
	<span style="color:#fff;font-weight:bold">output</span> [<span style="color:#ff0;font-weight:bold">31</span>:<span style="color:#ff0;font-weight:bold">0</span>] dout1,
	
	<span style="color:#fff;font-weight:bold">input</span> [<span style="color:#ff0;font-weight:bold">4</span>:<span style="color:#ff0;font-weight:bold">0</span>] addr2,
	<span style="color:#fff;font-weight:bold">output</span> [<span style="color:#ff0;font-weight:bold">31</span>:<span style="color:#ff0;font-weight:bold">0</span>] dout2,

	<span style="color:#fff;font-weight:bold">input</span> [<span style="color:#ff0;font-weight:bold">4</span>:<span style="color:#ff0;font-weight:bold">0</span>] addr3,
	<span style="color:#fff;font-weight:bold">input</span> [<span style="color:#ff0;font-weight:bold">31</span>:<span style="color:#ff0;font-weight:bold">0</span>] din3,
	<span style="color:#fff;font-weight:bold">input</span> we3
);
	<span style="color:#fff;font-weight:bold">reg</span> [WIDTH-<span style="color:#ff0;font-weight:bold">1</span>:<span style="color:#ff0;font-weight:bold">0</span>] mem [<span style="color:#ff0;font-weight:bold">0</span>:<span style="color:#ff0;font-weight:bold">31</span>] ;
	
	<span style="color:#007f7f">// x0 is zero
</span><span style="color:#007f7f"></span>	<span style="color:#fff;font-weight:bold">assign</span> dout1 = addr1 == <span style="color:#ff0;font-weight:bold">0</span> ? <span style="color:#ff0;font-weight:bold">5</span><span style="color:#ff0;font-weight:bold">&#39;b00000</span>: mem[addr1];
	<span style="color:#fff;font-weight:bold">assign</span> dout2 = addr2 == <span style="color:#ff0;font-weight:bold">0</span> ? <span style="color:#ff0;font-weight:bold">5</span><span style="color:#ff0;font-weight:bold">&#39;b00000</span>: mem[addr2];

	<span style="color:#fff;font-weight:bold">always</span> @(<span style="color:#fff;font-weight:bold">posedge</span> clk) <span style="color:#fff;font-weight:bold">begin</span>
		<span style="color:#007f7f">// Don&#39;t write to x0
</span><span style="color:#007f7f"></span>		<span style="color:#fff;font-weight:bold">if</span> (we3 &amp;&amp; (addr3 != <span style="color:#ff0;font-weight:bold">5</span><span style="color:#ff0;font-weight:bold">&#39;b00000</span>)) <span style="color:#fff;font-weight:bold">begin</span>
			<span style="color:#fff;font-weight:bold">$display</span>(<span style="color:#0ff;font-weight:bold">&#34;%t Writing regfile[%0d]=0x%0x&#34;</span>, <span style="color:#fff;font-weight:bold">$time</span>, addr3, din3);
			mem[addr3] &lt;= din3;
		<span style="color:#fff;font-weight:bold">end</span>
	<span style="color:#fff;font-weight:bold">end</span>

<span style="color:#fff;font-weight:bold">endmodule</span>
</code></pre></div><ul>
<li>ALU(add only)</li>
</ul>
<h1 id="data-path-and-control-unit">Data-path and control unit</h1>
<p>I started with <code>LW</code> datapath then control to pipe-clean the connection all the way to memory and back to regfile and I used the usual stages:</p>
<ul>
<li>Fetch</li>
<li>Decode</li>
<li>Execute</li>
<li>Write-back</li>
</ul>
<p><code>LW</code> and <code>SW</code> follow similar format except the immediate. So, Decoding was not that hard</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">        <span style="color:#fff;font-weight:bold">assign</span> opcode   = instr[`OP_RANGE];
        <span style="color:#fff;font-weight:bold">assign</span> funct3   = instr[`FUNCT3_RANGE];
        <span style="color:#fff;font-weight:bold">assign</span> rf1              = instr[`RS1_RANGE];
        <span style="color:#fff;font-weight:bold">assign</span> rf2              = instr[`RS2_RANGE];
        <span style="color:#fff;font-weight:bold">assign</span> rf3              = instr[`RD_RANGE];
        <span style="color:#fff;font-weight:bold">assign</span> imm11_0 = (imm_mux == <span style="color:#ff0;font-weight:bold">0</span> )? instr[`IMM_11_0_RANGE] : {instr[<span style="color:#ff0;font-weight:bold">31</span>:<span style="color:#ff0;font-weight:bold">25</span>], instr[<span style="color:#ff0;font-weight:bold">11</span>:<span style="color:#ff0;font-weight:bold">7</span>]};
</code></pre></div><p>And control unit is not complicated as well.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">       <span style="color:#fff;font-weight:bold">case</span> (opcode)
                        <span style="color:#ff0;font-weight:bold">7</span><span style="color:#ff0;font-weight:bold">&#39;b0000011</span> :
                                <span style="color:#fff;font-weight:bold">case</span> (funct3)
                                <span style="color:#ff0;font-weight:bold">3</span><span style="color:#ff0;font-weight:bold">&#39;b010</span> : <span style="color:#007f7f">// LW
</span><span style="color:#007f7f"></span>                                        <span style="color:#fff;font-weight:bold">begin</span>
                                                rf3_we_control  &lt;= <span style="color:#ff0;font-weight:bold">1</span>;
                                                alu_control     &lt;= <span style="color:#ff0;font-weight:bold">0</span>;
                                                mem_we                  &lt;= <span style="color:#ff0;font-weight:bold">0</span>;
                                                imm_mux                 &lt;= <span style="color:#ff0;font-weight:bold">0</span>;
                                        <span style="color:#fff;font-weight:bold">end</span>
                                <span style="color:#fff;font-weight:bold">endcase</span>

                        <span style="color:#ff0;font-weight:bold">7</span><span style="color:#ff0;font-weight:bold">&#39;b0100011</span> :
                                <span style="color:#fff;font-weight:bold">case</span> (funct3)
                                <span style="color:#ff0;font-weight:bold">3</span><span style="color:#ff0;font-weight:bold">&#39;b010</span> : <span style="color:#007f7f">//SW
</span><span style="color:#007f7f"></span>                                        <span style="color:#fff;font-weight:bold">begin</span>
                                                rf3_we_control  &lt;= <span style="color:#ff0;font-weight:bold">0</span>;
                                                alu_control     &lt;= <span style="color:#ff0;font-weight:bold">0</span>;
                                                mem_we                  &lt;= <span style="color:#ff0;font-weight:bold">1</span>;
                                                imm_mux                 &lt;= <span style="color:#ff0;font-weight:bold">1</span>;
                                        <span style="color:#fff;font-weight:bold">end</span>
                                <span style="color:#fff;font-weight:bold">endcase</span>
                        <span style="color:#fff;font-weight:bold">endcase</span>
                <span style="color:#fff;font-weight:bold">end</span>
        <span style="color:#fff;font-weight:bold">end</span>

</code></pre></div><p>I used machine code from previous post. Hopefully I can complete the simple assembler to generate hex myself. For now, I used the following two instruction:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"> fe042623                sw      zero,-20(s0)
 fec42783                lw      a5,-20(s0)
</code></pre></div><p>And it works! Kinda!</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">                  <span style="color:#ff0;font-weight:bold">25</span> Writing ram[0xa]=0x0
                  <span style="color:#ff0;font-weight:bold">35</span> Writing regfile[15]=0x0
</code></pre></div><p>and mandatory gtkwave pic</p>
<p><img src="/rv5_gtkwave.png" alt="Example image"></p>
<h1 id="gotchas">Gotchas</h1>
<p><strong>Issue 1</strong> iverilog doesn&rsquo;t play nice with multi-dim arrays(ie memories)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">`ifdef SIM
<span style="color:#fff;font-weight:bold">generate</span>
  <span style="color:#fff;font-weight:bold">genvar</span> idx;
  <span style="color:#fff;font-weight:bold">for</span>(idx = <span style="color:#ff0;font-weight:bold">0</span>; idx &lt; <span style="color:#ff0;font-weight:bold">32</span>; idx = idx+<span style="color:#ff0;font-weight:bold">1</span>) <span style="color:#fff;font-weight:bold">begin</span>: x
    <span style="color:#fff;font-weight:bold">wire</span> [<span style="color:#ff0;font-weight:bold">31</span>:<span style="color:#ff0;font-weight:bold">0</span>] tmp;
    <span style="color:#fff;font-weight:bold">assign</span> tmp = mem[idx];
  <span style="color:#fff;font-weight:bold">end</span>
<span style="color:#fff;font-weight:bold">endgenerate</span>
`endif
</code></pre></div><p><strong>Issue 2</strong> Reset to control unit
as i start the PC at 0, after reset the first instruction is executed twice until the PC changes to next instruction.
The solution(Hacky as hell), feed reset to control unit and keep default control signals to prevent regfile or memory write in reset.</p>
<p>[1] <a href="https://www.amazon.co.uk/Digital-Design-Computer-Architecture-2012-12-25/dp/B01MZ3QSGK/ref=sr_1_2?crid=1XTIG8ZPN6M62&amp;keywords=digital-Design-Computer-Architecture-Harris&amp;qid=1641236355&amp;sprefix=digital-design-computer-architecture-harris%2Caps%2C423&amp;sr=8-2">https://www.amazon.co.uk/Digital-Design-Computer-Architecture-2012-12-25/dp/B01MZ3QSGK/ref=sr_1_2?crid=1XTIG8ZPN6M62&amp;keywords=digital-Design-Computer-Architecture-Harris&amp;qid=1641236355&amp;sprefix=digital-design-computer-architecture-harris%2Caps%2C423&amp;sr=8-2</a></p>
<p>[2] RISCV specs</p>
]]></content>
        </item>
        
        <item>
            <title>Blog setup</title>
            <link>/posts/2022/01/blog-setup/</link>
            <pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/01/blog-setup/</guid>
            <description>This is write-up explaining how to setup a blog with Hugo, Markdown and github pages.
Hugo setup I am using Hugo which is an easy and fast static site generator. I use Markdown for content.
 Create a new Hugo site  hugo new site blog  Install a theme Personally, I like this theme.  git submodule add https://github.com/rhazdon/hugo-theme-hello-friend-ng.git themes/hello-friend-ng/ Then configure the theme in config.toml
theme = &amp;#34;hello-friend-ng&amp;#34;  Create first post  hugo new posts/my-first-post.</description>
            <content type="html"><![CDATA[<p>This is write-up explaining how to setup a blog with Hugo, Markdown and github pages.</p>
<h1 id="hugo-setup">Hugo setup</h1>
<p>I am using <a href="https://gohugo.io/getting-started/quick-start/">Hugo</a> which is an easy and fast static site generator. I use Markdown for content.</p>
<ul>
<li>Create a new Hugo site</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hugo new site blog
</code></pre></div><ul>
<li>Install a theme
Personally, I like this <a href="https://github.com/rhazdon/hugo-theme-hello-friend-ng.git">theme</a>.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git submodule add https://github.com/rhazdon/hugo-theme-hello-friend-ng.git themes/hello-friend-ng/
</code></pre></div><p>Then configure the theme in <code>config.toml</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml">theme = <span style="color:#0ff;font-weight:bold">&#34;hello-friend-ng&#34;</span>
</code></pre></div><ul>
<li>Create first post</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hugo new posts/my-first-post.md
</code></pre></div><p>hugo uses temple from <code>archetypes/default.md</code>.</p>
<pre tabindex="0"><code>---
title: &quot;{{ replace .Name &quot;-&quot; &quot; &quot; | title }}&quot;
date: {{ .Date }}
tags:
---
</code></pre><ul>
<li>Running Hugo
For running a local server with latest changes (-D for drafts, -F for future posts)</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hugo server -D -F
</code></pre></div><p>Just to build the output pages to be deployed</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hugo
</code></pre></div><h1 id="github-pages-and-actions">Github pages and actions</h1>
<p>Github offers a great service to host a repo on <strong>&laquo;user&raquo;.github.io</strong>. And using github actions, you configured github pages to build every time i push into <strong>master</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="font-weight:bold">name</span>: github pages

<span style="font-weight:bold">on</span>:
  <span style="font-weight:bold">push</span>:
    <span style="font-weight:bold">branches</span>:
      - master  <span style="color:#007f7f"># Set a branch to deploy</span>

<span style="font-weight:bold">jobs</span>:
  <span style="font-weight:bold">deploy</span>:
    <span style="font-weight:bold">runs-on</span>: ubuntu-18.04
    <span style="font-weight:bold">steps</span>:
      - <span style="font-weight:bold">uses</span>: actions/checkout@v2
        <span style="font-weight:bold">with</span>:
          <span style="font-weight:bold">submodules</span>: <span style="color:#fff;font-weight:bold">true</span>  <span style="color:#007f7f"># Fetch Hugo themes (true OR recursive)</span>
          <span style="font-weight:bold">fetch-depth</span>: <span style="color:#ff0;font-weight:bold">0</span>    <span style="color:#007f7f"># Fetch all history for .GitInfo and .Lastmod</span>

      - <span style="font-weight:bold">name</span>: Setup Hugo
        <span style="font-weight:bold">uses</span>: peaceiris/actions-hugo@v2
        <span style="font-weight:bold">with</span>:
          <span style="font-weight:bold">hugo-version</span>: <span style="color:#0ff;font-weight:bold">&#39;0.68.3&#39;</span>
          <span style="font-weight:bold">extended</span>: <span style="color:#fff;font-weight:bold">true</span>

      - <span style="font-weight:bold">name</span>: Build
        <span style="font-weight:bold">run</span>: hugo --minify

      - <span style="font-weight:bold">name</span>: Deploy
        <span style="font-weight:bold">uses</span>: peaceiris/actions-gh-pages@v3
        <span style="font-weight:bold">with</span>:
          <span style="font-weight:bold">github_token</span>: ${{ secrets.GITHUB_TOKEN }}
          <span style="font-weight:bold">publish_dir</span>: ./public
</code></pre></div><p>Finally, You can always buy a domain name and configure DNS redirects to github pages. but no ain&rsquo;t nobody have time for that.</p>
]]></content>
        </item>
        
        <item>
            <title>Why I blog</title>
            <link>/posts/2022/01/why-i-blog/</link>
            <pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/01/why-i-blog/</guid>
            <description>A friend asked me why I am more active with blog posts recently and It&amp;rsquo;s only fitting to reply with blog post( found it funny too).
The thing is, since my undergrad years, I am used to take notes on everything. Lecture notes, project notes, problem sets notes. Probably all engineering students do.
I was introduced to the concept of a README(it has a wiki and everyhthing) back in 2011 and I was hooked.</description>
            <content type="html"><![CDATA[<p>A friend asked me why I am more active with blog posts recently and It&rsquo;s only fitting to reply with blog post( found it funny too).</p>
<p>The thing is, since my undergrad years, I am used to take notes on everything. Lecture notes, project notes, problem sets notes. Probably all engineering students do.</p>
<p>I was introduced to the concept of a README(it has a <a href="https://en.wikipedia.org/wiki/README">wiki</a> and everyhthing) back in 2011 and I was hooked. So, I have been writing 100&rsquo;s of README on every technical projects i was involved in.</p>
<p>When it comes to blogging, I started doing that in 2019 as a way to organize my README folder. And i was interested in python so i started using (and reading) a static generator called (Pelican)[https://blog.getpelican.com/]. I liked using reStructuredText Then Markdown to write README.md and generate HTML organized documents. It definitely looked better than a dry README text files.</p>
<p>Anyway, This is my attempt to write reasons why i blog:</p>
<p><strong>Exercise of free will</strong> Humor me for just a second. I am not paid for it and never will get paid for. nobody asks for it. nobody expects me to do it.
I only do it because I want to. I choose when and what to write. In a world where we have to do a lot of things because we have to, IMHO it is a personal victory to find such a thing. Hope that made sense.</p>
<p><strong>Idle hands are the devil&rsquo;s workshop</strong> Well, I will just say it. I always kept myself busy with something. Although, I worked long hours over the years(60-70 hours a week), I did get some occasional free time, and this seemed like a good way to use up that time. I did try to learn few hobbies that i like (guitar, martial arts) but nothing really worked out.</p>
<p><strong>Giving back</strong> Over the years, I have been reading blog posts written by people from all over the world and I learnt a lot from these blog posts. So, This is my way of giving back to the internet. Well, I can&rsquo;t claim my blog is any good but I think maybe someone in 10 years googles something and my blog post shows up, and it&rsquo;s actually useful for them. Not likely but who knows!</p>
<p><strong>Good old fashioned curiosity</strong> I was lucky to have interesting career that I love. But whatever you do, there is a limit on what a job teaches you. If you want to learn something, you have to go the extra mile and learn it on your own. Basically, Reading what other people created and writing about it is my way to indulge my curiosity.</p>
<p>Thank you for coming to my Ted talk..</p>
]]></content>
        </item>
        
        <item>
            <title>Langton Ant game</title>
            <link>/posts/2021/12/langton-ant-game/</link>
            <pubDate>Fri, 31 Dec 2021 00:00:00 +0000</pubDate>
            
            <guid>/posts/2021/12/langton-ant-game/</guid>
            <description>This is post is about Langton&amp;rsquo;s ant. Like Conway&amp;rsquo;s game of life, It&amp;rsquo;s considered Cellular automaton.
 A cellular automaton consists of a regular grid of cells, each in one of a finite number of states, such as on and off (in contrast to a coupled map lattice). The grid can be in any finite number of dimensions. For each cell, a set of cells called its neighborhood is defined relative to the specified cell.</description>
            <content type="html"><![CDATA[<p>This is post is about <a href="https://en.wikipedia.org/wiki/Langton%27s_ant">Langton&rsquo;s ant</a>. Like
<a href="/posts/2020/05/conway-game-of-life/">Conway&rsquo;s game of life</a>, It&rsquo;s considered <code>Cellular automaton</code>.</p>
<blockquote>
<p>A cellular automaton consists of a regular grid of cells, each in one of a finite number of states, such as on and off (in contrast to a coupled map lattice). The grid can be in any finite number of dimensions. For each cell, a set of cells called its neighborhood is defined relative to the specified cell. An initial state (time t = 0) is selected by assigning a state for each cell. A new generation is created (advancing t by 1), according to some fixed rule (generally, a mathematical function)[3] that determines the new state of each cell in terms of the current state of the cell and the states of the cells in its neighborhood.</p>
</blockquote>
<p>For me, I just like the idea of emerging patters from set of rules and an initial random state. And most importantly watching the animation playing :)</p>
<p>The rules are simple(from wiki):</p>
<blockquote>
<p>Squares on a plane are colored variously either black or white. We arbitrarily identify one square as the &ldquo;ant&rdquo;. The ant can travel in any of the four cardinal directions at each step it takes. The &ldquo;ant&rdquo; moves according to the rules below:</p>
<p>At a white square, turn 90° clockwise, flip the color of the square, move forward one unit
At a black square, turn 90° counter-clockwise, flip the color of the square, move forward one unit</p>
</blockquote>
<h1 id="implementation">Implementation</h1>
<p>I used the same infrastructure i did for Conway&rsquo;s game. So,I just needed to write the <code>generation</code></p>
<p>Two implementation details:</p>
<ul>
<li>
<p>Ant state: I wrote this after midnight, So I went for the simplest representation for the ant state. A tuple with (x,y, direction) where direction is 0 to 3 for up, right, down and left.</p>
</li>
<li>
<p>Boundary movement: I made a assumption that ant moves beyond the boundary, it show up on the other side(implemented with <code>calc_ij</code> )</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> calc_ij(N, i , j):
    ii = i % N
    jj = j % N
    <span style="color:#fff;font-weight:bold">return</span> (ii, jj)

    <span style="color:#fff;font-weight:bold">def</span> rotate_ant(self,rot):
        i , j , <span style="color:#fff;font-weight:bold">dir</span> = self.ant
        <span style="color:#fff;font-weight:bold">if</span> rot == <span style="color:#0ff;font-weight:bold">&#34;CW&#34;</span>:
            new_dir = (<span style="color:#fff;font-weight:bold">dir</span> + <span style="color:#ff0;font-weight:bold">1</span>) % <span style="color:#ff0;font-weight:bold">4</span>
        <span style="color:#fff;font-weight:bold">if</span> rot == <span style="color:#0ff;font-weight:bold">&#34;ACW&#34;</span>:
            new_dir = (<span style="color:#fff;font-weight:bold">dir</span> - <span style="color:#ff0;font-weight:bold">1</span>) % <span style="color:#ff0;font-weight:bold">4</span>
        self.ant = (i,j,new_dir)

    <span style="color:#fff;font-weight:bold">def</span> move_ant(self):
        i , j , <span style="color:#fff;font-weight:bold">dir</span> = self.ant
        <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">dir</span> == <span style="color:#ff0;font-weight:bold">0</span>:
            ii, jj = calc_ij(self.N, i-<span style="color:#ff0;font-weight:bold">1</span>,j)
        <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">dir</span> == <span style="color:#ff0;font-weight:bold">1</span>:
            ii, jj = calc_ij(self.N, i,j+<span style="color:#ff0;font-weight:bold">1</span>)
        <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">dir</span> == <span style="color:#ff0;font-weight:bold">2</span>:
            ii, jj = calc_ij(self.N, i+<span style="color:#ff0;font-weight:bold">1</span>,j)
        <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">dir</span> == <span style="color:#ff0;font-weight:bold">3</span>:
            ii, jj = calc_ij(self.N, i,j-<span style="color:#ff0;font-weight:bold">1</span>)
        self.ant = (ii, jj , <span style="color:#fff;font-weight:bold">dir</span>)
</code></pre></div><p>and f-ant-astic animation ready to go.</p>
<p><img src="/langton_ant1.png" alt="Example image"></p>
<h1 id="putting-it-all-together">putting it all together</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">import</span> argparse
<span style="color:#fff;font-weight:bold">import</span> random

<span style="color:#fff;font-weight:bold">import</span> numpy <span style="color:#fff;font-weight:bold">as</span> np
<span style="color:#fff;font-weight:bold">from</span> scipy <span style="color:#fff;font-weight:bold">import</span> signal
<span style="color:#fff;font-weight:bold">import</span> matplotlib.pyplot <span style="color:#fff;font-weight:bold">as</span> plt 
<span style="color:#fff;font-weight:bold">import</span> matplotlib.animation <span style="color:#fff;font-weight:bold">as</span> animation
<span style="color:#fff;font-weight:bold">from</span> matplotlib.colors <span style="color:#fff;font-weight:bold">import</span> ListedColormap


<span style="color:#fff;font-weight:bold">def</span> calc_ij(N, i , j):
    ii = i % N
    jj = j % N
    <span style="color:#fff;font-weight:bold">return</span> (ii, jj)

<span style="color:#fff;font-weight:bold">class</span> Game():
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, N=<span style="color:#ff0;font-weight:bold">10</span>, G=<span style="color:#ff0;font-weight:bold">1</span>, shape=<span style="color:#0ff;font-weight:bold">&#39;random&#39;</span>):
        self.N = N
        self.G = G
        self.grid = <span style="color:#fff;font-weight:bold">None</span>
        self.ant = (random.randint(<span style="color:#ff0;font-weight:bold">0</span>, N-<span style="color:#ff0;font-weight:bold">1</span>),random.randint(<span style="color:#ff0;font-weight:bold">0</span>, N-<span style="color:#ff0;font-weight:bold">1</span>), random.randint(<span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">3</span>)) <span style="color:#007f7f"># TODO randomize</span>

        <span style="color:#fff;font-weight:bold">if</span> shape == <span style="color:#0ff;font-weight:bold">&#39;random&#39;</span>:
            self.grid = np.random.choice(a=[<span style="color:#fff;font-weight:bold">False</span>, <span style="color:#fff;font-weight:bold">True</span>], size=(N, N))
        <span style="color:#fff;font-weight:bold">elif</span> shape == <span style="color:#0ff;font-weight:bold">&#39;allw&#39;</span>:
            self.grid = np.zeros((N, N), dtype=<span style="color:#0ff;font-weight:bold">&#39;bool&#39;</span>)

    <span style="color:#fff;font-weight:bold">def</span> rotate_ant(self,rot):
        i , j , <span style="color:#fff;font-weight:bold">dir</span> = self.ant
        <span style="color:#fff;font-weight:bold">if</span> rot == <span style="color:#0ff;font-weight:bold">&#34;CW&#34;</span>:
            new_dir = (<span style="color:#fff;font-weight:bold">dir</span> + <span style="color:#ff0;font-weight:bold">1</span>) % <span style="color:#ff0;font-weight:bold">4</span>
        <span style="color:#fff;font-weight:bold">if</span> rot == <span style="color:#0ff;font-weight:bold">&#34;ACW&#34;</span>:
            new_dir = (<span style="color:#fff;font-weight:bold">dir</span> - <span style="color:#ff0;font-weight:bold">1</span>) % <span style="color:#ff0;font-weight:bold">4</span>
        self.ant = (i,j,new_dir)

    <span style="color:#fff;font-weight:bold">def</span> move_ant(self):
        i , j , <span style="color:#fff;font-weight:bold">dir</span> = self.ant
        <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">dir</span> == <span style="color:#ff0;font-weight:bold">0</span>:
            ii, jj = calc_ij(self.N, i-<span style="color:#ff0;font-weight:bold">1</span>,j)
        <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">dir</span> == <span style="color:#ff0;font-weight:bold">1</span>:
            ii, jj = calc_ij(self.N, i,j+<span style="color:#ff0;font-weight:bold">1</span>)
        <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">dir</span> == <span style="color:#ff0;font-weight:bold">2</span>:
            ii, jj = calc_ij(self.N, i+<span style="color:#ff0;font-weight:bold">1</span>,j)
        <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">dir</span> == <span style="color:#ff0;font-weight:bold">3</span>:
            ii, jj = calc_ij(self.N, i,j-<span style="color:#ff0;font-weight:bold">1</span>)
        self.ant = (ii, jj , <span style="color:#fff;font-weight:bold">dir</span>)

    <span style="color:#fff;font-weight:bold">def</span> step(self):
        i, j , _ = self.ant
        <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;before&#34;</span>, self.ant)
        <span style="color:#fff;font-weight:bold">print</span>(self.grid[i,j])
        <span style="color:#fff;font-weight:bold">print</span>(self.grid)

        <span style="color:#fff;font-weight:bold">if</span> self.grid[i,j] ==  <span style="color:#ff0;font-weight:bold">0</span>:
            self.rotate_ant(<span style="color:#0ff;font-weight:bold">&#34;CW&#34;</span>)
            self.grid[i,j] =  <span style="color:#ff0;font-weight:bold">1</span>
            self.move_ant()
        <span style="color:#fff;font-weight:bold">elif</span> self.grid[i,j] ==  <span style="color:#ff0;font-weight:bold">1</span>:
            self.rotate_ant(<span style="color:#0ff;font-weight:bold">&#34;ACW&#34;</span>)
            self.grid[i,j] =  <span style="color:#ff0;font-weight:bold">0</span>
            self.move_ant()
        <span style="color:#fff;font-weight:bold">else</span>:
            <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;error&#34;</span>)
       
        <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;After&#34;</span>, self.ant)
        <span style="color:#fff;font-weight:bold">print</span>(self.grid[i,j])
        <span style="color:#fff;font-weight:bold">print</span>(self.grid)
        <span style="color:#fff;font-weight:bold">return</span> self.grid

    <span style="color:#fff;font-weight:bold">def</span> generations(self):
        <span style="color:#fff;font-weight:bold">for</span> g in <span style="color:#fff;font-weight:bold">range</span> (self.G):
            <span style="color:#fff;font-weight:bold">yield</span> self.step()


    <span style="color:#fff;font-weight:bold">def</span> run(self):
        fig, ax = plt.subplots()
        mat = ax.matshow(self.grid,cmap=ListedColormap([<span style="color:#0ff;font-weight:bold">&#39;w&#39;</span>, <span style="color:#0ff;font-weight:bold">&#39;k&#39;</span>]))   
        ani = animation.FuncAnimation(fig, mat.set_data, self.generations, interval=<span style="color:#ff0;font-weight:bold">1000</span>, repeat=<span style="color:#fff;font-weight:bold">False</span>)
        plt.show()

<span style="color:#fff;font-weight:bold">def</span> main():
    parser = argparse.ArgumentParser(description=<span style="color:#0ff;font-weight:bold">&#39;Langton Ant&#39;</span>)

    parser.add_argument(<span style="color:#0ff;font-weight:bold">&#39;N&#39;</span>, <span style="color:#fff;font-weight:bold">type</span>=<span style="color:#fff;font-weight:bold">int</span>, help=<span style="color:#0ff;font-weight:bold">&#39;Grid Size&#39;</span>)
    parser.add_argument(<span style="color:#0ff;font-weight:bold">&#39;G&#39;</span>, <span style="color:#fff;font-weight:bold">type</span>=<span style="color:#fff;font-weight:bold">int</span>, help=<span style="color:#0ff;font-weight:bold">&#39;Generations Count&#39;</span>)

    args = parser.parse_args()

    g = Game(args.N,args.G, <span style="color:#0ff;font-weight:bold">&#39;random&#39;</span>)
    g.run()

<span style="color:#fff;font-weight:bold">if</span> __name__ == <span style="color:#0ff;font-weight:bold">&#34;__main__&#34;</span>:
    main()
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>RISCV Simple Assembler - Part1</title>
            <link>/posts/2021/12/riscv-simple-assembler-part1/</link>
            <pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate>
            
            <guid>/posts/2021/12/riscv-simple-assembler-part1/</guid>
            <description>This is write-up about a work-in-progress simple riscv assembler in python. The riscv ISA is simple enough to implement in few 100s LOC. Besides,it looked like a good enough project for nice evening.
The following items are on my todo list:
 define all rv32i instructions handle the ABI naming convention(a0-a31, sp, etc) handle pseudoinstruction defined in chapter 25 write tkinter gui for the assembler  riscv rv32i ISA It&amp;rsquo;s risc isa (duh!</description>
            <content type="html"><![CDATA[<p>This is write-up about a <em>work-in-progress</em> simple riscv assembler in python. The riscv ISA is simple enough to implement in few 100s LOC. Besides,it looked like a good enough project for nice evening.</p>
<p>The following items are on my todo list:</p>
<ul>
<li>define all rv32i instructions</li>
<li>handle the ABI naming convention(a0-a31, sp, etc)</li>
<li>handle pseudoinstruction defined in chapter 25</li>
<li>write tkinter gui for the assembler</li>
</ul>
<h1 id="riscv-rv32i-isa">riscv rv32i ISA</h1>
<p>It&rsquo;s risc isa (duh!) with 32bit length. from Chapter 2:</p>
<blockquote>
<p>In the base RV32I ISA, there are four core instruction formats (R/I/S/U), as shown in Figure 2.2.
All are a fixed 32 bits in length and must be aligned on a four-byte boundary in memory.</p>
</blockquote>
<p>the formats are designed for consistency to simplify the decoding hardware.</p>
<blockquote>
<p>The RISC-V ISA keeps the source (rs1 and rs2) and destination (rd) registers at the same position
in all formats to simplify decoding</p>
</blockquote>
<p>The instruction formats are:</p>
<p><img src="/riscv_instruction_formats.png" alt="Example image"></p>
<p>Instruction opcodes are defined in Chapter 24:</p>
<p><img src="/riscv_instruction.png" alt="Example image"></p>
<h1 id="implementation">Implementation</h1>
<p>To get things rolling, I decided to implement each instruction format as derived class from <code>Instruction</code>.
This way i can customize the parsing and code generation. Maybe I need to refactor this to consolidate the common parts(well, move fast and breath things).</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> Instruction():
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, name):
        self.name = name
        self.type = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>
        self.hex_instruct = <span style="color:#fff;font-weight:bold">None</span>
        self.asm_instruct = <span style="color:#fff;font-weight:bold">None</span>

    <span style="color:#fff;font-weight:bold">def</span> __str__(self):
        fields = <span style="color:#0ff;font-weight:bold">&#39;</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#39;</span>.join([<span style="color:#fff;font-weight:bold">str</span>(f) <span style="color:#fff;font-weight:bold">for</span> f in self.fields])
        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">{</span>self.type<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> : </span><span style="color:#0ff;font-weight:bold">{</span>self.name<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> </span><span style="color:#0ff;font-weight:bold">{</span>fields<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>

    <span style="color:#fff;font-weight:bold">def</span> assemble(self):
        <span style="color:#fff;font-weight:bold">raise</span> NotImplementedError()
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> RTypeInstruction(Instruction):
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, name, opcode = <span style="color:#fff;font-weight:bold">None</span>,func3= <span style="color:#fff;font-weight:bold">None</span>, funct7  = <span style="color:#fff;font-weight:bold">None</span>):
        Instruction.__init__(self, name)
        
        self.type =<span style="color:#0ff;font-weight:bold">&#34;R-type&#34;</span>

        self.fields = [
            Field(<span style="color:#0ff;font-weight:bold">&#34;opcode&#34;</span>,<span style="color:#ff0;font-weight:bold">7</span>,opcode),
            Field(<span style="color:#0ff;font-weight:bold">&#34;rd&#34;</span>,<span style="color:#ff0;font-weight:bold">5</span>),
            Field(<span style="color:#0ff;font-weight:bold">&#34;funct3&#34;</span>,<span style="color:#ff0;font-weight:bold">3</span>, func3),
            Field(<span style="color:#0ff;font-weight:bold">&#34;rs1&#34;</span>,<span style="color:#ff0;font-weight:bold">5</span>),
            Field(<span style="color:#0ff;font-weight:bold">&#34;rs2&#34;</span>,<span style="color:#ff0;font-weight:bold">5</span>),
            Field(<span style="color:#0ff;font-weight:bold">&#34;funct7&#34;</span>,<span style="color:#ff0;font-weight:bold">7</span>, funct7)
        ]

    <span style="color:#fff;font-weight:bold">def</span> assemble(self, asm_instruct):
        self.asm_instruct = asm_instruct
        m = re.match(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#39;</span><span style="color:#0ff;font-weight:bold">{</span>self.name<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> ([a-z0-9]+),([a-z0-9]+),([a-z0-9]+)&#39;</span>, asm_instruct)
        <span style="color:#fff;font-weight:bold">if</span> m:
            self.fields[<span style="color:#ff0;font-weight:bold">1</span>].value = reg_to_index_bin(m.groups()[<span style="color:#ff0;font-weight:bold">0</span>])
            self.fields[<span style="color:#ff0;font-weight:bold">3</span>].value = reg_to_index_bin(m.groups()[<span style="color:#ff0;font-weight:bold">1</span>])
            self.fields[<span style="color:#ff0;font-weight:bold">4</span>].value = reg_to_index_bin(m.groups()[<span style="color:#ff0;font-weight:bold">2</span>])
            i = <span style="color:#0ff;font-weight:bold">&#39;&#39;</span>.join(f.value <span style="color:#fff;font-weight:bold">for</span> f in <span style="color:#fff;font-weight:bold">reversed</span>(self.fields))
        
            self.hex_instruct = bin_to_hex(i, <span style="color:#ff0;font-weight:bold">8</span>)
            <span style="color:#fff;font-weight:bold">return</span> self
        <span style="color:#fff;font-weight:bold">else</span>:
            <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">None</span>
</code></pre></div><p>The plan is to define all instructions using the format classes. and let the client code iterate and call <code>format.assemble</code> to match assembly to format classes. Again Hacky API but good for now.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">rv_isa = [
    RTypeIntruction(<span style="color:#0ff;font-weight:bold">&#34;add&#34;</span>,  <span style="color:#0ff;font-weight:bold">&#34;0110011&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;000&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;0000000&#34;</span>),
    RTypeIntruction(<span style="color:#0ff;font-weight:bold">&#34;or&#34;</span>,   <span style="color:#0ff;font-weight:bold">&#34;0110011&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;110&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;0000000&#34;</span>),
    ITypeIntruction(<span style="color:#0ff;font-weight:bold">&#34;andi&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;0010011&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;000&#34;</span>),
    STypeIntruction(<span style="color:#0ff;font-weight:bold">&#34;sb&#34;</span>,   <span style="color:#0ff;font-weight:bold">&#34;0100011&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;000&#34;</span>),
    BTypeIntruction(<span style="color:#0ff;font-weight:bold">&#34;beq&#34;</span>,  <span style="color:#0ff;font-weight:bold">&#34;0100011&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;000&#34;</span>),
]
</code></pre></div><p>Example of client code:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    code = [
        <span style="color:#0ff;font-weight:bold">&#34;add a2,x3,x4&#34;</span>,
        <span style="color:#0ff;font-weight:bold">&#34;or x1,x2,x4&#34;</span>,
        <span style="color:#0ff;font-weight:bold">&#34;andi x1,x2,8&#34;</span>,
        <span style="color:#0ff;font-weight:bold">&#34;sb x1,-20(x2)&#34;</span>,
        <span style="color:#0ff;font-weight:bold">&#34;beq x1,x2,-20&#34;</span>,
    ]
    <span style="color:#fff;font-weight:bold">for</span> asm in code:
        found = <span style="color:#fff;font-weight:bold">False</span>
        <span style="color:#fff;font-weight:bold">for</span> insformat in rv_isa:
            inst = insformat.assemble(asm)
            <span style="color:#fff;font-weight:bold">if</span> inst:
                found = <span style="color:#fff;font-weight:bold">True</span>
                <span style="color:#fff;font-weight:bold">print</span>(inst)
                <span style="color:#fff;font-weight:bold">break</span>
        <span style="color:#fff;font-weight:bold">if</span> found == <span style="color:#fff;font-weight:bold">False</span>:
            <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;Error: asm not found&#34;</span>)
</code></pre></div><p>for output, <code>__str__</code> should work with all instruction format.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">R-type : add opcode[7] <span style="color:#ff0;font-weight:bold">0110011</span>
rd[5] <span style="color:#ff0;font-weight:bold">00010</span>
funct3[3] <span style="color:#ff0;font-weight:bold">000</span>
rs1[5] <span style="color:#ff0;font-weight:bold">00011</span>
rs2[5] <span style="color:#ff0;font-weight:bold">00100</span>
funct7[7] <span style="color:#ff0;font-weight:bold">0000000</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>RISCV Assembly rv64</title>
            <link>/posts/2021/12/riscv-assembly-rv64/</link>
            <pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate>
            
            <guid>/posts/2021/12/riscv-assembly-rv64/</guid>
            <description>This is a write-up about riscv rv64 and the assembly generated by GCC.
The example I am using a pre-built rv64 toolchain from the package gcc-riscv64-linux-gnu
apt install gcc-riscv64-linux-gnu riscv64-linux-gnu-gcc -v The example i am using is very simple. Basically setting a variable on the stack (will see later why we need this) then return that variable.
int main(){ int x; x = 0; return x; } riscv64-linux-gnu-gcc is used with a twist.</description>
            <content type="html"><![CDATA[<p>This is a write-up about riscv rv64 and  the assembly generated by GCC.</p>
<h1 id="the-example">The example</h1>
<p>I am using a pre-built rv64 toolchain from the package <code>gcc-riscv64-linux-gnu</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">apt install gcc-riscv64-linux-gnu
riscv64-linux-gnu-gcc -v
</code></pre></div><p>The example i am using is very simple. Basically setting a variable on the stack (will see later why we need this) then return that variable.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">int</span> main(){
    <span style="color:#fff;font-weight:bold">int</span> x;
    x = <span style="color:#ff0;font-weight:bold">0</span>;
    <span style="color:#fff;font-weight:bold">return</span> x;
}
</code></pre></div><p><code>riscv64-linux-gnu-gcc</code> is used with a twist. This toolchain is using the compressed instructions. To see the full 32 bits, i had to pass the following options to gcc</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">riscv64-linux-gnu-gcc main.c -march=rv64imafd -mabi=lp64d
</code></pre></div><p>vanilla <code>riscv64-linux-gnu-objdump</code> is used to see the generated assembly</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">riscv64-linux-gnu-objdump -d a.out
</code></pre></div><p>Jumping to the disassembled <code>main</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">00000000000005ec &lt;main&gt;:
 5ec:   fe010113                addi    sp,sp,-32
 5f0:   00813c23                sd      s0,24(sp)
 5f4:   <span style="color:#ff0;font-weight:bold">02010413</span>                addi    s0,sp,32
 5f8:   fe042623                sw      zero,-20(s0)
 5fc:   fec42783                lw      a5,-20(s0)
 600:   <span style="color:#ff0;font-weight:bold">00078513</span>                mv      a0,a5
 604:   <span style="color:#ff0;font-weight:bold">01813403</span>                ld      s0,24(sp)
 608:   <span style="color:#ff0;font-weight:bold">02010113</span>                addi    sp,sp,32
 60c:   <span style="color:#ff0;font-weight:bold">00008067</span>                ret
</code></pre></div><p>Note that the register names are not x0-x31 as mentioned in the specs because gcc is using ABI calling convention defined in Chapter 25 of <a href="https://riscv.org/wp-content/uploads/2019/12/riscv-spec-20191213.pdf">RISCV spec</a>
<img src="/riscv_calling_abi.png" alt="Example image"></p>
<p><code>addi</code> is using the following opcode where <code>sp</code> is mapped <code>x2</code>. So, it&rsquo;s easy to understand what <code>fe010113</code> means here.
<img src="/addi_opcode.png" alt="Example image"></p>
<h1 id="assembly-walk-through">Assembly walk-through</h1>
<p>while we are here, we can see the walk-through the generated assembly annotated with explanation for each line.</p>
<p>First, gcc generates boiler-plate code for stack and frame pointers. This is done for all architectures to setup the function frames for successive function calls.</p>
<pre tabindex="0"><code class="language-assembly" data-lang="assembly">00000000000005ec &lt;main&gt;:
 5ec:   fe010113                addi    sp,sp,-32 # move stack pointer up to init stack for the function
 5f0:   00813c23                sd      s0,24(sp) # store s0 (frame pointer callee saved) on the stack
 5f4:   02010413                addi    s0,sp,32  # move frame pointr for the current function
...
...
...
 604:   01813403                ld      s0,24(sp) # restore fp
 608:   02010113                addi    sp,sp,32  # restore sp
 60c:   00008067                ret
</code></pre><p>And the actual code:</p>
<pre tabindex="0"><code class="language-assembly" data-lang="assembly">00000000000005ec &lt;main&gt;:
 5f8:   fe042623                sw      zero,-20(s0) # store 0 to variable x on the stack. Note it's using fp to reference it.
 5fc:   fec42783                lw      a5,-20(s0)  # main return x, so it loads the variable to a5 
 600:   00078513                mv      a0,a5       # move a5 to a0 (return value according to calling convention)
</code></pre>]]></content>
        </item>
        
        <item>
            <title>libusb Hello-World</title>
            <link>/posts/2021/12/libusb-hello-world/</link>
            <pubDate>Sat, 25 Dec 2021 00:00:00 +0000</pubDate>
            
            <guid>/posts/2021/12/libusb-hello-world/</guid>
            <description>I first heard about libusb back in 2011 when I was working on USRP1. At the time, USRP had a really good C++ abstraction library called UHD, which did the heavy lifting talking to libusb. Hopefully, it takes me less than a decade to do a second example.
What is libusb? libusb website says it all
 libusb is a C library that provides generic access to USB devices. It is intended to be used by developers to facilitate the production of applications that communicate with USB hardware.</description>
            <content type="html"><![CDATA[<p>I first heard about libusb back in 2011 when I was working on USRP1. At the time, USRP had a really good C++ abstraction library called UHD, which did the heavy lifting talking to libusb. Hopefully, it takes me less than a decade to do a second example.</p>
<h1 id="what-is-libusb">What is libusb?</h1>
<p><a href="https://libusb.info/">libusb website</a> says it all</p>
<blockquote>
<p>libusb is a C library that provides generic access to USB devices. It is intended to be used by developers to facilitate the production of applications that communicate with USB hardware.</p>
<p>It is portable: Using a single cross-platform API, it provides access to USB devices on Linux, macOS, Windows, etc.</p>
<p>It is user-mode: No special privilege or elevation is required for the application to communicate with a device.</p>
<p>It is version-agnostic: All versions of the USB protocol, from 1.0 to 3.1 (latest), are supported.</p>
</blockquote>
<h1 id="hello-world">Hello world</h1>
<p>This first example is from [libstdevs.c])<a href="(https://raw.githubusercontent.com/libusb/libusb/master/examples/listdevs.c">2</a></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">int</span> main(<span style="color:#fff;font-weight:bold">void</span>)
{
	libusb_device **devs;
	<span style="color:#fff;font-weight:bold">int</span> r;
	ssize_t cnt;

	r = libusb_init(<span style="color:#fff;font-weight:bold">NULL</span>);
	<span style="color:#fff;font-weight:bold">if</span> (r &lt; <span style="color:#ff0;font-weight:bold">0</span>)
		<span style="color:#fff;font-weight:bold">return</span> r;

	cnt = libusb_get_device_list(<span style="color:#fff;font-weight:bold">NULL</span>, &amp;devs);
	<span style="color:#fff;font-weight:bold">if</span> (cnt &lt; <span style="color:#ff0;font-weight:bold">0</span>){
		libusb_exit(<span style="color:#fff;font-weight:bold">NULL</span>);
		<span style="color:#fff;font-weight:bold">return</span> (<span style="color:#fff;font-weight:bold">int</span>) cnt;
	}

	print_devs(devs);
	libusb_free_device_list(devs, <span style="color:#ff0;font-weight:bold">1</span>);

	libusb_exit(<span style="color:#fff;font-weight:bold">NULL</span>);
	<span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}
</code></pre></div><p>Here is a rundown of APIs used in above snippet</p>
<h2 id="libusb_init">libusb_init</h2>
<p>From API docs</p>
<blockquote>
<p>int libusb_init	(	libusb_context ** 	context	)</p>
<p>Initialize libusb. This function must be called before calling any other libusb function.</p>
</blockquote>
<h2 id="libusb_get_device_list">libusb_get_device_list</h2>
<p>From API docs</p>
<blockquote>
<p>ssize_t libusb_get_device_list	(	libusb_context * 	ctx,
libusb_device *** 	list
)</p>
<p>Returns a list of USB devices currently attached to the system. This is your entry point into finding a USB device to operate.</p>
</blockquote>
<h1 id="usb-descriptors">USB descriptors</h1>
<p>The next part in <a href="(https://raw.githubusercontent.com/libusb/libusb/master/examples/listdevs.c">listdev.c</a> is looping over the device list and print device descriptor and device-specific info.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">void</span> print_devs(libusb_device **devs)
{
	libusb_device *dev;
	<span style="color:#fff;font-weight:bold">int</span> i = <span style="color:#ff0;font-weight:bold">0</span>, j = <span style="color:#ff0;font-weight:bold">0</span>;
	<span style="color:#fff;font-weight:bold">uint8_t</span> path[<span style="color:#ff0;font-weight:bold">8</span>]; 

	<span style="color:#fff;font-weight:bold">while</span> ((dev = devs[i++]) != <span style="color:#fff;font-weight:bold">NULL</span>) {
		<span style="color:#fff;font-weight:bold">struct</span> libusb_device_descriptor desc;
		<span style="color:#fff;font-weight:bold">int</span> r = libusb_get_device_descriptor(dev, &amp;desc);
		<span style="color:#fff;font-weight:bold">if</span> (r &lt; <span style="color:#ff0;font-weight:bold">0</span>) {
			fprintf(stderr, <span style="color:#0ff;font-weight:bold">&#34;failed to get device descriptor&#34;</span>);
			<span style="color:#fff;font-weight:bold">return</span>;
		}

		printf(<span style="color:#0ff;font-weight:bold">&#34;%04x:%04x (bus %d, device %d)&#34;</span>,
			desc.idVendor, desc.idProduct,
			libusb_get_bus_number(dev), libusb_get_device_address(dev));

		r = libusb_get_port_numbers(dev, path, <span style="color:#fff;font-weight:bold">sizeof</span>(path));
		<span style="color:#fff;font-weight:bold">if</span> (r &gt; <span style="color:#ff0;font-weight:bold">0</span>) {
			printf(<span style="color:#0ff;font-weight:bold">&#34; path: %d&#34;</span>, path[<span style="color:#ff0;font-weight:bold">0</span>]);
			<span style="color:#fff;font-weight:bold">for</span> (j = <span style="color:#ff0;font-weight:bold">1</span>; j &lt; r; j++)
				printf(<span style="color:#0ff;font-weight:bold">&#34;.%d&#34;</span>, path[j]);
		}
		printf(<span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>);
	}
}
</code></pre></div><h2 id="device-descriptor-libusb_get_device_descriptor">Device descriptor libusb_get_device_descriptor</h2>
<p><code>libusb_device_descriptor</code> defined in <a href="https://libusb.sourceforge.io/api-1.0/structlibusb__device__descriptor.html">API doc</a> is returned by <code>libusb_get_device_descriptor</code>.</p>
<p>Device descriptor fields are defined in USB2 specs section 9.6.1. We can also see the fields by doing <code>lsusb -v</code>. For example,</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">Device Descriptor:
  bLength                <span style="color:#ff0;font-weight:bold">18</span>
  bDescriptorType         <span style="color:#ff0;font-weight:bold">1</span>
  bcdUSB               3.00
  bDeviceClass            <span style="color:#ff0;font-weight:bold">9</span> Hub
  bDeviceSubClass         <span style="color:#ff0;font-weight:bold">0</span> 
  bDeviceProtocol         <span style="color:#ff0;font-weight:bold">3</span> 
  bMaxPacketSize0         <span style="color:#ff0;font-weight:bold">9</span>
  idVendor           
  idProduct          
  bcdDevice            5.04
  iManufacturer           <span style="color:#ff0;font-weight:bold">3</span> 
  iProduct                <span style="color:#ff0;font-weight:bold">2</span> 
  iSerial                 <span style="color:#ff0;font-weight:bold">1</span> 
  bNumConfigurations      <span style="color:#ff0;font-weight:bold">1</span>

</code></pre></div><h2 id="device-information-api">Device information API</h2>
<p>There are also APIs to get info about device like <code>libusb_get_bus_number</code>.  bus number or port number depends on the implementation and OS running on the host.</p>
<p>I traced <code>libusb_get_bus_number</code> in libusb repo to <code>libusb/os/linux_usbfs.c</code> where it reads the bus number assigned from <code>/dev/bus/</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">if</span> (!strncmp(dev_node, <span style="color:#0ff;font-weight:bold">&#34;/dev/bus/usb&#34;</span>, <span style="color:#ff0;font-weight:bold">12</span>))
    sscanf(dev_node, <span style="color:#0ff;font-weight:bold">&#34;/dev/bus/usb/%hhu/%hhu&#34;</span>, busnum, devaddr);
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Cocotb Deepdive - Test discovery</title>
            <link>/posts/2021/11/cocotb-deepdive-test-discovery/</link>
            <pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate>
            
            <guid>/posts/2021/11/cocotb-deepdive-test-discovery/</guid>
            <description>This is a write-up of Cocotb test discovery mechanism including the decorator and regression runner infrastructure.
Part1: Discovery with regression runner Starting with __init__.py where from_discovery is called to lookup the tests.
# start Regression Manager global regression_manager regression_manager = RegressionManager.from_discovery(top) regression_manager.execute() And from_discorvery calls _discover_tests (static class method in RegressionManager)
tests = cls._discover_tests() _discover_tests loads test module (or modules) and detects classes derived from Test
module_str = os.getenv(&amp;#39;MODULE&amp;#39;) ... .</description>
            <content type="html"><![CDATA[<p>This is a write-up of <code>Cocotb</code>  test discovery mechanism including the decorator and regression runner infrastructure.</p>
<h1 id="part1-discovery-with-regression-runner">Part1: Discovery with regression runner</h1>
<p>Starting with <code>__init__.py</code> where <code>from_discovery</code> is called to lookup the tests.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#007f7f"># start Regression Manager</span>
    <span style="color:#fff;font-weight:bold">global</span> regression_manager
    regression_manager = RegressionManager.from_discovery(top)
    regression_manager.execute()
</code></pre></div><p>And <code>from_discorvery</code> calls <code>_discover_tests</code> (static class method in  <code>RegressionManager</code>)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        tests = cls._discover_tests()
</code></pre></div><p><code>_discover_tests</code> loads test module (or modules) and detects classes derived from <code>Test</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
        module_str = os.getenv(<span style="color:#0ff;font-weight:bold">&#39;MODULE&#39;</span>)

        ...
        ...
        modules = [s.strip() <span style="color:#fff;font-weight:bold">for</span> s in module_str.split(<span style="color:#0ff;font-weight:bold">&#39;,&#39;</span>) <span style="color:#fff;font-weight:bold">if</span> s.strip()]
        ...
        ...

        <span style="color:#fff;font-weight:bold">for</span> module_name in modules:
            <span style="color:#fff;font-weight:bold">try</span>:
                <span style="color:#fff;font-weight:bold">for</span> thing in <span style="color:#fff;font-weight:bold">vars</span>(module).values():
                    <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">isinstance</span>(thing, Test): <span style="color:#007f7f"># Checks  classes derived from Test.</span>
                        <span style="color:#fff;font-weight:bold">yield</span> thing
</code></pre></div><p>Note that <code>Test</code> class is imported from <code>cocotb.decorators</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">from</span> cocotb.decorators <span style="color:#fff;font-weight:bold">import</span> test <span style="color:#fff;font-weight:bold">as</span> Test
</code></pre></div><p><code>Makefile</code> must define <code>MODULE</code> variable, so auto-detect can load the module and extract the tests.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile">MODULE   := <span style="color:#fff;font-weight:bold">test</span>
</code></pre></div><h1 id="part2-decorator-cocotbtest">Part2: Decorator @cocotb.test()</h1>
<p>Here is an example of a simple cocotb test. which uses <code>cocotb.test()</code> decorator.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">@cocotb.test()
<span style="color:#fff;font-weight:bold">async</span> <span style="color:#fff;font-weight:bold">def</span> test_foo_bar(dut):

   <span style="color:#007f7f"># clock</span>
    c = Clock(dut.clk, <span style="color:#ff0;font-weight:bold">10</span>, <span style="color:#0ff;font-weight:bold">&#39;ns&#39;</span>)
    cocotb.fork(c.start())
</code></pre></div><p>decorator class <code>test</code> is defined in <code>decorators.py</code>(this is difference from base class <code>Test</code>). <code>test_foo_bar</code> will be instance of class <code>test</code> which gets picked up by discovery above.</p>
<p>Looking at <code>__init__</code>, test routine gets wrapped with decorator before passed to <code>super().__init__(f)</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> test(coroutine, metaclass=_decorator_helper):

    <span style="color:#fff;font-weight:bold">def</span> __init__(self, f, timeout_time=<span style="color:#fff;font-weight:bold">None</span>, timeout_unit=<span style="color:#0ff;font-weight:bold">&#34;step&#34;</span>,
                 expect_fail=<span style="color:#fff;font-weight:bold">False</span>, expect_error=(),
                 skip=<span style="color:#fff;font-weight:bold">False</span>, stage=<span style="color:#fff;font-weight:bold">None</span>):

                
            co = coroutine(f)

            <span style="color:#007f7f"># wraps the passed f. See https://stackoverflow.com/questions/308999/what-does-functools-wraps-do</span>
            @functools.wraps(f)
            <span style="color:#fff;font-weight:bold">async</span> <span style="color:#fff;font-weight:bold">def</span> f(*args, **kwargs):
                running_co = co(*args, **kwargs) <span style="color:#007f7f"># pass args, kargs to coroutine</span>

                <span style="color:#fff;font-weight:bold">try</span>:
                    res = <span style="color:#fff;font-weight:bold">await</span> cocotb.triggers.with_timeout(running_co, self.timeout_time, self.timeout_unit)
                <span style="color:#fff;font-weight:bold">except</span> cocotb.result.SimTimeoutError:
                    running_co.kill()
                    <span style="color:#fff;font-weight:bold">raise</span>
                <span style="color:#fff;font-weight:bold">else</span>:
                    <span style="color:#fff;font-weight:bold">return</span> res

        <span style="color:#fff;font-weight:bold">super</span>().__init__(f) 
</code></pre></div><p>There are two important things about <code>coroutine</code>:</p>
<ul>
<li><code>__init__</code> updates meta data of wrapped function</li>
<li><code>__call__</code> called by <code>running_co = co(*args, **kwargs)</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> coroutine:

    <span style="color:#fff;font-weight:bold">def</span> __init__(self, func):
        self._func = func
        functools.update_wrapper(self, func)


    <span style="color:#fff;font-weight:bold">def</span> __call__(self, *args, **kwargs):
        <span style="color:#fff;font-weight:bold">return</span> RunningCoroutine(self._func(*args, **kwargs), self)

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM Internals - TLM analysis port</title>
            <link>/posts/2021/11/uvm-internals-tlm-analysis-port/</link>
            <pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate>
            
            <guid>/posts/2021/11/uvm-internals-tlm-analysis-port/</guid>
            <description>This is write-up about the internals of UVM 1800.2 analysis_port rabbit hole.
Starting with uvm_analysis_port.svh, where the doc has small snippet of uvm_analysis_port object.
//------------------------------------------------------------------------------ // Class -- NODOCS -- uvm_analysis_port // // Broadcasts a value to all subscribers implementing a &amp;lt;uvm_analysis_imp&amp;gt;. // //| class mon extends uvm_component; //| uvm_analysis_port#(trans) ap; //| //| function new(string name = &amp;#34;sb&amp;#34;, uvm_component parent = null); //| super.new(name, parent); //| ap = new(&amp;#34;ap&amp;#34;, this); //| endfunction //| //| task run_phase(uvm_phase phase); //| trans t; //| .</description>
            <content type="html"><![CDATA[<p>This is write-up about the internals of UVM 1800.2 analysis_port rabbit hole.</p>
<p>Starting with <code>uvm_analysis_port.svh</code>, where the doc has small snippet of uvm_analysis_port object.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#007f7f">//------------------------------------------------------------------------------
</span><span style="color:#007f7f">// Class -- NODOCS -- uvm_analysis_port
</span><span style="color:#007f7f">//
</span><span style="color:#007f7f">// Broadcasts a value to all subscribers implementing a &lt;uvm_analysis_imp&gt;.
</span><span style="color:#007f7f">// 
</span><span style="color:#007f7f">//| class mon extends uvm_component;
</span><span style="color:#007f7f">//|   uvm_analysis_port#(trans) ap;
</span><span style="color:#007f7f">//|
</span><span style="color:#007f7f">//|   function new(string name = &#34;sb&#34;, uvm_component parent = null);
</span><span style="color:#007f7f">//|      super.new(name, parent);
</span><span style="color:#007f7f">//|      ap = new(&#34;ap&#34;, this);
</span><span style="color:#007f7f">//|   endfunction
</span><span style="color:#007f7f">//|
</span><span style="color:#007f7f">//|   task run_phase(uvm_phase phase);
</span><span style="color:#007f7f">//|       trans t;
</span><span style="color:#007f7f">//|       ...
</span><span style="color:#007f7f">//|       ap.write(t);
</span><span style="color:#007f7f">//|       ...
</span><span style="color:#007f7f">//|   endfunction
</span><span style="color:#007f7f">//| endclass
</span></code></pre></div><p><code>uvm_analysis_port</code> is defined as</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#007f7f">// @uvm-ieee 1800.2-2020 auto 12.2.10.1.1
</span><span style="color:#007f7f"></span>class uvm_analysis_port # (<span style="color:#fff;font-weight:bold">type</span> T = <span style="color:#fff;font-weight:bold">int</span>)
  extends uvm_port_base # (uvm_tlm_if_base #(T,T));
</code></pre></div><p>and <code>write</code>  calls <code>tif.write()</code> and <code>tif</code> is returned from <code>get_if</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#007f7f">// @uvm-ieee 1800.2-2020 auto 12.2.10.1.4
</span><span style="color:#007f7f"></span>  <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> write (<span style="color:#fff;font-weight:bold">input</span> T t);
    uvm_tlm_if_base # (T, T) tif;
    <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">int</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; this.size(); i++) <span style="color:#fff;font-weight:bold">begin</span>
      tif = this.get_if (i);
      <span style="color:#fff;font-weight:bold">if</span> ( tif == null )
        uvm_report_fatal (<span style="color:#0ff;font-weight:bold">&#34;NTCONN&#34;</span>, {<span style="color:#0ff;font-weight:bold">&#34;No uvm_tlm interface is connected to &#34;</span>, get_full_name(), <span style="color:#0ff;font-weight:bold">&#34; for executing write()&#34;</span>}, UVM_NONE);
      tif.write (t);
    <span style="color:#fff;font-weight:bold">end</span> 
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><h2 id="uvm_tlm_if_base">uvm_tlm_if_base</h2>
<p>Let&rsquo;s get  <code>uvm_tlm_if_base</code> out of the way first, In <code>uvm_tlm_ifs.svh</code>, <code>uvm_tlm_if_base</code> is abstract class with port methods:</p>
<ul>
<li>get</li>
<li>put</li>
<li>..etc</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#007f7f">// @uvm-ieee 1800.2-2020 auto 12.2.4.1
</span><span style="color:#007f7f"></span>virtual class uvm_tlm_if_base #(<span style="color:#fff;font-weight:bold">type</span> T1=<span style="color:#fff;font-weight:bold">int</span>, <span style="color:#fff;font-weight:bold">type</span> T2=<span style="color:#fff;font-weight:bold">int</span>);
</code></pre></div><p>but they are all virtual and derived class must implement them.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#007f7f">// @uvm-ieee 1800.2-2020 auto 12.2.4.2.3
</span><span style="color:#007f7f"></span>  virtual <span style="color:#fff;font-weight:bold">task</span> peek( <span style="color:#fff;font-weight:bold">output</span> T2 t );
    uvm_report_error(<span style="color:#0ff;font-weight:bold">&#34;peek&#34;</span>, `UVM_TASK_ERROR, UVM_NONE);
  <span style="color:#fff;font-weight:bold">endtask</span>
</code></pre></div><h2 id="uvm_port_base">uvm_port_base</h2>
<p>The chunk of work is done in <code>uvm_port_base</code> defined in <code>uvm_port_base.svh</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#007f7f">// @uvm-ieee 1800.2-2020 auto 5.5.1
</span><span style="color:#007f7f"></span>virtual class uvm_port_base #(<span style="color:#fff;font-weight:bold">type</span> IF=uvm_void) extends IF;
</code></pre></div><p><code>uvm_port_base::get_if()</code> is called in <code>uvm_analysis_port::write()</code>. which returns one port depending on the index.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">function</span> uvm_port_base #(IF) get_if(<span style="color:#fff;font-weight:bold">int</span> index=<span style="color:#ff0;font-weight:bold">0</span>);
    <span style="color:#fff;font-weight:bold">string</span> s;
....
....
....
    foreach (m_imp_list[nm]) <span style="color:#fff;font-weight:bold">begin</span>
      <span style="color:#fff;font-weight:bold">if</span> (index == <span style="color:#ff0;font-weight:bold">0</span>)
        <span style="color:#fff;font-weight:bold">return</span> m_imp_list[nm];
      index--;
    <span style="color:#fff;font-weight:bold">end</span>
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p><code>m_imp_list</code> is populated by <code>m_add_list</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  local <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> m_add_list           (this_type provider);
    ...
    ...
    <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">int</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; provider.size(); i++) <span style="color:#fff;font-weight:bold">begin</span>
      imp = provider.get_if(i);
      <span style="color:#fff;font-weight:bold">if</span> (!m_imp_list.exists(imp.get_full_name()))
        m_imp_list[imp.get_full_name()] = imp; <span style="color:#007f7f">// &lt;===================================
</span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">end</span>

  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p><code>m_add_list</code> is called by <code>resolve_bindings</code>. <code>resolves_bindings</code> gets the port list from <code>m_provided_by</code>.</p>
<blockquote>
<p>// This method is automatically called just before the start of the
// end_of_elaboration phase. Users should not need to call it directly.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  virtual <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> resolve_bindings();
    <span style="color:#fff;font-weight:bold">if</span> (m_resolved) <span style="color:#007f7f">// don&#39;t repeat ourselves
</span><span style="color:#007f7f"></span>     <span style="color:#fff;font-weight:bold">return</span>;

    <span style="color:#fff;font-weight:bold">if</span> (is_imp()) <span style="color:#fff;font-weight:bold">begin</span>
      m_imp_list[get_full_name()] = this;
    <span style="color:#fff;font-weight:bold">end</span>
    <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">begin</span>
      foreach (m_provided_by[nm]) <span style="color:#fff;font-weight:bold">begin</span>
        this_type port;
        port = m_provided_by[nm];
        port.resolve_bindings();
        m_add_list(port); <span style="color:#007f7f">// &lt;===================================
</span><span style="color:#007f7f"></span>      <span style="color:#fff;font-weight:bold">end</span>
    <span style="color:#fff;font-weight:bold">end</span>
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p>And finally, <code>m_provided_by</code> should be populated by <code>connect</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#007f7f">// @uvm-ieee 1800.2-2020 auto 5.5.2.14
</span><span style="color:#007f7f"></span>  virtual <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> connect (this_type provider);
  ...
  ...  =
    m_provided_by[provider.get_full_name()] = provider; <span style="color:#007f7f">// &lt;===================================
</span><span style="color:#007f7f"></span>    provider.m_provided_to[get_full_name()] = this;
    
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python Descriptor Protocol</title>
            <link>/posts/2021/10/python-descriptor-protocol/</link>
            <pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate>
            
            <guid>/posts/2021/10/python-descriptor-protocol/</guid>
            <description>First Example This is write-up based on link for python descriptors.
Descriptors are described as
 Descriptors let objects customize attribute lookup, storage, and deletion.
 lets start with simplest example
class Age: def __get__(self, instance, owner): return instance.age_years * 12 def __set__(self, instance, value): instance.age_years = value / 12 class Person3: age_months = Age() def __init__(self, age): self.age_years = age p3 = Person3(2) print(p3.__dict__) print(type(p3).__dict__) print(p3.age_months) Here age_months is descriptor that calculates age in month dynamically.</description>
            <content type="html"><![CDATA[<h1 id="first-example">First Example</h1>
<p>This is write-up based on <a href="https://docs.python.org/3/howto/descriptor.html">link</a> for python descriptors.</p>
<p>Descriptors are described as</p>
<blockquote>
<p>Descriptors let objects customize attribute lookup, storage, and deletion.</p>
</blockquote>
<p>lets start with simplest example</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> Age:
    <span style="color:#fff;font-weight:bold">def</span> __get__(self, instance, owner):
        <span style="color:#fff;font-weight:bold">return</span> instance.age_years * <span style="color:#ff0;font-weight:bold">12</span>

    <span style="color:#fff;font-weight:bold">def</span> __set__(self, instance, value):
        instance.age_years = value / <span style="color:#ff0;font-weight:bold">12</span>

<span style="color:#fff;font-weight:bold">class</span> Person3:
    age_months = Age()
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, age):
        self.age_years = age


p3 = Person3(<span style="color:#ff0;font-weight:bold">2</span>)

<span style="color:#fff;font-weight:bold">print</span>(p3.__dict__)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#fff;font-weight:bold">type</span>(p3).__dict__)
<span style="color:#fff;font-weight:bold">print</span>(p3.age_months)
</code></pre></div><p>Here <code>age_months</code> is descriptor that calculates age in month dynamically. age_months is not in <code>__dict__</code>. but it is in <code>type(Person).__dict__</code> as <code>'age_months': &lt;__main__.Age object at 0x7fcbab796970&gt;,</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">{<span style="color:#0ff;font-weight:bold">&#39;age_years&#39;</span>: 2}
{<span style="color:#0ff;font-weight:bold">&#39;__module__&#39;</span>: <span style="color:#0ff;font-weight:bold">&#39;__main__&#39;</span>, <span style="color:#0ff;font-weight:bold">&#39;age_months&#39;</span>: &lt;__main__.Age object at 0x7fcbab796970&gt;, <span style="color:#0ff;font-weight:bold">&#39;__init__&#39;</span>: &lt;<span style="color:#fff;font-weight:bold">function</span> Person3.__init__ at 0x7fcbab7aa310&gt;, <span style="color:#0ff;font-weight:bold">&#39;__dict__&#39;</span>: &lt;attribute <span style="color:#0ff;font-weight:bold">&#39;__dict__&#39;</span> of <span style="color:#0ff;font-weight:bold">&#39;Person3&#39;</span> objects&gt;, <span style="color:#0ff;font-weight:bold">&#39;__weakref__&#39;</span>: &lt;attribute <span style="color:#0ff;font-weight:bold">&#39;__weakref__&#39;</span> of <span style="color:#0ff;font-weight:bold">&#39;Person3&#39;</span> objects&gt;, <span style="color:#0ff;font-weight:bold">&#39;__doc__&#39;</span>: None}
<span style="color:#ff0;font-weight:bold">24</span>
</code></pre></div><p>from <a href="https://stackoverflow.com/questions/30961069/what-is-the-python-attribute-get-and-set-order">SO</a>, the search order as follow:</p>
<blockquote>
<p>bar = a.foo&hellip;</p>
<p>invokes a.<strong>getattribute</strong>(&lsquo;foo&rsquo;)
which in turn by default looks up a.<strong>dict</strong>[&lsquo;foo&rsquo;]
or invokes foo&rsquo;s .<strong>get</strong>() if defined on A.
The returned value would then be assigned to bar.</p>
</blockquote>
<p>So, in example above, <code>age_months.__get__()</code> eventually gets called.</p>
<h1 id="other-ways-to-define-descriptor">other ways to define descriptor</h1>
<p>Although the pythonic way is using <code>__set__</code>, <code>__get__</code>, built-in <code>property</code> class can be used to create descriptor</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> Person1:
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, age):
        self.age_years = age

    <span style="color:#fff;font-weight:bold">def</span> _set_age(self, value):
        self.age_years = value/<span style="color:#ff0;font-weight:bold">12</span>

    <span style="color:#fff;font-weight:bold">def</span> _get_age(self):
        <span style="color:#fff;font-weight:bold">return</span> self.age_years * <span style="color:#ff0;font-weight:bold">12</span>

    age_months = <span style="color:#fff;font-weight:bold">property</span>(fget=_get_age, fset=_set_age)

p1 = Person1(<span style="color:#ff0;font-weight:bold">2</span>)

<span style="color:#fff;font-weight:bold">print</span>(p1.__dict__)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#fff;font-weight:bold">type</span>(p1).__dict__)
<span style="color:#fff;font-weight:bold">print</span>(p1.age_months)

</code></pre></div><p>Also, there is the decorator <code>@property</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> Person2:
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, age):
        self.age_years = age

    @property
    <span style="color:#fff;font-weight:bold">def</span> age_months(self):
        <span style="color:#fff;font-weight:bold">return</span> self.age_years  * <span style="color:#ff0;font-weight:bold">12</span>

    @age_months.setter
    <span style="color:#fff;font-weight:bold">def</span> age_months(self,value):
        self.age_years = value / <span style="color:#ff0;font-weight:bold">12</span>


p2 = Person2(<span style="color:#ff0;font-weight:bold">2</span>)
<span style="color:#fff;font-weight:bold">print</span>(p2.__dict__)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#fff;font-weight:bold">type</span>(p2).__dict__)
<span style="color:#fff;font-weight:bold">print</span>(p2.age_months)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python class registration decorator</title>
            <link>/posts/2021/10/python-class-registration-decorator/</link>
            <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
            
            <guid>/posts/2021/10/python-class-registration-decorator/</guid>
            <description>Flask used decorators to register routes handlers. I have another post about flask internal to match function to specific URI.
@app.route(&amp;#34;/&amp;#34;) def hello_world(): return &amp;#34;&amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;&amp;#34; That said, I wanted to implement similar registration but for classes.
class Block(): def __init__(self) -&amp;gt; None: pass class Env(): _blocks = [] def __init__(self) -&amp;gt; None: pass @classmethod def register(cls): def decorator(fn): cls._blocks.append(fn) return fn return decorator @Env.register() class block1(Block): pass env = Env() print(env.</description>
            <content type="html"><![CDATA[<p>Flask used decorators to register routes handlers. I have another post about flask internal to match function to specific URI.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">@app.route(<span style="color:#0ff;font-weight:bold">&#34;/&#34;</span>)
<span style="color:#fff;font-weight:bold">def</span> hello_world():
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#0ff;font-weight:bold">&#34;&lt;p&gt;Hello, World!&lt;/p&gt;&#34;</span>
</code></pre></div><p>That said, I wanted to implement similar registration but for classes.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> Block():
    <span style="color:#fff;font-weight:bold">def</span> __init__(self) -&gt; <span style="color:#fff;font-weight:bold">None</span>:
        <span style="color:#fff;font-weight:bold">pass</span>

<span style="color:#fff;font-weight:bold">class</span> Env():
    _blocks = []

    <span style="color:#fff;font-weight:bold">def</span> __init__(self) -&gt; <span style="color:#fff;font-weight:bold">None</span>:
        <span style="color:#fff;font-weight:bold">pass</span>

    @classmethod
    <span style="color:#fff;font-weight:bold">def</span> register(cls):
        <span style="color:#fff;font-weight:bold">def</span> decorator(fn):
            cls._blocks.append(fn)
            <span style="color:#fff;font-weight:bold">return</span> fn
        <span style="color:#fff;font-weight:bold">return</span> decorator

@Env.register()
<span style="color:#fff;font-weight:bold">class</span> block1(Block):
    <span style="color:#fff;font-weight:bold">pass</span>

env = Env()

<span style="color:#fff;font-weight:bold">print</span>(env._blocks)

</code></pre></div><p>which prints</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">[&lt;class <span style="color:#0ff;font-weight:bold">&#39;__main__.block1&#39;</span>&gt;]
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python Pandas cheat sheet</title>
            <link>/posts/2021/10/python-pandas-cheat-sheet/</link>
            <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
            
            <guid>/posts/2021/10/python-pandas-cheat-sheet/</guid>
            <description>Basics Create DataFrame
df = pd.DataFrame([[1,0],[4,5]], columns=[&amp;#39;A&amp;#39;,&amp;#39;B&amp;#39;]) df = df.append(pd.DataFrame([[6,9]], columns=list(df.columns))) # df = pd.read_csv(&amp;#34;File.csv&amp;#34;) #  df.shape df.info() df.head() df.tail() Get all row with one column. This returns Series
df[&amp;#34;col1&amp;#34;] df[&amp;#34;col1&amp;#34;].value_counts() return multiple columns. This returns Dataframe
df[[&amp;#34;col1&amp;#34;,&amp;#34;col2&amp;#34;]] This returns pandas.core.indexes.base.Index.
df.columns list(df.columns) #pandas.core.series.Series df.iloc[0] df.iloc[0][&amp;#34;col1&amp;#34;] df.iloc[ [0,1] ] df.iloc[ [0,1] , [0,1] ] df.loc[ [0,1] , [&amp;#34;col1&amp;#34;,&amp;#34;col2&amp;#34;] ] df.loc[ 0:1 , &amp;#34;col1&amp;#34;:&amp;#34;col2&amp;#34; ] df.index df.set_index(&amp;#39;col1&amp;#39;,inplace=True) df.reset_index(inplace=True) # df = pd.</description>
            <content type="html"><![CDATA[<h1 id="basics">Basics</h1>
<p>Create DataFrame</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df = pd.DataFrame([[<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">0</span>],[<span style="color:#ff0;font-weight:bold">4</span>,<span style="color:#ff0;font-weight:bold">5</span>]], columns=[<span style="color:#0ff;font-weight:bold">&#39;A&#39;</span>,<span style="color:#0ff;font-weight:bold">&#39;B&#39;</span>])
df = df.append(pd.DataFrame([[<span style="color:#ff0;font-weight:bold">6</span>,<span style="color:#ff0;font-weight:bold">9</span>]], columns=<span style="color:#fff;font-weight:bold">list</span>(df.columns)))

<span style="color:#007f7f">#</span>
df = pd.read_csv(<span style="color:#0ff;font-weight:bold">&#34;File.csv&#34;</span>)
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#007f7f"># </span>
df.shape

df.info()

df.head()
df.tail()
</code></pre></div><p>Get all row with one column. This returns Series</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[<span style="color:#0ff;font-weight:bold">&#34;col1&#34;</span>]
df[<span style="color:#0ff;font-weight:bold">&#34;col1&#34;</span>].value_counts()
</code></pre></div><p>return multiple columns. This returns Dataframe</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[[<span style="color:#0ff;font-weight:bold">&#34;col1&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;col2&#34;</span>]]
</code></pre></div><p>This returns pandas.core.indexes.base.Index.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df.columns
<span style="color:#fff;font-weight:bold">list</span>(df.columns)
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#007f7f">#pandas.core.series.Series</span>
df.iloc[<span style="color:#ff0;font-weight:bold">0</span>]

df.iloc[<span style="color:#ff0;font-weight:bold">0</span>][<span style="color:#0ff;font-weight:bold">&#34;col1&#34;</span>]

df.iloc[ [<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">1</span>] ]
df.iloc[ [<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">1</span>] , [<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">1</span>] ]

df.loc[ [<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">1</span>] , [<span style="color:#0ff;font-weight:bold">&#34;col1&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;col2&#34;</span>] ]

df.loc[ <span style="color:#ff0;font-weight:bold">0</span>:<span style="color:#ff0;font-weight:bold">1</span> , <span style="color:#0ff;font-weight:bold">&#34;col1&#34;</span>:<span style="color:#0ff;font-weight:bold">&#34;col2&#34;</span> ]
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df.index
df.set_index(<span style="color:#0ff;font-weight:bold">&#39;col1&#39;</span>,inplace=<span style="color:#fff;font-weight:bold">True</span>)
df.reset_index(inplace=<span style="color:#fff;font-weight:bold">True</span>)

<span style="color:#007f7f">#</span>
df = pd.read_csv(<span style="color:#0ff;font-weight:bold">&#34;File.csv&#34;</span>,index_col = <span style="color:#0ff;font-weight:bold">&#34;col&#34;</span>)

<span style="color:#007f7f">#</span>
df.sort_index(inplace=<span style="color:#fff;font-weight:bold">True</span>)
</code></pre></div><h1 id="filtering">Filtering</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">filt = df[<span style="color:#0ff;font-weight:bold">&#34;col&#34;</span>] == value
filt = (df[<span style="color:#0ff;font-weight:bold">&#34;col&#34;</span>] == value | df[<span style="color:#0ff;font-weight:bold">&#34;col1&#34;</span>] == value)

<span style="color:#007f7f">#</span>
df[filt]

<span style="color:#007f7f">#</span>
df.loc(filt)

<span style="color:#007f7f"># negation</span>
df.loc(~filt)

<span style="color:#007f7f"># </span>
filt = df[<span style="color:#0ff;font-weight:bold">&#34;col&#34;</span>].isin([<span style="color:#0ff;font-weight:bold">&#34;v1&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;v2&#34;</span>])
<span style="color:#007f7f"># na=False ignore Nan</span>
filt = df[<span style="color:#0ff;font-weight:bold">&#34;col&#34;</span>].str.containts([<span style="color:#0ff;font-weight:bold">&#34;v1&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;v2&#34;</span>],na=<span style="color:#fff;font-weight:bold">False</span>)
</code></pre></div><h1 id="update-rowscolumns">Update rows/columns</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#007f7f"># change columns names</span>
df.columns = [x.lower() <span style="color:#fff;font-weight:bold">for</span> x in df.columns]
df.rename(columns={<span style="color:#0ff;font-weight:bold">&#34;col&#34;</span>:<span style="color:#0ff;font-weight:bold">&#34;col_new&#34;</span>}, incplace = <span style="color:#fff;font-weight:bold">True</span>)

<span style="color:#007f7f"># change all values of a row</span>
df.loc[<span style="color:#ff0;font-weight:bold">0</span>] = [<span style="color:#0ff;font-weight:bold">&#34;v1&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;v2&#34;</span>]

<span style="color:#007f7f"># change one column</span>
df.loc[<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#0ff;font-weight:bold">&#34;col&#34;</span>] = <span style="color:#0ff;font-weight:bold">&#34;new_value&#34;</span>
df.loc[<span style="color:#ff0;font-weight:bold">0</span>,[<span style="color:#0ff;font-weight:bold">&#34;col&#34;</span>]] = [<span style="color:#0ff;font-weight:bold">&#34;new_value&#34;</span>]

<span style="color:#007f7f"># change all rows</span>
df[<span style="color:#0ff;font-weight:bold">&#34;col&#34;</span>] = [<span style="color:#0ff;font-weight:bold">&#39;v1&#39;</span>,<span style="color:#0ff;font-weight:bold">&#39;v2&#39;</span>]
</code></pre></div><h2 id="operation-to-update-rowcolums">Operation to update row/colums</h2>
<p>operations on series using <code>.apply</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> func(x):
	<span style="color:#fff;font-weight:bold">return</span> <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>

df[<span style="color:#0ff;font-weight:bold">&#34;col&#34;</span>].apply(func)
</code></pre></div><p>operations on dataFrame using <code>.applymap</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df.apply(<span style="color:#fff;font-weight:bold">len</span>)
</code></pre></div><p>Change value in column series</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[<span style="color:#0ff;font-weight:bold">&#34;col&#34;</span>].map({<span style="color:#0ff;font-weight:bold">&#34;v1&#34;</span>:<span style="color:#0ff;font-weight:bold">&#34;nv1&#34;</span>})
df[<span style="color:#0ff;font-weight:bold">&#34;col&#34;</span>].replease({<span style="color:#0ff;font-weight:bold">&#34;v1&#34;</span>:<span style="color:#0ff;font-weight:bold">&#34;nv1&#34;</span>})
</code></pre></div><h1 id="addeddelete--rows-columns">Added/delete  rows columns</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[<span style="color:#0ff;font-weight:bold">&#34;newcol&#34;</span>] = df[<span style="color:#0ff;font-weight:bold">&#34;col&#34;</span>]  + <span style="color:#ff0;font-weight:bold">1</span>
df.drop(columsn=[<span style="color:#0ff;font-weight:bold">&#34;col&#34;</span>], inplace = <span style="color:#fff;font-weight:bold">True</span>)

df = df.append({<span style="color:#0ff;font-weight:bold">&#34;A&#34;</span>:<span style="color:#ff0;font-weight:bold">10</span>}, ignore_index = <span style="color:#fff;font-weight:bold">True</span>)
df.drop(index=<span style="color:#ff0;font-weight:bold">4</span>)
df.drop(index=df[df[<span style="color:#0ff;font-weight:bold">&#34;A&#34;</span>]==<span style="color:#ff0;font-weight:bold">1</span>].index)

</code></pre></div><h1 id="sort">sort</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df.sort_values(by=<span style="color:#0ff;font-weight:bold">&#34;A&#34;</span>, ascending=<span style="color:#fff;font-weight:bold">False</span>,inplace=<span style="color:#fff;font-weight:bold">True</span>	)
df[<span style="color:#0ff;font-weight:bold">&#34;A&#34;</span>].sort_values()
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python sequence slicing</title>
            <link>/posts/2021/09/python-sequence-slicing/</link>
            <pubDate>Sun, 19 Sep 2021 20:13:02 +0100</pubDate>
            
            <guid>/posts/2021/09/python-sequence-slicing/</guid>
            <description>Basic index slicing python defines slicing with [start:stop:step] to access elements of sequences(list, seq, str).
&amp;gt;&amp;gt;&amp;gt; x = list(range(10)) &amp;gt;&amp;gt;&amp;gt; x [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &amp;gt;&amp;gt;&amp;gt; x[1:8:2] [1, 3, 5, 7] &amp;gt;&amp;gt;&amp;gt; x[:3] [0, 1, 2] &amp;gt;&amp;gt;&amp;gt; x[5:] [5, 6, 7, 8, 9] Named slice for readability, index range can be names with slice object and used to index sequences.
&amp;gt;&amp;gt;&amp;gt; mid = slice(3,9,2) &amp;gt;&amp;gt;&amp;gt; mid slice(3, 9, 2) &amp;gt;&amp;gt;&amp;gt; sel = x[mid] &amp;gt;&amp;gt;&amp;gt; sel [3, 5, 7] Slice in python model To support slicing in user defined class, class needs to have __getitem__</description>
            <content type="html"><![CDATA[<h1 id="basic-index-slicing">Basic index slicing</h1>
<p>python defines slicing with <code>[start:stop:step]</code> to access elements of sequences(list, seq, str).</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">&gt;&gt;&gt; x = <span style="color:#fff;font-weight:bold">list</span>(<span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">10</span>))
&gt;&gt;&gt; x
[<span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#ff0;font-weight:bold">3</span>, <span style="color:#ff0;font-weight:bold">4</span>, <span style="color:#ff0;font-weight:bold">5</span>, <span style="color:#ff0;font-weight:bold">6</span>, <span style="color:#ff0;font-weight:bold">7</span>, <span style="color:#ff0;font-weight:bold">8</span>, <span style="color:#ff0;font-weight:bold">9</span>]
&gt;&gt;&gt; x[<span style="color:#ff0;font-weight:bold">1</span>:<span style="color:#ff0;font-weight:bold">8</span>:<span style="color:#ff0;font-weight:bold">2</span>]
[<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">3</span>, <span style="color:#ff0;font-weight:bold">5</span>, <span style="color:#ff0;font-weight:bold">7</span>]
&gt;&gt;&gt; x[:<span style="color:#ff0;font-weight:bold">3</span>]
[<span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">2</span>]
&gt;&gt;&gt; x[<span style="color:#ff0;font-weight:bold">5</span>:]
[<span style="color:#ff0;font-weight:bold">5</span>, <span style="color:#ff0;font-weight:bold">6</span>, <span style="color:#ff0;font-weight:bold">7</span>, <span style="color:#ff0;font-weight:bold">8</span>, <span style="color:#ff0;font-weight:bold">9</span>]
</code></pre></div><h1 id="named-slice">Named slice</h1>
<p>for readability, index range can be names with slice object and used to index sequences.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
&gt;&gt;&gt; mid = <span style="color:#fff;font-weight:bold">slice</span>(<span style="color:#ff0;font-weight:bold">3</span>,<span style="color:#ff0;font-weight:bold">9</span>,<span style="color:#ff0;font-weight:bold">2</span>)
&gt;&gt;&gt; mid
<span style="color:#fff;font-weight:bold">slice</span>(<span style="color:#ff0;font-weight:bold">3</span>, <span style="color:#ff0;font-weight:bold">9</span>, <span style="color:#ff0;font-weight:bold">2</span>)
&gt;&gt;&gt; sel = x[mid]
&gt;&gt;&gt; sel
[<span style="color:#ff0;font-weight:bold">3</span>, <span style="color:#ff0;font-weight:bold">5</span>, <span style="color:#ff0;font-weight:bold">7</span>]

</code></pre></div><h1 id="slice-in-python-model">Slice in python model</h1>
<p>To support slicing in user defined class, class needs to have <code>__getitem__</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
In [<span style="color:#ff0;font-weight:bold">4</span>]: <span style="color:#fff;font-weight:bold">class</span> List:
   ...:     <span style="color:#fff;font-weight:bold">def</span> __init__(self):
   ...:         self.x = <span style="color:#fff;font-weight:bold">list</span>(<span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">10</span>))
   ...:     <span style="color:#fff;font-weight:bold">def</span> __getitem__(self, i):
   ...:         <span style="color:#fff;font-weight:bold">return</span> self.x[i]
   ...:

In [<span style="color:#ff0;font-weight:bold">5</span>]: l = List()

In [<span style="color:#ff0;font-weight:bold">6</span>]: l[<span style="color:#ff0;font-weight:bold">2</span>]
Out[<span style="color:#ff0;font-weight:bold">6</span>]: <span style="color:#ff0;font-weight:bold">2</span>

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python sequence unpacking</title>
            <link>/posts/2021/09/python-sequence-unpacking/</link>
            <pubDate>Sun, 19 Sep 2021 20:13:02 +0100</pubDate>
            
            <guid>/posts/2021/09/python-sequence-unpacking/</guid>
            <description>Python defines unpacking for sequences(lists, tuple for example). RHS length has to match seq.len
&amp;gt;&amp;gt;&amp;gt; x = [1,2] &amp;gt;&amp;gt;&amp;gt; a , b = x also, there is star expression for unpacking in pep-3132.
&amp;gt;&amp;gt;&amp;gt; a, *b, c = range(5) &amp;gt;&amp;gt;&amp;gt; a 0 &amp;gt;&amp;gt;&amp;gt; c 4 &amp;gt;&amp;gt;&amp;gt; b [1, 2, 3] Also, useful trick for unpacking while calling a function. where is two types list unpack (one star) and names unpack(double star).</description>
            <content type="html"><![CDATA[<p>Python defines <em>unpacking</em> for sequences(lists, tuple for example). RHS length has to match seq.len</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">&gt;&gt;&gt; x = [<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">2</span>]
&gt;&gt;&gt; a , b = x
</code></pre></div><p>also, there is star expression for unpacking in <a href="https://www.python.org/dev/peps/pep-3132/">pep-3132</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">&gt;&gt;&gt; a, *b, c = <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">5</span>)
&gt;&gt;&gt; a
<span style="color:#ff0;font-weight:bold">0</span>
&gt;&gt;&gt; c
<span style="color:#ff0;font-weight:bold">4</span>
&gt;&gt;&gt; b
[<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#ff0;font-weight:bold">3</span>]
</code></pre></div><p>Also, useful trick for unpacking while calling a function. where is two types list unpack (one star) and names unpack(double star).
This is defined by <a href="https://www.python.org/dev/peps/pep-0448/">pep</a></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">&gt;&gt;&gt; <span style="color:#fff;font-weight:bold">def</span> f1(a,b):
...     <span style="color:#fff;font-weight:bold">print</span>(a,b)
...
&gt;&gt;&gt; x = [<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">2</span>]
&gt;&gt;&gt; f1(*x)
<span style="color:#ff0;font-weight:bold">1</span> <span style="color:#ff0;font-weight:bold">2</span>
&gt;&gt;&gt; x = {<span style="color:#0ff;font-weight:bold">&#34;a&#34;</span>:<span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#0ff;font-weight:bold">&#34;b&#34;</span>:<span style="color:#ff0;font-weight:bold">4</span>}
&gt;&gt;&gt; f1(**x)
<span style="color:#ff0;font-weight:bold">2</span> <span style="color:#ff0;font-weight:bold">4</span>

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python Template String</title>
            <link>/posts/2021/09/python-template-string/</link>
            <pubDate>Wed, 15 Sep 2021 18:02:53 +0100</pubDate>
            
            <guid>/posts/2021/09/python-template-string/</guid>
            <description>Template strings (as define in PEP292)
 We propose the addition of a new class, called Template, which will live in the string module. The Template class supports new rules for string substitution; its value contains placeholders, introduced with the $ character. The following rules for $-placeholders apply:
$$ is an escape; it is replaced with a single $
$identifier names a substitution placeholder matching a mapping key of &amp;ldquo;identifier&amp;rdquo;. By default, &amp;ldquo;identifier&amp;rdquo; must spell a Python identifier as defined in [2].</description>
            <content type="html"><![CDATA[<p>Template strings (as define in <a href="https://www.python.org/dev/peps/pep-0292/">PEP292</a>)</p>
<blockquote>
<p>We propose the addition of a new class, called Template, which will live in the string module. The Template class supports new rules for string substitution; its value contains placeholders, introduced with the $ character. The following rules for $-placeholders apply:</p>
<p>$$ is an escape; it is replaced with a single $</p>
<p>$identifier names a substitution placeholder matching a mapping key of &ldquo;identifier&rdquo;. By default, &ldquo;identifier&rdquo; must spell a Python identifier as defined in [2]. The first non-identifier character after the $ character terminates this placeholder specification.</p>
<p>${identifier} is equivalent to $identifier. It is required when valid identifier characters follow &gt; the placeholder but are not part of the placeholder, e.g. &ldquo;${noun}ification&rdquo;.</p>
</blockquote>
<p>Basically, This is a really simple built-in template engine better C-style <code>%</code> but way simpler than jinja) as it provide only substitution  (ie no expression evaluation). F-string does the same thing but f-string is fixed string.</p>
<p>The support was added in 2.4</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">from</span> string <span style="color:#fff;font-weight:bold">import</span> Template
ports = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>
params = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>

template = Template(<span style="color:#0ff;font-weight:bold">&#39;$module #(  $params ) $instance($ports);&#39;</span>)
txt = template.substitute(module=<span style="color:#0ff;font-weight:bold">&#34;top&#34;</span>, instance=<span style="color:#0ff;font-weight:bold">&#34;u_top&#34;</span>, params =params, ports = ports)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python Install without root</title>
            <link>/posts/2021/05/python-install-without-root/</link>
            <pubDate>Wed, 05 May 2021 20:13:02 +0100</pubDate>
            
            <guid>/posts/2021/05/python-install-without-root/</guid>
            <description>This post documents the steps to install python without root.
libffi libffi is required by ctypes module which is an important module for python/c interface.
./autogen.sh ./configure --prefix=$LOCAL make make install sqlite3 sqlite3 required by sqlite3 module. Python can compile without it but it is good module to have. So worth the trouble.
./configure --prefix=$LOCAL make make install python env Note that LDFLAGS below is need for compiling ctypes with local libffi and be removed after compilation.</description>
            <content type="html"><![CDATA[<p>This post documents the steps to install python without root.</p>
<h1 id="libffi">libffi</h1>
<p>libffi is required by ctypes module which is an important module for python/c interface.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">./autogen.sh
./configure --prefix=$LOCAL
make
make install
</code></pre></div><h1 id="sqlite3">sqlite3</h1>
<p>sqlite3 required by sqlite3 module. Python can compile without it but it is good module to have. So worth the trouble.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">./configure --prefix=$LOCAL
make
make install
</code></pre></div><h1 id="python">python</h1>
<h2 id="env">env</h2>
<p>Note that LDFLAGS below is need for compiling ctypes with local libffi and be removed after compilation.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#fff;font-weight:bold">set</span> path=($LOCAL/bin $path)
setenv LD_LIBRARY_PATH <span style="color:#0ff;font-weight:bold">&#34;</span>$LOCAL<span style="color:#0ff;font-weight:bold">/lib:</span>$LOCAL<span style="color:#0ff;font-weight:bold">/lib64:</span>$LOCAL<span style="color:#0ff;font-weight:bold">/lib/pkgconfig&#34;</span>
setenv PKG_CONFIG_PATH $LOCAL/lib/pkgconfig
setenv CFLAGS  <span style="color:#0ff;font-weight:bold">&#34;-I</span>$LOCAL<span style="color:#0ff;font-weight:bold">/include&#34;</span>
setenv LDFLAGS <span style="color:#0ff;font-weight:bold">&#34;-L</span>$LOCAL<span style="color:#0ff;font-weight:bold">/lib64 -L</span>$LOCAL<span style="color:#0ff;font-weight:bold">/lib&#34;</span>
setenv LDFLAGS <span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">${</span>LDFLAGS<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> -lffi&#34;</span> 
<span style="color:#fff;font-weight:bold">set</span> path=($LOCAL/python/3.9.4/bin $path)
setenv LD_LIBRARY_PATH <span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">${</span>LD_LIBRARY_PATH<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">:</span>$LOCAL<span style="color:#0ff;font-weight:bold">/python/3.9.4/lib&#34;</span>
</code></pre></div><h2 id="fix-for-sqlite-search-path">Fix for sqlite search path</h2>
<p>Add sqlite3 to search path if not installed in standard path <a href="https://stackoverflow.com/questions/32779768/python-build-from-source-cannot-build-optional-module-sqlite3">1</a></p>
<p>Modify setup.py to add path to sqlite headers in <code>sqlite_inc_paths</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sqlite_inc_paths = [<span style="color:#0ff;font-weight:bold">&#39;/usr/include&#39;</span>,
                    <span style="color:#0ff;font-weight:bold">&#39;/usr/include/sqlite&#39;</span>,
                    <span style="color:#0ff;font-weight:bold">&#39;/usr/include/sqlite3&#39;</span>,
                    <span style="color:#0ff;font-weight:bold">&#39;/usr/local/include&#39;</span>,
                    <span style="color:#0ff;font-weight:bold">&#39;/usr/local/include/sqlite&#39;</span>,
                    <span style="color:#0ff;font-weight:bold">&#39;/usr/local/include/sqlite3&#39;</span>,
                     ]
</code></pre></div><h2 id="configure-the-build">Configure the build</h2>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">./configure --prefix=$LOCAL/python/3.9.4 with_system_ffi=yes --enable-shared
</code></pre></div><p><code>with_system_ffi=yes</code> tells autoconf to use system ffi <a href="https://bugs.python.org/issue14527">link</a></p>
<h2 id="build">build</h2>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">make -j8
make install
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python Pep 503</title>
            <link>/posts/2021/05/python-pep-503/</link>
            <pubDate>Sat, 01 May 2021 13:09:31 +0100</pubDate>
            
            <guid>/posts/2021/05/python-pep-503/</guid>
            <description>pep 503 defines the python package repo api used py pypi.org. I thought it was fun to create small repo using Flask (to host Flask) :)
The spec require two urls
 root url project url  root url return html listing available project page. the anchor tags has the following requirements
 The text of the anchor tag MUST be the name of the project and the href attribute MUST link to the URL for that particular project.</description>
            <content type="html"><![CDATA[<p><a href="https://www.python.org/dev/peps/pep-0503/">pep 503</a> defines the python package repo api used py <em>pypi.org</em>. I thought it was fun to create small repo using Flask (to host Flask) :)</p>
<p>The spec require two urls</p>
<ul>
<li>root url</li>
<li>project url</li>
</ul>
<p>root url return html listing available project page. the anchor tags has the following requirements</p>
<blockquote>
<p>The text of the anchor tag MUST be the name of the project and the href attribute MUST link to the URL for that particular project.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#0f0;font-weight:bold">&lt;!DOCTYPE html&gt;</span>
&lt;<span style="font-weight:bold">html</span>&gt;
  &lt;<span style="font-weight:bold">head</span>&gt;
    &lt;<span style="font-weight:bold">meta</span> <span style="color:#007f7f">name</span>=<span style="color:#0ff;font-weight:bold">&#34;pypi:repository-version&#34;</span> <span style="color:#007f7f">content</span>=<span style="color:#0ff;font-weight:bold">&#34;1.0&#34;</span>&gt;
    &lt;<span style="font-weight:bold">title</span>&gt;Simple index&lt;/<span style="font-weight:bold">title</span>&gt;
  &lt;/<span style="font-weight:bold">head</span>&gt;
  &lt;<span style="font-weight:bold">body</span>&gt;
&lt;<span style="font-weight:bold">a</span> <span style="color:#007f7f">href</span>=<span style="color:#0ff;font-weight:bold">&#34;/foo/&#34;</span>&gt;Foo&lt;/<span style="font-weight:bold">a</span>&gt;
&lt;/<span style="font-weight:bold">body</span>&gt;
&lt;/<span style="font-weight:bold">html</span>&gt;
</code></pre></div><p>the project url, returns  html with anchor tags for tar file name and href for the that tar.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#0f0;font-weight:bold">&lt;!DOCTYPE html&gt;</span>
&lt;<span style="font-weight:bold">html</span>&gt;
  &lt;<span style="font-weight:bold">head</span>&gt;
    &lt;<span style="font-weight:bold">meta</span> <span style="color:#007f7f">name</span>=<span style="color:#0ff;font-weight:bold">&#34;pypi:repository-version&#34;</span> <span style="color:#007f7f">content</span>=<span style="color:#0ff;font-weight:bold">&#34;1.0&#34;</span>&gt;
    &lt;<span style="font-weight:bold">title</span>&gt;Links for Flask&lt;/<span style="font-weight:bold">title</span>&gt;
  &lt;/<span style="font-weight:bold">head</span>&gt;
  &lt;<span style="font-weight:bold">body</span>&gt;
    &lt;<span style="font-weight:bold">h1</span>&gt;Links for Flask&lt;/<span style="font-weight:bold">h1</span>&gt;
    &lt;<span style="font-weight:bold">a</span> <span style="color:#007f7f">href</span>=<span style="color:#0ff;font-weight:bold">&#34;/static/Foo-0.1.tar.gz&#34;</span>&gt;Flask-0.1.tar.gz&lt;/<span style="font-weight:bold">a</span>&gt;&lt;<span style="font-weight:bold">br</span>/&gt;
    &lt;/<span style="font-weight:bold">body</span>&gt;
&lt;/<span style="font-weight:bold">html</span>&gt;

</code></pre></div><h1 id="full-source-code">Full source code</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pip3 install Foo --index-url  http://localhost:5000 -v
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#fff;font-weight:bold">import</span> os
<span style="color:#fff;font-weight:bold">from</span> flask <span style="color:#fff;font-weight:bold">import</span> Flask, send_from_directory, send_file


app = Flask(__name__, static_url_path=<span style="color:#0ff;font-weight:bold">&#39;&#39;</span>)

@app.route(<span style="color:#0ff;font-weight:bold">&#39;/static/&lt;path:filename&gt;&#39;</span>)
<span style="color:#fff;font-weight:bold">def</span> f(filename):
    root_dir = os.getcwd()
    <span style="color:#fff;font-weight:bold">print</span>(root_dir, filename)
    <span style="color:#fff;font-weight:bold">return</span> send_from_directory(os.path.join(root_dir), filename)

@app.route(<span style="color:#0ff;font-weight:bold">&#39;/&#39;</span>)
<span style="color:#fff;font-weight:bold">def</span> home():
	<span style="color:#fff;font-weight:bold">return</span> <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;
</span><span style="color:#0ff;font-weight:bold">&lt;!DOCTYPE html&gt;
</span><span style="color:#0ff;font-weight:bold">&lt;html&gt;
</span><span style="color:#0ff;font-weight:bold">  &lt;head&gt;
</span><span style="color:#0ff;font-weight:bold">    &lt;meta name=&#34;pypi:repository-version&#34; content=&#34;1.0&#34;&gt;
</span><span style="color:#0ff;font-weight:bold">    &lt;title&gt;Simple index&lt;/title&gt;
</span><span style="color:#0ff;font-weight:bold">  &lt;/head&gt;
</span><span style="color:#0ff;font-weight:bold">  &lt;body&gt;
</span><span style="color:#0ff;font-weight:bold">&lt;a href=&#34;/foo/&#34;&gt;Foo&lt;/a&gt;
</span><span style="color:#0ff;font-weight:bold">&lt;/body&gt;
</span><span style="color:#0ff;font-weight:bold">&lt;/html&gt;
</span><span style="color:#0ff;font-weight:bold">
</span><span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;</span>
@app.route(<span style="color:#0ff;font-weight:bold">&#39;/foo/&#39;</span>)
<span style="color:#fff;font-weight:bold">def</span> hello_world():
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;
</span><span style="color:#0ff;font-weight:bold">&lt;!DOCTYPE html&gt;
</span><span style="color:#0ff;font-weight:bold">&lt;html&gt;
</span><span style="color:#0ff;font-weight:bold">  &lt;head&gt;
</span><span style="color:#0ff;font-weight:bold">    &lt;meta name=&#34;pypi:repository-version&#34; content=&#34;1.0&#34;&gt;
</span><span style="color:#0ff;font-weight:bold">    &lt;title&gt;Links for Flask&lt;/title&gt;
</span><span style="color:#0ff;font-weight:bold">  &lt;/head&gt;
</span><span style="color:#0ff;font-weight:bold">  &lt;body&gt;
</span><span style="color:#0ff;font-weight:bold">    &lt;h1&gt;Links for Flask&lt;/h1&gt;
</span><span style="color:#0ff;font-weight:bold">    &lt;a href=&#34;/static/Foo-0.1.tar.gz&#34;&gt;Foo-0.1.tar.gz&lt;/a&gt;&lt;br/&gt;
</span><span style="color:#0ff;font-weight:bold">    &lt;/body&gt;
</span><span style="color:#0ff;font-weight:bold">&lt;/html&gt;
</span><span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;</span>

app.run(debug=<span style="color:#fff;font-weight:bold">True</span>)

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python Wheels</title>
            <link>/posts/2021/05/python-wheels/</link>
            <pubDate>Sat, 01 May 2021 10:00:20 +0100</pubDate>
            
            <guid>/posts/2021/05/python-wheels/</guid>
            <description>Python wheels is zip file with package content as opposed to source distribution. It&amp;rsquo;s faster to install than the normal tar(or whatever).
The article has really good description for wheels.
For me, wheels are most helpful for installing packages on air-gapped machines. I can just copy the wheels and install. These are the steps based on SO.
export PD=/var/tmp/python-deps mkdir $PD python -m pip download wheel setuptools cocotb setuptools_scm -d $PD And to install on another machine</description>
            <content type="html"><![CDATA[<p>Python wheels is zip file with package content as opposed to source distribution. It&rsquo;s faster to install than the normal tar(or whatever).</p>
<p>The <a href="https://realpython.com/python-wheels/">article</a> has really good description for wheels.</p>
<p>For me, wheels are most helpful for installing packages on air-gapped machines. I can just copy the wheels and install.
These are the steps based on <a href="https://stackoverflow.com/questions/36725843/installing-python-packages-without-internet-and-using-source-code-as-tar-gz-and">SO</a>.</p>
<pre tabindex="0"><code>export PD=/var/tmp/python-deps
mkdir $PD
python -m pip download wheel setuptools cocotb  setuptools_scm -d $PD
</code></pre><p>And to install on another machine</p>
<pre tabindex="0"><code>cd $PD
pip3 install --user --no-index cocotb-1.5.1.tar.gz  --find-links file://$PD
</code></pre><p>From pip help</p>
<pre tabindex="0"><code>  --no-index                  Ignore package index (only looking at --find-links URLs instead).
  -f, --find-links &lt;url&gt;      If a url or path to an html file, then parse for links to archives. If a local path or file:// url
                              that's a directory, then look for archives in the directory listing.
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Python Context Manager</title>
            <link>/posts/2021/05/python-context-manager/</link>
            <pubDate>Sat, 01 May 2021 08:53:49 +0100</pubDate>
            
            <guid>/posts/2021/05/python-context-manager/</guid>
            <description>Intro pep-343 describes the context(pun intended) of context managers.
 PEP 340, Anonymous Block Statements, combined many powerful ideas: using generators as block templates, adding exception handling and finalization to generators, and more
 Basically pep 340 introduced the concept of anonymous blocks. which means that something
block EXPR1 as VAR1: BLOCK1 is the same as
itr = EXPR1 # The iterator ret = False # True if a return statement is active val = None # Return value, if ret == True exc = None # sys.</description>
            <content type="html"><![CDATA[<h1 id="intro">Intro</h1>
<p><a href="https://www.python.org/dev/peps/pep-0343/">pep-343</a> describes the context(pun intended) of context managers.</p>
<blockquote>
<p>PEP 340, Anonymous Block Statements, combined many powerful ideas: using generators as block templates, adding exception handling and finalization to generators, and more</p>
</blockquote>
<p>Basically <a href="https://www.python.org/dev/peps/pep-0340/">pep 340</a> introduced the concept of anonymous blocks. which means that something</p>
<pre tabindex="0"><code>block EXPR1 as VAR1:
    BLOCK1
</code></pre><p>is the same as</p>
<pre tabindex="0"><code>itr = EXPR1  # The iterator
ret = False  # True if a return statement is active
val = None   # Return value, if ret == True
exc = None   # sys.exc_info() tuple if an exception is active
while True:
    try:
        if exc:
            ext = getattr(itr, &quot;__exit__&quot;, None)
            if ext is not None:
                VAR1 = ext(*exc)   # May re-raise *exc
            else:
                raise exc[0], exc[1], exc[2]
        else:
            VAR1 = itr.next()  # May raise StopIteration
</code></pre><p>but pep-343 won with statement <em>with</em></p>
<h1 id="specification">Specification</h1>
<p>the following context mangr expression</p>
<pre tabindex="0"><code>with EXPR as VAR:
    BLOCK
</code></pre><p>Translates to</p>
<pre tabindex="0"><code>mgr = (EXPR)
exit = type(mgr).__exit__  # Not calling it yet
value = type(mgr).__enter__(mgr)
exc = True
try:
    try:
        VAR = value  # Only if &quot;as VAR&quot; is present
        BLOCK
    except:
        # The exceptional case is handled here
        exc = False
        if not exit(mgr, *sys.exc_info()):
            raise
        # The exception is swallowed if exit() returns true
finally:
    # The normal and non-local-goto cases are handled here
    if exc:
        exit(mgr, None, None, None)
</code></pre><p>The pepe defines EXPR and VAR as</p>
<blockquote>
<p>Here, &lsquo;with&rsquo; and &lsquo;as&rsquo; are new keywords; EXPR is an arbitrary expression (but not an expression-list) and VAR is a single assignment target.</p>
</blockquote>
<h1 id="examples-and-application">Examples and application</h1>
<p>The main application for context manager is resource management like file or lock. And handle exceptions inside BLOCK. So, even exception happens, the cleanup code will be executed.</p>
<h2 id="context-manager-for-file">context manager for file</h2>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">with</span> <span style="color:#fff;font-weight:bold">open</span>(<span style="color:#0ff;font-weight:bold">&#34;t.log&#34;</span>) <span style="color:#fff;font-weight:bold">as</span> f:
	lines = f.readlines()
</code></pre></div><h2 id="user-defined-context-manager">user defined context manager</h2>
<p>ie the context manager data model requires two dunder methods</p>
<ul>
<li><strong>enter</strong></li>
<li><strong>exit</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> File():
    <span style="color:#fff;font-weight:bold">def</span> __init__(self):
        <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;__init__&#34;</span>)
    <span style="color:#fff;font-weight:bold">def</span> __enter__(self):
        <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;__enter__&#34;</span>)
    <span style="color:#fff;font-weight:bold">def</span> __exit__(self, type_,  value, traceback):
        <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;__exit__&#34;</span>)
        <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;type&#34;</span>, type_)
        <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;value&#34;</span>, value)
        <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;traceback&#34;</span>, traceback)



<span style="color:#fff;font-weight:bold">with</span> File() <span style="color:#fff;font-weight:bold">as</span> file:
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;something&#34;</span>)
</code></pre></div><p>generates the following logs</p>
<pre tabindex="0"><code>__init__
__enter__
something
__exit__
type None
value None
traceback None

</code></pre><p>and when exception is raised the <code>__exit__</code> is called with excep information and stacktrace</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">with</span> File() <span style="color:#fff;font-weight:bold">as</span> file:
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;something&#34;</span>)
    <span style="color:#fff;font-weight:bold">raise</span> ValueError
</code></pre></div><pre tabindex="0"><code>__enter__
something
__exit__
type &lt;class 'ValueError'&gt;
value 
traceback &lt;traceback object at 0x7f18a06b0500&gt;
4
Traceback (most recent call last):
  File &quot;cntx-mngr.py&quot;, line 23, in &lt;module&gt;
    raise ValueError
ValueError
</code></pre><h2 id="generator-based-context-manager">Generator based context manager</h2>
<p><a href="https://docs.python.org/3/library/contextlib.html">doc</a> describes it best:</p>
<blockquote>
<p>This function is a decorator that can be used to define a factory function for with statement context managers, without needing to create a class or separate <strong>enter</strong>() and <strong>exit</strong>() methods.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">from</span> contextlib <span style="color:#fff;font-weight:bold">import</span> contextmanager

@contextmanager
<span style="color:#fff;font-weight:bold">def</span> managed_resource(*args, **kwds):
    <span style="color:#007f7f"># Code to acquire resource, e.g.:</span>
    resource = acquire_resource(*args, **kwds)
    <span style="color:#fff;font-weight:bold">try</span>:
        <span style="color:#fff;font-weight:bold">yield</span> resource
    <span style="color:#fff;font-weight:bold">finally</span>:
        <span style="color:#007f7f"># Code to release resource, e.g.:</span>
        release_resource(resource)

&gt;&gt;&gt; <span style="color:#fff;font-weight:bold">with</span> managed_resource(timeout=<span style="color:#ff0;font-weight:bold">3600</span>) <span style="color:#fff;font-weight:bold">as</span> resource:
...     <span style="color:#007f7f"># Resource is released at the end of this block,</span>
...     <span style="color:#007f7f"># even if code in the block raises an exception</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python int/hex and bytes</title>
            <link>/posts/2021/04/python-int/hex-and-bytes/</link>
            <pubDate>Thu, 22 Apr 2021 22:15:10 +0100</pubDate>
            
            <guid>/posts/2021/04/python-int/hex-and-bytes/</guid>
            <description>few years ago, i tried to write ELF parser in python and it was fun to write hacky code to parse and manipulate binary/hex (not easy though). This is quick write-up to decribe python bin/hex methods.
ord and chr ord takes string of one char and returns ascii code. The doc descibes it as:
 Given a string representing one Unicode character, return an integer representing the Unicode code point of that character.</description>
            <content type="html"><![CDATA[<p>few years ago, i tried to write ELF parser in python and it was fun to write hacky code to parse and manipulate binary/hex (not easy though). This is quick write-up to decribe python bin/hex methods.</p>
<h1 id="ord-and-chr">ord and chr</h1>
<p><code>ord</code> takes string of one char and returns ascii code. The doc descibes it as:</p>
<blockquote>
<p>Given a string representing one Unicode character, return an integer representing the Unicode code point of that character. For example, ord(&lsquo;a&rsquo;) returns the integer 97 and ord(&lsquo;€&rsquo;) (Euro sign) returns 8364. This is the inverse of chr().</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">In [<span style="color:#ff0;font-weight:bold">22</span>]: <span style="color:#fff;font-weight:bold">ord</span>(<span style="color:#0ff;font-weight:bold">&#39;a&#39;</span>)
Out[<span style="color:#ff0;font-weight:bold">22</span>]: <span style="color:#ff0;font-weight:bold">97</span>

In [<span style="color:#ff0;font-weight:bold">23</span>]: <span style="color:#fff;font-weight:bold">chr</span>(<span style="color:#ff0;font-weight:bold">97</span>)
Out[<span style="color:#ff0;font-weight:bold">23</span>]: <span style="color:#0ff;font-weight:bold">&#39;a&#39;</span>
</code></pre></div><h1 id="int-hex-bin-oct">int, hex, bin, oct</h1>
<p><em>int</em> takes string and returns int based on passed <em>base</em>.</p>
<pre tabindex="0"><code>In [18]: int(&quot;10&quot;, base=10)
Out[18]: 10


In [20]: int(&quot;0xf&quot;, base=16)
Out[20]: 15

</code></pre><p><em>hex</em>, <em>bin</em>, <em>oct</em> take integer and return string prefixed <em>0x</em>, <em>0o</em>, <em>0b</em></p>
<pre tabindex="0"><code>In [24]: hex(10)
Out[24]: '0xa'

In [25]: oct(10)
Out[25]: '0o12'

In [26]: bin(10)
Out[26]: '0b1010'

</code></pre><h1 id="bytes-and-bytearray">bytes and bytearray</h1>
<blockquote>
<p>class bytes([source[, encoding[, errors]]])
Return a new “bytes” object, which is an immutable sequence of integers in the range 0 &lt;= x &lt; 256. bytes is an immutable version of bytearray – it has the same non-mutating methods and the same indexing and slicing behavior.</p>
</blockquote>
<p>bytes are strings prefixed with <em>b</em></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">In [<span style="color:#ff0;font-weight:bold">28</span>]: x = <span style="color:#0ff;font-weight:bold">b</span><span style="color:#0ff;font-weight:bold">&#39;&#39;</span>

In [<span style="color:#ff0;font-weight:bold">29</span>]: <span style="color:#fff;font-weight:bold">type</span>(x)
Out[<span style="color:#ff0;font-weight:bold">29</span>]: <span style="color:#fff;font-weight:bold">bytes</span>
In [<span style="color:#ff0;font-weight:bold">41</span>]: x = <span style="color:#fff;font-weight:bold">bytes</span>()

In [<span style="color:#ff0;font-weight:bold">42</span>]: <span style="color:#fff;font-weight:bold">type</span>(x)
Out[<span style="color:#ff0;font-weight:bold">42</span>]: <span style="color:#fff;font-weight:bold">bytes</span>
</code></pre></div><p>Basically, bytes is list elements(each is byte) but if the byte maps to ascii it will map it that. <em>fromhex</em> can be used to convert hex string to bytes. notice <em>0x2e</em> is printed as <em>.</em></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">In [<span style="color:#ff0;font-weight:bold">43</span>]: <span style="color:#fff;font-weight:bold">bytes</span>.fromhex(<span style="color:#0ff;font-weight:bold">&#34;2ef0 ff&#34;</span>)
Out[<span style="color:#ff0;font-weight:bold">43</span>]: <span style="color:#0ff;font-weight:bold">b</span><span style="color:#0ff;font-weight:bold">&#39;.</span><span style="color:#0ff;font-weight:bold">\xf0\xff</span><span style="color:#0ff;font-weight:bold">&#39;</span>
</code></pre></div><p>and <em>.hex</em> on bytes be used to return string of hex back</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">In [<span style="color:#ff0;font-weight:bold">44</span>]: x = <span style="color:#fff;font-weight:bold">bytes</span>.fromhex(<span style="color:#0ff;font-weight:bold">&#34;2ef0 ff&#34;</span>)

In [<span style="color:#ff0;font-weight:bold">45</span>]: x.hex()
Out[<span style="color:#ff0;font-weight:bold">45</span>]: <span style="color:#0ff;font-weight:bold">&#39;2ef0ff&#39;</span>

</code></pre></div><p>Slicing into bytes is allowed and it returns <em>int</em>. Note that Byte array is immutable so can&rsquo;t assign to slice.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">In [<span style="color:#ff0;font-weight:bold">47</span>]: x [<span style="color:#ff0;font-weight:bold">1</span>]
Out[<span style="color:#ff0;font-weight:bold">47</span>]: <span style="color:#ff0;font-weight:bold">240</span>

In [<span style="color:#ff0;font-weight:bold">48</span>]: <span style="color:#fff;font-weight:bold">hex</span>(x [<span style="color:#ff0;font-weight:bold">1</span>])
Out[<span style="color:#ff0;font-weight:bold">48</span>]: <span style="color:#0ff;font-weight:bold">&#39;0xf0&#39;</span>

In [<span style="color:#ff0;font-weight:bold">49</span>]: x [<span style="color:#ff0;font-weight:bold">1</span>] = <span style="color:#ff0;font-weight:bold">4</span>
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-<span style="color:#fff;font-weight:bold">input</span>-<span style="color:#ff0;font-weight:bold">49</span>-<span style="color:#ff0;font-weight:bold">5</span>f643ec4a398&gt; in &lt;module&gt;
----&gt; <span style="color:#ff0;font-weight:bold">1</span> x [<span style="color:#ff0;font-weight:bold">1</span>] = <span style="color:#ff0;font-weight:bold">4</span>

TypeError: <span style="color:#0ff;font-weight:bold">&#39;bytes&#39;</span> <span style="color:#fff;font-weight:bold">object</span> does not support item assignment

</code></pre></div><p>on the other hand, bytearray is mutuable.</p>
<blockquote>
<p>bytearray objects are a mutable counterpart to bytes objects.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">In [<span style="color:#ff0;font-weight:bold">51</span>]: x = <span style="color:#fff;font-weight:bold">bytearray</span>.fromhex(<span style="color:#0ff;font-weight:bold">&#34;00ff&#34;</span>)

In [<span style="color:#ff0;font-weight:bold">52</span>]: x [<span style="color:#ff0;font-weight:bold">0</span>]
Out[<span style="color:#ff0;font-weight:bold">52</span>]: <span style="color:#ff0;font-weight:bold">0</span>


In [<span style="color:#ff0;font-weight:bold">55</span>]: x [<span style="color:#ff0;font-weight:bold">0</span>] = <span style="color:#ff0;font-weight:bold">16</span>

In [<span style="color:#ff0;font-weight:bold">56</span>]: x
Out[<span style="color:#ff0;font-weight:bold">56</span>]: <span style="color:#fff;font-weight:bold">bytearray</span>(<span style="color:#0ff;font-weight:bold">b</span><span style="color:#0ff;font-weight:bold">&#39;</span><span style="color:#0ff;font-weight:bold">\x10\xff</span><span style="color:#0ff;font-weight:bold">&#39;</span>)

</code></pre></div><h1 id="bytearray-and-in-conversion">Bytearray and in conversion</h1>
<p><code>fromhex</code> is used to convert str to bytearray and <code>.hex()</code> for bytearray to str.
we still need to use <code>int</code> and <code>hex</code> for string and int convertion.</p>
<pre tabindex="0"><code>In [1]: x = 0x180000                                                                                                                  

In [2]: bytearray.fromhex(hex(x)[2:])                                                                                                 
Out[2]: bytearray(b'\x18\x00\x00')

In [3]: b = bytearray.fromhex(hex(x)[2:])                                                                                             

In [4]: for i in b: 
   ...:     print(i) 
   ...:                                                                                                                               
24
0
0

In [5]: b.hex()                                                                                                                       
Out[5]: '180000'

In [6]: int(b.hex(), base=16)                                                                                                         
Out[6]: 1572864
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Python Decorators</title>
            <link>/posts/2021/04/python-decorators/</link>
            <pubDate>Mon, 19 Apr 2021 12:08:54 +0100</pubDate>
            
            <guid>/posts/2021/04/python-decorators/</guid>
            <description>pep describes decorators as better way for method transformation.
 The current method of applying a transformation to a function or method places the actual transformation after the function body. For large functions this separates a key component of the function&amp;rsquo;s behavior from the definition of the rest of the function&amp;rsquo;s external interface
 the pep mentions an example or the function transformation:
def foo(self): perform method operation foo = classmethod(foo) Syntax syntax</description>
            <content type="html"><![CDATA[<p><a href="https://www.python.org/dev/peps/pep-0318/">pep</a> describes decorators as better way for method transformation.</p>
<blockquote>
<p>The current method of applying a transformation to a function or method places the actual transformation after the function body. For large functions this separates a key component of the function&rsquo;s behavior from the definition of the rest of the function&rsquo;s external interface</p>
</blockquote>
<p>the pep mentions an example or the function transformation:</p>
<pre tabindex="0"><code>def foo(self):
    perform method operation
foo = classmethod(foo)
</code></pre><h1 id="syntax">Syntax</h1>
<p>syntax</p>
<pre tabindex="0"><code>@dec2
@dec1
def func(arg1, arg2, ...):
    pass
</code></pre><p>This is equivalent to:</p>
<pre tabindex="0"><code>def func(arg1, arg2, ...):
    pass
func = dec2(dec1(func))
</code></pre><p>decorator can define arguments arguments</p>
<pre tabindex="0"><code>@decomaker(argA, argB, ...)
def func(arg1, arg2, ...):
    pass
</code></pre><p>This is equivalent to:</p>
<pre tabindex="0"><code>func = decomaker(argA, argB, ...)(func)
</code></pre><h1 id="simple-example">Simple Example</h1>
<p>A popular application is providing pre/post implementation for a method. in this example, the decorator is method that returns a another <em>wrapper</em> method. the wrapper method calls the <em>func</em>.</p>
<pre tabindex="0"><code>def dec(func):
    def wrapper():
        print(&quot;before&quot;)
        func()
        print(&quot;after&quot;)
    return wrapper


@dec
def say():
    print(&quot;something&quot;)

say()
</code></pre><h1 id="real-example-flask-route">real example (flask route)</h1>
<p>in flask <code>app</code> defines method route that takes url.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">@app.route(<span style="color:#0ff;font-weight:bold">&#39;/&#39;</span>)
<span style="color:#fff;font-weight:bold">def</span> index():
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#0ff;font-weight:bold">&#34;Hello, World!&#34;</span>
</code></pre></div><p><code>@app.route</code> defined in <code>flask/app.py</code> returns decorator method. and the decorator method register the route and returns the original method.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> <span style="color:#fff;font-weight:bold">def</span> route(self, rule, **options):
        <span style="color:#fff;font-weight:bold">def</span> decorator(f):
            endpoint = options.pop(<span style="color:#0ff;font-weight:bold">&#34;endpoint&#34;</span>, <span style="color:#fff;font-weight:bold">None</span>)
            self.add_url_rule(rule, endpoint, f, **options)
            <span style="color:#fff;font-weight:bold">return</span> f

        <span style="color:#fff;font-weight:bold">return</span> decorator
</code></pre></div><p>so <code>index</code> becomes the following</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">index = route(<span style="color:#0ff;font-weight:bold">&#39;/&#39;</span>)(index)
</code></pre></div><p>which is</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">index = decorator(index)
</code></pre></div><p>which is</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">index = index
</code></pre></div><p>and the final LHS index is <em>decorated</em></p>
]]></content>
        </item>
        
        <item>
            <title>Python Threading</title>
            <link>/posts/2021/04/python-threading/</link>
            <pubDate>Sun, 18 Apr 2021 16:01:24 +0100</pubDate>
            
            <guid>/posts/2021/04/python-threading/</guid>
            <description>python threading module provides a way to start python callable in a thread of execution
class threading.Thread(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None) This constructor should always be called with keyword arguments. Arguments are: group should be None; reserved for future extension when a ThreadGroup class is implemented. target is the callable object to be invoked by the run() method. Defaults to None, meaning nothing is called. name is the thread name.</description>
            <content type="html"><![CDATA[<p>python threading module provides a way to start python callable in a thread of execution</p>
<pre tabindex="0"><code>class threading.Thread(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)
This constructor should always be called with keyword arguments. Arguments are:

group should be None; reserved for future extension when a ThreadGroup class is implemented.

target is the callable object to be invoked by the run() method. Defaults to None, meaning nothing is called.

name is the thread name. By default, a unique name is constructed of the form “Thread-N” where N is a small decimal number.

args is the argument tuple for the target invocation. Defaults to ().

kwargs is a dictionary of keyword arguments for the target invocation. Defaults to {}.

If not None, daemon explicitly sets whether the thread is daemonic. If None (the default), the daemonic property is inherited from the current thread.
</code></pre><p>it seems straightforward. create <em>Thread</em> and pass callable. daemon can be set to True if you want thread to run as daemon.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">import</span> threading
<span style="color:#fff;font-weight:bold">import</span> subprocess

<span style="color:#fff;font-weight:bold">def</span> thread():
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;from thread&#34;</span>)
    subprocess.run(<span style="color:#0ff;font-weight:bold">&#34;sleep 3&#34;</span>, shell=<span style="color:#fff;font-weight:bold">True</span>)

thread_ = threading.Thread(target=thread, daemon=<span style="color:#fff;font-weight:bold">True</span>)
thread_.start()

<span style="color:#fff;font-weight:bold">print</span>(thread_.name)
<span style="color:#fff;font-weight:bold">print</span>(thread_.ident)

</code></pre></div><p>the difference between daemon and non-daemon threads is that python will exit program if there no alive non-daemon threads.
ie main program can exit if there is only daemon threads.</p>
<h1 id="communcation">communcation</h1>
<p>To communcation with thread, <em>queue</em> module can be used. The <a href="https://docs.python.org/3/library/queue.html#module-queue">doc</a> says</p>
<pre tabindex="0"><code>The queue module implements multi-producer, multi-consumer queues. It is especially useful in threaded programming when information must be exchanged safely between multiple threads. The Queue class in this module implements all the required locking semantics.
</code></pre><p>and example of queue put and get.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">import</span> threading
<span style="color:#fff;font-weight:bold">import</span> subprocess

<span style="color:#fff;font-weight:bold">import</span> queue

<span style="color:#fff;font-weight:bold">def</span> thread(Q):
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;from thread&#34;</span>)
    x= Q.get()
    <span style="color:#fff;font-weight:bold">print</span>(x)
    <span style="color:#007f7f">#subprocess.run(&#34;sleep 3&#34;, shell=True)</span>

Q = queue.Queue()
thread_ = threading.Thread(target=thread,  args=(Q,))
thread_.start()

<span style="color:#fff;font-weight:bold">print</span>(thread_.name)
<span style="color:#fff;font-weight:bold">print</span>(thread_.ident)

subprocess.run(<span style="color:#0ff;font-weight:bold">&#34;sleep 3&#34;</span>, shell=<span style="color:#fff;font-weight:bold">True</span>)
Q.put(<span style="color:#ff0;font-weight:bold">1</span>)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python Subprocess</title>
            <link>/posts/2021/04/python-subprocess/</link>
            <pubDate>Sun, 18 Apr 2021 14:44:43 +0100</pubDate>
            
            <guid>/posts/2021/04/python-subprocess/</guid>
            <description>subprocess.run python 3.5 provided new interface to replace older os.system to call programs and shell commands. doc
run() is wrapper around the lower interface Popen which provides finer and more complicated control. Also, run waits until process is done but popen will continue execution and user needs to check for process termination.
subprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, capture_output=False, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None, text=None, env=None, universal_newlines=None, **other_popen_kwargs) as docs mentions these are the most important options.</description>
            <content type="html"><![CDATA[<h1 id="subprocessrun">subprocess.run</h1>
<p>python 3.5 provided new interface to replace older os.system to call programs and shell commands. <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run">doc</a></p>
<p>run() is wrapper around the lower interface Popen which provides finer and more complicated control. Also, run waits until process is done but popen will continue execution and user needs to check for process termination.</p>
<pre tabindex="0"><code>subprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, capture_output=False, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None, text=None, env=None, universal_newlines=None, **other_popen_kwargs)
</code></pre><p>as docs mentions these are the most important options.</p>
<h1 id="args">args</h1>
<p>This could be list of strings for the program and program arguments.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">subproccess.run([<span style="color:#0ff;font-weight:bold">&#34;ls&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;-l&#34;</span>])
</code></pre></div><p>if it&rsquo;s one string, <em>shell=True</em> must be used to allow shell to handle the whole command</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">run ( <span style="color:#0ff;font-weight:bold">&#34;ls -l f*&#34;</span>,shell=<span style="color:#fff;font-weight:bold">True</span>)
</code></pre></div><h1 id="stdin-stdout-stderr">stdin, stdout, stderr</h1>
<p>According to doc,</p>
<blockquote>
<p>stdin, stdout and stderr specify the executed program’s standard input, standard output and standard error file handles, respectively. Valid values are PIPE, DEVNULL, an existing file descriptor (a positive integer), an existing file object, and None</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">import</span> subprocess

<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;########## default&#34;</span>)
ls = subprocess.run([<span style="color:#0ff;font-weight:bold">&#34;ls&#34;</span>])

<span style="color:#fff;font-weight:bold">print</span>((ls))


<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;########## suppress output&#34;</span>)
ls = subprocess.run([<span style="color:#0ff;font-weight:bold">&#34;ls&#34;</span>], stdout= subprocess.DEVNULL)

<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;########## send to file&#34;</span>)
fh = <span style="color:#fff;font-weight:bold">open</span>(<span style="color:#0ff;font-weight:bold">&#34;t&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;w&#34;</span>)
ls = subprocess.run([<span style="color:#0ff;font-weight:bold">&#34;ls&#34;</span>], stdout= fh)

<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;########## capture in process&#34;</span>)
ls = subprocess.run([<span style="color:#0ff;font-weight:bold">&#34;ls&#34;</span>], stdout= subprocess.PIPE)
<span style="color:#fff;font-weight:bold">print</span>(ls.stdout)
ls = subprocess.run([<span style="color:#0ff;font-weight:bold">&#34;ls&#34;</span>], stdout= subprocess.PIPE, text=<span style="color:#fff;font-weight:bold">True</span>)
</code></pre></div><h1 id="text">text</h1>
<p>by default, stdout, stdin, stderr are using byte encoding for output. with <em>text=True</em>, the output is string</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">In [<span style="color:#ff0;font-weight:bold">10</span>]: run ( <span style="color:#0ff;font-weight:bold">&#34;echo test&#34;</span>,shell=<span style="color:#fff;font-weight:bold">True</span>,stdout=subprocess.PIPE).stdout                                                                  
Out[<span style="color:#ff0;font-weight:bold">10</span>]: <span style="color:#0ff;font-weight:bold">b</span><span style="color:#0ff;font-weight:bold">&#39;test</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#39;</span>

In [<span style="color:#ff0;font-weight:bold">11</span>]: run ( <span style="color:#0ff;font-weight:bold">&#34;echo test&#34;</span>,shell=<span style="color:#fff;font-weight:bold">True</span>,stdout=subprocess.PIPE, text=<span style="color:#fff;font-weight:bold">True</span>).stdout                                                       
Out[<span style="color:#ff0;font-weight:bold">11</span>]: <span style="color:#0ff;font-weight:bold">&#39;test</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#39;</span>
</code></pre></div><h1 id="subprocesspopen">subprocess.Popen</h1>
<p>Popen starts the process and user needs to check when it terminated if needed</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">proc = subprocess.Popen(<span style="color:#0ff;font-weight:bold">&#34;sleep 10&#34;</span>, shell=<span style="color:#fff;font-weight:bold">True</span>)
<span style="color:#fff;font-weight:bold">try</span>:
        outs, errs = proc.communicate(timeout=<span style="color:#ff0;font-weight:bold">3</span>)
<span style="color:#fff;font-weight:bold">except</span> subprocess.TimeoutExpired:
        proc.kill()
        outs, errs = proc.communicate()
        <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;timeout&#34;</span>)
</code></pre></div><p>There is also Popen.wait which makes program wait for child process which make Popen() same as run()</p>
<p>also there are several API to control the process, probably the most important would be</p>
<ul>
<li>Popen.send_signal(signal)</li>
<li>Popen.kill()</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Python filter/map</title>
            <link>/posts/2021/04/python-filter/map/</link>
            <pubDate>Sun, 18 Apr 2021 12:39:44 +0100</pubDate>
            
            <guid>/posts/2021/04/python-filter/map/</guid>
            <description>filter() Define in docs,
 Construct an iterator from those elements of iterable for which function returns true. iterable may be either a sequence, a container which supports iteration, or an iterator. If function is None, the identity function is assumed, that is, all elements of iterable that are false are removed
 This is very similar to filter and map from other languages like javascript
l = [1, 2, 3, 4, 5] def filter_(x): if x &amp;lt; 3: return True else: return False f = filter(filter_, l) print(list(f)) map()  Return an iterator that applies function to every item of iterable, yielding the results.</description>
            <content type="html"><![CDATA[<h1 id="filter">filter()</h1>
<p>Define in <a href="https://docs.python.org/3/library/functions.html">docs</a>,</p>
<blockquote>
<p>Construct an iterator from those elements of iterable for which function returns true. iterable may be either a sequence, a container which supports iteration, or an iterator. If function is None, the identity function is assumed, that is, all elements of iterable that are false are removed</p>
</blockquote>
<p>This is very similar to filter and map from other languages like javascript</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">l = [<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#ff0;font-weight:bold">3</span>, <span style="color:#ff0;font-weight:bold">4</span>, <span style="color:#ff0;font-weight:bold">5</span>]
<span style="color:#fff;font-weight:bold">def</span> filter_(x):
    <span style="color:#fff;font-weight:bold">if</span> x &lt; <span style="color:#ff0;font-weight:bold">3</span>:
        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">True</span>
    <span style="color:#fff;font-weight:bold">else</span>:
        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">False</span>
f = <span style="color:#fff;font-weight:bold">filter</span>(filter_, l)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#fff;font-weight:bold">list</span>(f))
</code></pre></div><h1 id="map">map()</h1>
<blockquote>
<p>Return an iterator that applies function to every item of iterable, yielding the results. If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">l = [<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#ff0;font-weight:bold">3</span>, <span style="color:#ff0;font-weight:bold">4</span>, <span style="color:#ff0;font-weight:bold">5</span>]

<span style="color:#fff;font-weight:bold">def</span> map_(x):
    <span style="color:#fff;font-weight:bold">return</span> x+<span style="color:#ff0;font-weight:bold">1</span>

m  = <span style="color:#fff;font-weight:bold">map</span>(map_, l)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#fff;font-weight:bold">list</span>(m))
</code></pre></div><h1 id="with-lambda">with lambda</h1>
<p>lambda functions can be used to write inline functions with filter and map.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">fl = <span style="color:#fff;font-weight:bold">filter</span>(<span style="color:#fff;font-weight:bold">lambda</span> x: x &lt; <span style="color:#ff0;font-weight:bold">3</span>, l)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#fff;font-weight:bold">list</span>(fl))

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Python zip()</title>
            <link>/posts/2021/04/python-zip/</link>
            <pubDate>Sun, 18 Apr 2021 12:08:54 +0100</pubDate>
            
            <guid>/posts/2021/04/python-zip/</guid>
            <description>zip iterable collections zip is a way to iterate several iterable collections in the same loop. from docs
 Make an iterator that aggregates elements from each of the iterables. Returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables. The iterator stops when the shortest input iterable is exhausted. With a single iterable argument, it returns an iterator of 1-tuples.</description>
            <content type="html"><![CDATA[<h1 id="zip-iterable-collections">zip iterable collections</h1>
<p>zip is a  way to iterate several iterable collections in the same loop. from <a href="https://docs.python.org/3/library/functions.html#zip">docs</a></p>
<blockquote>
<p>Make an iterator that aggregates elements from each of the iterables.
Returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables. The iterator stops when the shortest input iterable is exhausted. With a single iterable argument, it returns an iterator of 1-tuples.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">l1 = [<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">2</span>]
l2 = [<span style="color:#0ff;font-weight:bold">&#34;a&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;b&#34;</span>]

zip_ = <span style="color:#fff;font-weight:bold">zip</span>(l1,l2)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#fff;font-weight:bold">type</span>(zip_))
<span style="color:#fff;font-weight:bold">for</span> t in zip_:
    <span style="color:#fff;font-weight:bold">print</span>(t)
</code></pre></div><p>prints</p>
<pre tabindex="0"><code>&lt;class 'zip'&gt;
(1, 'a')
(2, 'b')
</code></pre><h1 id="unzip-tuples">unzip tuples</h1>
<p>Also, It can be used to unzip list of tuples back to original lists. Here we will need to use * for collection unpack on function call.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">l1 = [<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">2</span>]
l2 = [<span style="color:#0ff;font-weight:bold">&#34;a&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;b&#34;</span>]

zip_ = <span style="color:#fff;font-weight:bold">zip</span>(l1,l2)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#fff;font-weight:bold">type</span>(zip_))

x, y = <span style="color:#fff;font-weight:bold">zip</span>(*zip_)
<span style="color:#fff;font-weight:bold">print</span>(x,y)
</code></pre></div><p>prints</p>
<pre tabindex="0"><code>(1, 2) ('a', 'b')
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Python dict.items and enumerate</title>
            <link>/posts/2021/04/python-dict.items-and-enumerate/</link>
            <pubDate>Sun, 18 Apr 2021 11:49:07 +0100</pubDate>
            
            <guid>/posts/2021/04/python-dict.items-and-enumerate/</guid>
            <description>Python provides several iteration API over collections(specially dictionary). In python2, there was dict.iteritems() for key/value iteration. Starting from python3, iteritems was replaced by items()i (see SO). and there is also enumerate which works with all collections not just dict.
dict.items() Defined in pep, items() returns key/value iterator over dict. Although, items behaves the same in python2 and 3. but there is a difference in return type. In python2, items() returns list but in python3, it returns an iterator.</description>
            <content type="html"><![CDATA[<p>Python provides several iteration API over collections(specially dictionary). In python2, there was dict.iteritems() for key/value iteration. Starting from python3, iteritems was replaced by items()i (see <a href="https://stackoverflow.com/questions/10458437/what-is-the-difference-between-dict-items-and-dict-iteritems-in-python2">SO</a>). and there is also enumerate which works with all collections not just dict.</p>
<h1 id="dictitems">dict.items()</h1>
<p>Defined in <a href="https://www.python.org/dev/peps/pep-3106/">pep</a>, items() returns key/value iterator over dict. Although, items behaves the same in python2 and 3. but there is a difference in return type. In python2, items() returns list but in python3, it returns an iterator.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">d = {<span style="color:#0ff;font-weight:bold">&#34;a&#34;</span>:<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#0ff;font-weight:bold">&#34;b&#34;</span>:<span style="color:#ff0;font-weight:bold">2</span>}

items_ = d.items()
<span style="color:#fff;font-weight:bold">print</span>((items_))
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#fff;font-weight:bold">type</span>(items_))

<span style="color:#fff;font-weight:bold">for</span> k, v in  items_:
    <span style="color:#fff;font-weight:bold">print</span>(k,v)

</code></pre></div><p>prints</p>
<pre tabindex="0"><code>dict_items([('a', 1), ('b', 2)])
&lt;class 'dict_items'&gt;
a 1
b 2
</code></pre><h1 id="enumerate">enumerate</h1>
<p>Define in <a href="https://www.python.org/dev/peps/pep-0279/">pep</a>, enumerate works with iterable collections to provide iterator over index, value (in case of dict, it would be index, key).</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">d = {<span style="color:#0ff;font-weight:bold">&#34;a&#34;</span>:<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#0ff;font-weight:bold">&#34;b&#34;</span>:<span style="color:#ff0;font-weight:bold">2</span>}
enumerate_ = <span style="color:#fff;font-weight:bold">enumerate</span>(d)
<span style="color:#fff;font-weight:bold">print</span>(enumerate_)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#fff;font-weight:bold">type</span>(enumerate_))

<span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">id</span>, v) in enumerate_:
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#fff;font-weight:bold">id</span>, v)
</code></pre></div><p>prints</p>
<pre tabindex="0"><code>&lt;enumerate object at 0x7f79a5f67b40&gt;
&lt;class 'enumerate'&gt;
0 a
1 b

</code></pre>]]></content>
        </item>
        
        <item>
            <title>Python Generator vs Iterator</title>
            <link>/posts/2021/04/python-generator-vs-iterator/</link>
            <pubDate>Sat, 17 Apr 2021 15:15:17 +0100</pubDate>
            
            <guid>/posts/2021/04/python-generator-vs-iterator/</guid>
            <description>This is quick write-up about python iterators and generators.
Iterator objects docs defines iter functions
&amp;quot;&amp;quot;&amp;quot; Return an iterator object. The first argument is interpreted very differently depending on the presence of the second argument. Without a second argument, object must be a collection object which supports the iteration protocol (the iter() method) &amp;quot;&amp;quot;&amp;quot;
This is an example of built-in iterators where iter() and next() are called to get iterator object and get next element in the list.</description>
            <content type="html"><![CDATA[<p>This is quick write-up about python iterators and generators.</p>
<h1 id="iterator-objects">Iterator objects</h1>
<p>docs defines <em>iter</em> functions</p>
<p>&quot;&quot;&quot;
Return an iterator object. The first argument is interpreted very differently depending on the presence of the second argument. Without a second argument, object must be a collection object which supports the iteration protocol (the <strong>iter</strong>() method)
&quot;&quot;&quot;</p>
<p>This is an example of built-in iterators where <em>iter()</em> and <em>next()</em> are called to get iterator object and get next element in the list.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">mlist = [<span style="color:#ff0;font-weight:bold">100</span>,<span style="color:#ff0;font-weight:bold">200</span>,<span style="color:#ff0;font-weight:bold">300</span>]

iter_obj = <span style="color:#fff;font-weight:bold">iter</span>(mlist)

<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#fff;font-weight:bold">next</span>(iter_obj))
<span style="color:#fff;font-weight:bold">for</span> i in iter_obj:
    <span style="color:#fff;font-weight:bold">print</span>(i)
</code></pre></div><h1 id="user-defined-__iter__">user-defined <strong>iter</strong></h1>
<p>To define iterator protocol, we need at least <em><strong>iter</strong></em> and <em><strong>next</strong></em></p>
<ul>
<li><em><strong>iter</strong></em>: initializes the iteration and returns class object</li>
<li><em><strong>next</strong></em>: returns the iter-able elements. at the end of iteration, <strong>next</strong> returns StopIteration which caller catches and end the iteration.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> custome_itertor:
    <span style="color:#fff;font-weight:bold">def</span> __iter__(self):
        self.o = [<span style="color:#0ff;font-weight:bold">&#34;a&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;b&#34;</span>]
        self.count = <span style="color:#ff0;font-weight:bold">0</span>
        <span style="color:#fff;font-weight:bold">return</span> self
    <span style="color:#fff;font-weight:bold">def</span> __next__(self):
        <span style="color:#fff;font-weight:bold">if</span>  self.count &lt; <span style="color:#fff;font-weight:bold">len</span>(self.o):
            x = self.o[self.count]
            self.count = self.count + <span style="color:#ff0;font-weight:bold">1</span>
            <span style="color:#fff;font-weight:bold">return</span> x
        <span style="color:#fff;font-weight:bold">else</span>:
            <span style="color:#fff;font-weight:bold">raise</span> StopIteration
<span style="color:#007f7f"># Thee object</span>
myclass = custome_itertor()

<span style="color:#007f7f"># Get iterator object</span>
myiter = <span style="color:#fff;font-weight:bold">iter</span>(myclass)

<span style="color:#007f7f"># loop over </span>
<span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">iter</span>(myiter):
    <span style="color:#fff;font-weight:bold">print</span>(i)
</code></pre></div><h1 id="generator-function">Generator function</h1>
<p><a href="https://www.python.org/dev/peps/pep-0255/">pep</a> defines the generator function as functions with <em>yield</em>. it also describes gene</p>
<p>&quot;&quot;&quot;
When a generator function is called, the actual arguments are bound to function-local formal argument names in the usual way, but no code in the body of the function is executed. Instead a generator-iterator object is returned; this conforms to the iterator protocol [6], so in particular can be used in for-loops in a natural way. Note that when the intent is clear from context, the unqualified name &ldquo;generator&rdquo; may be used to refer either to a generator-function or a generator-iterator.
&quot;&quot;&quot;</p>
<p>In the example, the call to function returns iterator object which we can call <em>next</em> on it. in the first call, function yields to caller and returns 0. and on the second call, the second print is executed.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> gen():
    x = <span style="color:#ff0;font-weight:bold">0</span>
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;Before first yield&#34;</span>)
    <span style="color:#fff;font-weight:bold">yield</span> x

    x = <span style="color:#ff0;font-weight:bold">1</span>
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;Before sencond yield&#34;</span>)
    <span style="color:#fff;font-weight:bold">yield</span> x


itero = gen()

<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;calling 1st yield&#34;</span>)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#fff;font-weight:bold">next</span>(itero))
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;calling 2nd yield&#34;</span>)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#fff;font-weight:bold">next</span>(itero))

</code></pre></div><h1 id="iteration-with-generator-function">Iteration with Generator function</h1>
<p>Now, that <em>iter</em> and <em>generator</em> are explained. we can combine them  to write simpler iter-able class.
the <em><strong>iter</strong></em> is a generator function that returns iterator object on the first call and elements from the list on every <em>next()</em> call.</p>
<p>so, the class object can be used in for or any place iterator object can be used.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> iter_class:
    <span style="color:#fff;font-weight:bold">def</span> __init__(self):
        self.arr= [<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">2</span>,<span style="color:#ff0;font-weight:bold">3</span>]

    <span style="color:#fff;font-weight:bold">def</span> __iter__(self):
        <span style="color:#fff;font-weight:bold">for</span> x in self.arr:
            <span style="color:#fff;font-weight:bold">yield</span> x


ic = iter_class()
<span style="color:#fff;font-weight:bold">for</span>  i in ic:
    <span style="color:#fff;font-weight:bold">print</span>(i)

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM Internals - TLM port to imp Connection</title>
            <link>/posts/2021/01/uvm-internals-tlm-port-to-imp-connection/</link>
            <pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate>
            
            <guid>/posts/2021/01/uvm-internals-tlm-port-to-imp-connection/</guid>
            <description>This is a write-up about the Internals of TLM connection port-to-imp. I am using uvm_blocking_put_port but others shouldn&amp;rsquo;t be different.
Producer/Consumer example The producer creates port and calls put with the transaction
class producer extesnds uvm_component; ... ... uvm_blocking_put_port #(transaction) put_port; function build_phase(...); put_port = new(&amp;#34;foo&amp;#34;, this); endfunction function run_phase(....); .... put_port.put(t); endfunction endclass The consumer creates imp and providesput method that gets called eventually.
class consumer extends ...; uvm_blocking_put_imp #(transction, consumer) imp; function void build_phase(.</description>
            <content type="html"><![CDATA[<p>This is a write-up about the Internals of TLM connection port-to-imp. I am using <code>uvm_blocking_put_port</code> but others shouldn&rsquo;t be different.</p>
<h1 id="producerconsumer-example">Producer/Consumer example</h1>
<p>The producer creates <code>port</code> and calls <code>put</code> with the transaction</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class producer extesnds uvm_component;
...
...

uvm_blocking_put_port #(transaction) put_port;

<span style="color:#fff;font-weight:bold">function</span> build_phase(...);
put_port = new(<span style="color:#0ff;font-weight:bold">&#34;foo&#34;</span>, this);
<span style="color:#fff;font-weight:bold">endfunction</span>

<span style="color:#fff;font-weight:bold">function</span> run_phase(....);
    ....
    put_port.put(t);

<span style="color:#fff;font-weight:bold">endfunction</span>

endclass
</code></pre></div><p>The consumer creates <code>imp</code> and provides<code>put</code> method that gets called eventually.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class consumer extends ...;

uvm_blocking_put_imp #(transction, consumer) imp;

<span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> build_phase(...);
    imp = new(<span style="color:#0ff;font-weight:bold">&#34;bar&#34;</span>, this);
<span style="color:#fff;font-weight:bold">endfunction</span>

<span style="color:#fff;font-weight:bold">task</span> put(transaction t);
<span style="color:#007f7f">//  do something with transaction here
</span><span style="color:#007f7f"></span>endclass


endclass
</code></pre></div><p>and <code>connect_phase</code> calls <code>connect</code> between port to imp.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">producer_inst.put_port.connect(consumer_inst.imp)
</code></pre></div><h1 id="uvm_blocking_put_port">uvm_blocking_put_port</h1>
<p>Starting with <code>uvm_blocking_put_port</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class uvm_blocking_put_port #(<span style="color:#fff;font-weight:bold">type</span> T=<span style="color:#fff;font-weight:bold">int</span>)
  extends uvm_port_base<span style="color:#f00">`</span> #(uvm_tlm_if_base #(T,T));
  `UVM_PORT_COMMON(`UVM_TLM_BLOCKING_PUT_MASK,<span style="color:#0ff;font-weight:bold">&#34;uvm_blocking_put_port&#34;</span>)
  `UVM_BLOCKING_PUT_IMP (this.m_if, T, t)
endclass 
</code></pre></div><p>The two macros used here are:</p>
<ul>
<li><code>UVM_PORT_COMMON</code> defines constructor and <code>get_type_name</code></li>
<li><code>UVM_BLOCKING_PUT_IMP</code> calls <code>put</code> from <code>m_if</code> defined in <code>uvm_port_base</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#0f0;font-weight:bold">`define UVM_TLM_GET_TYPE_NAME(NAME) \
</span><span style="color:#0f0;font-weight:bold">  virtual function string get_type_name(); \
</span><span style="color:#0f0;font-weight:bold">    return NAME; \
</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>  <span style="color:#fff;font-weight:bold">endfunction</span>
<span style="color:#0f0;font-weight:bold">`define UVM_PORT_COMMON(MASK,TYPE_NAME) \
</span><span style="color:#0f0;font-weight:bold">  function new (string name, uvm_component parent, \
</span><span style="color:#0f0;font-weight:bold">                int min_size=1, int max_size=1); \
</span><span style="color:#0f0;font-weight:bold">    super.new (name, parent, UVM_PORT, min_size, max_size); \
</span><span style="color:#0f0;font-weight:bold">    m_if_mask = MASK; \
</span><span style="color:#0f0;font-weight:bold">  endfunction \
</span><span style="color:#0f0;font-weight:bold">  `UVM_TLM_GET_TYPE_NAME(TYPE_NAME)
</span></code></pre></div><p>and</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#0f0;font-weight:bold">`define UVM_BLOCKING_PUT_IMP(imp, TYPE, arg) \
</span><span style="color:#0f0;font-weight:bold">  task put (TYPE arg); \
</span><span style="color:#0f0;font-weight:bold">    imp.put(arg); \
</span><span style="color:#0f0;font-weight:bold">  endtask
</span></code></pre></div><p>To sum up, <code>put</code> is defined by the macro <code>UVM_BLOCKING_PUT_IMP</code> and calls <code>put</code> from <code>imp.put</code> which is set to <code>this.m_if</code> after macro expansion. So, what is <code>m_if</code>?</p>
<h1 id="uvm_blocking_put_imp">uvm_blocking_put_imp</h1>
<p>On the consumer side, <code>uvm_blocking_put_imp</code> extends <code>uvm_port_base</code> as well.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class uvm_blocking_put_imp #(<span style="color:#fff;font-weight:bold">type</span> T=<span style="color:#fff;font-weight:bold">int</span>, <span style="color:#fff;font-weight:bold">type</span> IMP=<span style="color:#fff;font-weight:bold">int</span>)
  extends uvm_port_base #(uvm_tlm_if_base #(T,T));
  `UVM_IMP_COMMON(`UVM_TLM_BLOCKING_PUT_MASK,<span style="color:#0ff;font-weight:bold">&#34;uvm_blocking_put_imp&#34;</span>,IMP)
  `UVM_BLOCKING_PUT_IMP (m_imp, T, t)
endclass
</code></pre></div><p>and <code>UVM_IMP_COMMON</code>, which calls <code>super.new</code> with <code>imp</code>. Note that <code>imp</code> is <code>this</code> which point to consumer component.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#0f0;font-weight:bold">`define UVM_IMP_COMMON(MASK,TYPE_NAME,IMP) \
</span><span style="color:#0f0;font-weight:bold">  local IMP m_imp; \
</span><span style="color:#0f0;font-weight:bold">  function new (string name, IMP imp); \
</span><span style="color:#0f0;font-weight:bold">    super.new (name, imp, UVM_IMPLEMENTATION, 1, 1); \
</span><span style="color:#0f0;font-weight:bold">    m_imp = imp; \
</span><span style="color:#0f0;font-weight:bold">    m_if_mask = MASK; \
</span><span style="color:#0f0;font-weight:bold">  endfunction \
</span><span style="color:#0f0;font-weight:bold">  `UVM_TLM_GET_TYPE_NAME(TYPE_NAME)
</span></code></pre></div><p>and <code>UVM_BLOCKING_PUT_IMP</code> expands to <code>put</code> method with <code>m_imp</code> to <code>m_imp.put</code>.</p>
<p>The magic is happening in <code>uvm_port_base</code> depending on the type passed <code>UVM_IMPLEMENTATION</code> or <code>UVM_PORT</code>.</p>
<h1 id="uvm_port_base">uvm_port_base</h1>
<h2 id="connect">connect</h2>
<p>A good place to start is <code>connect</code>. the most important part here is the assignment to <code>m_provided_by</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  virtual <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> connect (this_type provider);
    <span style="color:#007f7f">// Some error checking
</span><span style="color:#007f7f"></span>    ...

    m_provided_by[provider.get_full_name()] = provider;
    provider.m_provided_to[get_full_name()] = this;
  <span style="color:#fff;font-weight:bold">endfunction</span>

</code></pre></div><p>Side note, <code>uvm_port_base</code> extends <code>uvm_tlm_if_base</code> which provides empty interface for child classes to implement.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class uvm_blocking_put_port #(<span style="color:#fff;font-weight:bold">type</span> T=<span style="color:#fff;font-weight:bold">int</span>)
  extends uvm_port_base<span style="color:#f00">`</span> #(uvm_tlm_if_base #(T,T));
</code></pre></div><p>and <code>uvm_tlm_if_base</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">virtual class uvm_tlm_if_base #(<span style="color:#fff;font-weight:bold">type</span> T1=<span style="color:#fff;font-weight:bold">int</span>, <span style="color:#fff;font-weight:bold">type</span> T2=<span style="color:#fff;font-weight:bold">int</span>);
  virtual <span style="color:#fff;font-weight:bold">task</span> put( <span style="color:#fff;font-weight:bold">input</span> T1 t );
    uvm_report_error(<span style="color:#0ff;font-weight:bold">&#34;put&#34;</span>, `UVM_TASK_ERROR, UVM_NONE);
  <span style="color:#fff;font-weight:bold">endtask</span>
  ...
  ...
endclass
</code></pre></div><h2 id="resolve_bindings">resolve_bindings</h2>
<p>So, what is the link between <code>connect</code> and <code>m_if.put</code> and <code>imp.put</code>? Here where <code>resolve_bindings</code> shows up.
The comments in <code>uvm_port_base.svh</code> says this called at end_of_elaboration (ie after the build and connect).</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#007f7f">// Function: resolve_bindings
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">//
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// This callback is called just before entering the end_of_elaboration phase.
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// It recurses through each port&#39;s fanout to determine all the imp destina-
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// tions. It then checks against the required min and max connections.
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// After resolution, &lt;size&gt; returns a valid value and &lt;get_if&gt;
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// can be used to access a particular imp.
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">//
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// This method is automatically called just before the start of the
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// end_of_elaboration phase. Users should not need to call it directly.
</span><span style="color:#007f7f"></span>
</code></pre></div><p>The key part in <code>resolve_bindings</code> is the following snippet:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    <span style="color:#fff;font-weight:bold">if</span> (is_imp()) <span style="color:#fff;font-weight:bold">begin</span>
      m_imp_list[get_full_name()] = this;
    <span style="color:#fff;font-weight:bold">end</span>
    <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">begin</span>
      foreach (m_provided_by[nm]) <span style="color:#fff;font-weight:bold">begin</span>
        this_type port;
        port = m_provided_by[nm];
        port.resolve_bindings();
        m_add_list(port);
      <span style="color:#fff;font-weight:bold">end</span>
    <span style="color:#fff;font-weight:bold">end</span>

    ...
    ...
    <span style="color:#fff;font-weight:bold">if</span> (size())
      set_if(<span style="color:#ff0;font-weight:bold">0</span>);
</code></pre></div><p>let&rsquo;s start from the bottom, <code>set_if</code> is called to set <code>m_if</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> set_if (<span style="color:#fff;font-weight:bold">int</span> index=<span style="color:#ff0;font-weight:bold">0</span>);
    m_if = get_if(index);
    <span style="color:#fff;font-weight:bold">if</span> (m_if != null)
      m_def_index = index;
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p>and <code>get_if</code> searches for <code>index</code> in <code>m_imp_list</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">function</span> uvm_port_base #(IF) get_if(<span style="color:#fff;font-weight:bold">int</span> index=<span style="color:#ff0;font-weight:bold">0</span>);
    <span style="color:#fff;font-weight:bold">string</span> s;
    ...
    ...
    foreach (m_imp_list[nm]) <span style="color:#fff;font-weight:bold">begin</span>
      <span style="color:#fff;font-weight:bold">if</span> (index == <span style="color:#ff0;font-weight:bold">0</span>)
        <span style="color:#fff;font-weight:bold">return</span> m_imp_list[nm];
      index--;
    <span style="color:#fff;font-weight:bold">end</span>
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p>So, <code>m_imp_list</code> is used to set the <code>m_if</code>. This leads to the first part in <code>resolve_bindings</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    <span style="color:#fff;font-weight:bold">if</span> (is_imp()) <span style="color:#fff;font-weight:bold">begin</span>
      m_imp_list[get_full_name()] = this;
    <span style="color:#fff;font-weight:bold">end</span>
    <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">begin</span>
      foreach (m_provided_by[nm]) <span style="color:#fff;font-weight:bold">begin</span>
        this_type port;
        port = m_provided_by[nm];
        port.resolve_bindings();
        m_add_list(port);
      <span style="color:#fff;font-weight:bold">end</span>
    <span style="color:#fff;font-weight:bold">end</span>
</code></pre></div><p>There are two scenarios for uvm_port_base:</p>
<ul>
<li>imp</li>
<li>not imp(port, or export)</li>
</ul>
<p>For <code>imp</code>, <code>this</code> (which points to imp port) is added to <code>m_imp_list</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">      m_imp_list[get_full_name()] = this;
</code></pre></div><p>For port, <code>m_add_list</code> is called which adds provider (consumer imp) into <code>m_imp_list</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  local <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> m_add_list           (this_type provider);
    <span style="color:#fff;font-weight:bold">string</span> sz;
    this_type imp;

    <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">int</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; provider.size(); i++) <span style="color:#fff;font-weight:bold">begin</span>
      imp = provider.get_if(i);
      <span style="color:#fff;font-weight:bold">if</span> (!m_imp_list.exists(imp.get_full_name()))
        m_imp_list[imp.get_full_name()] = imp;
    <span style="color:#fff;font-weight:bold">end</span>

  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p>So, To sum up what happened in the last 10 years since i started writing this</p>
<p>During elaboration:</p>
<ul>
<li>port and imp are created</li>
<li><code>connect</code> is called to connect port to imp and updates <code>m_provided_by</code>.</li>
<li><code>resolve_bindings</code> is called on both port and imp. It updates <code>m_imp_list</code> on both sides. In case of port, it sets <code>m_if</code> to consumer interface (which is the consumer imp port)</li>
</ul>
<p>During run:</p>
<ul>
<li>producer calls <code>port.put</code> which calls</li>
<li><code>m_if.put</code> from <code>uvm_port_base</code> which points to <code>consumer imp port put</code>, which calls put from <code>consumer component put</code>.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>sshd with fail2ban</title>
            <link>/posts/2021/01/sshd-with-fail2ban/</link>
            <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
            
            <guid>/posts/2021/01/sshd-with-fail2ban/</guid>
            <description>fail2ban is an important to harden any server exposed to the internet. mainly to stop bots from smashing the ssh service.
Installation apt install fail2ban systemctl enable fail2ban.service systemctl start fail2ban.service configuration there are several default configuration but we can override with with fail2ban.local
cp /etc/fail2ban/jail.conf /etc/fail2ban.local fail2ban.local already has section for sshd. we just need to enable it and configure it as needed.
maxretry = 3 enabled = true action = iptables-multiport bantime = 1h Then restart the service</description>
            <content type="html"><![CDATA[<p>fail2ban is an important to harden any server exposed to the internet. mainly to stop bots from smashing the ssh service.</p>
<h1 id="installation">Installation</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">apt install fail2ban
systemctl <span style="color:#fff;font-weight:bold">enable</span> fail2ban.service
systemctl start fail2ban.service
</code></pre></div><h1 id="configuration">configuration</h1>
<p>there are several default configuration but we can override with with <code>fail2ban.local</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cp /etc/fail2ban/jail.conf /etc/fail2ban.local
</code></pre></div><p><code>fail2ban.local</code> already has section for sshd. we just need to enable it and configure it as needed.</p>
<pre tabindex="0"><code>maxretry = 3
enabled = true
action = iptables-multiport
bantime = 1h
</code></pre><p>Then restart the service</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo systemctl restart fail2ban.service
</code></pre></div><h1 id="fail2ban-client">fail2ban-client</h1>
<p>There is utility to check the <code>jails</code> created by fail2ban</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo fail2ban-client status sshd
</code></pre></div><p>And we can always check the logs at <code>/var/log</code></p>
]]></content>
        </item>
        
        <item>
            <title>UVM Internals - transaction id</title>
            <link>/posts/2021/01/uvm-internals-transaction-id/</link>
            <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
            
            <guid>/posts/2021/01/uvm-internals-transaction-id/</guid>
            <description>Have you ever wondered what set_id_info does? If you have, read on.
UVM docs describe set_id_info as:
 function void set_id_info(	uvm_sequence_item item	)
Copies the sequence_id and transaction_id from the referenced item into the calling item. This routine should always be used by drivers to initialize responses for future compatibility.
 Basically, set_id_info is called as a part of req/rsp protocol. driver can have something like the following
seq_item_port.get(req); rsp = new(); rsp.</description>
            <content type="html"><![CDATA[<p>Have you ever wondered what <code>set_id_info</code> does? If you have, read on.</p>
<p>UVM docs describe <code>set_id_info</code> as:</p>
<blockquote>
<p>function void set_id_info(	uvm_sequence_item 	item	)</p>
<p>Copies the sequence_id and transaction_id from the referenced item into the calling item.  This routine should always be used by drivers to initialize responses for future compatibility.</p>
</blockquote>
<p>Basically, <code>set_id_info</code> is called as a part of <code>req</code>/<code>rsp</code> protocol. driver can have something like the following</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">				seq_item_port.get(req);
				rsp = new();
				rsp.set_id_info(req);

                ...
				seq_item_port.put(rsp);
</code></pre></div><p>Jumping right into <code>src/seq/uvm_sequence_item.svh</code>, it&rsquo;s obvious that <code>set_id_info</code> copies transaction id and sequence id. so, why is this important anyway?
Let&rsquo;s start by looking at <code>set_transaction_id</code> and <code>get_transaction_id</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">
  <span style="color:#007f7f">// Function: set_id_info
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">//
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// Copies the sequence_id and transaction_id from the referenced item into
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// the calling item.  This routine should always be used by drivers to
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// initialize responses for future compatibility.
</span><span style="color:#007f7f"></span>
  <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> set_id_info(uvm_sequence_item item);
    <span style="color:#fff;font-weight:bold">if</span> (item == null) <span style="color:#fff;font-weight:bold">begin</span>
      uvm_report_fatal(get_full_name(), <span style="color:#0ff;font-weight:bold">&#34;set_id_info called with null parameter&#34;</span>, UVM_NONE);
    <span style="color:#fff;font-weight:bold">end</span>
    this.set_transaction_id(item.get_transaction_id());
    this.set_sequence_id(item.get_sequence_id());
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p>In <code>src/base/uvm_transaction.svh</code>, <code>set_transaction_id</code> and <code>get_transaction_id</code> are setter and getter for <code>m_transaction_id</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#007f7f">// set_transaction_id
</span><span style="color:#007f7f"></span><span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> uvm_transaction::set_transaction_id(<span style="color:#fff;font-weight:bold">integer</span> id);
    m_transaction_id = id;
<span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p>Looking for callers of <code>set_transaction_id</code>, it&rsquo;s called from <code>uvm_sequencer_param_base::send_request</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    <span style="color:#fff;font-weight:bold">if</span> (param_t.get_transaction_id() == -<span style="color:#ff0;font-weight:bold">1</span>) <span style="color:#fff;font-weight:bold">begin</span>
      param_t.set_transaction_id(sequence_ptr.m_next_transaction_id++);
    <span style="color:#fff;font-weight:bold">end</span>
</code></pre></div><p>so, <code>m_next_transaction_id</code> is moving counter for the transaction items in the sequence.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class uvm_sequence_base extends uvm_sequence_item;

  protected uvm_sequence_state m_sequence_state;
            <span style="color:#fff;font-weight:bold">int</span>                m_next_transaction_id = <span style="color:#ff0;font-weight:bold">1</span>;
</code></pre></div><p>At this point we know what is transaction id and what sets it.</p>
<p>But who uses it? Let&rsquo;s trace <code>get_transaction_id</code> then. I can see two places where transaction id is used.</p>
<p>First place, <code>get_response</code> can be called from sequence to get the rsp after sending req</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">				`uvm_create(req)

...
...
...
				`uvm_send(req)
				get_response(rsp);
</code></pre></div><p>and <code>get_response</code> calls <code>get_base_response</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  virtual <span style="color:#fff;font-weight:bold">task</span> get_response(<span style="color:#fff;font-weight:bold">output</span> RSP response, <span style="color:#fff;font-weight:bold">input</span> <span style="color:#fff;font-weight:bold">int</span> transaction_id = -<span style="color:#ff0;font-weight:bold">1</span>);
    uvm_sequence_item rsp;
    get_base_response( rsp, transaction_id);
    $cast(response,rsp);
  <span style="color:#fff;font-weight:bold">endtask</span>


</code></pre></div><p>and <code>get_base_response</code>  gets response from the queue if it can match id.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">
  virtual <span style="color:#fff;font-weight:bold">task</span> get_base_response(<span style="color:#fff;font-weight:bold">output</span> uvm_sequence_item response, <span style="color:#fff;font-weight:bold">input</span> <span style="color:#fff;font-weight:bold">int</span> transaction_id = -<span style="color:#ff0;font-weight:bold">1</span>);

    <span style="color:#fff;font-weight:bold">int</span> queue_size, i;
....
....

      queue_size = response_queue.size();
      <span style="color:#fff;font-weight:bold">for</span> (i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; queue_size; i++) <span style="color:#fff;font-weight:bold">begin</span>
        <span style="color:#fff;font-weight:bold">if</span> (response_queue[i].get_transaction_id() == transaction_id) 
          <span style="color:#fff;font-weight:bold">begin</span>
            $cast(response,response_queue[i]);
            response_queue.delete(i);
            <span style="color:#fff;font-weight:bold">return</span>;
          <span style="color:#fff;font-weight:bold">end</span>
      <span style="color:#fff;font-weight:bold">end</span>
</code></pre></div><p>Second place, for driver/sequence protocol, driver calls <code>item_done</code>  to unblock sequence (blocked at finish_item).</p>
<p>And <code>item_done</code> sets <code>m_wait_for_item_transaction_id</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">
<span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> uvm_sequencer::item_done(RSP item = null);
...
...
    m_wait_for_item_transaction_id = t.get_transaction_id();
</code></pre></div><p>on sequence side, <code>finish_item</code> calls  <code>wait_for_item_done</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  virtual <span style="color:#fff;font-weight:bold">task</span> finish_item (uvm_sequence_item item,
                            <span style="color:#fff;font-weight:bold">int</span> set_priority = -<span style="color:#ff0;font-weight:bold">1</span>);
...
...
    sequencer.wait_for_item_done(this, -<span style="color:#ff0;font-weight:bold">1</span>);
</code></pre></div><p>and <code>wait_for_item_done</code> blocks until the right transaction id comes up.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">task</span> uvm_sequencer_base::wait_for_item_done(uvm_sequence_base sequence_ptr,
                                            <span style="color:#fff;font-weight:bold">int</span> transaction_id);
...
...
    <span style="color:#fff;font-weight:bold">wait</span> ((m_wait_for_item_sequence_id == sequence_id &amp;&amp;
           m_wait_for_item_transaction_id == transaction_id));
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM Internals - uvm_create and uvm_send</title>
            <link>/posts/2021/01/uvm-internals-uvm_create-and-uvm_send/</link>
            <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
            
            <guid>/posts/2021/01/uvm-internals-uvm_create-and-uvm_send/</guid>
            <description>Typical pattern for sequence body does 3 things:
 Create object Configure and randomize Object Send Object  req = req::type_id::create(&amp;#34;req&amp;#34;); start_item(req); // Do something here with req  finish_item(req); UVM provide two macros to do less typing&amp;hellip; and confuse everyone (always bonus for UVM people). these macros are uvm_create and uvm_send
uvm_create Starting with uvm_create which calls uvm_create_on
`uvm_create() // Do something here with req  `uvm_send(req) `define uvm_create(SEQ_OR_ITEM) \ `uvm_create_on(SEQ_OR_ITEM, m_sequencer)  uvm_create uses uvm_create_on macro</description>
            <content type="html"><![CDATA[<p>Typical pattern for sequence <code>body</code> does 3 things:</p>
<ul>
<li>Create object</li>
<li>Configure and randomize Object</li>
<li>Send Object</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    req = req::type_id::create(<span style="color:#0ff;font-weight:bold">&#34;req&#34;</span>);

    start_item(req);

    <span style="color:#007f7f">// Do something here with req
</span><span style="color:#007f7f"></span>    
    finish_item(req);
</code></pre></div><p>UVM provide two macros to do less typing&hellip; and confuse everyone (always bonus for UVM people).
these macros are <code>uvm_create</code> and <code>uvm_send</code></p>
<h1 id="uvm_create">uvm_create</h1>
<p>Starting with <code>uvm_create</code> which calls <code>uvm_create_on</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">
	`uvm_create()

     <span style="color:#007f7f">// Do something here with req
</span><span style="color:#007f7f"></span>
	`uvm_send(req)
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#0f0;font-weight:bold">`define uvm_create(SEQ_OR_ITEM) \
</span><span style="color:#0f0;font-weight:bold">  `uvm_create_on(SEQ_OR_ITEM, m_sequencer)
</span><span style="color:#0f0;font-weight:bold"></span>
</code></pre></div><p><code>uvm_create</code> uses <code>uvm_create_on</code> macro</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#0f0;font-weight:bold">`define uvm_create_on(SEQ_OR_ITEM, SEQR) \
</span><span style="color:#0f0;font-weight:bold">  begin \
</span><span style="color:#0f0;font-weight:bold">  uvm_object_wrapper w_; \
</span><span style="color:#0f0;font-weight:bold">  w_ = SEQ_OR_ITEM.get_type(); \
</span><span style="color:#0f0;font-weight:bold">  $cast(SEQ_OR_ITEM , create_item(w_, SEQR, `&#34;SEQ_OR_ITEM`&#34;));\
</span><span style="color:#0f0;font-weight:bold">  end
</span><span style="color:#0f0;font-weight:bold"></span>
</code></pre></div><p><code>create_item</code> just calls the factory to create object of this sequence_item.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  protected <span style="color:#fff;font-weight:bold">function</span> uvm_sequence_item create_item(uvm_object_wrapper type_var, 
                                                   uvm_sequencer_base l_sequencer, <span style="color:#fff;font-weight:bold">string</span> name);

    uvm_factory f_ = uvm_factory::get();
    $cast(create_item,  f_.create_object_by_type( type_var, this.get_full_name(), name ));

    create_item.set_item_context(this, l_sequencer);
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><h1 id="uvm_send">uvm_send</h1>
<p>Next <code>uvm_send</code> which uses <code>uvm_send_pri</code> macro</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#0f0;font-weight:bold">`define uvm_send(SEQ_OR_ITEM) \
</span><span style="color:#0f0;font-weight:bold">  `uvm_send_pri(SEQ_OR_ITEM, -1)
</span></code></pre></div><p><code>uvm_send_pri</code> expands to <code>start_item</code> and <code>finish_item</code> which is expected here.<br>
but added bonus, <code>uvm_send_pri</code> detects if this is a sequence_item or sub-sequence. if it&rsquo;s sub-sequence, it calls <code>start</code> instead.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#0f0;font-weight:bold">`define uvm_send_pri(SEQ_OR_ITEM, PRIORITY) \
</span><span style="color:#0f0;font-weight:bold">  begin \
</span><span style="color:#0f0;font-weight:bold">  uvm_sequence_base __seq; \
</span><span style="color:#0f0;font-weight:bold">  if (!$cast(__seq,SEQ_OR_ITEM)) begin \
</span><span style="color:#0f0;font-weight:bold">     start_item(SEQ_OR_ITEM, PRIORITY);\
</span><span style="color:#0f0;font-weight:bold">     finish_item(SEQ_OR_ITEM, PRIORITY);\
</span><span style="color:#0f0;font-weight:bold">  end \
</span><span style="color:#0f0;font-weight:bold">  else __seq.start(__seq.get_sequencer(), this, PRIORITY, 0);\
</span><span style="color:#0f0;font-weight:bold">  end
</span><span style="color:#0f0;font-weight:bold"></span>  
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>rustlang - Hello world</title>
            <link>/posts/2020/12/rustlang-hello-world/</link>
            <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/12/rustlang-hello-world/</guid>
            <description>Cargo cargo package manager can be used to create standard structure for rust application.
cargo ini To build
cargo build To build opt binary:
cargo build --release We can build and run binary with
cargo run Creating first rust module To create a module, create file under src/. For this example, the module name is print.rs
pub fn run(){ println!(&amp;#34;Hello there&amp;#34;) } and that module can be imported into main using mod print</description>
            <content type="html"><![CDATA[<h1 id="cargo">Cargo</h1>
<p><code>cargo</code> package manager can be used to create standard structure for rust application.</p>
<pre tabindex="0"><code>cargo ini
</code></pre><p>To build</p>
<pre tabindex="0"><code>cargo build
</code></pre><p>To build opt binary:</p>
<pre tabindex="0"><code>cargo build --release
</code></pre><p>We can build and run binary with</p>
<pre tabindex="0"><code>cargo run
</code></pre><h1 id="creating-first-rust-module">Creating first rust module</h1>
<p>To create a module, create file under <code>src/</code>. For this example, the module name is <code>print.rs</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-rust" data-lang="rust"><span style="color:#fff;font-weight:bold">pub</span> <span style="color:#fff;font-weight:bold">fn</span> run(){
    println!(<span style="color:#0ff;font-weight:bold">&#34;Hello there&#34;</span>)
}
</code></pre></div><p>and that module can be imported into main using <code>mod print</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-rust" data-lang="rust"><span style="color:#fff;font-weight:bold">mod</span> print;


<span style="color:#fff;font-weight:bold">fn</span> main() {
    print::run();
}

</code></pre></div><h1 id="println-arguments">println arguments</h1>
<p>can take several formatting</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-rust" data-lang="rust"><span style="color:#fff;font-weight:bold">pub</span> <span style="color:#fff;font-weight:bold">fn</span> run(){
    println!(<span style="color:#0ff;font-weight:bold">&#34;Hello there&#34;</span>);

    println!(<span style="color:#0ff;font-weight:bold">&#34;This is example {} is {}&#34;</span>,<span style="color:#ff0;font-weight:bold">4</span>, <span style="color:#0ff;font-weight:bold">&#34;koko&#34;</span>); <span style="color:#007f7f">//  Arguments
</span><span style="color:#007f7f"></span>    println!(<span style="color:#0ff;font-weight:bold">&#34;This is example {0} is {1}&#34;</span>,<span style="color:#ff0;font-weight:bold">4</span>, <span style="color:#0ff;font-weight:bold">&#34;koko&#34;</span>); <span style="color:#007f7f">//  Positional Arguments
</span><span style="color:#007f7f"></span>    println!(<span style="color:#0ff;font-weight:bold">&#34;{} {} {name}&#34;</span>, <span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">2</span>,name=<span style="color:#ff0;font-weight:bold">30</span>); <span style="color:#007f7f">// Name Arguments
</span><span style="color:#007f7f"></span>}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Not the hitchhiker&#39;s guide to UPF</title>
            <link>/posts/2020/12/not-the-hitchhikers-guide-to-upf/</link>
            <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/12/not-the-hitchhikers-guide-to-upf/</guid>
            <description>There are my notes while reading the UPF standard (IEEE Std 1801). The standard is short and concise document and required several re-reads to understand the UPF semantics (Exactly as painful as reading the 1800 LRM).
Domains This is summary of section 4.2(just in points)
 domain is a collection of design elements. Unless otherwise specified, elements of a power domain share a common primary supply set (see 4.3). primary supply set is implicitly connected to all elements within the domain.</description>
            <content type="html"><![CDATA[<p>There are my notes while reading the UPF standard (IEEE Std 1801). The standard is short and concise document and required several re-reads to understand the UPF semantics (Exactly as painful as reading the 1800 LRM).</p>
<h1 id="domains">Domains</h1>
<p>This is summary of section 4.2(just in points)</p>
<ul>
<li>domain is a collection of design elements. Unless otherwise specified, elements of a power domain share a
common primary supply set (see 4.3).</li>
<li>primary supply set is implicitly connected to all elements within the domain.</li>
<li>The design consists of a hierarchical tree of design elements (logic hierarchy). The logic hierarchy level
where a power domain is created is called the scope of the power domain.</li>
<li>The set of design elements that belong to a power domain are said to be the extent of that power domain.</li>
<li>design element can be the scope of multiple power domains, it can be in the extent of one and only one power domain.</li>
</ul>
<p>So, each Domain has a scope and extent. And <code>extent</code> is all elements are under that domain.</p>
<p>Each power domain exists within a scope of the logic hierarchy. A design element is a member of the power
domain that includes the design element’s parent instance, unless the design element has been explicitly
included as an element of another power domain whose scope is the element or an ancestor of the element.</p>
<p>Related UPF commands:</p>
<ul>
<li>create_power_domain</li>
<li>add_power_state</li>
</ul>
<h1 id="power-nets-and-ports">Power Nets and Ports</h1>
<p>This is the gist of LRM 4.2</p>
<ul>
<li>Supply nets transport an electrical current</li>
<li>Supply ports provide the ability to connect a supply net to a design element</li>
<li>When created in UPF, the supply net is created within the scope of a design element of the logic hierarchy.</li>
<li>When created in UPF, a supply port is created on the interface of an element in the logic hierarchy</li>
</ul>
<p>The port defines <code>HighConn</code> and <code>Loconn</code></p>
<blockquote>
<p>Supply ports consist of two halves. The first half is the HighConn side, which is visible to the parent of the design element whose interface contains the port. The second half is the LowConn side, which is visible internal to the design element whose interface contains the port.</p>
</blockquote>
<p>and connection to <code>HighConn</code> and <code>LoConn</code> is defined as following:</p>
<ul>
<li>When a supply or logic net in the active scope is connected to a supply or logic port on a child instance, the connection is made to the HighConn side of the port.</li>
<li>When a supply or logic net in the active scope is connected to a port defined on the interface of the design element that is the active scope, the connection is made to the LowConn side of the port.</li>
</ul>
<p>The related UPF commands</p>
<ul>
<li>connect_supply_net</li>
<li>create_supply_net</li>
<li>create_supply_port</li>
<li>add_port_state</li>
</ul>
<h1 id="power-states">Power states</h1>
<p>The following objects have power state</p>
<ul>
<li>port</li>
<li>net</li>
<li>domain</li>
<li>set</li>
</ul>
<p>port states has 2 items</p>
<ul>
<li>Supply state (can take value from enum below)</li>
<li>voltage value</li>
</ul>
<p>Supply state can take on of the 4 Values</p>
<ul>
<li>FULL_ON</li>
<li>OFF</li>
<li>PARTIAL_ON</li>
<li>UNDETERMINED</li>
</ul>
<h1 id="supply-set">supply set</h1>
<p>[LRM][1] describes <code>supply set</code></p>
<blockquote>
<p>A supply set relates multiple supply nets as a complete power source for one or more design elements.</p>
</blockquote>
<p>basically, supply set is group of nets.</p>
<p>By default, UPF predefines the following supply set handles for
a domain:</p>
<ul>
<li>primary</li>
<li>default_retention</li>
<li>default_isolation</li>
</ul>
<p>Each supply net in a supply set provides a function. UPF predefines the following supply net functions:</p>
<ul>
<li>power</li>
<li>ground</li>
<li>pwell</li>
<li>nwell</li>
<li>deeppwell</li>
<li>deepnwell</li>
</ul>
<h2 id="simstate">simstate</h2>
<p>LRM defines <code>simstate</code> as:</p>
<blockquote>
<p>The simulation behavior semantics (simstate) can be specified for a power state.</p>
</blockquote>
<p>This means that simstate are linked to power states of supply set. Possible simstates are:</p>
<ul>
<li>CORRUPT</li>
<li>CORRUPT_ON_ACTIVITY</li>
<li>CORRUPT_STATE_ON_ACTIVITY</li>
<li>CORRUPT_STATE_ON_CHANGE</li>
<li>NORMAL</li>
</ul>
<p>set_simstate_behavior can be used to DISABLE simstates</p>
<h2 id="predefined-power-state">predefined power state</h2>
<p>Each supply set has 2 predefined power states</p>
<ul>
<li>DEFAULT_NORMAL</li>
<li>DEFAULT_CORRUPT</li>
</ul>
<p>simstates mapped to each of above power states</p>
<ul>
<li>DEFAULT_NORMAL : NORMAL</li>
<li>DEFAULT_CORRUPT : CORRUPT</li>
</ul>
<p>Related UPF commands</p>
<ul>
<li>add_power_state</li>
</ul>
<p>[1]: IEEE Std 1801 TM -2009</p>
]]></content>
        </item>
        
        <item>
            <title>Graphviz - Hello world</title>
            <link>/posts/2020/12/graphviz-hello-world/</link>
            <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/12/graphviz-hello-world/</guid>
            <description>Garphviz is very useful package to visualize data. They define their own &amp;ldquo;language&amp;rdquo; to render the graphs. More details about the dot language.
Example This is example i found on SO and i think it&amp;rsquo;s great way to quickly visualize diagrams.
digraph G { graph [rankdir = LR]; node[shape=record]; Bar[label=&amp;quot;{ \&amp;quot;Bar\&amp;quot;|{&amp;lt;p1&amp;gt;pin 1|&amp;lt;p2&amp;gt; 2|&amp;lt;p3&amp;gt; 3|&amp;lt;p4&amp;gt; 4|&amp;lt;p5&amp;gt; 5} }&amp;quot;]; Foo[label=&amp;quot;{ {&amp;lt;data0&amp;gt;data0|&amp;lt;data1&amp;gt;data1|&amp;lt;data2&amp;gt;data2|&amp;lt;data3&amp;gt;data3|&amp;lt;data4&amp;gt;data4}|\&amp;quot;Foo\&amp;quot; |{&amp;lt;out0&amp;gt;out0|&amp;lt;out1&amp;gt;out1|&amp;lt;out2&amp;gt;out2|&amp;lt;GND&amp;gt;gnd|&amp;lt;ex0&amp;gt;ex0|&amp;lt;hi&amp;gt;hi|&amp;lt;lo&amp;gt;lo} }&amp;quot;]; Bew[label=&amp;quot;{ {&amp;lt;clk&amp;gt;clk|&amp;lt;syn&amp;gt;syn|&amp;lt;mux0&amp;gt;mux0|&amp;lt;mux1&amp;gt;mux1|&amp;lt;signal&amp;gt;signal}|\&amp;quot;Bew\&amp;quot; |{&amp;lt;out0&amp;gt;out0|&amp;lt;out1&amp;gt;out1|&amp;lt;out2&amp;gt;out2} }&amp;quot;]; Bar:p1 -&amp;gt; Foo:data0; Bar:p2 -&amp;gt; Foo:data1; Bar:p3 -&amp;gt; Foo:data2; Bar:p4 -&amp;gt; Foo:data3; Bar:p5 -&amp;gt; Foo:data4; Foo:out0 -&amp;gt; Bew:mux0; Foo:out1 -&amp;gt; Bew:mux1; Bew:clk -&amp;gt; Foo:ex0; Gate[label=&amp;quot;{ {&amp;lt;a&amp;gt;a|&amp;lt;b&amp;gt;b}|OR|{&amp;lt;ab&amp;gt;a\|b} }&amp;quot;]; Foo:hi -&amp;gt; Gate:a; Foo:lo -&amp;gt; Gate:b; Gate:ab -&amp;gt; Bew:signal; } dot program (part of graphviz) is used to generate png</description>
            <content type="html"><![CDATA[<p><a href="graphviz.org/about/">Garphviz</a> is very useful package to visualize data. They define their own &ldquo;language&rdquo; to render the graphs. More details about the <a href="https://www.graphviz.org/doc/info/lang.html">dot language</a>.</p>
<h1 id="example">Example</h1>
<p>This is example i found on <a href="https://stackoverflow.com/questions/62769161/error-format-svg-not-recognized-use-one-of">SO</a> and i think it&rsquo;s great way to quickly visualize diagrams.</p>
<pre tabindex="0"><code>digraph G {
    graph [rankdir = LR];

    node[shape=record];
    Bar[label=&quot;{ \&quot;Bar\&quot;|{&lt;p1&gt;pin 1|&lt;p2&gt;     2|&lt;p3&gt;     3|&lt;p4&gt;     4|&lt;p5&gt;     5} }&quot;];
    Foo[label=&quot;{ {&lt;data0&gt;data0|&lt;data1&gt;data1|&lt;data2&gt;data2|&lt;data3&gt;data3|&lt;data4&gt;data4}|\&quot;Foo\&quot; |{&lt;out0&gt;out0|&lt;out1&gt;out1|&lt;out2&gt;out2|&lt;GND&gt;gnd|&lt;ex0&gt;ex0|&lt;hi&gt;hi|&lt;lo&gt;lo} }&quot;];

    Bew[label=&quot;{ {&lt;clk&gt;clk|&lt;syn&gt;syn|&lt;mux0&gt;mux0|&lt;mux1&gt;mux1|&lt;signal&gt;signal}|\&quot;Bew\&quot; |{&lt;out0&gt;out0|&lt;out1&gt;out1|&lt;out2&gt;out2} }&quot;];
    Bar:p1 -&gt; Foo:data0;
    Bar:p2 -&gt; Foo:data1;
    Bar:p3 -&gt; Foo:data2;
    Bar:p4 -&gt; Foo:data3;
    Bar:p5 -&gt; Foo:data4;

    Foo:out0 -&gt; Bew:mux0;
    Foo:out1 -&gt; Bew:mux1;
    Bew:clk -&gt; Foo:ex0;

    Gate[label=&quot;{ {&lt;a&gt;a|&lt;b&gt;b}|OR|{&lt;ab&gt;a\|b} }&quot;];

    Foo:hi -&gt; Gate:a;
    Foo:lo -&gt; Gate:b;
    Gate:ab -&gt; Bew:signal;
}
</code></pre><p><code>dot</code> program (part of graphviz) is used to generate png</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dot -Tpng 1.dot -o outfile.png
</code></pre></div><p><img src="/graphvizoutput.png" alt="Example image"></p>
<h1 id="pydot">pydot</h1>
<p>beside the dot language and command line, there is python library to generate Graphs and dump png directly.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pip install pydot
</code></pre></div><p>small example to show arrow between tow states.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#fff;font-weight:bold">import</span> pydot



g = pydot.Dot()

node1 = pydot.Node(<span style="color:#0ff;font-weight:bold">&#34;Node1&#34;</span>)
node2 = pydot.Node(<span style="color:#0ff;font-weight:bold">&#34;Node2&#34;</span>)

g.add_node(node1)
g.add_node(node2)

g.add_edge(pydot.Edge(node1,node2))

g.write_png(<span style="color:#0ff;font-weight:bold">&#34;example.png&#34;</span>)

</code></pre></div><p>and output png is</p>
<p><img src="/graphvizoutput2.png" alt="Example image"></p>
<p>pydot can load and write dot files but that for later post.</p>
]]></content>
        </item>
        
        <item>
            <title>TCL And C interface</title>
            <link>/posts/2020/12/tcl-and-c-interface/</link>
            <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/12/tcl-and-c-interface/</guid>
            <description>Calling TCL from C Starting with working example, we can see that Tcl_CreateInterp and Tcl_Eval are the only two Tcl calls.
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;tcl.h&amp;gt; main (int argc, char *argv[]) { Tcl_Interp *myinterp; char *action = &amp;#34;set a [expr 5 * 8]; puts $a&amp;#34;; int status; printf (&amp;#34;Your Program will run ... \n&amp;#34;); myinterp = Tcl_CreateInterp(); status = Tcl_Eval(myinterp,action); printf (&amp;#34;Your Program has completed\n&amp;#34;); } And compilation command
gcc main.c -I /usr/include/tcl8.</description>
            <content type="html"><![CDATA[<h1 id="calling-tcl-from-c">Calling TCL from C</h1>
<p>Starting with working example, we can see that <code>Tcl_CreateInterp</code>  and <code>Tcl_Eval</code> are the only two Tcl calls.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;stdio.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;tcl.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
main (<span style="color:#fff;font-weight:bold">int</span> argc, <span style="color:#fff;font-weight:bold">char</span> *argv[]) {

        Tcl_Interp *myinterp;
        <span style="color:#fff;font-weight:bold">char</span> *action = <span style="color:#0ff;font-weight:bold">&#34;set a [expr 5 * 8]; puts $a&#34;</span>;
        <span style="color:#fff;font-weight:bold">int</span> status;

        printf (<span style="color:#0ff;font-weight:bold">&#34;Your Program will run ... </span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>);

        myinterp = Tcl_CreateInterp();
        status = Tcl_Eval(myinterp,action);

        printf (<span style="color:#0ff;font-weight:bold">&#34;Your Program has completed</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>);
}
</code></pre></div><p>And compilation command</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gcc main.c -I /usr/include/tcl8.6 -ltcl
</code></pre></div><p>Docs says <code>Tcl_CreateInterp</code> is</p>
<blockquote>
<p>Tcl_CreateInterp creates a new interpreter structure and returns a token for it. The token is required in calls to most other Tcl procedures, such as Tcl_CreateCommand, Tcl_Eval</p>
</blockquote>
<p>And  <code>Tcl_Eval</code></p>
<blockquote>
<p>Tcl_Eval is similar to Tcl_EvalObjEx except that the script to be executed is supplied as a string instead of a value and no compilation occurs.</p>
</blockquote>
<h1 id="calling-c-from-tcl-tcl-extension">Calling C from TCL (TCL extension)</h1>
<p>On the other side, TCL provides an interface to call C from TCL same as built-in procs.</p>
<p>For this to work, we need to 2 functions:</p>
<ul>
<li>Registration called when shared object is loaded</li>
<li>proc implementation</li>
</ul>
<p>Docs describes <code>Tcl_CreateObjCommand</code></p>
<blockquote>
<p>Tcl_CreateObjCommand deletes any existing command name already associated with the interpreter (however see below for an &gt; exception where the existing command is not deleted). It returns a token that may be used to refer to the command in subsequent &gt; calls to Tcl_GetCommandName. If name contains any :: namespace qualifiers, then the command is added to the specified namespace; &gt; otherwise the command is added to the global namespace. If Tcl_CreateObjCommand is called for an interpreter that is in the &gt; process of being deleted, then it does not create a new command and it returns NULL. proc should have arguments and result that &gt; match the type Tcl_ObjCmdProc:</p>
<p>typedef int Tcl_ObjCmdProc(
ClientData ta,
Tcl_Interp *interp,
int objc,
Tcl_Obj *CONST objv[]);</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;stdio.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;tcl.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">int</span> hello(ClientData cdata, Tcl_Interp *interp, <span style="color:#fff;font-weight:bold">int</span> objc, Tcl_Obj *<span style="color:#fff;font-weight:bold">const</span> objv[])
{
	printf(<span style="color:#0ff;font-weight:bold">&#34;Hello World</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>);
	<span style="color:#fff;font-weight:bold">return</span> TCL_OK;
}

<span style="color:#fff;font-weight:bold">int</span> Hello_Init(Tcl_Interp *interp)
{
	Tcl_CreateObjCommand(interp, <span style="color:#0ff;font-weight:bold">&#34;hello&#34;</span>, hello, <span style="color:#fff;font-weight:bold">NULL</span>, <span style="color:#fff;font-weight:bold">NULL</span>);
	<span style="color:#fff;font-weight:bold">return</span> TCL_OK;
}
</code></pre></div><p>gcc commands to compile shared object</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">	gcc -c hello.c -I /usr/include/tcl8.6
	gcc -shared -o hello.so hello.o -ltcl
</code></pre></div><p>Finally, we need to load the shared object with TCL <code>load</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-tcl" data-lang="tcl"><span style="color:#fff;font-weight:bold">load</span> ./hello.so
hello

</code></pre></div><p>Side note, <a href="https://www.tcl.tk/man/tcl8.6/TclCmd/load.htm">Docs</a> mentions <code>Hello_Init</code> has to be called <code>SOMEHING_Init</code> for load command to execute it while loading the shared object. According to docs, <code>SOMETHING</code> is package name .</p>
<h1 id="c-tcl-c-chaining">C-TCL-C chaining</h1>
<p>for fun, I tried chaining C calling TCL and TCL calling C.</p>
<p>This is main.c (the main driver)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;stdio.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;tcl.h&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">void</span> main (<span style="color:#fff;font-weight:bold">int</span> argc, <span style="color:#fff;font-weight:bold">char</span> *argv[]) {

        Tcl_Interp *myinterp;
        <span style="color:#fff;font-weight:bold">char</span> *action = <span style="color:#0ff;font-weight:bold">&#34;load ./hello.so;hello&#34;</span>;
        <span style="color:#fff;font-weight:bold">int</span> status;

        printf (<span style="color:#0ff;font-weight:bold">&#34;Your Program will run ... </span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>);

        myinterp = Tcl_CreateInterp();
        status = Tcl_Eval(myinterp,action);

        printf (<span style="color:#0ff;font-weight:bold">&#34;Your Program has completed</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>);
}
</code></pre></div><p>and hello.c same as before.</p>
]]></content>
        </item>
        
        <item>
            <title>C&#43;&#43; - Scoped enum</title>
            <link>/posts/2020/12/c-scoped-enum/</link>
            <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/12/c-scoped-enum/</guid>
            <description>C defined a way to declare enum(or enum type) and enum constants. but the problem here is namespace pollution due to enum constants. I guess that why they came up with scoped enum to make enum behave like class types and enum constants are scoped with ::
#include &amp;lt;iostream&amp;gt;#include &amp;lt;utility&amp;gt; using namespace std; enum { ONE, TWO } e1; enum class senum { ONES, TWOS }; int main() { e1 = ONE; senum e2 = senum::ONES; } </description>
            <content type="html"><![CDATA[<p>C defined a way to declare enum(or enum type) and enum constants. but the problem here is namespace pollution due to enum constants. I guess that why they came up with scoped enum to make enum behave like class types and enum constants are scoped with <code>::</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;utility&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">using</span> <span style="color:#fff;font-weight:bold">namespace</span> std;
<span style="color:#fff;font-weight:bold">enum</span>
{
    ONE,
    TWO
} e1;

<span style="color:#fff;font-weight:bold">enum</span> <span style="color:#fff;font-weight:bold">class</span> senum
{
    ONES,
    TWOS
};
<span style="color:#fff;font-weight:bold">int</span> main()
{
    e1 = ONE;

    senum e2 = senum::ONES;
}

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>C&#43;&#43; - std::array</title>
            <link>/posts/2020/12/c-stdarray/</link>
            <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/12/c-stdarray/</guid>
            <description>Starting c++11, std::array can be used for fixed size array. As opposed to std::vector with variable length array. note that length is fixed with aggregate initialization and other
std::array&amp;lt;int, 3&amp;gt; a2 = {1, 2, 3}; I think the biggest advantage over the vanilla array [] is preventing pointer decay. where array pointers can assigned to compatible pointer. For more details why this is bad see SO
Beside that, there are cool methods like fill and size and of course operator overload [] same as vanilla array.</description>
            <content type="html"><![CDATA[<p>Starting <a href="https://en.cppreference.com/w/cpp/container/array">c++11</a>, <code>std::array</code> can be used for fixed size array. As opposed to <code>std::vector</code> with variable length array.
note that length is fixed with <code>aggregate initialization</code> and other</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">    std::array&lt;<span style="color:#fff;font-weight:bold">int</span>, <span style="color:#ff0;font-weight:bold">3</span>&gt; a2 = {<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#ff0;font-weight:bold">3</span>};
</code></pre></div><p>I think the biggest advantage over the vanilla array <code>[]</code> is preventing pointer decay. where array pointers can assigned to compatible pointer. For more details why this is bad see <a href="https://stackoverflow.com/questions/1461432/what-is-array-to-pointer-decay">SO</a></p>
<p>Beside that, there are cool methods like <code>fill</code> and <code>size</code> and of course operator overload <code>[]</code>  same as vanilla array.</p>
<p>Also, it works with containers and algorithm iterators. And of course with type deduction(below example of auto and iterator).</p>
<h1 id="example">Example</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;array&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">using</span> <span style="color:#fff;font-weight:bold">namespace</span> std;

<span style="color:#fff;font-weight:bold">int</span> main()
{
    array&lt;<span style="color:#fff;font-weight:bold">int</span>, <span style="color:#ff0;font-weight:bold">3</span>&gt; ar = {<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#ff0;font-weight:bold">4</span>};

    <span style="color:#007f7f">// Doesn&#39;t decay into pointer
</span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">int</span> *p;
    <span style="color:#fff;font-weight:bold">int</span> a[<span style="color:#ff0;font-weight:bold">3</span>] = {<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#ff0;font-weight:bold">4</span>};

    p = a;
    <span style="color:#007f7f">//p = ar; // Illegal
</span><span style="color:#007f7f"></span>
    <span style="color:#007f7f">// Iteration
</span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">auto</span> i : ar)
    {
        cout &lt;&lt; i &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34; &#34;</span>;
        cout &lt;&lt; endl;
    }

    <span style="color:#007f7f">// cool methods
</span><span style="color:#007f7f"></span>
    cout &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34;size: &#34;</span> &lt;&lt; ar.size() &lt;&lt; endl;
}
</code></pre></div><p>output</p>
<pre tabindex="0"><code>1 
2 
4 
size: 3
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Stock Market Definitions</title>
            <link>/posts/2020/12/stock-market-definitions/</link>
            <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/12/stock-market-definitions/</guid>
            <description>52 week Range invest Define it as
 The 52-week range is a data point traditionally reported by printed financial news media, but more modernly included in data feeds from financial information sources online. The data point includes the lowest and highest price at which a stock has traded during the previous 52 weeks.
 Volume  Volume is the amount of an asset or security that changes hands over some period of time, often over the course of a day.</description>
            <content type="html"><![CDATA[<h1 id="52-week-range">52 week Range</h1>
<p><a href="https://www.investopedia.com/terms/1/52-week-range.asp#:~:text=What%20Is%20the%2052%2DWeek,during%20the%20previous%2052%20weeks.">invest</a> Define it as</p>
<blockquote>
<p>The 52-week range is a data point traditionally reported by printed financial news media, but more modernly included in data feeds from financial information sources online. The data point includes the lowest and highest price at which a stock has traded during the previous 52 weeks.</p>
</blockquote>
<h1 id="volume">Volume</h1>
<blockquote>
<p>Volume is the amount of an asset or security that changes hands over some period of time, often over the course of a day.</p>
</blockquote>
<h1 id="average-volume">Average Volume</h1>
<blockquote>
<p>The Average Volume is the total volume for a specified period divided by the number of bars in that same period.</p>
</blockquote>
<h1 id="market-cap">Market Cap</h1>
<blockquote>
<p>Market capitalization refers to the total dollar market value of a company&rsquo;s outstanding shares of stock. Commonly referred to as &ldquo;market cap,&rdquo; it is calculated by multiplying the total number of a company&rsquo;s outstanding shares by the current market price of one share.</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>Systemverilog Assertions(SVA) - part1 - 5-minute tour</title>
            <link>/posts/2020/12/systemverilog-assertionssva-part1-5-minute-tour/</link>
            <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/12/systemverilog-assertionssva-part1-5-minute-tour/</guid>
            <description>Introduction There are two types of assertions: immediate and concurrent. I will omit immediate here because they are simple and straightforward for anyone who wrote an assertions in any language.
concurrent assertions provide temporal(over time) semantics to check the deign &amp;ldquo;intent&amp;rdquo;. Basically, They describe behavior that spans over time. Unlike immediate assertions, the evaluation model is based on a clock so that a concurrent assertion is evaluated only at the occurrence of a clock tick.</description>
            <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>There are two types of assertions: immediate and concurrent. I will omit immediate here because they are simple and straightforward for anyone who wrote an assertions in any language.</p>
<p>concurrent assertions provide temporal(over time) semantics to check the deign &ldquo;intent&rdquo;. Basically, They describe behavior that spans over time. Unlike immediate assertions, the evaluation model is based on a clock so that a concurrent assertion is evaluated only at the occurrence of a clock tick.</p>
<h1 id="clocking">Clocking</h1>
<p>assertions need a clocking event to evaluate sequences and properties over time (sampling tick). if there is no clocking for assertion, tool will throw an error.</p>
<p>clocking can  be defined in sequence, property or assertion.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">sequence s1;
@(<span style="color:#fff;font-weight:bold">posedge</span> clk) sig0 ##<span style="color:#ff0;font-weight:bold">1</span> sig1
endsequence
</code></pre></div><p>or</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">property p1;
@(<span style="color:#fff;font-weight:bold">posedge</span> clk) s1 ##<span style="color:#ff0;font-weight:bold">1</span> sig2
endpropert
</code></pre></div><p>or</p>
<pre tabindex="0"><code>assert property (@(posedge clk) pr1)
</code></pre><p>It&rsquo;s usually recommended to define in property or assert. and keep sequence clock-free to be reusable.</p>
<h1 id="sampling">Sampling</h1>
<p>LRM defines <code>Sample value</code> for concurrent assertions as:</p>
<blockquote>
<p>The definition of a sampled value of an expression is based on the definition of a sampled value of a variable. The general rule for variable sampling is as follows:</p>
<p>— The sampled value of a variable in a time slot corresponding to time greater than 0 is the value of this variable in the Preponed region of this time slot.</p>
<p>— The sampled value of a variable in a time slot corresponding to time 0 is its default sampled value. (see next section)</p>
</blockquote>
<p>For example, The value of signal req is low at clock ticks 1 and 2. At clock tick 3, the value is sampled as high and remains high until clock tick 6. The sampled value of variable req at clock tick 6 is low and remains low up to and including clock tick 9. (Note, here the edge of req is at tick 9 exactly, but it samples the value at preponed region so the value is low)</p>
<p><img src="/sva1-1.png" alt="Image"></p>
<p>Also, The LRM defines several scheduling regions inside the time unit:</p>
<ul>
<li>Values are samples in preponed region(from previous time unit)</li>
<li>expressions are evaluated in observed region</li>
<li>action block execute in observed</li>
</ul>
<h1 id="statements">statements</h1>
<p>A concurrent assertion statement may be specified in any of the following:</p>
<ul>
<li>always procedure or initial procedure as a statement, wherever these procedures may appear(called procedural concurrent assertion, will ignore for now)</li>
<li>module</li>
<li>interface</li>
<li>program</li>
<li>generate block</li>
<li>checker</li>
</ul>
<p>And there are 4 types of &ldquo;SVA&rdquo; defined in LRM for both simulation and formal tools:</p>
<ul>
<li>assert: The assert statement is used to enforce a property. When the property for the assert statement is evaluated to be true, the pass statements of the action block are executed. When the property for the assert statement is evaluated to be false, the fail statements of the action_block are executed.</li>
<li>cover: to make sure property is hit as part of coverage closure</li>
<li>assume: to constraint the formal engine. In simulation, it&rsquo;s treated same as assert</li>
<li>restrict: used for formal.</li>
</ul>
<h1 id="properties-and-sequences">properties and sequences</h1>
<p>To write an &ldquo;assertion&rdquo;, we can reuse the following building blocks:</p>
<ul>
<li>expressions</li>
<li>sequence</li>
<li>property</li>
</ul>
<p>The way i see it, property is super-class of sequence.There are operators that can be written inside property not sequence. And sequence can be used in properties but not the other way around.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">sequence s1;
sig0 ##<span style="color:#ff0;font-weight:bold">1</span> sig1
endsequence

property p1;
s1 ##<span style="color:#ff0;font-weight:bold">1</span> sig2
endpropert

assert property (@(<span style="color:#fff;font-weight:bold">posedge</span> clk) pr1)
</code></pre></div><h1 id="threading">Threading</h1>
<p>It&rsquo;s important to understand that assertions are multi-threaded. This means that there is a thread staring at each sampling tick that evaluates the property. and each of the threads can pass, fail or be vacuous depending on operators used in the property. This will be more apparent in properties using repetition and implication.</p>
]]></content>
        </item>
        
        <item>
            <title>Abridged guide to Systemverilog Functional coverage</title>
            <link>/posts/2020/12/abridged-guide-to-systemverilog-functional-coverage/</link>
            <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/12/abridged-guide-to-systemverilog-functional-coverage/</guid>
            <description>Coverage is big part of &amp;ldquo;CRV&amp;rdquo; (constrained random verification). If randomization answers the question &amp;ldquo;does it work?&amp;rdquo;, Something needs to say when to stop &amp;ldquo;randomizing&amp;rdquo; and answer the question &amp;ldquo;are done?&amp;rdquo;.
SV Standard define combine several Semantics languages (mixed bag) for OOP, SVA, Randomization and most importantly Functional Coverage. This is small(or abridged if you like fancy words) intro to Coverage semantics. So, LRM reading is a must to understand all features and details about functional coverage semantics.</description>
            <content type="html"><![CDATA[<p>Coverage is big part of &ldquo;CRV&rdquo; (constrained random verification). If randomization answers the question &ldquo;does it work?&rdquo;, Something needs to say when to stop &ldquo;randomizing&rdquo; and answer the question &ldquo;are done?&rdquo;.</p>
<p>SV Standard define combine several Semantics languages (mixed bag) for OOP, SVA, Randomization and most importantly <code>Functional Coverage</code>. This is small(or abridged if you like fancy words) intro to Coverage semantics. So, LRM reading is a must to understand all features and details about functional coverage semantics.</p>
<h1 id="the-mandatory-lrm-tour-guide">The mandatory LRM tour guide</h1>
<p>There are 4 language features to be know here:</p>
<ul>
<li>covergroup</li>
<li>coverpoint</li>
<li>bin</li>
<li>cross bin</li>
</ul>
<h2 id="covergroup">Covergroup</h2>
<p>LRM define the <code>covergroup</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">logic</span> clk;
<span style="color:#fff;font-weight:bold">logic</span> [<span style="color:#ff0;font-weight:bold">3</span>:<span style="color:#ff0;font-weight:bold">0</span>] addr;

covergroup cg @(<span style="color:#fff;font-weight:bold">posedge</span> clk);
    cp1: coverpoint addr;
endcover
</code></pre></div><p><code>covergroup</code> can be defined inside design units (module, interface, bla bla bla). but it shines when combined with randomization inside a <code>class</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class cls;

covergroup cg @(<span style="color:#fff;font-weight:bold">posedge</span> clk);
endcover

cg cg_u = new;

endclass
</code></pre></div><p>Also, <code>covergroup</code> can be constructed in class constructor.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">function</span> new();
cg_u = new()
<span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p><code>covergroup</code> can take event for triggering or can triggered by calling <code>.sample()</code>. Event can be clock or bus enable ro anything that indicate new values to sample. anther use-case, calling <code>.sample()</code> from monitor or scoreboard or coverage-driven component.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">function</span> get_transction();
    cg.sample();
<span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><h2 id="coverpoint">Coverpoint</h2>
<p>coverpoint is the way define variables we want to sample to make sure all(needed values) are covered. In this example, <code>add</code> is is sampled on each clock cycle.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">logic</span> clk;
<span style="color:#fff;font-weight:bold">logic</span> [<span style="color:#ff0;font-weight:bold">3</span>:<span style="color:#ff0;font-weight:bold">0</span>] addr;

covergroup cg @(<span style="color:#fff;font-weight:bold">posedge</span> clk);
    cp1: coverpoint addr;
endcover
</code></pre></div><p>as addr is 4 bits, there are 16 possible values. So, The simulator will auto-create 16 <code>bins</code>. and will keep track which values were hit.</p>
<h2 id="bins">bins</h2>
<p>as mentioned, if there are no bins defined, simulator will create auto bins. but we and group values to define that specific condition was hit instead indivisual values.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">logic</span> clk;
<span style="color:#fff;font-weight:bold">logic</span> [<span style="color:#ff0;font-weight:bold">3</span>:<span style="color:#ff0;font-weight:bold">0</span>] addr;

covergroup cg @(<span style="color:#fff;font-weight:bold">posedge</span> clk);
    cp1: coverpoint addr{
        bins border = {<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">15</span>};
        bins others = {[<span style="color:#ff0;font-weight:bold">1</span>:<span style="color:#ff0;font-weight:bold">14</span>]};
    }
endcover
</code></pre></div><h2 id="cross-bins">cross bins</h2>
<p>LRM also defines <code>cross</code> which create <code>M*N</code> bins where M and N are bins coverpoint defined in cross.</p>
<p>In this example, 2 bins are created to cover all combinations in these two coverpoints</p>
<ul>
<li>&lt;cp1.border,cp2.large&gt;</li>
<li>&lt;cp1.others,cp2.large&gt;</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">logic</span> clk;
<span style="color:#fff;font-weight:bold">logic</span> [<span style="color:#ff0;font-weight:bold">3</span>:<span style="color:#ff0;font-weight:bold">0</span>] addr;

covergroup cg @(<span style="color:#fff;font-weight:bold">posedge</span> clk);
    cp1: coverpoint addr{
        bins border = {<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">15</span>};
        bins others = {[<span style="color:#ff0;font-weight:bold">2</span>:<span style="color:#ff0;font-weight:bold">4</span>]};
    }
    cp2: coverpoint addr{
        bins <span style="color:#fff;font-weight:bold">large</span> = {[<span style="color:#ff0;font-weight:bold">4</span>:<span style="color:#ff0;font-weight:bold">14</span>]};
    }
    cross cps
endcover
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>C&#43;&#43; -is_copy_constructible and is_copy_assignable templates</title>
            <link>/posts/2020/11/c-is_copy_constructible-and-is_copy_assignable-templates/</link>
            <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/11/c-is_copy_constructible-and-is_copy_assignable-templates/</guid>
            <description>c++11 defines several templates utilities that can evaluate if class has copy_constructor or assignment operator.
there are several variants but this example uses std::is_copy_constructible and std::is_copy_assignable.
for more details, see is_copy_assignable and is_copy_constructible
#include &amp;lt;iostream&amp;gt;#include &amp;lt;type_traits&amp;gt;using namespace std; class cls { public: cls(const cls &amp;amp;) = default; cls &amp;amp;operator=(const cls &amp;amp;other) = default; }; class cls1 { public: cls1(const cls1 &amp;amp;) = delete; cls1 &amp;amp;operator=(const cls1 &amp;amp;other) = delete; }; int main() { cout &amp;lt;&amp;lt; std::is_copy_constructible&amp;lt;cls&amp;gt;::value &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; std::is_copy_assignable&amp;lt;cls&amp;gt;::value &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; std::is_copy_constructible&amp;lt;cls1&amp;gt;::value &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; std::is_copy_assignable&amp;lt;cls1&amp;gt;::value &amp;lt;&amp;lt; endl; } </description>
            <content type="html"><![CDATA[<p>c++11 defines several templates utilities that can evaluate if class has copy_constructor or assignment operator.</p>
<p>there are several variants but this example uses <code>std::is_copy_constructible</code> and <code>std::is_copy_assignable</code>.</p>
<p>for more details, see <a href="https://en.cppreference.com/w/cpp/types/is_copy_assignable">is_copy_assignable</a> and <a href="https://en.cppreference.com/w/cpp/types/is_copy_constructible">is_copy_constructible</a></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;type_traits&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span><span style="color:#fff;font-weight:bold">using</span> <span style="color:#fff;font-weight:bold">namespace</span> std;

<span style="color:#fff;font-weight:bold">class</span> cls
{
<span style="color:#fff;font-weight:bold">public</span>:
    cls(<span style="color:#fff;font-weight:bold">const</span> cls &amp;) = <span style="color:#fff;font-weight:bold">default</span>;
    cls &amp;<span style="color:#fff;font-weight:bold">operator</span>=(<span style="color:#fff;font-weight:bold">const</span> cls &amp;other) = <span style="color:#fff;font-weight:bold">default</span>;
};

<span style="color:#fff;font-weight:bold">class</span> cls1
{
<span style="color:#fff;font-weight:bold">public</span>:
    cls1(<span style="color:#fff;font-weight:bold">const</span> cls1 &amp;) = <span style="color:#fff;font-weight:bold">delete</span>;
    cls1 &amp;<span style="color:#fff;font-weight:bold">operator</span>=(<span style="color:#fff;font-weight:bold">const</span> cls1 &amp;other) = <span style="color:#fff;font-weight:bold">delete</span>;
};
<span style="color:#fff;font-weight:bold">int</span> main()
{
    cout &lt;&lt; std::is_copy_constructible&lt;cls&gt;::value &lt;&lt; endl;
    cout &lt;&lt; std::is_copy_assignable&lt;cls&gt;::value &lt;&lt; endl;
    cout &lt;&lt; std::is_copy_constructible&lt;cls1&gt;::value &lt;&lt; endl;
    cout &lt;&lt; std::is_copy_assignable&lt;cls1&gt;::value &lt;&lt; endl;
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>C&#43;&#43; - smart pointer - unique_ptr</title>
            <link>/posts/2020/11/c-smart-pointer-unique_ptr/</link>
            <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/11/c-smart-pointer-unique_ptr/</guid>
            <description>before c++11, smart pointer can be used from boost library but now it&amp;rsquo;s part of std. This post documents some small example how to create and use unique_ptr.
Hello world This is the first example of unique_ptr, note how sp is used same as raw pointer. namely using -&amp;gt; or .. from program output, It&amp;rsquo;s clear how unique_ptr is different. ~cls() is called for unique_ptr object but not for raw pointer.</description>
            <content type="html"><![CDATA[<p>before c++11, smart pointer can be used from <code>boost</code> library but now it&rsquo;s part of std. This post documents some small example how to create and use <code>unique_ptr</code>.</p>
<h1 id="hello-world">Hello world</h1>
<p>This is the first example of <code>unique_ptr</code>, note how <code>sp</code> is used same as <code>raw pointer</code>. namely using <code>-&gt;</code> or <code>.</code>. from program output, It&rsquo;s clear how unique_ptr is different.  <code>~cls()</code> is called for  unique_ptr object but not for raw pointer.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;memory&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;string&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">using</span> <span style="color:#fff;font-weight:bold">namespace</span> std;

<span style="color:#fff;font-weight:bold">class</span> cls
{
<span style="color:#fff;font-weight:bold">public</span>:
    <span style="color:#fff;font-weight:bold">int</span> x;
    string str;
    cls(std::string str)
    {
        <span style="color:#fff;font-weight:bold">this</span>-&gt;str = str;
        cout
            &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34;cls(): &#34;</span> &lt;&lt; str &lt;&lt; endl;
    }
    ~cls()
    {
        cout &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34;~cls():&#34;</span> &lt;&lt; <span style="color:#fff;font-weight:bold">this</span>-&gt;str &lt;&lt; endl;
    }
};

<span style="color:#fff;font-weight:bold">int</span> main()
{
    <span style="color:#007f7f">//  use smart pointer same as raw pointer
</span><span style="color:#007f7f"></span>    cls *p = <span style="color:#fff;font-weight:bold">new</span> cls(<span style="color:#0ff;font-weight:bold">&#34;raw ptr&#34;</span>);
    p-&gt;x = <span style="color:#ff0;font-weight:bold">1</span>;
    std::unique_ptr&lt;cls&gt; sp(<span style="color:#fff;font-weight:bold">new</span> cls(<span style="color:#0ff;font-weight:bold">&#34;unique_ptr&#34;</span>));
    sp-&gt;x = <span style="color:#ff0;font-weight:bold">100</span>;
    cout &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34;sp-&gt;x: &#34;</span> &lt;&lt; sp-&gt;x &lt;&lt; endl;
    cout &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34;(*sp).x: &#34;</span> &lt;&lt; (*sp).x &lt;&lt; endl;
}
</code></pre></div><p>obviously,we can pass the raw pointer directly to unique_ptr contructor.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">    cls *p = <span style="color:#fff;font-weight:bold">new</span> cls(<span style="color:#0ff;font-weight:bold">&#34;raw ptr&#34;</span>);
    std::unique_ptr&lt;cls&gt; sp(p);
</code></pre></div><h1 id="using-unique_ptr">using unique_ptr</h1>
<p>in the example above, we used <code>new</code> to create the object. but using <code>raw</code> new is not recommended any more.
starting c++11, <code>make_unique</code> (see <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr/make_unique">link</a>) can be used to create element or array.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#fff;font-weight:bold">int</span> main()
{
    std::unique_ptr&lt;cls&gt; e = std::make_unique&lt;cls&gt;(<span style="color:#0ff;font-weight:bold">&#34;ddd&#34;</span>);
}
</code></pre></div><h1 id="assign-to-another-ptr">assign to another ptr</h1>
<p>As name suggests, underlying object can&rsquo;t be shared between pointers because we wouldn&rsquo;t know which pointer is responsible for destroying the object.</p>
<p>consider the following snippet:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#fff;font-weight:bold">int</span> main()
{
    unique_ptr&lt;cls&gt; p1(<span style="color:#fff;font-weight:bold">new</span> cls(<span style="color:#0ff;font-weight:bold">&#34;o1&#34;</span>));

    unique_ptr&lt;cls&gt; p2 = p1;
}
</code></pre></div><p>g++ will spit off and error which basically means both assignment operator and copy constructor is <code>delete</code>ed.</p>
<pre tabindex="0"><code>unique_ptr3.cc:29:26: error: use of deleted function ‘std::unique_ptr&lt;_Tp, _Dp&gt;::unique_ptr(const std::unique_ptr&lt;_Tp, _Dp&gt;&amp;) [with _Tp = cls; _Dp = std::default_delete&lt;cls&gt;]’
   29 |     unique_ptr&lt;cls&gt; p2 = p1;
      |                          ^~
In file included from /usr/include/c++/9/memory:80,
                 from unique_ptr3.cc:2:
/usr/include/c++/9/bits/unique_ptr.h:414:7: note: declared here
  414 |       unique_ptr(const unique_ptr&amp;) = delete;
      |       ^~~~~~~~~~
unique_ptr3.cc:30:26: error: use of deleted function ‘std::unique_ptr&lt;_Tp, _Dp&gt;::unique_ptr(const std::unique_ptr&lt;_Tp, _Dp&gt;&amp;) [with _Tp = cls; _Dp = std::default_delete&lt;cls&gt;]’
   30 |     unique_ptr&lt;cls&gt; p3(p1);
      |                          ^
In file included from /usr/include/c++/9/memory:80,
                 from unique_ptr3.cc:2:
/usr/include/c++/9/bits/unique_ptr.h:414:7: note: declared here
  414 |       unique_ptr(const unique_ptr&amp;) = delete;
</code></pre><h1 id="moving-unique_ptr">moving unique_ptr</h1>
<p>as we saw above, copy constructor and assignment operator are not allowed on unique_ptr. but move semantics is defined on unique_ptr.
so, <code>std::move</code> can be used to steal the underlying object and set the ptr to nullptr.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#fff;font-weight:bold">int</span> main()
{
    unique_ptr&lt;cls&gt; p1(<span style="color:#fff;font-weight:bold">new</span> cls(<span style="color:#0ff;font-weight:bold">&#34;o1&#34;</span>));

    unique_ptr&lt;cls&gt; p2;

    p2 = std::move(p1);

    <span style="color:#007f7f">// p1 = nullptr;
</span><span style="color:#007f7f"></span>    cout &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34;exit</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>;
}
</code></pre></div><h1 id="assign-to-nullptr">assign to nullptr</h1>
<p>if nullptr is assigned to unqiue_ptr, the underlying destructor is called.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#fff;font-weight:bold">int</span> main()
{
    std::unique_ptr&lt;cls&gt; e = std::make_unique&lt;cls&gt;(<span style="color:#0ff;font-weight:bold">&#34;ddd&#34;</span>);
    cout &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34;begin: nullptr</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>;
    e = <span style="color:#fff;font-weight:bold">nullptr</span>; <span style="color:#007f7f">// descrutrtor called on nullptr
</span><span style="color:#007f7f"></span>    cout &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34;end: nullptr</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>;
    cout &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34;exit</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>;
}
</code></pre></div><h1 id="working-with-stl">working with STL</h1>
<p>unique_ptr works perfectly with STL without semantic changes. for example, we can use vector of pointers:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#fff;font-weight:bold">int</span> main()
{
    std::vector&lt;unique_ptr&lt;cls&gt;&gt; v;
    vector&lt;cls *&gt; v1;

    v.push_back(make_unique&lt;cls&gt;(<span style="color:#0ff;font-weight:bold">&#34;o1&#34;</span>));
    v1.push_back(<span style="color:#fff;font-weight:bold">new</span> cls(<span style="color:#0ff;font-weight:bold">&#34;r1&#34;</span>));
    <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">auto</span> &amp;e : v)
    {
        cout &lt;&lt; e-&gt;str &lt;&lt; endl;
    }
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>C&#43;&#43; - std::pair</title>
            <link>/posts/2020/11/c-stdpair/</link>
            <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/11/c-stdpair/</guid>
            <description>std::pair is class template to store two elements(special case of std::tuple)
according to cpp reference, the elements are accessible through first and second member objects.
there are several ways to create pair according to link. i am listing the 3 obvious ones here:
 default constructor if both types std;:is_default_constuctible_v for both types is true constructor (x,y) which initializes first and second to x and y copy contructor from another pain.</description>
            <content type="html"><![CDATA[<p><code>std::pair</code> is class template to store two elements(special case of std::tuple)</p>
<p>according to <a href="https://en.cppreference.com/w/cpp/utility/pair">cpp reference</a>, the elements are accessible through <code>first</code> and <code>second</code> member objects.</p>
<p>there are several ways to create pair according to <a href="https://en.cppreference.com/w/cpp/utility/pair/pair">link</a>. i am listing the 3 obvious ones here:</p>
<ul>
<li>default constructor if both types std;:is_default_constuctible_v for both types is true</li>
<li>constructor (x,y) which initializes first and second to x and y</li>
<li>copy contructor from another pain.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;utility&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">using</span> <span style="color:#fff;font-weight:bold">namespace</span> std;

<span style="color:#fff;font-weight:bold">int</span> main()
{
    std::pair&lt;<span style="color:#fff;font-weight:bold">int</span>, <span style="color:#fff;font-weight:bold">int</span>&gt; p;
    cout &lt;&lt; p.first &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34; &#34;</span> &lt;&lt; p.second &lt;&lt; endl;
    std::pair&lt;<span style="color:#fff;font-weight:bold">int</span>, <span style="color:#fff;font-weight:bold">int</span>&gt; p1(<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">2</span>);
    cout &lt;&lt; p1.first &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34; &#34;</span> &lt;&lt; p1.second &lt;&lt; endl;

    <span style="color:#fff;font-weight:bold">auto</span> p2 = make_pair(<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">1.1</span>);
    cout &lt;&lt; p2.first &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34; &#34;</span> &lt;&lt; p2.second &lt;&lt; endl;

}
</code></pre></div><h1 id="make_pair">make_pair</h1>
<p>pairs can be constructed using <a href="https://en.cppreference.com/w/cpp/utility/pair/make_pair"><code>make_pair</code></a>. which is template function to deduce the first and second types.</p>
<p><code>auto</code> can be used with to make_pair to create pairs and `auto type deduction will figure it out.</p>
]]></content>
        </item>
        
        <item>
            <title>C&#43;&#43; - std::tie and std::ignore</title>
            <link>/posts/2020/11/c-stdtie-and-stdignore/</link>
            <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/11/c-stdtie-and-stdignore/</guid>
            <description>c++11 defines utility tie to return tuple that can be used in lvalue.
c++ reference has have one line definition
 Creates a tuple of lvalue references to its arguments or instances of std::ignore.
 in plain English, this works like unpack tuple in python or destructing in javascript. So, in the following example, func return tuple of two elements and using tie and unpacking it in x and y variables</description>
            <content type="html"><![CDATA[<p>c++11 defines utility <code>tie</code> to return tuple that can be used in lvalue.</p>
<p><a href="https://en.cppreference.com/w/cpp/utility/tuple/tie">c++ reference</a> has have one line definition</p>
<blockquote>
<p>Creates a tuple of lvalue references to its arguments or instances of std::ignore.</p>
</blockquote>
<p>in plain English, this works like unpack tuple in python or destructing in javascript. So, in the following example, <code>func</code> return  tuple of two elements and using <code>tie</code> and unpacking it in <code>x</code> and <code>y</code> variables</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">
<span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;utility&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;string&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;tuple&gt; // for tuple</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span><span style="color:#fff;font-weight:bold">using</span> <span style="color:#fff;font-weight:bold">namespace</span> std;

std::tuple&lt;<span style="color:#fff;font-weight:bold">int</span>, <span style="color:#fff;font-weight:bold">int</span>&gt; func()
{
    <span style="color:#fff;font-weight:bold">return</span> make_tuple(<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">2</span>);
}
<span style="color:#fff;font-weight:bold">int</span> main()
{
    <span style="color:#fff;font-weight:bold">int</span> x, y;
    std::tie(x, y) = func();

    cout &lt;&lt; x &lt;&lt; endl
         &lt;&lt; y &lt;&lt; endl;
}

</code></pre></div><p>so, what does <code>std::ignore</code> do here?</p>
<p><code>std::ignore</code> is defined in <a href="https://en.cppreference.com/w/cpp/utility/tuple/ignore">cpp reference</a></p>
<blockquote>
<p>An object of unspecified type such that any value can be assigned to it with no effect. Intended for use with std::tie when unpacking a std::tuple, as a placeholder for the arguments that are not used.</p>
</blockquote>
<p>which means that <code>std::ignore</code> can be used to ignore the element in the returned tuple. in this example, i care only about the second element in tuple so, i have to use std::ignore in the first element.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;utility&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;string&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;tuple&gt; // for tuple</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span><span style="color:#fff;font-weight:bold">using</span> <span style="color:#fff;font-weight:bold">namespace</span> std;

std::tuple&lt;<span style="color:#fff;font-weight:bold">int</span>, <span style="color:#fff;font-weight:bold">int</span>&gt; func()
{
    <span style="color:#fff;font-weight:bold">return</span> make_tuple(<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">2</span>);
}
<span style="color:#fff;font-weight:bold">int</span> main()
{
    <span style="color:#fff;font-weight:bold">int</span> x, y;
    std::tie(std::ignore, y) = func();

    cout &lt;&lt; x &lt;&lt; endl
         &lt;&lt; y &lt;&lt; endl;

}

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>C&#43;&#43; - std::tuple</title>
            <link>/posts/2020/11/c-stdtuple/</link>
            <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/11/c-stdtuple/</guid>
            <description>std::tuple was added in c++11 fixed sized heterogeneous values It is a generalization of std::pair. full details at cpp reference
get&amp;lt;index&amp;gt;(tuple) is used to get the values at index.
what is interesting about tuple though is using make_tuple and auto to create tuples without specifying types. auto type deduction will figure it out.
#include &amp;lt;iostream&amp;gt;#include &amp;lt;utility&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;tuple&amp;gt; // for tupleusing namespace std; int main() { std::tuple&amp;lt;int, int, string&amp;gt; p; p = make_tuple(1, 2, &amp;#34;fff&amp;#34;); cout &amp;lt;&amp;lt; get&amp;lt;0&amp;gt;(p) &amp;lt;&amp;lt; endl; auto p1 = make_tuple(&amp;#34;1dd&amp;#34;, 1.</description>
            <content type="html"><![CDATA[<p><code>std::tuple</code> was added in c++11 fixed sized heterogeneous values  It is a generalization of std::pair.
full details at <a href="https://en.cppreference.com/w/cpp/utility/tuple">cpp reference</a></p>
<p><code>get&lt;index&gt;(tuple)</code> is used to get the values at index.</p>
<p>what is interesting about tuple though is using <code>make_tuple</code> and <code>auto</code> to create tuples without specifying types. <code>auto</code> type deduction will figure it out.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;utility&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;string&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;tuple&gt; // for tuple</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span><span style="color:#fff;font-weight:bold">using</span> <span style="color:#fff;font-weight:bold">namespace</span> std;

<span style="color:#fff;font-weight:bold">int</span> main()
{
    std::tuple&lt;<span style="color:#fff;font-weight:bold">int</span>, <span style="color:#fff;font-weight:bold">int</span>, string&gt; p;

    p = make_tuple(<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#0ff;font-weight:bold">&#34;fff&#34;</span>);

    cout &lt;&lt; get&lt;<span style="color:#ff0;font-weight:bold">0</span>&gt;(p) &lt;&lt; endl;

    <span style="color:#fff;font-weight:bold">auto</span> p1 = make_tuple(<span style="color:#0ff;font-weight:bold">&#34;1dd&#34;</span>, <span style="color:#ff0;font-weight:bold">1.1</span>);
    cout &lt;&lt; get&lt;<span style="color:#ff0;font-weight:bold">0</span>&gt;(p1) &lt;&lt; endl;
}

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>C&#43;&#43; - explicit</title>
            <link>/posts/2020/11/c-explicit/</link>
            <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/11/c-explicit/</guid>
            <description>by default, compiler can do implicit type conversion if there is a constructor that matches the argument. For example, func returns int and return type is cls which has a constructor with int.
#include &amp;lt;iostream&amp;gt; using namespace std; class cls { public: cls(int i) { cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl; } }; cls func() { return 230; } int main() { int i; cls c(1); c = func(); } cpreference describes explicit as was to disable the implicit conversion and force compile error when that happens.</description>
            <content type="html"><![CDATA[<p>by default, compiler can do implicit type conversion if there is a constructor that matches the argument. For example, <code>func</code> returns int and return type is <code>cls</code> which has a constructor with int.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">using</span> <span style="color:#fff;font-weight:bold">namespace</span> std;

<span style="color:#fff;font-weight:bold">class</span> cls
{
<span style="color:#fff;font-weight:bold">public</span>:
     cls(<span style="color:#fff;font-weight:bold">int</span> i)
    {
        cout &lt;&lt; i &lt;&lt; endl;
    }
};

cls func()
{
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">230</span>;
}
<span style="color:#fff;font-weight:bold">int</span> main()
{
    <span style="color:#fff;font-weight:bold">int</span> i;
    cls c(<span style="color:#ff0;font-weight:bold">1</span>);
    c = func();
}

</code></pre></div><p><a href="https://en.cppreference.com/w/cpp/language/explicit">cpreference</a> describes <code>explicit</code> as was to disable the implicit conversion and force compile error when that happens.</p>
<blockquote>
<p>Specifies that a constructor or conversion function (since C++11) or deduction guide (since C++17) is explicit, that is, it cannot be used for implicit conversions and copy-initialization.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">using</span> <span style="color:#fff;font-weight:bold">namespace</span> std;

<span style="color:#fff;font-weight:bold">class</span> cls
{
<span style="color:#fff;font-weight:bold">public</span>:
    <span style="color:#fff;font-weight:bold">explicit</span> cls(<span style="color:#fff;font-weight:bold">int</span> i)
    {
        cout &lt;&lt; i &lt;&lt; endl;
    }
};

cls func()
{
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">230</span>;
}
<span style="color:#fff;font-weight:bold">int</span> main()
{
    <span style="color:#fff;font-weight:bold">int</span> i;
    cls c(<span style="color:#ff0;font-weight:bold">1</span>);
    c = func();
}

</code></pre></div><p>Error with <code>explicit</code>, compiler throws an error</p>
<pre tabindex="0"><code>explicit.cc:16:12: error: could not convert ‘230’ from ‘int’ to ‘cls’
   16 |     return 230;
      |            ^~~
      |            |
      |            int
</code></pre>]]></content>
        </item>
        
        <item>
            <title>C&#43;&#43; - const method</title>
            <link>/posts/2020/11/c-const-method/</link>
            <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/11/c-const-method/</guid>
            <description>const method specifier stop the method from writing to class members. It throws compile time error for writes.
Example class cls { public: int x; void func() const { x = 0; } }; int main() { } const.cc:8:11: error: assignment of member ‘cls::x’ in read-only object 8 | x = 0; | ~~^~~ Note that const methods can only call constant methods.
Work around const-ness To force write inside const method, const_cast can be used to remove const-ness.</description>
            <content type="html"><![CDATA[<p><code>const</code> method specifier stop the method from writing to class members. It throws compile time error for writes.</p>
<h1 id="example">Example</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#fff;font-weight:bold">class</span> cls
{

<span style="color:#fff;font-weight:bold">public</span>:
    <span style="color:#fff;font-weight:bold">int</span> x;
    <span style="color:#fff;font-weight:bold">void</span> func() <span style="color:#fff;font-weight:bold">const</span>
    {
        x = <span style="color:#ff0;font-weight:bold">0</span>;
    }
};
<span style="color:#fff;font-weight:bold">int</span> main()
{
}
</code></pre></div><pre tabindex="0"><code>const.cc:8:11: error: assignment of member ‘cls::x’ in read-only object
    8 |         x = 0;
      |         ~~^~~
</code></pre><p>Note that <code>const</code> methods can only call constant methods.</p>
<h1 id="work-around-const-ness">Work around const-ness</h1>
<p>To force write inside <code>const</code> method, <code>const_cast</code> can be used to remove const-ness.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span><span style="color:#fff;font-weight:bold">using</span> <span style="color:#fff;font-weight:bold">namespace</span> std;
<span style="color:#fff;font-weight:bold">class</span> cls
{

<span style="color:#fff;font-weight:bold">public</span>:
    <span style="color:#fff;font-weight:bold">int</span> x;
    <span style="color:#fff;font-weight:bold">void</span> func() <span style="color:#fff;font-weight:bold">const</span>
    {
        <span style="color:#007f7f">// x = 0;
</span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">const_cast</span>&lt;<span style="color:#fff;font-weight:bold">int</span> &amp;&gt;(x) = <span style="color:#ff0;font-weight:bold">3</span>;
        std::cout &lt;&lt; x &lt;&lt; endl;
    }
};
<span style="color:#fff;font-weight:bold">int</span> main()
{
    cls c;
    c.func();
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>C&#43;&#43; - default and delete</title>
            <link>/posts/2020/11/c-default-and-delete/</link>
            <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/11/c-default-and-delete/</guid>
            <description>Default if class defines constructor, compiler won&amp;rsquo;t generate default constructor.
#include &amp;lt;iostream&amp;gt;using namespace std; class child { public: int x; child(int x) { cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; endl; } // child() = default; }; int main() { child c; return 0; } so, this will fail with compile error
default_delete.cc:24:11: error: no matching function for call to ‘child::child()’ 24 | child c; | ^ But if still want default constructor, we can define the default constructor same as we don&amp;rsquo;t have the custom constructor</description>
            <content type="html"><![CDATA[<h1 id="default">Default</h1>
<p>if class defines constructor, compiler won&rsquo;t generate default constructor.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span><span style="color:#fff;font-weight:bold">using</span> <span style="color:#fff;font-weight:bold">namespace</span> std;

<span style="color:#fff;font-weight:bold">class</span> child 
{
<span style="color:#fff;font-weight:bold">public</span>:
    <span style="color:#fff;font-weight:bold">int</span> x;
    child(<span style="color:#fff;font-weight:bold">int</span> x) { cout &lt;&lt; x &lt;&lt; endl; }
    <span style="color:#007f7f">// child() = default;
</span><span style="color:#007f7f"></span>};
<span style="color:#fff;font-weight:bold">int</span> main()
{
    child c;
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}

</code></pre></div><p>so, this will fail  with compile error</p>
<pre tabindex="0"><code>default_delete.cc:24:11: error: no matching function for call to ‘child::child()’
   24 |     child c;
      |           ^
</code></pre><p>But if still want default constructor, we can define the default constructor same as we don&rsquo;t have the custom constructor</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span><span style="color:#fff;font-weight:bold">using</span> <span style="color:#fff;font-weight:bold">namespace</span> std;

<span style="color:#fff;font-weight:bold">class</span> child 
{
<span style="color:#fff;font-weight:bold">public</span>:
    <span style="color:#fff;font-weight:bold">int</span> x;
    child(<span style="color:#fff;font-weight:bold">int</span> x) { cout &lt;&lt; x &lt;&lt; endl; }
    child() = <span style="color:#fff;font-weight:bold">default</span>;
};
<span style="color:#fff;font-weight:bold">int</span> main()
{
    child c;
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}
</code></pre></div><h1 id="delete">delete</h1>
<p>Same as default provides default implementation, <code>delete</code> removed the default implementation generated by compiler. for example, the deletes the copy constructor.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span><span style="color:#fff;font-weight:bold">using</span> <span style="color:#fff;font-weight:bold">namespace</span> std;

<span style="color:#fff;font-weight:bold">class</span> child 
<span style="color:#fff;font-weight:bold">public</span>:
    <span style="color:#fff;font-weight:bold">int</span> x;
    child() = <span style="color:#fff;font-weight:bold">default</span>;
    child(<span style="color:#fff;font-weight:bold">const</span> child &amp;) = <span style="color:#fff;font-weight:bold">delete</span>;
};
<span style="color:#fff;font-weight:bold">int</span> main()
{
    child c;
    child c1(c); <span style="color:#007f7f">// error because copy constructor is deleted 
</span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>C&#43;&#43; - final keyword</title>
            <link>/posts/2020/11/c-final-keyword/</link>
            <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/11/c-final-keyword/</guid>
            <description>final keyword was added in C++11 to stop virtual functional override or base class inheritance.
 When used in a virtual function declaration or definition, final specifier ensures that the function is virtual &amp;gt; and specifies that it may not be overridden by derived classes. The program is ill-formed (a compile-time error &amp;gt; is generated) otherwise.
When used in a class definition, final specifies that this class may not appear in the base-specifier-list of &amp;gt; another class definition (in other words, cannot be derived from).</description>
            <content type="html"><![CDATA[<p><code>final</code>  keyword was added in C++11 to stop virtual functional override or base class inheritance.</p>
<blockquote>
<p>When used in a virtual function declaration or definition, final specifier ensures that the function is virtual &gt; and specifies that it may not be overridden by derived classes. The program is ill-formed (a compile-time error &gt; is generated) otherwise.</p>
<p>When used in a class definition, final specifies that this class may not appear in the base-specifier-list of &gt; another class definition (in other words, cannot be derived from). The program is ill-formed otherwise (a &gt; compile-time error is generated). final can also be used with a union definition, in which case it has no &gt; effect (other than on the outcome of std::is_final) (since C++14), since unions cannot be derived from.</p>
<p>final is an identifier with a special meaning when used in a member function declaration or class head. In &gt; other contexts it is not reserved and may be used to name objects and functions.</p>
</blockquote>
<h1 id="final-class">Final class</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">using</span> <span style="color:#fff;font-weight:bold">namespace</span> std;

<span style="color:#fff;font-weight:bold">class</span> parent <span style="color:#fff;font-weight:bold">final</span>
{
<span style="color:#fff;font-weight:bold">public</span>:
    <span style="color:#fff;font-weight:bold">int</span> x;
    <span style="color:#fff;font-weight:bold">virtual</span> <span style="color:#fff;font-weight:bold">void</span> func()
    {
        cout &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34;parent&#34;</span> &lt;&lt; endl;
    }
};

<span style="color:#fff;font-weight:bold">class</span> child : <span style="color:#fff;font-weight:bold">public</span> parent
{
<span style="color:#fff;font-weight:bold">public</span>:
    <span style="color:#fff;font-weight:bold">int</span> x;
    <span style="color:#fff;font-weight:bold">void</span> func()
    {
        cout &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34;child&#34;</span> &lt;&lt; endl;
    }
};

<span style="color:#fff;font-weight:bold">int</span> main()
{
    child c;
    c.func();
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}
</code></pre></div><p>this throws compile error</p>
<pre tabindex="0"><code>final.cc:15:7: error: cannot derive from ‘final’ base ‘parent’ in derived type ‘child’
   15 | class child : public parent
</code></pre><h1 id="final-method">Final method</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">using</span> <span style="color:#fff;font-weight:bold">namespace</span> std;

<span style="color:#fff;font-weight:bold">class</span> parent
{
<span style="color:#fff;font-weight:bold">public</span>:
    <span style="color:#fff;font-weight:bold">int</span> x;
    <span style="color:#fff;font-weight:bold">virtual</span> <span style="color:#fff;font-weight:bold">void</span> func() <span style="color:#fff;font-weight:bold">final</span>
    {
        cout &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34;parent&#34;</span> &lt;&lt; endl;
    }
};

<span style="color:#fff;font-weight:bold">class</span> child : <span style="color:#fff;font-weight:bold">public</span> parent
{
<span style="color:#fff;font-weight:bold">public</span>:
    <span style="color:#fff;font-weight:bold">int</span> x;
    <span style="color:#fff;font-weight:bold">void</span> func()
    {
        cout &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34;child&#34;</span> &lt;&lt; endl;
    }
};

<span style="color:#fff;font-weight:bold">int</span> main()
{
    child c;
    c.func();
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}
</code></pre></div><p>and error</p>
<pre tabindex="0"><code>final.cc:19:10: error: virtual function ‘virtual void child::func()’ overriding final function
   19 |     void func()
      |          ^~~~
</code></pre>]]></content>
        </item>
        
        <item>
            <title>C&#43;&#43; - noexpect</title>
            <link>/posts/2020/11/c-noexpect/</link>
            <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/11/c-noexpect/</guid>
            <description>noexept is c++11 specifier to mark method as exception non-throwing. the best explanation i found is on MSF.
 Unary conditional operator noexcept(constant_expression) where constant_expression yields true, and its unconditional synonym noexcept, specify that the set of potential exception types that can exit a function is empty. That is, the function never throws an exception and never allows an exception to be propagated outside its scope.
 and after i tried it out, g++ doesn&amp;rsquo;t error out when that happen.</description>
            <content type="html"><![CDATA[<p><code>noexept</code> is c++11 specifier to mark method as exception non-throwing. the best explanation i found is on <a href="https://docs.microsoft.com/en-us/cpp/cpp/noexcept-cpp?view=msvc-160">MSF</a>.</p>
<blockquote>
<p>Unary conditional operator noexcept(constant_expression) where constant_expression yields true, and its unconditional synonym noexcept, specify that the set of potential exception types that can exit a function is empty. That is, the function never throws an exception and never allows an exception to be propagated outside its scope.</p>
</blockquote>
<p>and after i tried it out, g++ doesn&rsquo;t error out when that happen. It does issue a warning about <code>throw</code> calling terminate.</p>
<h1 id="example">Example</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span><span style="color:#fff;font-weight:bold">using</span> <span style="color:#fff;font-weight:bold">namespace</span> std;
<span style="color:#fff;font-weight:bold">class</span> cls
{

<span style="color:#fff;font-weight:bold">public</span>:
    <span style="color:#fff;font-weight:bold">int</span> x;
    <span style="color:#fff;font-weight:bold">void</span> func()
    {
        <span style="color:#fff;font-weight:bold">throw</span> <span style="color:#ff0;font-weight:bold">3</span>;
    }
    <span style="color:#fff;font-weight:bold">void</span> func2() <span style="color:#fff;font-weight:bold">noexcept</span>
    {
        <span style="color:#fff;font-weight:bold">throw</span> <span style="color:#ff0;font-weight:bold">3</span>;
    }
};
<span style="color:#fff;font-weight:bold">int</span> main()
{
    cls c;
    <span style="color:#fff;font-weight:bold">try</span>
    {

        <span style="color:#007f7f">// c.func();  // print 3
</span><span style="color:#007f7f"></span>        c.func2(); <span style="color:#007f7f">// crashes as function
</span><span style="color:#007f7f"></span>    }
    <span style="color:#fff;font-weight:bold">catch</span> (<span style="color:#fff;font-weight:bold">int</span> e)
    {
        cout &lt;&lt; e &lt;&lt; endl;
    }
}
</code></pre></div><p>for func, the exception catcher worked as expected</p>
<pre tabindex="0"><code>$ ./a.out 
3
</code></pre><p>for func2(marked with noexcept), it terminates with stacktrace as if there is no <code>try-catch</code></p>
<pre tabindex="0"><code>noexcept.cc: In member function ‘void cls::func2()’:
noexcept.cc:14:15: warning: throw will always call terminate() [-Wterminate]
   14 |         throw 3;
      |               ^
</code></pre><pre tabindex="0"><code>$ ./a.out 
terminate called after throwing an instance of 'int'
Aborted (core dumped)
</code></pre>]]></content>
        </item>
        
        <item>
            <title>C&#43;&#43; - override</title>
            <link>/posts/2020/11/c-override/</link>
            <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/11/c-override/</guid>
            <description>override keyword to make sure that class method &amp;ldquo;overrides&amp;rdquo; base class method. If there is not virtual in a parent class, it will throw compile error.
Example #include &amp;lt;iostream&amp;gt; using namespace std; class parent { public: int x; // virtual void func()  // {  // cout &amp;lt;&amp;lt; &amp;#34;parent&amp;#34; &amp;lt;&amp;lt; endl;  // } }; class child : public parent { public: int x; void func() override { cout &amp;lt;&amp;lt; &amp;#34;child&amp;#34; &amp;lt;&amp;lt; endl; } }; int main() { child c; c.</description>
            <content type="html"><![CDATA[<p>override keyword to make sure that class method &ldquo;overrides&rdquo; base class method. If there is not virtual in a parent class, it will throw compile error.</p>
<h1 id="example">Example</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">using</span> <span style="color:#fff;font-weight:bold">namespace</span> std;

<span style="color:#fff;font-weight:bold">class</span> parent
{
<span style="color:#fff;font-weight:bold">public</span>:
    <span style="color:#fff;font-weight:bold">int</span> x;
    <span style="color:#007f7f">// virtual void func()
</span><span style="color:#007f7f"></span>    <span style="color:#007f7f">// {
</span><span style="color:#007f7f"></span>    <span style="color:#007f7f">//     cout &lt;&lt; &#34;parent&#34; &lt;&lt; endl;
</span><span style="color:#007f7f"></span>    <span style="color:#007f7f">// }
</span><span style="color:#007f7f"></span>};

<span style="color:#fff;font-weight:bold">class</span> child : <span style="color:#fff;font-weight:bold">public</span> parent
{
<span style="color:#fff;font-weight:bold">public</span>:
    <span style="color:#fff;font-weight:bold">int</span> x;
    <span style="color:#fff;font-weight:bold">void</span> func() <span style="color:#fff;font-weight:bold">override</span>
    {
        cout &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34;child&#34;</span> &lt;&lt; endl;
    }
};

<span style="color:#fff;font-weight:bold">int</span> main()
{
    child c;
    c.func();
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}
</code></pre></div><p>g++ errors out with</p>
<pre tabindex="0"><code>override.cc:19:10: error: ‘void child::func()’ marked ‘override’, but does not override
   19 |     void func() override
      |          ^~~~
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Setup openvpn on VPS</title>
            <link>/posts/2020/11/setup-openvpn-on-vps/</link>
            <pubDate>Sun, 08 Nov 2020 19:46:08 +0200</pubDate>
            
            <guid>/posts/2020/11/setup-openvpn-on-vps/</guid>
            <description>Creating openvpn server I used the script from github. which is very easy to follow to generate the server and config
curl -O https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh chmod +x openvpn-install.sh ./openvpn-install.sh and to make sure the port 1194 is open, I used ufw to allow traffic on it
ufw allow 1194/udp Fixing the issue with linux openvpn connection with generated ovpn, we can connect to the openvpn server
sudo openvpn --config client1.ovpn but that will fail to connect with the message at the end of output</description>
            <content type="html"><![CDATA[<h1 id="creating-openvpn-server">Creating openvpn server</h1>
<p>I used the script from <a href="https://github.com/angristan/openvpn-install">github</a>. which is very easy to follow to generate the server and config</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl -O https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh
chmod +x openvpn-install.sh
./openvpn-install.sh
</code></pre></div><p>and to make sure the port 1194 is open, I used ufw to allow traffic on it</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ufw allow 1194/udp
</code></pre></div><h1 id="fixing-the-issue-with-linux-openvpn-connection">Fixing the issue with linux openvpn connection</h1>
<p>with generated ovpn, we can connect to the openvpn server</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo openvpn --config client1.ovpn
</code></pre></div><p>but that will fail to connect with the message at the end of output</p>
<pre tabindex="0"><code>VERIFY OK: depth=0, CN=***************
</code></pre><p>I found the fix for this issue on <a href="https://serverfault.com/questions/893534/cannot-connect-to-openvpn-server-under-ubuntu-16-04">link</a></p>
<pre tabindex="0"><code>up /etc/openvpn/update-resolv-conf
down /etc/openvpn/update-resolv-conf
script-security 2
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Encrypt Hard drive with cryptsetup</title>
            <link>/posts/2020/11/encrypt-hard-drive-with-cryptsetup/</link>
            <pubDate>Sun, 08 Nov 2020 15:46:08 +0200</pubDate>
            
            <guid>/posts/2020/11/encrypt-hard-drive-with-cryptsetup/</guid>
            <description>prerequisite sudo apt install cryptsetup parted export DRIVE=sdc Create partition sudo dd if=/dev/zero of=/dev/$DRIVE bs=512 count=1 conv=notrunc sudo parted /dev/$DRIVE (parted) mkpart primary ext4 0% 100% (parted) print (parted) quit Encrypt partition # Encrypt the partition with password sudo cryptsetup --verbose --verify-passphrase luksFormat /dev/${DRIVE}1 # Open luks with password above sudo cryptsetup luksOpen /dev/${DRIVE}1 ${DRIVE}1 # Create ext4 filesystem sudo mkfs.ext4 /dev/mapper/${DRIVE}1 # clean-up luks sudo cryptsetup luksClose ${DRIVE}1 Test partition sudo cryptsetup luksOpen /dev/${DRIVE}1 ${DRIVE}1 ## Mount partition  mkdir -p /media/`whoami`/${DRIVE}1 sudo mount /dev/mapper/${DRIVE}1 /media/`whoami`/${DRIVE}1 # fix permission sudo chown -R `whoami`:users /media/`whoami`/${DRIVE}1 # clean-up sudo umount /media/`whoami`/${DRIVE}1 rm -rf /media/`whoami`/${DRIVE}1 sudo cryptsetup luksClose ${DRIVE}1 </description>
            <content type="html"><![CDATA[<h1 id="prerequisite">prerequisite</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo apt install cryptsetup parted
<span style="color:#fff;font-weight:bold">export</span> DRIVE=sdc
</code></pre></div><h1 id="create-partition">Create partition</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo dd <span style="color:#fff;font-weight:bold">if</span>=/dev/zero of=/dev/$DRIVE bs=<span style="color:#ff0;font-weight:bold">512</span> count=<span style="color:#ff0;font-weight:bold">1</span> conv=notrunc
sudo parted /dev/$DRIVE
(parted) mkpart primary ext4 0% 100%
(parted) print
(parted) quit
</code></pre></div><h1 id="encrypt-partition">Encrypt partition</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#007f7f"># Encrypt the partition with password</span>
sudo cryptsetup --verbose --verify-passphrase luksFormat /dev/<span style="color:#0ff;font-weight:bold">${</span>DRIVE<span style="color:#0ff;font-weight:bold">}</span><span style="color:#ff0;font-weight:bold">1</span>

<span style="color:#007f7f"># Open luks with password above</span>
sudo cryptsetup luksOpen /dev/<span style="color:#0ff;font-weight:bold">${</span>DRIVE<span style="color:#0ff;font-weight:bold">}</span><span style="color:#ff0;font-weight:bold">1</span> <span style="color:#0ff;font-weight:bold">${</span>DRIVE<span style="color:#0ff;font-weight:bold">}</span><span style="color:#ff0;font-weight:bold">1</span>
<span style="color:#007f7f"># Create ext4 filesystem</span>
sudo mkfs.ext4 /dev/mapper/<span style="color:#0ff;font-weight:bold">${</span>DRIVE<span style="color:#0ff;font-weight:bold">}</span><span style="color:#ff0;font-weight:bold">1</span>
<span style="color:#007f7f"># clean-up luks</span>
sudo cryptsetup luksClose <span style="color:#0ff;font-weight:bold">${</span>DRIVE<span style="color:#0ff;font-weight:bold">}</span><span style="color:#ff0;font-weight:bold">1</span>
</code></pre></div><h1 id="test-partition">Test partition</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo cryptsetup luksOpen /dev/<span style="color:#0ff;font-weight:bold">${</span>DRIVE<span style="color:#0ff;font-weight:bold">}</span><span style="color:#ff0;font-weight:bold">1</span> <span style="color:#0ff;font-weight:bold">${</span>DRIVE<span style="color:#0ff;font-weight:bold">}</span><span style="color:#ff0;font-weight:bold">1</span>

<span style="color:#007f7f">##  Mount partition </span>
mkdir -p /media/<span style="color:#0ff;font-weight:bold">`</span>whoami<span style="color:#0ff;font-weight:bold">`</span>/<span style="color:#0ff;font-weight:bold">${</span>DRIVE<span style="color:#0ff;font-weight:bold">}</span><span style="color:#ff0;font-weight:bold">1</span>
sudo mount /dev/mapper/<span style="color:#0ff;font-weight:bold">${</span>DRIVE<span style="color:#0ff;font-weight:bold">}</span><span style="color:#ff0;font-weight:bold">1</span> /media/<span style="color:#0ff;font-weight:bold">`</span>whoami<span style="color:#0ff;font-weight:bold">`</span>/<span style="color:#0ff;font-weight:bold">${</span>DRIVE<span style="color:#0ff;font-weight:bold">}</span><span style="color:#ff0;font-weight:bold">1</span>

<span style="color:#007f7f"># fix permission</span>
sudo chown -R <span style="color:#0ff;font-weight:bold">`</span>whoami<span style="color:#0ff;font-weight:bold">`</span>:users /media/<span style="color:#0ff;font-weight:bold">`</span>whoami<span style="color:#0ff;font-weight:bold">`</span>/<span style="color:#0ff;font-weight:bold">${</span>DRIVE<span style="color:#0ff;font-weight:bold">}</span><span style="color:#ff0;font-weight:bold">1</span>

<span style="color:#007f7f"># clean-up</span>
sudo umount /media/<span style="color:#0ff;font-weight:bold">`</span>whoami<span style="color:#0ff;font-weight:bold">`</span>/<span style="color:#0ff;font-weight:bold">${</span>DRIVE<span style="color:#0ff;font-weight:bold">}</span><span style="color:#ff0;font-weight:bold">1</span>
rm -rf /media/<span style="color:#0ff;font-weight:bold">`</span>whoami<span style="color:#0ff;font-weight:bold">`</span>/<span style="color:#0ff;font-weight:bold">${</span>DRIVE<span style="color:#0ff;font-weight:bold">}</span><span style="color:#ff0;font-weight:bold">1</span>

sudo cryptsetup luksClose <span style="color:#0ff;font-weight:bold">${</span>DRIVE<span style="color:#0ff;font-weight:bold">}</span><span style="color:#ff0;font-weight:bold">1</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM Internals - Structural Components</title>
            <link>/posts/2020/11/uvm-internals-structural-components/</link>
            <pubDate>Sat, 07 Nov 2020 00:13:06 +0200</pubDate>
            
            <guid>/posts/2020/11/uvm-internals-structural-components/</guid>
            <description>Components UVM defines set of standard building blocks to build test hierarchy. All components inherit from uvm_component. but some components have more bells and whistles than others.
uvm_comps.svh starting with src/comps/uvm_comps.svh where components live, we can see there are two types
 Utility components Structural components  `include &amp;#34;comps/uvm_pair.svh&amp;#34; `include &amp;#34;comps/uvm_policies.svh&amp;#34; `include &amp;#34;comps/uvm_in_order_comparator.svh&amp;#34; `include &amp;#34;comps/uvm_algorithmic_comparator.svh&amp;#34; `include &amp;#34;comps/uvm_random_stimulus.svh&amp;#34; `include &amp;#34;comps/uvm_subscriber.svh&amp;#34; `include &amp;#34;comps/uvm_monitor.svh&amp;#34; `include &amp;#34;comps/uvm_driver.svh&amp;#34; `include &amp;#34;comps/uvm_push_driver.svh&amp;#34; `include &amp;#34;comps/uvm_scoreboard.svh&amp;#34; `include &amp;#34;comps/uvm_agent.svh&amp;#34; `include &amp;#34;comps/uvm_env.</description>
            <content type="html"><![CDATA[<h1 id="components">Components</h1>
<p>UVM defines set  of standard building blocks to build test hierarchy. All components inherit from <code>uvm_component</code>. but some components have more bells and whistles than others.</p>
<h1 id="uvm_compssvh">uvm_comps.svh</h1>
<p>starting with <code>src/comps/uvm_comps.svh</code> where components live, we can see there are two types</p>
<ul>
<li>Utility components</li>
<li>Structural components</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"> `include <span style="color:#0ff;font-weight:bold">&#34;comps/uvm_pair.svh&#34;</span>
 `include <span style="color:#0ff;font-weight:bold">&#34;comps/uvm_policies.svh&#34;</span>
 `include <span style="color:#0ff;font-weight:bold">&#34;comps/uvm_in_order_comparator.svh&#34;</span>
 `include <span style="color:#0ff;font-weight:bold">&#34;comps/uvm_algorithmic_comparator.svh&#34;</span>
 `include <span style="color:#0ff;font-weight:bold">&#34;comps/uvm_random_stimulus.svh&#34;</span>
 `include <span style="color:#0ff;font-weight:bold">&#34;comps/uvm_subscriber.svh&#34;</span>

 `include <span style="color:#0ff;font-weight:bold">&#34;comps/uvm_monitor.svh&#34;</span>
 `include <span style="color:#0ff;font-weight:bold">&#34;comps/uvm_driver.svh&#34;</span>
 `include <span style="color:#0ff;font-weight:bold">&#34;comps/uvm_push_driver.svh&#34;</span>
 `include <span style="color:#0ff;font-weight:bold">&#34;comps/uvm_scoreboard.svh&#34;</span> 
 `include <span style="color:#0ff;font-weight:bold">&#34;comps/uvm_agent.svh&#34;</span>
 `include <span style="color:#0ff;font-weight:bold">&#34;comps/uvm_env.svh&#34;</span>
 `include <span style="color:#0ff;font-weight:bold">&#34;comps/uvm_test.svh&#34;</span>
</code></pre></div><h1 id="the-vanilla-components">The vanilla components</h1>
<p>There are several components which are just extension of <code>uvm_component</code> without adding any further functionality.</p>
<p>for example <code>uvm_env</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">virtual class uvm_env extends uvm_component;

  <span style="color:#fff;font-weight:bold">function</span> new (<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;env&#34;</span>, uvm_component parent=null);
    super.new(name,parent);
  <span style="color:#fff;font-weight:bold">endfunction</span>

  <span style="color:#fff;font-weight:bold">const</span> static <span style="color:#fff;font-weight:bold">string</span> type_name = <span style="color:#0ff;font-weight:bold">&#34;uvm_env&#34;</span>;

  virtual <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">string</span> get_type_name ();
    <span style="color:#fff;font-weight:bold">return</span> type_name;
  <span style="color:#fff;font-weight:bold">endfunction</span>

endclass

</code></pre></div><p>The list of wrapper components are</p>
<ul>
<li>uvm_env</li>
<li>uvm_monitor</li>
<li>uvm_scoreboard</li>
<li>uvm_test</li>
</ul>
<p>That said, There are two components that add attributes to base <code>uvm_component</code></p>
<ul>
<li>uvm_driver</li>
<li>uvm_agent</li>
</ul>
<h1 id="uvm_driver">uvm_driver</h1>
<p><code>uvm_driver</code> adds <code>seq_item_port</code> for sequencer connection.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  uvm_seq_item_pull_port #(REQ, RSP) seq_item_port;

  uvm_seq_item_pull_port #(REQ, RSP) seq_item_prod_if; <span style="color:#007f7f">// alias
</span><span style="color:#007f7f"></span>
  uvm_analysis_port #(RSP) rsp_port;
</code></pre></div><p>and <code>new</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">function</span> new (<span style="color:#fff;font-weight:bold">string</span> name, uvm_component parent);
    super.new(name, parent);
    seq_item_port    = new(<span style="color:#0ff;font-weight:bold">&#34;seq_item_port&#34;</span>, this);
    rsp_port         = new(<span style="color:#0ff;font-weight:bold">&#34;rsp_port&#34;</span>, this);
    seq_item_prod_if = seq_item_port;
  <span style="color:#fff;font-weight:bold">endfunction</span> <span style="color:#007f7f">// new
</span></code></pre></div><p>To go off on a tangent here, I wanted to know what <code>seq_item_prod_if</code> is. Grep&rsquo;ing through &lsquo;src&rsquo;, I found it in <code>ovm2uvm.pl</code> which indicated it was deprecated ovm artifact. Quick look at OVM specs and i confirmed it.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl">    <span style="color:#007f7f"># FIX+MARKER seq_item_prod_if -&gt; seq_item_port</span>
    $t =~ <span style="color:#0ff;font-weight:bold">s/seq_item_prod_if.*/$&amp; \/\/ $opt_marker NOTE seq_item_prod_if has been replaced with seq_item_port \n/g</span>;
    $t =~ <span style="color:#0ff;font-weight:bold">s/seq_item_prod_if/seq_item_port/g</span>;
    
</code></pre></div><h1 id="uvm_agent">uvm_agent</h1>
<p><code>uvn_agent</code> adds only one attribute <code>is_active</code> to mark agent as active or passive.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  uvm_active_passive_enum is_active = UVM_ACTIVE;
</code></pre></div><p><code>is_active</code> is set by setting <code>is_active</code> in uvm_config with specific path of that agent.</p>
<p>there is also <code>get_is_active</code> which returns the current value.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> build_phase(uvm_phase phase);
    <span style="color:#fff;font-weight:bold">int</span> active;
    super.build_phase(phase);
    <span style="color:#fff;font-weight:bold">if</span>(get_config_int(<span style="color:#0ff;font-weight:bold">&#34;is_active&#34;</span>, active)) is_active = uvm_active_passive_enum&#39;(active);
  <span style="color:#fff;font-weight:bold">endfunction</span>

  <span style="color:#007f7f">// the active/passive nature of the agent.
</span><span style="color:#007f7f"></span>
  virtual <span style="color:#fff;font-weight:bold">function</span> uvm_active_passive_enum get_is_active();
    <span style="color:#fff;font-weight:bold">return</span> is_active;
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Device Tree hello world</title>
            <link>/posts/2020/09/device-tree-hello-world/</link>
            <pubDate>Sun, 06 Sep 2020 16:05:18 +0200</pubDate>
            
            <guid>/posts/2020/09/device-tree-hello-world/</guid>
            <description>Device Tree is defined as
 In computing, a device tree (also written devicetree) is a data structure describing the hardware components of a particular computer so that the operating system&amp;rsquo;s kernel can use and manage those components, including the CPU or CPUs, the memory, the buses and the peripherals.
 Basically, device tree defines SOC architecture for operating system or boot-loader. This is widely used in embedded systems where the system is not configurable and not going to change.</description>
            <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Device_tree">Device Tree</a> is defined as</p>
<blockquote>
<p>In computing, a device tree (also written devicetree) is a data structure describing the hardware components of a particular computer so that the operating system&rsquo;s kernel can use and manage those components, including the CPU or CPUs, the memory, the buses and the peripherals.</p>
</blockquote>
<p>Basically, device tree defines SOC architecture for operating system or boot-loader. This is widely used in embedded systems where the system is not configurable and not going to change.</p>
<p>This is not a problem on PCs because of things like BIOS enumeration through ACPI and you can add whatever behind PCI and it can be probed.</p>
<p>Anyway, i read the first two chapters of <a href="https://github.com/devicetree-org/devicetree-specification/releases/tag/v0.3">specification</a> and i thought it was enough to play around with <code>dtc</code> which part of <code>device-tree-compiler</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">apt install device-tree-compiler
</code></pre></div><h1 id="device-tree-crash-course">Device tree crash course</h1>
<p>I am not going to repeat the spec. but to sum up,</p>
<ul>
<li>It&rsquo;s a tree of nodes (DAG)</li>
<li>each node have pairs of property/values.</li>
<li>The devicetree has a single root node of which all other device nodes are descendants. The full path to the root node is /.</li>
<li>All devicetrees shall have a root node and the following nodes shall be present at the root of all devicetrees: one <code>/cpus/</code> and at least one <code>/memory</code></li>
</ul>
<p>That&rsquo;s it.</p>
<pre tabindex="0"><code>/dts-v1/;

/ {
    compatible = &quot;vendor,model&quot;;
	cpus {
		cpu1: cpu@1 {
			compatible = &quot;vendor,model&quot;;
			clock-frequency = &lt;650000000&gt;;
			device_type = &quot;cpu&quot;;
			reg = &lt;1&gt;;
		};
	};

    memory: memory@80000000 {
		device_type = &quot;memory&quot;;
		reg = &lt;0x00000000 0x80000000 0x00000000 0x40000000&gt;;
	};

};
</code></pre><p>Properties can take one the following values</p>
<ul>
<li>empty</li>
<li>u32</li>
<li>u64</li>
<li>phandle</li>
<li>string</li>
<li>prop-encoded-array</li>
<li>stringlist</li>
</ul>
<p>more details and examples at sections 2.2 of <a href="https://github.com/devicetree-org/devicetree-specification/releases/tag/v0.3">specs</a></p>
<h1 id="compile-and-de-compile-device-tree">Compile and de-compile device tree</h1>
<p>Using <code>dtc</code>, we can compile dts into dtb(device tree blob).</p>
<pre tabindex="0"><code>dtc -I dts  -O dtb -o 1.dtb  1.dts 
</code></pre><p>we can de-compile the blob back to dts.</p>
<pre tabindex="0"><code>dtc -I dtb  -O dts -o 1.dtsd  1.dtb
</code></pre><p>Note, the specs define the format for the binary blob. with the following, i guess it would be fun to write a parser for it.</p>
<pre tabindex="0"><code>struct fdt_header {
uint32_t magic;
uint32_t totalsize;
uint32_t off_dt_struct;
uint32_t off_dt_strings;
uint32_t off_mem_rsvmap;
uint32_t version;
uint32_t last_comp_version;
uint32_t boot_cpuid_phys;
uint32_t size_dt_strings;
uint32_t size_dt_struct;
};
</code></pre><p>we can see this realy quick with <code>hexdump</code> as specs says the <code>magic</code>value is <code>0xd00dfeed</code>.
Note, we get <code>0dd0 edfe</code> because of endiance.</p>
<pre tabindex="0"><code>$ hexdump 1.dtb 
0000000 0dd0 edfe 0000 3f01 0000 3800 0000 1401
</code></pre><h1 id="interrupts">Interrupts</h1>
<p>I think that interrupts is most complicated part of specs.Here is quick overview</p>
<p>the spec defines <code>interrupt-generating devices</code></p>
<blockquote>
<p>The physical wiring of an interrupt source to an interrupt controller is represented in the devicetree with the interrupt-parent property. Nodes that represent interrupt-generating devices contain an interrupt-parent property which has a phandle value that points to the device to which the device’s interrupts are routed, typically an interrupt controller. If an interrupt-generating device does not have an interrupt-parent property, its interrupt parent is assumed to be its devicetree parent.</p>
</blockquote>
<p>and <code>interrupt domain</code> is defined as:</p>
<blockquote>
<p>An interrupt domain is the context in which an interrupt specifier is interpreted. The root of the domain is either (1) an interrupt controller or (2) an interrupt nexus.</p>
<ul>
<li>An interrupt controller</li>
<li>An interrupt nexus</li>
</ul>
</blockquote>
<p>Looking at any dts in linux kernel say <a href="https://elixir.bootlin.com/linux/latest/source/arch/arm/boot/dts/armada-375.dtsi">this one</a>. The interrupt controller has the properties</p>
<ul>
<li>interrupt-controller</li>
<li>interrupt-cells which defines the interrupt specifier in the interrupt-generating device</li>
</ul>
<pre tabindex="0"><code>			gic: interrupt-controller@d000 {
				compatible = &quot;arm,cortex-a9-gic&quot;;
				#interrupt-cells = &lt;3&gt;;
				#size-cells = &lt;0&gt;;
				interrupt-controller;
				reg = &lt;0xd000 0x1000&gt;,
				      &lt;0xc100 0x100&gt;;
			};

</code></pre><p>somewhere in the same dts, there are interrupt devices with <code>interrupts</code> property</p>
<pre tabindex="0"><code>			rtc: rtc@10300 {
				compatible = &quot;marvell,orion-rtc&quot;;
				reg = &lt;0x10300 0x20&gt;;
				interrupts = &lt;GIC_SPI 21 IRQ_TYPE_LEVEL_HIGH&gt;;
			};
</code></pre>]]></content>
        </item>
        
        <item>
            <title>UVM Report Server</title>
            <link>/posts/2020/09/uvm-report-server/</link>
            <pubDate>Fri, 04 Sep 2020 03:13:06 +0200</pubDate>
            
            <guid>/posts/2020/09/uvm-report-server/</guid>
            <description>UVM Class reference manual define uvm_report_server
 uvm_report_handler. None of its methods are intended to be called by normal testbench uvm_report_server is a global server that processes all of the reports generated by an code, although in some circumstances the virtual methods process_report and/or compose_uvm_info may be overloaded in a subclass.
 Define uvm_report_server To change the message format, say CSV, compase_message can be used to return re-formatted message.
compose_message documentation states:</description>
            <content type="html"><![CDATA[<p>UVM Class reference manual define <code>uvm_report_server</code></p>
<blockquote>
<p>uvm_report_handler. None of its methods are intended to be called by normal testbench
uvm_report_server is a global server that processes all of the reports generated by an
code, although in some circumstances the virtual methods process_report and/or
compose_uvm_info may be overloaded in a subclass.</p>
</blockquote>
<h1 id="define-uvm_report_server">Define uvm_report_server</h1>
<p>To change the message format, say CSV, <code>compase_message</code> can be used to return re-formatted message.</p>
<p><code>compose_message</code> documentation states:</p>
<blockquote>
<p>compose_message</p>
<p>Constructs the actual string sent to the file or command line from the severity,
component name, report id, and the message itself.
Expert users can overload this method to customize report formatting.</p>
</blockquote>
<p>The following snippet, uses</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class server extends uvm_report_server;
	<span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">string</span> compose_message(
	uvm_severity severity,
	<span style="color:#fff;font-weight:bold">string</span> name,
	<span style="color:#fff;font-weight:bold">string</span> id,
	<span style="color:#fff;font-weight:bold">string</span> message,
	<span style="color:#fff;font-weight:bold">string</span> filename,
	<span style="color:#fff;font-weight:bold">int</span> line);

		<span style="color:#fff;font-weight:bold">return</span> ($sformatf(<span style="color:#0ff;font-weight:bold">&#34;%s,%s&#34;</span>,id,message));
	<span style="color:#fff;font-weight:bold">endfunction</span>
endclass
</code></pre></div><h1 id="override-report-server">Override report server</h1>
<p>The customer report server will be registered using static method <code>uvm_report_server::set_server</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">	server srv= new();

	<span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> start_of_simulation_phase(uvm_phase phase);
		uvm_report_server::set_server(srv);
	<span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><h1 id="putting-it-all-together">Putting it all together</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">
`include <span style="color:#0ff;font-weight:bold">&#34;uvm_macros.svh&#34;</span>

<span style="color:#fff;font-weight:bold">import</span> uvm_pkg::*;

class server extends uvm_report_server;
	<span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">string</span> compose_message(
	uvm_severity severity,
	<span style="color:#fff;font-weight:bold">string</span> name,
	<span style="color:#fff;font-weight:bold">string</span> id,
	<span style="color:#fff;font-weight:bold">string</span> message,
	<span style="color:#fff;font-weight:bold">string</span> filename,
	<span style="color:#fff;font-weight:bold">int</span> line);

		<span style="color:#fff;font-weight:bold">return</span> ($sformatf(<span style="color:#0ff;font-weight:bold">&#34;MESSAGE %s,%s&#34;</span>,id,message));
	<span style="color:#fff;font-weight:bold">endfunction</span>
endclass

class test extends uvm_test;
`uvm_component_utils(test)

	server srv= new();
	<span style="color:#fff;font-weight:bold">function</span>  new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, uvm_component parent=null);
		super.new(name, parent);
	<span style="color:#fff;font-weight:bold">endfunction</span>

	<span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> build_phase(uvm_phase phase);
		super.build_phase(phase);
	<span style="color:#fff;font-weight:bold">endfunction</span>

	<span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> start_of_simulation_phase(uvm_phase phase);
		uvm_report_server::set_server(srv);
	<span style="color:#fff;font-weight:bold">endfunction</span>

	<span style="color:#fff;font-weight:bold">task</span> run_phase(uvm_phase phase);
		phase.raise_objection(this);
		`uvm_warning(<span style="color:#0ff;font-weight:bold">&#34;MYID&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;Hello World report server&#34;</span>)
		phase.drop_objection(this);
	<span style="color:#fff;font-weight:bold">endtask</span>
endclass

<span style="color:#fff;font-weight:bold">module</span> top;
	<span style="color:#fff;font-weight:bold">initial</span> run_test(<span style="color:#0ff;font-weight:bold">&#34;test&#34;</span>);
<span style="color:#fff;font-weight:bold">endmodule</span>

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM Report Catcher</title>
            <link>/posts/2020/09/uvm-report-catcher/</link>
            <pubDate>Tue, 01 Sep 2020 03:13:06 +0200</pubDate>
            
            <guid>/posts/2020/09/uvm-report-catcher/</guid>
            <description>How to use UVM report catcher to change message attributes. Report catcher can&amp;rsquo;t change the message format. Report server can be used to change the format.
Report Catcher first we need to sub-class uvm_report_catcher and override catch. in this example,get_severity and get_id are used to filter messages. Then THROW is returned which passes the modified message.
class catcher extends uvm_report_catcher; function new(string name=&amp;#34;catcher&amp;#34;); super.new(name); endfunction function action_e catch(); if(get_severity() == UVM_WARNING&amp;amp;&amp;amp; get_id() == &amp;#34;MYID&amp;#34;) set_severity(UVM_ERROR); return THROW; endfunction endclass All getters and setters can be found at UVM report cat catcher</description>
            <content type="html"><![CDATA[<p>How to use UVM report catcher to change message attributes. Report catcher can&rsquo;t change the message format. Report server can be used to change the format.</p>
<h1 id="report-catcher">Report Catcher</h1>
<p>first we need to sub-class <code>uvm_report_catcher</code> and override <code>catch</code>. in this example,<code>get_severity</code> and <code>get_id</code> are used to filter messages. Then <code>THROW</code> is returned which passes the modified message.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class catcher extends uvm_report_catcher;
  <span style="color:#fff;font-weight:bold">function</span> new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;catcher&#34;</span>);
    super.new(name);
  <span style="color:#fff;font-weight:bold">endfunction</span>
  <span style="color:#fff;font-weight:bold">function</span> action_e catch();
    <span style="color:#fff;font-weight:bold">if</span>(get_severity() == UVM_WARNING&amp;&amp; get_id() == <span style="color:#0ff;font-weight:bold">&#34;MYID&#34;</span>)
      set_severity(UVM_ERROR);
    <span style="color:#fff;font-weight:bold">return</span> THROW;
  <span style="color:#fff;font-weight:bold">endfunction</span>
endclass
</code></pre></div><p>All getters and setters can be found at <a href="https://verificationacademy.com/verification-methodology-reference/uvm/docs_1.1a/html/files/base/uvm_report_catcher-svh.html">UVM report cat catcher</a></p>
<h1 id="register-report-catcher-callback">Register report catcher callback</h1>
<p>Create catcher callback</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">catcher cb= new(<span style="color:#0ff;font-weight:bold">&#34;catcher&#34;</span>);
</code></pre></div><p>At some point before run_phase, Register the callback with <code>uvm_report_cb</code>. That&rsquo;s it.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> start_of_simulation_phase(uvm_phase phase);
	uvm_report_cb::add(null, cb);
<span style="color:#fff;font-weight:bold">endfunction</span>

</code></pre></div><p>After promoting warning to Error, the following message will be printed</p>
<pre tabindex="0"><code>UVM_ERROR testbench.sv(35) @ 0: uvm_test_top [MYID] Hello World report_catcher
</code></pre><h1 id="putting-all-together">Putting all together</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">`include <span style="color:#0ff;font-weight:bold">&#34;uvm_macros.svh&#34;</span>

<span style="color:#fff;font-weight:bold">import</span> uvm_pkg::*;


class catcher extends uvm_report_catcher;
  <span style="color:#fff;font-weight:bold">function</span> new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;catcher&#34;</span>);
    super.new(name);
  <span style="color:#fff;font-weight:bold">endfunction</span>
  <span style="color:#fff;font-weight:bold">function</span> action_e catch();
    <span style="color:#fff;font-weight:bold">if</span>(get_severity() == UVM_WARNING&amp;&amp; get_id() == <span style="color:#0ff;font-weight:bold">&#34;MYID&#34;</span>)
      set_severity(UVM_ERROR);
    <span style="color:#fff;font-weight:bold">return</span> THROW;
  <span style="color:#fff;font-weight:bold">endfunction</span>
endclass

class test extends uvm_test;
`uvm_component_utils(test)

  catcher cb= new(<span style="color:#0ff;font-weight:bold">&#34;catcher&#34;</span>);
  <span style="color:#fff;font-weight:bold">function</span>  new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, uvm_component parent=null);
    super.new(name, parent);
  <span style="color:#fff;font-weight:bold">endfunction</span>

  <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> build_phase(uvm_phase phase);
    super.build_phase(phase);
  <span style="color:#fff;font-weight:bold">endfunction</span>

  <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> start_of_simulation_phase(uvm_phase phase);
    uvm_report_cb::add(null, cb);
  <span style="color:#fff;font-weight:bold">endfunction</span>

  <span style="color:#fff;font-weight:bold">task</span> run_phase(uvm_phase phase);
    phase.raise_objection(this);
    `uvm_warning(<span style="color:#0ff;font-weight:bold">&#34;MYID&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;Hello World report_catcher&#34;</span>)
    phase.drop_objection(this);
  <span style="color:#fff;font-weight:bold">endtask</span>
endclass

<span style="color:#fff;font-weight:bold">module</span> top;
  <span style="color:#fff;font-weight:bold">initial</span> run_test(<span style="color:#0ff;font-weight:bold">&#34;test&#34;</span>);
<span style="color:#fff;font-weight:bold">endmodule</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM Sequencer grab()</title>
            <link>/posts/2020/08/uvm-sequencer-grab/</link>
            <pubDate>Mon, 31 Aug 2020 03:13:06 +0200</pubDate>
            
            <guid>/posts/2020/08/uvm-sequencer-grab/</guid>
            <description>Hierarchical sequences Big part of sequencer functionality( ie. complexity) is sequence arbitration. That&amp;rsquo;s why we have the whole start_item and get_next_item thing AKA driver-sequence protocol.
In this example, I am using 2 sequences with p_sequencer. By default, the priority of all items from sequences are equal and default arbitration algorithm is fifo.
class my_sequence extends uvm_sequence#(my_transaction); `uvm_object_utils(my_sequence) `uvm_declare_p_sequencer(my_sequencer) function new(string name=&amp;#34;&amp;#34;); super.new(name); endfunction m_seq1 s1; m_seq2 s2; task body(); s1 = m_seq1::type_id::create(&amp;#34;s1&amp;#34;); s2 = m_seq2::type_id::create(&amp;#34;s2&amp;#34;); fork s1.</description>
            <content type="html"><![CDATA[<h1 id="hierarchical-sequences">Hierarchical sequences</h1>
<p>Big part of sequencer functionality( ie. complexity) is sequence arbitration. That&rsquo;s why we have the whole <code>start_item</code> and <code>get_next_item</code> thing AKA driver-sequence protocol.</p>
<p>In this example, I am using 2 sequences with <code>p_sequencer</code>. By default, the priority of all items from sequences are equal and default arbitration algorithm is fifo.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class my_sequence extends uvm_sequence#(my_transaction);
  `uvm_object_utils(my_sequence)
  `uvm_declare_p_sequencer(my_sequencer)
  	<span style="color:#fff;font-weight:bold">function</span>  new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>);
		super.new(name);
	<span style="color:#fff;font-weight:bold">endfunction</span>

  	m_seq1 s1;
    m_seq2 s2;
    
  	<span style="color:#fff;font-weight:bold">task</span> body();
      
      s1 = m_seq1::type_id::create(<span style="color:#0ff;font-weight:bold">&#34;s1&#34;</span>);
      s2 = m_seq2::type_id::create(<span style="color:#0ff;font-weight:bold">&#34;s2&#34;</span>);
        
      <span style="color:#fff;font-weight:bold">fork</span>
        s1.start(p_sequencer);
        s2.start(p_sequencer);
      <span style="color:#fff;font-weight:bold">join</span>
    <span style="color:#fff;font-weight:bold">endtask</span>: body
endclass
</code></pre></div><p>Sequencer alternates between sequences. So, we have item from each sequence in order they were called from virtual sequence.</p>
<pre tabindex="0"><code>#  0
# 10
#  1
# 11
#  2
# 12
#  3
# 13
#  4
# 14
</code></pre><h1 id="grab-the-sequencer">grab the sequencer</h1>
<p>In some scenarios (like in interrupt handling), it&rsquo;s needed to steal the sequencer to send all the items from a given sequence. That&rsquo;s why there is <code>grab()</code>.</p>
<p><code>grab</code> allows the sequence to send all transactions until sequence call <code>ungrab</code>. After that sequencer will continue getting items from other sequences</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">      grab();
      <span style="color:#fff;font-weight:bold">for</span>(<span style="color:#fff;font-weight:bold">int</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#ff0;font-weight:bold">5</span>; i++) <span style="color:#fff;font-weight:bold">begin</span>
        item = new();
        start_item(item);
        item.i = i + <span style="color:#ff0;font-weight:bold">10</span>;
        finish_item(item);
      <span style="color:#fff;font-weight:bold">end</span>
      ungrab();
</code></pre></div><p>here is the output with <code>grab</code>. all the items from my_seq2 is send first then the items from my_seq1.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"># <span style="color:#ff0;font-weight:bold">10</span>
# <span style="color:#ff0;font-weight:bold">11</span>
# <span style="color:#ff0;font-weight:bold">12</span>
# <span style="color:#ff0;font-weight:bold">13</span>
# <span style="color:#ff0;font-weight:bold">14</span>
#  <span style="color:#ff0;font-weight:bold">0</span>
#  <span style="color:#ff0;font-weight:bold">1</span>
#  <span style="color:#ff0;font-weight:bold">2</span>
#  <span style="color:#ff0;font-weight:bold">3</span>
#  <span style="color:#ff0;font-weight:bold">4</span>

</code></pre></div><h1 id="putting-it-all-together">Putting it all together</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">`include <span style="color:#0ff;font-weight:bold">&#34;uvm_macros.svh&#34;</span>

<span style="color:#fff;font-weight:bold">import</span> uvm_pkg::*;


class my_transaction extends uvm_sequence_item;
  rand <span style="color:#fff;font-weight:bold">logic</span>[<span style="color:#ff0;font-weight:bold">3</span>:<span style="color:#ff0;font-weight:bold">0</span>] i;
endclass

class m_seq1 extends uvm_sequence#(my_transaction);
  `uvm_object_utils(m_seq1)
  	<span style="color:#fff;font-weight:bold">function</span>  new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>);
		super.new(name);
	<span style="color:#fff;font-weight:bold">endfunction</span>

    <span style="color:#fff;font-weight:bold">task</span> body();
      my_transaction item;
      <span style="color:#fff;font-weight:bold">for</span>(<span style="color:#fff;font-weight:bold">int</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#ff0;font-weight:bold">5</span>; i++) <span style="color:#fff;font-weight:bold">begin</span>
        item = new();
        start_item(item);
        item.i = i ;
        finish_item(item);
      <span style="color:#fff;font-weight:bold">end</span>
    <span style="color:#fff;font-weight:bold">endtask</span>: body
endclass

class m_seq2 extends uvm_sequence#(my_transaction);
  `uvm_object_utils(m_seq2)
  	<span style="color:#fff;font-weight:bold">function</span>  new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>);
		super.new(name);
	<span style="color:#fff;font-weight:bold">endfunction</span>

    <span style="color:#fff;font-weight:bold">task</span> body();
      my_transaction item;
      grab();
      <span style="color:#fff;font-weight:bold">for</span>(<span style="color:#fff;font-weight:bold">int</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#ff0;font-weight:bold">5</span>; i++) <span style="color:#fff;font-weight:bold">begin</span>
        item = new();
        start_item(item);
        item.i = i + <span style="color:#ff0;font-weight:bold">10</span>;
        finish_item(item);
      <span style="color:#fff;font-weight:bold">end</span>
      ungrab();
    <span style="color:#fff;font-weight:bold">endtask</span>: body
endclass


<span style="color:#fff;font-weight:bold">typedef</span> uvm_sequencer #(my_transaction) my_sequencer;

<span style="color:#007f7f">/*
</span><span style="color:#007f7f">*/</span>
class my_sequence extends uvm_sequence#(my_transaction);
  `uvm_object_utils(my_sequence)
  `uvm_declare_p_sequencer(my_sequencer)
  	<span style="color:#fff;font-weight:bold">function</span>  new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>);
		super.new(name);
	<span style="color:#fff;font-weight:bold">endfunction</span>

  	m_seq1 s1;
    m_seq2 s2;
    
  	<span style="color:#fff;font-weight:bold">task</span> body();
      
      s1 = m_seq1::type_id::create(<span style="color:#0ff;font-weight:bold">&#34;s1&#34;</span>);
      s2 = m_seq2::type_id::create(<span style="color:#0ff;font-weight:bold">&#34;s2&#34;</span>);
        
      <span style="color:#fff;font-weight:bold">fork</span>
        s1.start(p_sequencer);
        s2.start(p_sequencer);
      <span style="color:#fff;font-weight:bold">join</span>
    <span style="color:#fff;font-weight:bold">endtask</span>: body
endclass

<span style="color:#007f7f">/*
</span><span style="color:#007f7f">*/</span>
class driver extends uvm_driver#(my_transaction);
	`uvm_component_utils(driver)

	<span style="color:#fff;font-weight:bold">function</span>  new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, uvm_component parent=null);
		super.new(name, parent);
	<span style="color:#fff;font-weight:bold">endfunction</span>

	<span style="color:#fff;font-weight:bold">task</span> run_phase(uvm_phase phase);
      my_transaction req;
      
      <span style="color:#fff;font-weight:bold">forever</span> <span style="color:#fff;font-weight:bold">begin</span>
         seq_item_port.get_next_item(req);
         <span style="color:#fff;font-weight:bold">$display</span>(req.i);
         seq_item_port.item_done();
      <span style="color:#fff;font-weight:bold">end</span>
	<span style="color:#fff;font-weight:bold">endtask</span>
endclass

<span style="color:#007f7f">/*
</span><span style="color:#007f7f">*/</span>
class my_agent extends uvm_agent;
  	`uvm_component_utils(my_agent)
  
  	driver m_drv;
    my_sequencer m_seqr;
  
	<span style="color:#fff;font-weight:bold">function</span>  new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, uvm_component parent=null);
		super.new(name, parent);
	<span style="color:#fff;font-weight:bold">endfunction</span>


	<span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> build_phase(uvm_phase phase);
		super.build_phase(phase);
		m_drv = driver::type_id::create(<span style="color:#0ff;font-weight:bold">&#34;m_drv&#34;</span>, this);
        m_seqr= my_sequencer::type_id::create(<span style="color:#0ff;font-weight:bold">&#34;m_seqr&#34;</span>, this);
	<span style="color:#fff;font-weight:bold">endfunction</span>

	<span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> connect_phase(uvm_phase phase);
      super.connect_phase(phase);
      m_drv.seq_item_port.connect(m_seqr.seq_item_export);
	<span style="color:#fff;font-weight:bold">endfunction</span>
endclass

<span style="color:#007f7f">/*
</span><span style="color:#007f7f">*/</span>
class my_env extends uvm_env;
	`uvm_component_utils(my_env)

  	my_agent m_agt;
  
	<span style="color:#fff;font-weight:bold">function</span>  new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, uvm_component parent=null);
		super.new(name, parent);
	<span style="color:#fff;font-weight:bold">endfunction</span>

	<span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> build_phase(uvm_phase phase);
		super.build_phase(phase);
      	m_agt = my_agent::type_id::create(<span style="color:#0ff;font-weight:bold">&#34;m_agt&#34;</span>, this);
	<span style="color:#fff;font-weight:bold">endfunction</span>

	<span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> connect_phase(uvm_phase phase);
      	super.connect_phase(phase);
	<span style="color:#fff;font-weight:bold">endfunction</span>
endclass


<span style="color:#007f7f">/*
</span><span style="color:#007f7f">*/</span>
class my_test extends uvm_test;
`uvm_component_utils(my_test)

  my_env m_env;
  my_sequence m_seq;
  
  <span style="color:#fff;font-weight:bold">function</span>  new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, uvm_component parent=null);
      super.new(name, parent);
  <span style="color:#fff;font-weight:bold">endfunction</span>

  <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> build_phase(uvm_phase phase);
      super.build_phase(phase);
      m_env = my_env::type_id::create(<span style="color:#0ff;font-weight:bold">&#34;m_env&#34;</span>, this);
      m_seq = my_sequence::type_id::create(<span style="color:#0ff;font-weight:bold">&#34;m_seq&#34;</span>);
  <span style="color:#fff;font-weight:bold">endfunction</span>

  <span style="color:#fff;font-weight:bold">task</span> run_phase(uvm_phase phase);
      phase.raise_objection(this);
      m_seq.start(m_env.m_agt.m_seqr, null);
      phase.drop_objection(this);
  <span style="color:#fff;font-weight:bold">endtask</span>
endclass

<span style="color:#007f7f">/*
</span><span style="color:#007f7f">*/</span>
<span style="color:#fff;font-weight:bold">module</span> top;
  <span style="color:#fff;font-weight:bold">initial</span> run_test(<span style="color:#0ff;font-weight:bold">&#34;my_test&#34;</span>);
<span style="color:#fff;font-weight:bold">endmodule</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>uvm_config_db spellchecker</title>
            <link>/posts/2020/08/uvm_config_db-spellchecker/</link>
            <pubDate>Mon, 31 Aug 2020 03:13:06 +0200</pubDate>
            
            <guid>/posts/2020/08/uvm_config_db-spellchecker/</guid>
            <description>Fun trivia i didn&amp;rsquo;t know about UVM config DB. It has build-in spell checker for resource lookup. Who Knew!
The class for spell checker is uvm_spell_chkr. grep&amp;rsquo;ing trough UVM-1.1d, i found it&amp;rsquo;s used once inside uvm_resource.svh
function bit spell_check(string s); return uvm_spell_chkr#(uvm_resource_types::rsrc_q_t)::check(rtab, s); endfunction looking at check, It seems like poorman&amp;rsquo;s spell checker for resource names.
[.........] $display(&amp;#34;%s not located&amp;#34;, s); // if (min == max) then the string table is empty  if(min == max) begin $display(&amp;#34; no alternatives to suggest&amp;#34;); return 0; end // dump all the alternatives with the minimum distance  foreach(min_key[i]) begin $display(&amp;#34; did you mean %s?</description>
            <content type="html"><![CDATA[<p>Fun trivia i didn&rsquo;t know about UVM config DB. It has build-in spell checker for resource lookup. Who Knew!</p>
<p>The class for spell checker is <code>uvm_spell_chkr</code>. grep&rsquo;ing trough UVM-1.1d, i found it&rsquo;s used once inside <code>uvm_resource.svh</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">bit</span> spell_check(<span style="color:#fff;font-weight:bold">string</span> s);
    <span style="color:#fff;font-weight:bold">return</span> uvm_spell_chkr#(uvm_resource_types::rsrc_q_t)::check(rtab, s);
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p>looking at <code>check</code>, It seems like poorman&rsquo;s spell checker for resource names.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    [.........]
    <span style="color:#fff;font-weight:bold">$display</span>(<span style="color:#0ff;font-weight:bold">&#34;%s not located&#34;</span>, s);

    <span style="color:#007f7f">// if (min == max) then the string table is empty
</span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">if</span>(min == max) <span style="color:#fff;font-weight:bold">begin</span>
      <span style="color:#fff;font-weight:bold">$display</span>(<span style="color:#0ff;font-weight:bold">&#34;  no alternatives to suggest&#34;</span>);
      <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
    <span style="color:#fff;font-weight:bold">end</span>

    <span style="color:#007f7f">// dump all the alternatives with the minimum distance
</span><span style="color:#007f7f"></span>    foreach(min_key[i]) <span style="color:#fff;font-weight:bold">begin</span>
      <span style="color:#fff;font-weight:bold">$display</span>(<span style="color:#0ff;font-weight:bold">&#34;  did you mean %s?&#34;</span>, min_key[i]);
    <span style="color:#fff;font-weight:bold">end</span>

</code></pre></div><p>And <code>spell_check</code> is called from lookup_name</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">function</span> uvm_resource_types::rsrc_q_t lookup_name(<span style="color:#fff;font-weight:bold">string</span> scope = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>,
                                                    <span style="color:#fff;font-weight:bold">string</span> name,
                                                    uvm_resource_base type_handle = null,
                                                    <span style="color:#fff;font-weight:bold">bit</span> rpterr = <span style="color:#ff0;font-weight:bold">1</span>);
  [...]
    <span style="color:#fff;font-weight:bold">if</span>((rpterr &amp;&amp; !spell_check(name)) || (!rpterr &amp;&amp; !rtab.exists(name))) <span style="color:#fff;font-weight:bold">begin</span>
      <span style="color:#fff;font-weight:bold">return</span> q;
    <span style="color:#fff;font-weight:bold">end</span>
</code></pre></div><p>And finally,<code>lookup_name</code> is called with hard-codded 0 to <code>rpterr</code>. which means it&rsquo;s disable for <code>config_db::get</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">function</span> uvm_resource_types::rsrc_q_t lookup_regex_names(<span style="color:#fff;font-weight:bold">string</span> scope,
                                                           <span style="color:#fff;font-weight:bold">string</span> name,
                                                           uvm_resource_base type_handle = null);
      [.....]
      result_q = lookup_name(scope, name, type_handle, <span style="color:#ff0;font-weight:bold">0</span>);
</code></pre></div><p>luckily, <code>exists</code> provide an argument to enable spell check. for the example below, it will print</p>
<pre tabindex="0"><code> nama not located
   did you mean name?
   did you mean namg?
</code></pre><h1 id="putting-it-all-together">Putting it all together</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">`include <span style="color:#0ff;font-weight:bold">&#34;uvm_macros.svh&#34;</span>

<span style="color:#fff;font-weight:bold">import</span> uvm_pkg::*;


class test extends uvm_test;
`uvm_component_utils(test)
<span style="color:#fff;font-weight:bold">int</span> name=<span style="color:#ff0;font-weight:bold">5</span>,name1;

<span style="color:#fff;font-weight:bold">function</span>  new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, uvm_component parent=null);
	super.new(name, parent);
<span style="color:#fff;font-weight:bold">endfunction</span>

<span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> build_phase(uvm_phase phase);
	super.build_phase(phase);
<span style="color:#fff;font-weight:bold">endfunction</span>

<span style="color:#fff;font-weight:bold">task</span> run_phase(uvm_phase phase);
	phase.raise_objection(this);
  `uvm_warning(<span style="color:#0ff;font-weight:bold">&#34;Test&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;Hello World!&#34;</span>)
  uvm_config_db#(<span style="color:#fff;font-weight:bold">int</span>)::set(null,<span style="color:#0ff;font-weight:bold">&#34;*&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;name&#34;</span>,name);
  uvm_config_db#(<span style="color:#fff;font-weight:bold">int</span>)::set(null,<span style="color:#0ff;font-weight:bold">&#34;*&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;namg&#34;</span>,name);
  uvm_config_db#(<span style="color:#fff;font-weight:bold">int</span>)::get(null,<span style="color:#0ff;font-weight:bold">&#34;*&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;nama&#34;</span>,name1);
  uvm_config_db#(<span style="color:#fff;font-weight:bold">int</span>)::exists(null,<span style="color:#0ff;font-weight:bold">&#34;*&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;nama&#34;</span>, <span style="color:#ff0;font-weight:bold">1</span>);
	phase.drop_objection(this);
<span style="color:#fff;font-weight:bold">endtask</span>
endclass
<span style="color:#fff;font-weight:bold">module</span> top;
<span style="color:#fff;font-weight:bold">initial</span> run_test(<span style="color:#0ff;font-weight:bold">&#34;test&#34;</span>);
<span style="color:#fff;font-weight:bold">endmodule</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>WE API reverse engineering</title>
            <link>/posts/2020/08/we-api-reverse-engineering/</link>
            <pubDate>Sat, 29 Aug 2020 21:39:25 +0200</pubDate>
            
            <guid>/posts/2020/08/we-api-reverse-engineering/</guid>
            <description>Background My ISP has a &amp;ldquo;modern&amp;rdquo; web app using Angular and REST backend. that said, their website sucks because their login form breaks my password manager. So, I have to login manually every time.
Obviously, they don&amp;rsquo;t have a documented API. so, i have to trace the xhr requests in the browser. This is a 3 hour journey to reverse engineer their login API including deepdive into their weird password encryption!</description>
            <content type="html"><![CDATA[<h1 id="background">Background</h1>
<p>My ISP has a &ldquo;modern&rdquo; web app using Angular and REST backend. that said, their website sucks because their login form breaks my password manager. So, I have to login manually every time.</p>
<p>Obviously, they don&rsquo;t have a documented API. so, i have to trace the xhr requests in the browser. This is a 3 hour journey to reverse engineer their login API including deepdive into their weird password encryption!</p>
<h1 id="requests-session">requests session</h1>
<p>I am using <code>requests</code> session because I wasn&rsquo;t sure what kind of cookies they are using and i wanted to focus on REST API.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">import</span> requests
s = requests.Session()
</code></pre></div><h1 id="login-endpoint">Login Endpoint</h1>
<p>Starting with the login page <code>https://my.te.eg/#/home/signin</code>. I saw xhr <code>post</code> request on <code>https://api-my.te.eg/api/user/generatetoken?channelId=WEB_APP</code>. the request payload was</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#f00">(data</span> <span style="color:#f00">=</span> {
  <span style="font-weight:bold">&#34;header&#34;</span>: {
    <span style="font-weight:bold">&#34;msisdn&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;&lt;PHONE NUMBER&gt;&#34;</span>,
    <span style="font-weight:bold">&#34;locale&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;En&#34;</span>
  },
  <span style="font-weight:bold">&#34;body&#34;</span>: {
    <span style="font-weight:bold">&#34;password&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;&lt;SOME HASH&gt;&#34;</span>
  }
}<span style="color:#f00">)</span>
</code></pre></div><p>okey, This is the login endpoint. But why is the password hashed?!</p>
<p>I guess they are not sending the password in plain text. which is an overkill considering it&rsquo;s all on SSL. Anyway, I circle back to that.</p>
<p>So, I tried <code>post</code> with that hash and phone number. but I got an authentication error</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="font-weight:bold">&#34;header&#34;</span>: {
    <span style="font-weight:bold">&#34;responseMessage&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;Your Session has been expired, please sign in to continue&#34;</span>,
}
</code></pre></div><p>so, I went back to the browser for a deeper look at the login request/response. this time, i noticed the request header has <code>jwt</code>.</p>
<p>wat? This is the login request.why is there jwt?</p>
<p>I assumed that jwt was stored in local storage. and it was. It turns out that there was get request to another endpoint to generate a guest jwt which is needed for the login API. PARANOID much?</p>
<p>Anyway, quick get request to extract guest jwt.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#007f7f"># Get initial JWT Tocken</span>
r = s.get(TOKEN_API)
jwt = r.json()[<span style="color:#0ff;font-weight:bold">&#34;body&#34;</span>][<span style="color:#0ff;font-weight:bold">&#34;jwt&#34;</span>]
</code></pre></div><p>I tried to login again. This time i sent the jwt in the headers.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">data = {
  <span style="color:#0ff;font-weight:bold">&#34;header&#34;</span>: {
    <span style="color:#0ff;font-weight:bold">&#34;msisdn&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;&lt;PHONE NUMBER&gt;&#34;</span>,
    <span style="color:#0ff;font-weight:bold">&#34;locale&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;En&#34;</span>
  },
  <span style="color:#0ff;font-weight:bold">&#34;body&#34;</span>: {
    <span style="color:#0ff;font-weight:bold">&#34;password&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;&lt;SOME HASH&gt;&#34;</span>
  }
}

headers = {
    <span style="color:#0ff;font-weight:bold">&#34;jwt&#34;</span>: jwt
}
r = s.post(SIGN_API, json=data, headers=headers)
</code></pre></div><p>And It worked! Now i am logged in and I have a new auth jwt in the response.</p>
<h1 id="hitting-the-information-endpoints">Hitting the information endpoints</h1>
<p>Time to get information about my remaining quota this month which I always exceed :(</p>
<p>Beside the auth jwt, I know that requests needs customerId. so, I extracted that as well.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
customerId = r.json()[<span style="color:#0ff;font-weight:bold">&#34;header&#34;</span>][<span style="color:#0ff;font-weight:bold">&#34;customerId&#34;</span>]
jwt = r.json()[<span style="color:#0ff;font-weight:bold">&#34;body&#34;</span>][<span style="color:#0ff;font-weight:bold">&#34;jwt&#34;</span>]

</code></pre></div><p>Set the new jwt and data json for <code>freeunitusage</code> endpoint.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">headers = {
    <span style="color:#0ff;font-weight:bold">&#34;jwt&#34;</span>: jwt
}

data = {
    <span style="color:#0ff;font-weight:bold">&#34;header&#34;</span>: {
        <span style="color:#0ff;font-weight:bold">&#34;customerId&#34;</span>: customerId,
        <span style="color:#0ff;font-weight:bold">&#34;msisdn&#34;</span>: &lt;PHONE NUMBER&gt;,
        <span style="color:#0ff;font-weight:bold">&#34;locale&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;En&#34;</span>
    },
    <span style="color:#0ff;font-weight:bold">&#34;body&#34;</span>: {}
}

FREEUNITS_API = <span style="color:#0ff;font-weight:bold">&#34;https://api-my.te.eg/api/line/freeunitusage&#34;</span>

r = s.post(FREEUNITS_API, json=data, headers=headers)

<span style="color:#fff;font-weight:bold">print</span>(r.json()[<span style="color:#0ff;font-weight:bold">&#34;body&#34;</span>][<span style="color:#0ff;font-weight:bold">&#34;summarizedLineUsageList&#34;</span>][<span style="color:#ff0;font-weight:bold">0</span>][<span style="color:#0ff;font-weight:bold">&#34;freeAmount&#34;</span>])
</code></pre></div><h1 id="the-password-hash">The Password hash</h1>
<p>At this point, i have a working script but using the weird hash i got from the browser. How was that generated?</p>
<p>Initially i thought it&rsquo;s some kind of hash. well I was wrong. <code>hashid</code> failed to detect the hash type.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ hashid HASH
Analyzing <span style="color:#0ff;font-weight:bold">&#39;HASH&#39;</span>
[+] Unknown <span style="color:#fff;font-weight:bold">hash</span>
</code></pre></div><p>Well, I was curios enough that i decided to trace frontend javascript to know what generated the hash. and i got lucky :)</p>
<h2 id="step1-set-a-breakpoint-on-xhrfetch-requests">Step1 Set a breakpoint on XHR/fetch requests</h2>
<p>I know that login form will generate the XHR request with hashed password. So, I set XHR breakpoint there.
<img src="/xhr_bp.png" alt="Example image"></p>
<h2 id="step2-login">Step2 Login</h2>
<p>now i have a breakpoint, i tried to login again in the browser</p>
<p>The browser stopped right before sending xhr. I went through the stack trace frame by frame until i found what i was looking for <code>signIn</code>.
<img src="/angular-signin.png" alt="Example image"></p>
<p>I guess this is login service called from angular login component.</p>
<p>going through <code>signin</code> javacript function. Ugh!
I finally saw it. Surprise! It wasn&rsquo;t a hash. it&rsquo;s AES.</p>
<p><img src="/aesService.png" alt="Example image"></p>
<p>I looked into <code>aesService</code> object and it has the <code>key</code> and <code>iv</code> for AES-128.</p>
<p>Disclaimer: I don&rsquo;t know why they are encrypting password. I assume they have key on the backend to decrypt and hash.
but is the key fixed? is it the same for everyone? I don&rsquo;t know. but if it&rsquo;s, what is the point!?</p>
<h2 id="encrypting-the-password">Encrypting the password</h2>
<p>Now, I can use any AES implementation to encrypt my password before sending login request.
I found an example of AES encryption at <a href="https://gist.github.com/wowkin2/a2b234c87290f6959c815d3c21336278">github</a>. I modified it a little to use variable <code>iv</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">key = <span style="color:#0ff;font-weight:bold">b</span><span style="color:#0ff;font-weight:bold">&#34;16 byte KEY&#34;</span>
iv = <span style="color:#0ff;font-weight:bold">b</span><span style="color:#0ff;font-weight:bold">&#34;16 byte IV&#34;</span>

password_enc = AESCipher(key, iv).encrypt(args.password)
</code></pre></div><h1 id="putting-it-all-together">putting it all together</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#007f7f">#! /usr/bin/python3</span>
<span style="color:#fff;font-weight:bold">import</span> logging
<span style="color:#fff;font-weight:bold">import</span> sys
<span style="color:#fff;font-weight:bold">import</span> json
<span style="color:#fff;font-weight:bold">import</span> argparse
<span style="color:#fff;font-weight:bold">import</span> pprint

<span style="color:#fff;font-weight:bold">import</span> requests
<span style="color:#fff;font-weight:bold">from</span> aes <span style="color:#fff;font-weight:bold">import</span> AESCipher

<span style="color:#fff;font-weight:bold">import</span> getpass


<span style="color:#007f7f"># API URI</span>
TOKEN_API = <span style="color:#0ff;font-weight:bold">&#34;https://api-my.te.eg/api/user/generatetoken?channelId=WEB_APP&#34;</span>
SIGNIN_API = <span style="color:#0ff;font-weight:bold">&#34;https://api-my.te.eg/api/user/login?channelId=WEB_APP&#34;</span>
BALANCE_API = <span style="color:#0ff;font-weight:bold">&#34;https://api-my.te.eg/api/line/postpaid/balance&#34;</span>
FREEUNITS_API = <span style="color:#0ff;font-weight:bold">&#34;https://api-my.te.eg/api/line/freeunitusage&#34;</span>

<span style="color:#007f7f"># CLI parser</span>
parser = argparse.ArgumentParser(description=<span style="color:#0ff;font-weight:bold">&#34;WE command line&#34;</span>)
parser.add_argument(<span style="color:#0ff;font-weight:bold">&#34;msisdn&#34;</span>)
args = parser.parse_args()

<span style="color:#007f7f"># Arguments</span>
msisdn = args.msisdn
<span style="color:#fff;font-weight:bold">try</span>:
    password = getpass.getpass()
<span style="color:#fff;font-weight:bold">except</span> Exception <span style="color:#fff;font-weight:bold">as</span> error:
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#39;ERROR&#39;</span>, error)


<span style="color:#007f7f"># Start requests session</span>
s = requests.Session()

<span style="color:#007f7f"># Get initial JWT Tocken</span>
r = s.get(TOKEN_API)

<span style="color:#fff;font-weight:bold">if</span> not r:
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#39;Error: Guest Token!&#39;</span>)
    exit()
jwt = r.json()[<span style="color:#0ff;font-weight:bold">&#34;body&#34;</span>][<span style="color:#0ff;font-weight:bold">&#34;jwt&#34;</span>]

<span style="color:#007f7f"># Login</span>
<span style="color:#007f7f"># AES encryption kets extracted from browser</span>
<span style="color:#007f7f"># Key = 0f0e0d0c0b0a09080706050403020100</span>
<span style="color:#007f7f"># iv = 000102030405060708090a0b0c0d0e0f</span>

key = (
    <span style="color:#0ff;font-weight:bold">b</span><span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">\x0f\x0e\x0d\x0c\x0b\x0a\x09\x08\x07\x06\x05\x04\x03\x02\x01\x00</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
iv = <span style="color:#0ff;font-weight:bold">b</span><span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f</span><span style="color:#0ff;font-weight:bold">&#34;</span>

<span style="color:#007f7f"># AES implementation from</span>
<span style="color:#007f7f"># https://gist.github.com/wowkin2/a2b234c87290f6959c815d3c21336278</span>

password_enc = AESCipher(key, iv).encrypt(password)
data = {
    <span style="color:#0ff;font-weight:bold">&#34;header&#34;</span>: {
        <span style="color:#0ff;font-weight:bold">&#34;msisdn&#34;</span>: msisdn,
        <span style="color:#0ff;font-weight:bold">&#34;locale&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;En&#34;</span>
    },
    <span style="color:#0ff;font-weight:bold">&#34;body&#34;</span>: {
        <span style="color:#0ff;font-weight:bold">&#34;password&#34;</span>: password_enc
    }
}

headers = {
    <span style="color:#0ff;font-weight:bold">&#34;jwt&#34;</span>: jwt
}

r = s.post(SIGNIN_API, json=data, headers=headers)

<span style="color:#fff;font-weight:bold">if</span> r.json()[<span style="color:#0ff;font-weight:bold">&#34;header&#34;</span>][<span style="color:#0ff;font-weight:bold">&#34;customerId&#34;</span>] is <span style="color:#fff;font-weight:bold">None</span>:
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#39;Error: Can</span><span style="color:#0ff;font-weight:bold">\&#39;</span><span style="color:#0ff;font-weight:bold">t login! Check phone number or password&#39;</span>)
    exit()

customerId = r.json()[<span style="color:#0ff;font-weight:bold">&#34;header&#34;</span>][<span style="color:#0ff;font-weight:bold">&#34;customerId&#34;</span>]
jwt = r.json()[<span style="color:#0ff;font-weight:bold">&#34;body&#34;</span>][<span style="color:#0ff;font-weight:bold">&#34;jwt&#34;</span>]

<span style="color:#007f7f"># Hit the API</span>
headers = {
    <span style="color:#0ff;font-weight:bold">&#34;jwt&#34;</span>: jwt
}

data = {
    <span style="color:#0ff;font-weight:bold">&#34;header&#34;</span>: {
        <span style="color:#0ff;font-weight:bold">&#34;customerId&#34;</span>: customerId,
        <span style="color:#0ff;font-weight:bold">&#34;msisdn&#34;</span>: msisdn,
        <span style="color:#0ff;font-weight:bold">&#34;locale&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;En&#34;</span>
    },
    <span style="color:#0ff;font-weight:bold">&#34;body&#34;</span>: {}
}

r = s.post(BALANCE_API, json=data, headers=headers)
outstandingAmount, unbilledFees = [
    r.json(
    )[<span style="color:#0ff;font-weight:bold">&#34;body&#34;</span>][k] <span style="color:#fff;font-weight:bold">for</span> k in (<span style="color:#0ff;font-weight:bold">&#39;outstandingAmount&#39;</span>, <span style="color:#0ff;font-weight:bold">&#39;unbilledFees&#39;</span>)]
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;outstanding Amount: </span><span style="color:#0ff;font-weight:bold">{</span>outstandingAmount<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> EGP&#34;</span>)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;unbilled Amount: </span><span style="color:#0ff;font-weight:bold">{</span>unbilledFees<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> EGP&#34;</span>)

r = s.post(FREEUNITS_API, json=data, headers=headers)
initialTotalAmount, usedAmount, freeAmount = [
    r.json(
    )[<span style="color:#0ff;font-weight:bold">&#34;body&#34;</span>][<span style="color:#0ff;font-weight:bold">&#34;summarizedLineUsageList&#34;</span>][<span style="color:#ff0;font-weight:bold">0</span>][k] <span style="color:#fff;font-weight:bold">for</span> k in (<span style="color:#0ff;font-weight:bold">&#39;initialTotalAmount&#39;</span>, <span style="color:#0ff;font-weight:bold">&#39;usedAmount&#39;</span>, <span style="color:#0ff;font-weight:bold">&#39;freeAmount&#39;</span>)]
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;Total Amount: </span><span style="color:#0ff;font-weight:bold">{</span>initialTotalAmount<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> Gb&#34;</span>)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;Used Amount: </span><span style="color:#0ff;font-weight:bold">{</span>usedAmount<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> Gb&#34;</span>)
<span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;Free Amount: </span><span style="color:#0ff;font-weight:bold">{</span>freeAmount<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> Gb&#34;</span>)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Wake on LAN</title>
            <link>/posts/2020/08/wake-on-lan/</link>
            <pubDate>Sat, 29 Aug 2020 15:46:08 +0200</pubDate>
            
            <guid>/posts/2020/08/wake-on-lan/</guid>
            <description>There is a cool protocol to boot machine remotely called Wake on LAN. Considering i am using RPI as gateway, This allows me to start my machine remotely and poweroff if not needed.
Enable WOL in BIOS/UEFI This has to be supported by hardware and it&amp;rsquo;s usually disabled by default. On my mobo, It&amp;rsquo;s named &amp;ldquo;Power On by PCIE&amp;rdquo;. So, that has to be enabled first.
Enable WOL in ethernet driver following the steps page, we need ethtool to change the ethernet driver from d (default) to g(magic).</description>
            <content type="html"><![CDATA[<p>There is a cool protocol to boot machine remotely called <a href="https://en.wikipedia.org/wiki/Wake-on-LAN">Wake on LAN</a>. Considering i am using RPI as gateway, This allows me to start my machine remotely and poweroff if not needed.</p>
<h1 id="enable-wol-in-biosuefi">Enable WOL in BIOS/UEFI</h1>
<p>This has to be supported by hardware and it&rsquo;s usually disabled by default. On my mobo, It&rsquo;s named &ldquo;Power On by PCIE&rdquo;. So, that has to be enabled first.</p>
<h1 id="enable-wol-in-ethernet-driver">Enable WOL in ethernet driver</h1>
<p>following the steps <a href="https://wiki.debian.org/WakeOnLan">page</a>, we need ethtool to change the ethernet driver from <em>d</em> (default) to <em>g</em>(magic).</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ethtool -s &lt;NETWORK INTERFACE&gt; wol g
</code></pre></div><h2 id="make-wol-persistent">Make WOL persistent</h2>
<p>from <a href="https://www.techrepublic.com/article/how-to-enable-wake-on-lan-in-ubuntu-server-18-04/">page</a>, interfaces resets the WOL flag on boot. so, we need to create a systemd service to set it back to magic after boot.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">vi /etc/systemd/system/wol.service
</code></pre></div><p>use the following service</p>
<pre tabindex="0"><code>[Unit]
Description=Configure Wake On LAN

[Service]
Type=oneshot
ExecStart=/sbin/ethtool -s INTERFACE wol g

[Install]
WantedBy=basic.target
</code></pre><p>Restart systemd</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo systemctl daemon-reload
sudo systemctl <span style="color:#fff;font-weight:bold">enable</span> wol.service
sudo systemctl start wol.service
</code></pre></div><h1 id="booting-the-machine">Booting the machine</h1>
<p>To start a machine, we need the MAC of that machine and connection a machine on the same network.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo etherwake &lt;MAC&gt; -i &lt;INTERFACE&gt;
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM user defined phase</title>
            <link>/posts/2020/08/uvm-user-defined-phase/</link>
            <pubDate>Sat, 29 Aug 2020 00:13:06 +0200</pubDate>
            
            <guid>/posts/2020/08/uvm-user-defined-phase/</guid>
            <description>UVM provide a weird pattern to define user defined phases. Usually, it&amp;rsquo;s useful for adding phases for VIP&amp;rsquo;s
User defined phase boiler-plate According to UVM class reference manual, we need to extends on of the class
class my_PHASE_phase extends uvm_task_phase; class my_PHASE_phase extends uvm_topdown_phase; class my_PHASE_phase extends uvm_bottomup_phase; then override exec_task or exec_func
task exec_task(uvm_component comp, uvm_phase schedule); function void exec_func(uvm_component comp, uvm_phase schedule); the important part about exec method that it calls the phase from the component</description>
            <content type="html"><![CDATA[<p>UVM provide a weird pattern to define user defined phases. Usually, it&rsquo;s useful for adding phases for VIP&rsquo;s</p>
<h1 id="user-defined-phase-boiler-plate">User defined phase boiler-plate</h1>
<p>According to UVM class reference manual, we need to extends on of the class</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class my_PHASE_phase extends uvm_task_phase;
class my_PHASE_phase extends uvm_topdown_phase;
class my_PHASE_phase extends uvm_bottomup_phase;
</code></pre></div><p>then override exec_task or exec_func</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">task</span> exec_task(uvm_component comp, uvm_phase schedule);
<span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> exec_func(uvm_component comp, uvm_phase schedule);
</code></pre></div><p>the important part about exec method that it calls the phase from the component</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">comp.PHASE_phase(uvm_phase phase);
</code></pre></div><p>Here is example of <code>foobar</code> phase boiter-plate</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class my_foobar_phase extends uvm_task_phase;

  static local my_foobar_phase m_inst;

  protected <span style="color:#fff;font-weight:bold">function</span> new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;foobar&#34;</span>);
	super.new(name);
  <span style="color:#fff;font-weight:bold">endfunction</span> : new

  static <span style="color:#fff;font-weight:bold">function</span> my_foobar_phase get();
    <span style="color:#fff;font-weight:bold">if</span> (m_inst == null)
    m_inst = new();
    <span style="color:#fff;font-weight:bold">return</span> m_inst;
  <span style="color:#fff;font-weight:bold">endfunction</span> : get

  <span style="color:#fff;font-weight:bold">task</span> exec_task(uvm_component comp, uvm_phase phase);
    dummy_comp dcomp;
    <span style="color:#fff;font-weight:bold">if</span>($cast(dcomp, comp))
    	dcomp.foobar_phase(phase);
  <span style="color:#fff;font-weight:bold">endtask</span>

endclass
</code></pre></div><p>it&rsquo;s important to notice that exec_task casts the <code>comp</code> handle to <code>dummy_comp</code>? so what <code>dummy_comp</code>?</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class dummy_comp extends uvm_component;
      <span style="color:#fff;font-weight:bold">function</span> new (<span style="color:#fff;font-weight:bold">string</span> name, uvm_component parent);
      super.new(name, parent);
    <span style="color:#fff;font-weight:bold">endfunction</span>
  virtual <span style="color:#fff;font-weight:bold">task</span> foobar_phase(uvm_phase phase);
  <span style="color:#fff;font-weight:bold">endtask</span>
endclass

</code></pre></div><p><code>dummy_comp</code> is an abstract class the defines virtual task <code>foobar_phase</code>. component that defines the <code>foobar_phase</code> need to inherits from <code>dummy_comp</code>. This way we can use <code>$csat</code> to check if we need to call <code>foobar_phase</code>.</p>
<p>If we don&rsquo;t have <code>$case</code>, the call will happen on all component even ones that don&rsquo;t have foobar_phase which results in an error.</p>
<p>Here is exec_task</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">task</span> exec_task(uvm_component comp, uvm_phase phase);
    dummy_comp dcomp;
    <span style="color:#007f7f">// Will only work if component inherits from dummy_comp and we are sure it has foobar_phase
</span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">if</span>($cast(dcomp, comp))
    	dcomp.foobar_phase(phase);
  <span style="color:#fff;font-weight:bold">endtask</span>
</code></pre></div><h1 id="register-the-phase-with-domain-schedule">Register the phase with domain schedule</h1>
<p>finally, we need to insert the new phase somewhere in domain schedule. For this example, i chose between build and run phases.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> build_phase(uvm_phase phase);
        uvm_phase shed;
        shed = uvm_domain::get_common_domain();
        shed.add(my_foobar_phase::get(),null,uvm_build_phase::get(),uvm_run_phase::get());
    <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><h1 id="putting-it-all-together">Putting it all together</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">`include <span style="color:#0ff;font-weight:bold">&#34;uvm_macros.svh&#34;</span>

<span style="color:#fff;font-weight:bold">import</span> uvm_pkg::*;

<span style="color:#007f7f">/*
</span><span style="color:#007f7f">*
</span><span style="color:#007f7f">*/</span>
class dummy_comp extends uvm_component;
      <span style="color:#fff;font-weight:bold">function</span> new (<span style="color:#fff;font-weight:bold">string</span> name, uvm_component parent);
      super.new(name, parent);
    <span style="color:#fff;font-weight:bold">endfunction</span>
  virtual <span style="color:#fff;font-weight:bold">task</span> foobar_phase(uvm_phase phase);
  <span style="color:#fff;font-weight:bold">endtask</span>
endclass

<span style="color:#007f7f">/*
</span><span style="color:#007f7f">*
</span><span style="color:#007f7f">*/</span>
class my_foobar_phase extends uvm_task_phase;

  static local my_foobar_phase m_inst;

  protected <span style="color:#fff;font-weight:bold">function</span> new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;foobar&#34;</span>);
	super.new(name);
  <span style="color:#fff;font-weight:bold">endfunction</span> : new

  static <span style="color:#fff;font-weight:bold">function</span> my_foobar_phase get();
  <span style="color:#fff;font-weight:bold">if</span> (m_inst == null)
  m_inst = new();
  <span style="color:#fff;font-weight:bold">return</span> m_inst;
  <span style="color:#fff;font-weight:bold">endfunction</span> : get

  <span style="color:#fff;font-weight:bold">task</span> exec_task(uvm_component comp, uvm_phase phase);
    dummy_comp dcomp;
    <span style="color:#fff;font-weight:bold">if</span>($cast(dcomp, comp))
    	dcomp.foobar_phase(phase);
  <span style="color:#fff;font-weight:bold">endtask</span>

endclass

<span style="color:#007f7f">/*
</span><span style="color:#007f7f">*
</span><span style="color:#007f7f">*/</span>
class test extends dummy_comp;
`uvm_component_utils(test)

<span style="color:#fff;font-weight:bold">function</span>  new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, uvm_component parent=null);
	super.new(name, parent);
<span style="color:#fff;font-weight:bold">endfunction</span>

<span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> build_phase(uvm_phase phase);

  uvm_phase shed;
  shed = uvm_domain::get_common_domain();
  shed.add(my_foobar_phase::get(),null,uvm_build_phase::get(),uvm_run_phase::get());
<span style="color:#fff;font-weight:bold">endfunction</span>

    <span style="color:#fff;font-weight:bold">task</span> foobar_phase(uvm_phase phase);
      phase.raise_objection(this);
      `uvm_info(<span style="color:#0ff;font-weight:bold">&#34;FOOBAR&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;foorbar_phase called&#34;</span>, UVM_MEDIUM)
      phase.drop_objection(this);
    <span style="color:#fff;font-weight:bold">endtask</span>

  <span style="color:#fff;font-weight:bold">task</span> run_phase(uvm_phase phase);
      phase.raise_objection(this);
     `uvm_warning(<span style="color:#0ff;font-weight:bold">&#34;Test&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;Hello World!&#34;</span>)
      phase.drop_objection(this);
  <span style="color:#fff;font-weight:bold">endtask</span>
endclass

<span style="color:#fff;font-weight:bold">module</span> top;
<span style="color:#fff;font-weight:bold">initial</span> run_test(<span style="color:#0ff;font-weight:bold">&#34;test&#34;</span>);
<span style="color:#fff;font-weight:bold">endmodule</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM Hearbeat</title>
            <link>/posts/2020/08/uvm-hearbeat/</link>
            <pubDate>Fri, 28 Aug 2020 02:28:49 +0200</pubDate>
            
            <guid>/posts/2020/08/uvm-hearbeat/</guid>
            <description>Example of UVM hearbeat based on example and UVM heartbeat docs
Introduction UVM reference manual defines Heart Beat as
 Heartbeats provide a way for environments to easily ensure that their descendants are alive. A uvm_heartbeat is associated with a specific objection object. A component that is being tracked by the heartbeat object must raise (or drop) the synchronizing objection during the heartbeat window. The synchronizing objection must be a uvm_callbacks_objection type.</description>
            <content type="html"><![CDATA[<p>Example of UVM hearbeat based on <a href="https://verificationguide.com/uvm/uvm-heartbeat-example/">example</a> and <a href="https://verificationacademy.com/verification-methodology-reference/uvm/docs_1.1c/html/files/base/uvm_heartbeat-svh.html#uvm_heartbeat">UVM heartbeat docs</a></p>
<h1 id="introduction">Introduction</h1>
<p>UVM reference manual defines <code>Heart Beat</code> as</p>
<blockquote>
<p>Heartbeats provide a way for environments to easily ensure that their descendants are
alive. A uvm_heartbeat is associated with a specific objection object. A component that
is being tracked by the heartbeat object must raise (or drop) the synchronizing objection
during the heartbeat window. The synchronizing objection must be a
uvm_callbacks_objection type.</p>
</blockquote>
<p>which means a component can monitor a another component and expect &ldquo;keep alive&rdquo; objection in a given window. If we don&rsquo;t receive signal, a fatal will be generated.</p>
<p>It&rsquo;s useful to detect hanging component and make sure that specific tasks complete in a given window.</p>
<h1 id="step-1-create-uvm_callbacks_object">Step 1: create uvm_callbacks_object</h1>
<p>A objection object is shared by the environment and the component.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">uvm_callbacks_objection obj = new(<span style="color:#0ff;font-weight:bold">&#34;obj&#34;</span>);
</code></pre></div><p><code>uvm_callbacks_object</code> is defined as</p>
<blockquote>
<p>The uvm_callbacks_objection is a specialized uvm_objection which contains callbacks for
the raised and dropped events. Callbacks happend for the three standard callback
activities, raised, dropped, and all_dropped.</p>
</blockquote>
<p>which is not the same as <code>uvm_objection_callback</code>. Anyway, We won&rsquo;t use callbacks <code>raised</code> and <code>dropped</code> and <code>all_dropped</code> in this example.</p>
<h1 id="step-2-raise-objections">Step 2: Raise objections</h1>
<p>The run_phase(or whatever tasks consuming time) of component needs to periodically raise objection to <code>obj</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">	<span style="color:#fff;font-weight:bold">task</span> run_phase(uvm_phase phase);
	<span style="color:#fff;font-weight:bold">repeat</span>(<span style="color:#ff0;font-weight:bold">10</span>) <span style="color:#fff;font-weight:bold">begin</span>
        `uvm_info(get_type_name(),$sformatf(<span style="color:#0ff;font-weight:bold">&#34;raise objections &#34;</span>),UVM_LOW)
		obj.raise_objection(this);
        <span style="color:#007f7f">// A delay is used to simulate time consuming tasks
</span><span style="color:#007f7f"></span>        [....]
	<span style="color:#fff;font-weight:bold">end</span>
</code></pre></div><h1 id="step-3-setup-the-environment">Step 3: setup the environment</h1>
<p>according to UVM reference manual, we need to pass 2 things to <code>uvm_heartbeat</code></p>
<ul>
<li>shared objection define above</li>
<li><code>uvm_event</code> to synchronize the window</li>
</ul>
<p>we define heartbeat and event in env class</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">	uvm_heartbeat hb = new(<span style="color:#0ff;font-weight:bold">&#34;hb&#34;</span>, this, obj);
	uvm_event hb_event= new(<span style="color:#0ff;font-weight:bold">&#34;hb_event&#34;</span>);
</code></pre></div><p>Add the component to list monitored components. In this case, <code>m_drv</code> is component with heartbeat.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">		hb.add(m_drv);
</code></pre></div><p>Finally, <code>hb</code> needs to start by calling <code>.start</code> and passing the synchronization event <code>hb_event</code>.
In this example, i am defining a window of 100 units. If the m_drv doesn&rsquo;t raise object in the window, the heartbeat will throw FATAL.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">	hb.start(hb_event);
    <span style="color:#fff;font-weight:bold">repeat</span>(<span style="color:#ff0;font-weight:bold">10</span>) <span style="color:#fff;font-weight:bold">begin</span>
      `uvm_info(get_type_name(),$sformatf(<span style="color:#0ff;font-weight:bold">&#34;Triggering hb_event&#34;</span>),UVM_LOW)
      hb_event.trigger();
      #<span style="color:#ff0;font-weight:bold">100</span>;
    <span style="color:#fff;font-weight:bold">end</span>
</code></pre></div><h2 id="using-50">Using #50</h2>
<p>Using <code>#50</code> means that driver will stop raising objections after <code>500</code> units. and the heatbeat will trigger at 500 and 600. And generates the FATAL message.</p>
<pre tabindex="0"><code>testbench.sv(54) @ 0: uvm_test_top.m_env [env] Triggering hb_event
testbench.sv(17) @ 0: uvm_test_top.m_env.m_drv [driver] raise objections
testbench.sv(17) @ 50: uvm_test_top.m_env.m_drv [driver] raise objections
testbench.sv(54) @ 100: uvm_test_top.m_env [env] Triggering hb_event
testbench.sv(17) @ 100: uvm_test_top.m_env.m_drv [driver] raise objections
testbench.sv(17) @ 150: uvm_test_top.m_env.m_drv [driver] raise objections
testbench.sv(54) @ 200: uvm_test_top.m_env [env] Triggering hb_event
testbench.sv(17) @ 200: uvm_test_top.m_env.m_drv [driver] raise objections
testbench.sv(17) @ 250: uvm_test_top.m_env.m_drv [driver] raise objections
testbench.sv(54) @ 300: uvm_test_top.m_env [env] Triggering hb_event
testbench.sv(17) @ 300: uvm_test_top.m_env.m_drv [driver] raise objections
testbench.sv(17) @ 350: uvm_test_top.m_env.m_drv [driver] raise objections
testbench.sv(54) @ 400: uvm_test_top.m_env [env] Triggering hb_event
testbench.sv(17) @ 400: uvm_test_top.m_env.m_drv [driver] raise objections
testbench.sv(17) @ 450: uvm_test_top.m_env.m_drv [driver] raise objections
testbench.sv(54) @ 500: uvm_test_top.m_env [env] Triggering hb_event
testbench.sv(54) @ 600: uvm_test_top.m_env [env] Triggering hb_event
 UVM_FATAL @ 600: uvm_test_top.m_env [HBFAIL] Did not recieve an update of obj for component uvm_test_top.m_env.m_drv since last event trigger at time 500 : last update time was 450
</code></pre><h2 id="using-100">Using #100</h2>
<p>Using <code>#100</code> means that driver will raise objections in 100-unit window until the end of <code>run_task</code> where env stops triggering <code>uvm_event</code>. And simulation completes successfully.</p>
<pre tabindex="0"><code>testbench.sv(51) @ 0: uvm_test_top.m_env [env] Triggering hb_event
testbench.sv(17) @ 0: uvm_test_top.m_env.m_drv [driver] raise objections
testbench.sv(51) @ 100: uvm_test_top.m_env [env] Triggering hb_event
testbench.sv(17) @ 100: uvm_test_top.m_env.m_drv [driver] raise
testbench.sv(51) @ 200: uvm_test_top.m_env [env] Triggering hb_event
testbench.sv(17) @ 200: uvm_test_top.m_env.m_drv [driver] raise
testbench.sv(51) @ 300: uvm_test_top.m_env [env] Triggering hb_event
testbench.sv(17) @ 300: uvm_test_top.m_env.m_drv [driver] raise
testbench.sv(51) @ 400: uvm_test_top.m_env [env] Triggering hb_event
testbench.sv(17) @ 400: uvm_test_top.m_env.m_drv [driver] raise
testbench.sv(51) @ 500: uvm_test_top.m_env [env] Triggering hb_event
testbench.sv(17) @ 500: uvm_test_top.m_env.m_drv [driver] raise
testbench.sv(51) @ 600: uvm_test_top.m_env [env] Triggering hb_event
testbench.sv(17) @ 600: uvm_test_top.m_env.m_drv [driver] raise
testbench.sv(51) @ 700: uvm_test_top.m_env [env] Triggering hb_event
testbench.sv(17) @ 700: uvm_test_top.m_env.m_drv [driver] raise
testbench.sv(51) @ 800: uvm_test_top.m_env [env] Triggering hb_event
testbench.sv(17) @ 800: uvm_test_top.m_env.m_drv [driver] raise
testbench.sv(51) @ 900: uvm_test_top.m_env [env] Triggering hb_event
testbench.sv(17) @ 900: uvm_test_top.m_env.m_drv [driver] raise objections
</code></pre><h1 id="putting-all-together">Putting all together</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">`include <span style="color:#0ff;font-weight:bold">&#34;uvm_macros.svh&#34;</span>

<span style="color:#fff;font-weight:bold">import</span> uvm_pkg::*;


uvm_callbacks_objection obj = new(<span style="color:#0ff;font-weight:bold">&#34;obj&#34;</span>);

class driver extends uvm_driver;
	`uvm_component_utils(driver)

	<span style="color:#fff;font-weight:bold">function</span>  new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, uvm_component parent=null);
		super.new(name, parent);
	<span style="color:#fff;font-weight:bold">endfunction</span>

	<span style="color:#fff;font-weight:bold">task</span> run_phase(uvm_phase phase);
      <span style="color:#fff;font-weight:bold">repeat</span>(<span style="color:#ff0;font-weight:bold">10</span>) <span style="color:#fff;font-weight:bold">begin</span>
      `uvm_info(get_type_name(),$sformatf(<span style="color:#0ff;font-weight:bold">&#34;raise objections &#34;</span>),UVM_LOW)
		obj.raise_objection(this);
		#<span style="color:#ff0;font-weight:bold">100</span>;

	<span style="color:#fff;font-weight:bold">end</span>
	<span style="color:#fff;font-weight:bold">endtask</span>
endclass

class env extends uvm_env;
	`uvm_component_utils(env)

	driver m_drv;
	uvm_heartbeat hb = new(<span style="color:#0ff;font-weight:bold">&#34;hb&#34;</span>, this, obj);
	uvm_event hb_event= new(<span style="color:#0ff;font-weight:bold">&#34;hb_event&#34;</span>);

	<span style="color:#fff;font-weight:bold">function</span>  new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, uvm_component parent=null);
		super.new(name, parent);
	<span style="color:#fff;font-weight:bold">endfunction</span>


	<span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> build_phase(uvm_phase phase);
		super.build_phase(phase);
		m_drv = driver::type_id::create(<span style="color:#0ff;font-weight:bold">&#34;m_drv&#34;</span>, this);
	<span style="color:#fff;font-weight:bold">endfunction</span>

	<span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> connect_phase(uvm_phase phase);
		hb.add(m_drv);

	<span style="color:#fff;font-weight:bold">endfunction</span>

	<span style="color:#fff;font-weight:bold">task</span> run_phase(uvm_phase phase);
	phase.raise_objection(this);
		hb.start(hb_event);
    <span style="color:#fff;font-weight:bold">repeat</span>(<span style="color:#ff0;font-weight:bold">10</span>) <span style="color:#fff;font-weight:bold">begin</span>
      `uvm_info(get_type_name(),$sformatf(<span style="color:#0ff;font-weight:bold">&#34;Triggering hb_event&#34;</span>),UVM_LOW)
      hb_event.trigger();
      #<span style="color:#ff0;font-weight:bold">100</span>;
    <span style="color:#fff;font-weight:bold">end</span>
      #<span style="color:#ff0;font-weight:bold">1000</span>;
	phase.drop_objection(this);
	<span style="color:#fff;font-weight:bold">endtask</span>

endclass

class test extends uvm_test;
`uvm_component_utils(test)

env m_env;
<span style="color:#fff;font-weight:bold">function</span>  new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, uvm_component parent=null);
	super.new(name, parent);
<span style="color:#fff;font-weight:bold">endfunction</span>

<span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> build_phase(uvm_phase phase);
	super.build_phase(phase);
	m_env = env::type_id::create(<span style="color:#0ff;font-weight:bold">&#34;m_env&#34;</span>, this);
<span style="color:#fff;font-weight:bold">endfunction</span>

<span style="color:#fff;font-weight:bold">task</span> run_phase(uvm_phase phase);
	phase.raise_objection(this);
  `uvm_warning(<span style="color:#0ff;font-weight:bold">&#34;Test&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;Hello World!&#34;</span>)
	phase.drop_objection(this);
<span style="color:#fff;font-weight:bold">endtask</span>
endclass
<span style="color:#fff;font-weight:bold">module</span> top;
<span style="color:#fff;font-weight:bold">initial</span> run_test(<span style="color:#0ff;font-weight:bold">&#34;test&#34;</span>);
<span style="color:#fff;font-weight:bold">endmodule</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Setting up VNC</title>
            <link>/posts/2020/08/setting-up-vnc/</link>
            <pubDate>Fri, 21 Aug 2020 14:24:17 +0200</pubDate>
            
            <guid>/posts/2020/08/setting-up-vnc/</guid>
            <description>Install server Install tigervnc server
apt install tigervnc-standalone-server Install desktop
apt install xfce4 xfce4-goodies Set up xstartup script
touch ~/.vnc/xstartup chmod 700 ~/.vnc/xstartup #!/bin/sh unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS [ -x /etc/vnc/xstartup ] &amp;amp;&amp;amp; exec /etc/vnc/xstartup [ -r $HOME/.Xresources ] &amp;amp;&amp;amp; xrdb $HOME/.Xresources xsetroot -solid grey vncconfig -iconic &amp;amp; xfce4-session &amp;amp; Finally, create the session and set password
vncserver systemd service create service file
sudo touch /etc/systemd/system/vncserver@.service configure the service as following.</description>
            <content type="html"><![CDATA[<h1 id="install-server">Install server</h1>
<p>Install tigervnc server</p>
<pre tabindex="0"><code>apt install tigervnc-standalone-server
</code></pre><p>Install desktop</p>
<pre tabindex="0"><code>apt install  xfce4 xfce4-goodies
</code></pre><p>Set up xstartup script</p>
<pre tabindex="0"><code>touch ~/.vnc/xstartup
chmod 700 ~/.vnc/xstartup
</code></pre><pre tabindex="0"><code>#!/bin/sh

unset SESSION_MANAGER
unset DBUS_SESSION_BUS_ADDRESS

[ -x /etc/vnc/xstartup ] &amp;&amp; exec /etc/vnc/xstartup
[ -r $HOME/.Xresources ] &amp;&amp; xrdb $HOME/.Xresources
xsetroot -solid grey
vncconfig -iconic &amp;
xfce4-session &amp;
</code></pre><p>Finally, create the session and set password</p>
<pre tabindex="0"><code>vncserver
</code></pre><h1 id="systemd-service">systemd service</h1>
<p>create service file</p>
<pre tabindex="0"><code>sudo touch /etc/systemd/system/vncserver@.service
</code></pre><p>configure the service as following. Change the <code>user</code> as needed.</p>
<pre tabindex="0"><code>[Unit]
Description=Remote desktop service (VNC)
After=syslog.target network.target

[Service]
Type=forking
User=&lt;user_name&gt;

# Clean any existing files in /tmp/.X11-unix environment
ExecStartPre=/bin/sh -c '/usr/bin/vncserver -kill :%i &gt; /dev/null 2&gt;&amp;1 || :'
ExecStart=/usr/bin/vncserver -geometry 1800x1000 -depth 16 -dpi 120 -alwaysshared -localhost yes :%i
ExecStop=/usr/bin/vncserver -kill :%i

[Install]
WantedBy=multi-user.target
</code></pre><p>Enable and start the service <code>vncserver@1.service</code></p>
<pre tabindex="0"><code>sudo systemctl enable vncserver@1.service
sudo systemctl start vncserver@1.service
</code></pre><h1 id="client-connection">Client connection</h1>
<h2 id="ssh-forwarding">SSH forwarding</h2>
<p>This is needed for port forwarding through ssh</p>
<pre tabindex="0"><code>ssh -L 5901:127.0.0.1:5901 -N  user@&lt;SERVER IP&gt;
</code></pre><h2 id="vncviewer">vncviewer</h2>
<p>Install vncviewer and connect to <code>localhost:1</code></p>
<pre tabindex="0"><code>apt install tigervnc-viewer
vncviewer :1
</code></pre>]]></content>
        </item>
        
        <item>
            <title>UVM Basics - Reporting</title>
            <link>/posts/2020/08/uvm-basics-reporting/</link>
            <pubDate>Sun, 16 Aug 2020 00:54:35 +0200</pubDate>
            
            <guid>/posts/2020/08/uvm-basics-reporting/</guid>
            <description>A previous post went into the UVM Reporting implementation, But i thought UVM reporting is important enough topic to have overview.
UVM Reporting UVM Reporting Macros provide 4 severity level Info, Warning, Error,Fatal
`uvm_info `uvm_warning `uvm_error `uvm_fatal `uvm_info_context `uvm_warning_context `uvm_error_context `uvm_fatal_context starting with uvm_info,
`uvm_info(ID,MSG,VERBOSITY) ID: Unique string for the message. MSG: message string VERBOSITY:
Hello world `include &amp;#34;uvm_macros.svh&amp;#34; import uvm_pkg::*; class test extends uvm_test; `uvm_component_utils(test) function new(string name=&amp;#34;&amp;#34;, uvm_component parent); super.</description>
            <content type="html"><![CDATA[<p>A previous post went into the UVM Reporting implementation, But i thought UVM reporting is important enough topic to have overview.</p>
<h1 id="uvm-reporting">UVM Reporting</h1>
<p>UVM Reporting Macros provide 4 severity level <code>Info</code>, <code>Warning</code>, <code>Error</code>,<code>Fatal</code></p>
<pre tabindex="0"><code>`uvm_info
`uvm_warning
`uvm_error
`uvm_fatal
`uvm_info_context
`uvm_warning_context
`uvm_error_context
`uvm_fatal_context
</code></pre><p>starting with <code>uvm_info</code>,</p>
<pre tabindex="0"><code>`uvm_info(ID,MSG,VERBOSITY)
</code></pre><p>ID: Unique string for the message.
MSG: message string
VERBOSITY:</p>
<h1 id="hello-world">Hello world</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">`include <span style="color:#0ff;font-weight:bold">&#34;uvm_macros.svh&#34;</span>

<span style="color:#fff;font-weight:bold">import</span> uvm_pkg::*;

class test extends uvm_test;
  `uvm_component_utils(test)
  <span style="color:#fff;font-weight:bold">function</span> new(<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, uvm_component parent);
    super.new(name,parent);
  <span style="color:#fff;font-weight:bold">endfunction</span>

  <span style="color:#fff;font-weight:bold">task</span> run_phase(uvm_phase phase);
    super.run_phase(phase);
    `uvm_info(<span style="color:#0ff;font-weight:bold">&#34;TEST/RUN&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;hello&#34;</span>,UVM_LOW)
  <span style="color:#fff;font-weight:bold">endtask</span>
endclass

<span style="color:#fff;font-weight:bold">module</span> top;

  <span style="color:#fff;font-weight:bold">initial</span>
    run_test(<span style="color:#0ff;font-weight:bold">&#34;test&#34;</span>);

<span style="color:#fff;font-weight:bold">endmodule</span>
</code></pre></div><p>output</p>
<pre tabindex="0"><code>UVM_INFO /home/runner/testbench.sv(15) @ 0: uvm_test_top [TEST/RUN] hello
</code></pre><p>message summary</p>
<pre tabindex="0"><code>UVM_INFO :    2
UVM_WARNING :    0
UVM_ERROR :    0
UVM_FATAL :    0
</code></pre><h1 id="setting-verbosity-on-command-line">Setting Verbosity on command line</h1>
<p>verbosity can be controlled by command plus args.</p>
<pre tabindex="0"><code>+UVM_VERBOSITY=&lt;LEVEL&gt;
</code></pre><p>LEVEL is one of the following: UVM_NONE, UVM_LOW, UVM_MEDIUM, UVM_HIGH,
UVM_FULL, UVM_DEBUG.</p>
]]></content>
        </item>
        
        <item>
            <title>Mysql cheat sheet</title>
            <link>/posts/2020/08/mysql-cheat-sheet/</link>
            <pubDate>Fri, 14 Aug 2020 10:23:57 +0200</pubDate>
            
            <guid>/posts/2020/08/mysql-cheat-sheet/</guid>
            <description>This is a small sql cheat sheet i keep. It contains super basic operations (create, select, delete). I am using Mysql for demo here but there would be some difference with sqlite or postgresql.
Start Mysql to connect to server for first time, you need to connect as root
sudo mysql Create user and add privileges CREATE USER &#39;user&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39; mysql&amp;gt; GRANT ALL PRIVILEGES ON *.* TO &#39;user&#39;@&#39;localhost&#39;; Query OK, 0 rows affected (0.</description>
            <content type="html"><![CDATA[<p>This is a small sql cheat sheet i keep. It contains super basic operations (create, select, delete).
I am using Mysql for demo here but there would be some difference with sqlite or postgresql.</p>
<h1 id="start-mysql">Start Mysql</h1>
<p>to connect to server for first time, you need to connect as root</p>
<pre tabindex="0"><code>sudo mysql
</code></pre><h1 id="create-user-and-add-privileges">Create user and add privileges</h1>
<pre tabindex="0"><code>CREATE USER 'user'@'localhost' IDENTIFIED BY 'password'
</code></pre><pre tabindex="0"><code>mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'user'@'localhost';
Query OK, 0 rows affected (0.02 sec)

mysql&gt; FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.00 sec)

</code></pre><h1 id="create-show-delete-databases">Create, show delete databases</h1>
<pre tabindex="0"><code>mysql&gt; CREATE DATABASE acme;
Query OK, 1 row affected (0.01 sec)

mysql&gt; SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| acme               |
| information_schema |
| mysql              |
| performance_schema |
+--------------------+
7 rows in set (0.01 sec)

mysql&gt; DROP DATABASE acme;


</code></pre><h1 id="connect-to-database">Connect to database</h1>
<pre tabindex="0"><code>mysql&gt; USE acme;
</code></pre><h1 id="tables">Tables</h1>
<p>list tables</p>
<pre tabindex="0"><code>mysql&gt; SHOW TABLES;

</code></pre><p>Create table</p>
<pre tabindex="0"><code>mysql&gt; CREATE TABLE users( id INT AUTO_INCREMENT, first_name VARCHAR(100), register_date DATETIME, PRIMARY KEY(id) );
Query OK, 0 rows affected (0.06 sec)

</code></pre><p>Delete table</p>
<pre tabindex="0"><code>mysql&gt; DROP TABLE users;
Query OK, 0 rows affected (0.04 sec)
</code></pre><h2 id="insert">INSERT</h2>
<pre tabindex="0"><code>mysql&gt; INSERT INTO users (first_name, register_date)
    -&gt; values('a', now())
    -&gt; ;
Query OK, 1 row affected (0.01 sec)

mysql&gt; SELECT * FROM users;
+----+------------+---------------------+
| id | first_name | register_date       |
+----+------------+---------------------+
|  1 | a          | 2020-08-09 22:43:52 |
+----+------------+---------------------+
1 row in set (0.00 sec)

</code></pre><h2 id="select">SELECT</h2>
<p>Select all columns</p>
<pre tabindex="0"><code>mysql&gt; SELECT * FROM users;
+----+------------+---------------------+
| id | first_name | register_date       |
+----+------------+---------------------+
|  1 | a          | 2020-08-09 22:43:52 |
+----+------------+---------------------+
1 row in set (0.00 sec)
</code></pre><p>Select one column</p>
<pre tabindex="0"><code>mysql&gt; SELECT first_name FROM users;
+------------+
| first_name |
+------------+
| a          |
+------------+
1 rows in set (0.00 sec)
</code></pre><p>const</p>
<pre tabindex="0"><code>mysql&gt; SELECT first_name FROM users WHERE first_name='a';
+------------+
| first_name |
+------------+
| a          |
+------------+
1 row in set (0.00 sec)
</code></pre><h2 id="delete">DELETE</h2>
<pre tabindex="0"><code>
mysql&gt; DELETE FROM users WHERE id=1;
Query OK, 1 row affected (0.00 sec)

mysql&gt; SELECT first_name FROM users;
+------------+
| first_name |
+------------+
| b          |
+------------+
1 row in set (0.00 sec)


</code></pre><h2 id="update">Update</h2>
<pre tabindex="0"><code>mysql&gt; UPDATE users SET first_name='aa' WHERE id=2;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&gt; SELECT first_name FROM users;
+------------+
| first_name |
+------------+
| aa         |
+------------+
1 row in set (0.01 sec)

</code></pre><h2 id="alter-table">ALTER table</h2>
<pre tabindex="0"><code>mysql&gt; SELECT first_name FROM users;
+------------+
| first_name |
+------------+
| aa         |
+------------+
1 row in set (0.00 sec)

mysql&gt; SELECT * FROM users;
+----+------------+---------------------+------+
| id | first_name | register_date       | age  |
+----+------------+---------------------+------+
|  2 | aa         | 2020-08-09 22:46:42 | NULL |
+----+------------+---------------------+------+
1 row in set (0.00 sec)

mysql&gt; UPDATE users SET age=4 WHERE id=2;
Query OK, 1 row affected (0.02 sec)
Rows matched: 1  Changed: 1  Warnings: 0

</code></pre><h2 id="order">Order</h2>
<pre tabindex="0"><code>mysql&gt; SELECT * FROM users ORDER BY age;
+----+------------+---------------------+------+
| id | first_name | register_date       | age  |
+----+------------+---------------------+------+
|  3 | u2         | 2020-08-09 23:00:43 | NULL |
|  2 | aa         | 2020-08-09 22:46:42 |    4 |
+----+------------+---------------------+------+
</code></pre><h2 id="conditions---between-filter">Conditions - BETWEEN (Filter)</h2>
<pre tabindex="0"><code>mysql&gt; SELECT * FROM users WHERE age BETWEEN 1 AND 3;
+----+------------+---------------------+------+
| id | first_name | register_date       | age  |
+----+------------+---------------------+------+
|  3 | u2         | 2020-08-09 23:00:43 |    2 |
+----+------------+---------------------+------+
1 row in set (0.00 sec)
</code></pre><h2 id="conditions---like-search">Conditions - LIKE (Search)</h2>
<pre tabindex="0"><code>mysql&gt; SELECT * FROM users WHERE first_name LIKE 'u%';
+----+------------+---------------------+------+
| id | first_name | register_date       | age  |
+----+------------+---------------------+------+
|  3 | u2         | 2020-08-09 23:00:43 |    2 |
+----+------------+---------------------+------+
</code></pre><h2 id="conditions---in">Conditions - IN</h2>
<pre tabindex="0"><code>mysql&gt; SELECT * FROM users WHERE first_name IN('u2');
+----+------------+---------------------+------+
| id | first_name | register_date       | age  |
+----+------------+---------------------+------+
|  3 | u2         | 2020-08-09 23:00:43 |    2 |
+----+------------+---------------------+------+
1 row in set (0.00 sec)
</code></pre>]]></content>
        </item>
        
        <item>
            <title>SSH jump server on Raspberry pi</title>
            <link>/posts/2020/08/ssh-jump-server-on-raspberry-pi/</link>
            <pubDate>Sun, 02 Aug 2020 18:46:08 +0200</pubDate>
            
            <guid>/posts/2020/08/ssh-jump-server-on-raspberry-pi/</guid>
            <description>Introduction These are the steps to setup Raspberry pi as ssh jump server. Well, It&amp;rsquo;s not exactly Fort Knox but it&amp;rsquo;s better than exposing my machine directly to internet. This way i can ssh into RPI first then ssh into a machine on local network.
Get Dynamic DNS The first step is getting dynamic DNS. The problem is ISP can change my real IP any time(usually when router reboots). So, I need to either pay for fixed IP(obviously i am too cheap to do that) or setup dynamic DNS.</description>
            <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>These are the steps to setup Raspberry pi as ssh <a href="https://en.wikipedia.org/wiki/Jump_server">jump server</a>. Well, It&rsquo;s not exactly Fort Knox but it&rsquo;s better than exposing my machine directly to internet. This way i can ssh into RPI first then ssh into a machine on local network.</p>
<h1 id="get-dynamic-dns">Get Dynamic DNS</h1>
<p>The first step is getting dynamic DNS. The problem is ISP can change my real IP any time(usually when router reboots). So, I need to either pay for fixed IP(obviously i am too cheap to do that) or setup dynamic DNS. So, I quickly researched DDNS services and chose <a href="https://www.noip.com/">no-ip</a>. It&rsquo;s free but i need to login every 30 days which is not a deal breaker.</p>
<h1 id="rpi-setup">RPI setup</h1>
<p>I had RPI v1 that i never used after the initial testing 7 years ago. So, I thought put it to good use. I downloaded <a href="https://www.raspberrypi.org/downloads/raspberry-pi-os/">Raspberry Pi OS Lite</a>. it should be good enough because i am running it headless and i don&rsquo;t need full-blown desktop environment.</p>
<p>Following the steps in <a href="https://www.raspberrypi.org/documentation/installation/installing-images/linux.md">page</a> and <code>dd</code> the image on the SD card.</p>
<h2 id="ssh-boot">ssh boot</h2>
<p>I did some research to see if 1 need something specific for ssh. and i was right. According to <a href="https://hackernoon.com/raspberry-pi-headless-install-462ccabd75d0">page</a>, SSH need to find file <code>ssh</code> in <code>boot</code> partition.</p>
<p>So, I mounted the boot partition, created the file, umount the SD card and we are good to go.</p>
<h2 id="connecting-to-rpi">Connecting to RPI</h2>
<p>Once I connected te Ethernet and USB power, it saw the leds blinking. Good sign!</p>
<p>I figured outRPI IP by checking the router connected devices. i could have done network scanning but life is too short!.</p>
<p>At this point, I need the user and password initial setup for <code>Raspberry pi OS</code>. and viola, it also mentioned in <a href="https://hackernoon.com/raspberry-pi-headless-install-462ccabd75d0">page</a>.</p>
<pre tabindex="0"><code>username: pi
password: raspberry
</code></pre><p>once I ssh&rsquo;ed into RPI, I changeed the password for <code>pi</code> user. <em>THIS IS IMPORTANT</em></p>
<h2 id="setting-static-ip">Setting static IP</h2>
<p>To connect to RPI easily, it&rsquo;s good idea to set a static IP. The details are at <a href="https://thepihut.com/blogs/raspberry-pi-tutorials/how-to-give-your-raspberry-pi-a-static-ip-address-update">page</a>. but basically, It&rsquo;s just telling DHCP to use that static IP.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo vi  /etc/dhcpcd.conf
</code></pre></div><p>And changed the addr and router to required IP and router gateway.</p>
<pre tabindex="0"><code>static ip_address=192.168.0.10/24
static routers=192.168.0.1
static domain_name_servers=192.168.0.1
</code></pre><p>Finally, reboot or restart DHCP.</p>
<h2 id="harden-ssh">Harden SSH</h2>
<p>I can do the same steps i follow while setting up VPS. good resource at <a href="https://dev.to/zduey/how-to-set-up-an-ssh-server-on-a-home-computer">here</a>. usually disabling root login and fail2ban.</p>
<h1 id="configure-router">Configure Router</h1>
<p>The next steps are router-specific. So, i will keep very high level.</p>
<h2 id="dynamic-dns">Dynamic DNS</h2>
<p>Setup DDNS to point to <code>no-ip</code> hostname configured earlier. In my case, it was under &ldquo;network&rdquo; -&gt; Advanced.</p>
<p>It seems like not all routers support that. if it&rsquo;s doesn&rsquo;t, there is usually some software to run on the machine to get IP updates. Anyway, my router supports DDNS. So, I just added <code>no-ip</code> username, password and domain.</p>
<h2 id="port-forwarding">Port forwarding</h2>
<p>This is the most important step. This is basically telling the router to direct traffic coming on Port X to RPI IP and port.</p>
<p>for my router, it was under &ldquo;NAT Forwarding&rdquo;, Then &ldquo;virtual server&rdquo;. For this to work, it&rsquo;s required to have:</p>
<ul>
<li>internal IP</li>
<li>internal Port</li>
<li>External Port</li>
</ul>
<p>let&rsquo;s say traffic coming <code>real_ip:external_port</code> will forward <code>internal_ip:internal_port</code>.</p>
<p>for ssh, default port is 22. so, the internal port is 22 unless it&rsquo;s changed.</p>
<h2 id="bonus-ip-address-reservation">Bonus: IP Address Reservation</h2>
<p>beside setting up static IP on the RPI, I also setup added RPI static IP and MAC to DHCP <code>reservation list</code>.</p>
<p>I don&rsquo;t really need to do that but it wouldn&rsquo;t hurt to restrict that IP to RPI MAC number.</p>
<h1 id="connect-to-server-through">Connect to server through</h1>
<pre tabindex="0"><code>ssh -J &lt;user&gt;@&lt;PUBLIC IP&gt;:&lt;PUBLIC PORT&gt; &lt;user&gt;@&lt;server local IP&gt;:&lt;SERVER IP&gt;
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Yosys Nextpnr Flow</title>
            <link>/posts/2020/07/yosys-nextpnr-flow/</link>
            <pubDate>Thu, 23 Jul 2020 18:10:09 +0200</pubDate>
            
            <guid>/posts/2020/07/yosys-nextpnr-flow/</guid>
            <description>I came across this riscv core. I was more interested in the setup to run Yosys and nextpnr all the way to bitstream.
The default target is board with ICE40 FPGA. These are steps the Makefile used to build bitstream.
Pre-synthesis starting with icepll, it&amp;rsquo;s part of icestorm project to reverse-engineer the binary format for ICE40 fpga.
icepll -q -i 12 -o 48 -m -f pll.sv The generated pll is wrapper around Lattice&amp;rsquo;s SB_PLL40_CORE.</description>
            <content type="html"><![CDATA[<p>I came across this <a href="https://github.com/grahamedgecombe/icicle.git">riscv core</a>. I was more interested in the setup to run Yosys and nextpnr all the way to bitstream.</p>
<p>The default target is <a href="https://www.digikey.com/product-detail/en/lattice-semiconductor-corporation/ICE40HX8K-B-EVN/220-1874-ND/4738851">board</a> with <a href="http://www.latticesemi.com/iCE40">ICE40</a> FPGA. These are steps the Makefile used to build bitstream.</p>
<h1 id="pre-synthesis">Pre-synthesis</h1>
<p>starting with <code>icepll</code>, it&rsquo;s part of <a href="https://github.com/cliffordwolf/icestorm.git">icestorm</a> project to reverse-engineer the binary format for ICE40 fpga.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">icepll -q -i <span style="color:#ff0;font-weight:bold">12</span> -o <span style="color:#ff0;font-weight:bold">48</span> -m -f pll.sv
</code></pre></div><p>The generated <code>pll</code> is wrapper around Lattice&rsquo;s <code>SB_PLL40_CORE</code>. I guess pll was needed to generated higher frequency. the on-baoard clock was 12 MHz and generated clock is 48 MHz.</p>
<pre tabindex="0"><code>module pll(
	input  clock_in,
	output clock_out,
	output locked
	);

SB_PLL40_CORE #(
		.FEEDBACK_PATH(&quot;SIMPLE&quot;),
		.DIVR(4'b0000),		// DIVR =  0
		.DIVF(7'b0111111),	// DIVF = 63
		.DIVQ(3'b100),		// DIVQ =  4
		.FILTER_RANGE(3'b001)	// FILTER_RANGE = 1
	) uut (
		.LOCK(locked),
		.RESETB(1'b1),
		.BYPASS(1'b0),
		.REFERENCECLK(clock_in),
		.PLLOUTCORE(clock_out)
		);

endmodule
</code></pre><h1 id="synthesis">Synthesis</h1>
<p><a href="https://github.com/YosysHQ/yosys.git">Yosys</a> is OSS verilog synthesis tool. It support ICE40 and ECP5 lattice FPGAs.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">yosys -q ice40.ys
</code></pre></div><p><code>ice40.ys</code> reads <code>top.sv</code>, elaborate the the design, then finally synth for ice40 and generate both json and blif.</p>
<pre tabindex="0"><code>read_verilog -DICE40 -noautowire -sv top.sv
proc
opt -full
alumacc
share -aggressive
opt -full
synth_ice40 -abc2 -top top -blif top.blif -json top.json
</code></pre><h1 id="place-and-route">Place and route</h1>
<p><a href="https://github.com/YosysHQ/nextpnr.git">Nextpnr</a> is OSS FPGA PNR tool by the same people who did Yosys.</p>
<p>nextpnr takes synthesis json, pcf and configuration.It generate <code>.asc</code> file for icepack.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">nextpnr-ice40 -q --hx8k --package ct256 --json top.json --pcf boards/ice40hx8k-b-evn.pcf --freq <span style="color:#ff0;font-weight:bold">48</span> --asc top_syn.asc
</code></pre></div><p><code>.asc</code> is ASCII file to represent tile. utilities from icestorm project can pack and unpack asc files into and from bitstream.</p>
<h1 id="bitstream-generation">Bitstream generation</h1>
<p>icepack is part of of icestorm project which converts <code>.asc</code> to bitstream.</p>
<pre tabindex="0"><code>cp top_syn.asc top.asc
icepack -s top.asc top.bin
</code></pre>]]></content>
        </item>
        
        <item>
            <title>APB Tutorial</title>
            <link>/posts/2020/07/apb-tutorial/</link>
            <pubDate>Thu, 23 Jul 2020 14:36:41 +0200</pubDate>
            
            <guid>/posts/2020/07/apb-tutorial/</guid>
            <description>This is walk through in APB specification AMBA 3 APB Protocol. The spec is short but i thought to document my notes anyway.
Introduction APB is AMBA low-speed bus that provide basic write/read transfer. no pipelines with minimum access time of 2 cycles.
Transfers Chapter 2 explains write and read transfer with 2 variants
 no wait ( exactly 2 cycles) wait (more that 2 cycles)  I will go through the write transfer and how that related to FSM in chapter 2.</description>
            <content type="html"><![CDATA[<p>This is walk through in APB specification <code>AMBA 3 APB Protocol</code>. The spec is short but i thought to document my notes anyway.</p>
<h1 id="introduction">Introduction</h1>
<p>APB is AMBA low-speed bus that provide basic write/read transfer. no pipelines with minimum access time of 2 cycles.</p>
<h1 id="transfers">Transfers</h1>
<p>Chapter 2 explains  write and read transfer with 2 variants</p>
<ul>
<li>no wait ( exactly 2 cycles)</li>
<li>wait (more that 2 cycles)</li>
</ul>
<p>I will go through the write transfer and how that related to FSM in chapter 2. Read transfer should be the same.</p>
<p>For no-wait write transfer, the spec provide the following timing diagram.</p>
<p><img src="/apb-1.png" alt="Example image"></p>
<p>The order of event in the diagram:</p>
<ul>
<li>at T1, master asserts PSEL, PADDR, PWRITE</li>
<li>at T2, master asserts PENABLE, slave asserts PREADY</li>
<li>at T3, date is Latched and transfer is done.</li>
</ul>
<p>Quick and dirty model of the master would something like</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    @(<span style="color:#fff;font-weight:bold">posedge</span> PRESETn);
    @(<span style="color:#fff;font-weight:bold">posedge</span> PCLK);
    PSELx = <span style="color:#ff0;font-weight:bold">1</span>;
    PADDR  = <span style="color:#ff0;font-weight:bold">0</span>;
    PWRITE = <span style="color:#ff0;font-weight:bold">1</span>;
    PWDATA = <span style="color:#ff0;font-weight:bold">2</span>;
    @(<span style="color:#fff;font-weight:bold">posedge</span> PCLK);
    PENABLE = <span style="color:#ff0;font-weight:bold">1</span>;
    @(<span style="color:#fff;font-weight:bold">posedge</span> PCLK);
    PSELx = <span style="color:#ff0;font-weight:bold">0</span>;
    PENABLE = <span style="color:#ff0;font-weight:bold">0</span>;
</code></pre></div><p>In case of wait transfer, slave can introduce wait states with <code>PREADY</code>. and the master has to keep the all signals stable until <code>PREADY</code> is asserted.</p>
<p><img src="/apb-2.png" alt="Example image"></p>
<h1 id="apb-master-fsm">APB master FSM</h1>
<p>Chapter 3 shows the following FSM for APB transfer. It shows the 3 transition on master signals during 2 cycles (T1, T2, T3).</p>
<p><img src="/apb-3.png" alt="Example image"></p>
<p>So, What about the slave FSM? The slave has to be one clock cycle behind the master. So, for no-wait, the <code>PREADY</code> is asserted in the setup state or stay de-asserted until slave is ready for transfer.</p>
<p>The slave should be simpler than the master. basically, slave needs to do 2 things</p>
<ul>
<li>Wait for PSEL and assert PREADY if ready.</li>
<li>Do the transfer (read or write) whenever both PENABLE and PREADY.</li>
</ul>
<p>I wrote small(again quick and dirty) slave model. I assume the slave will have internal flag to inidcate it&rsquo;s ready to do the transfer. in this example <code>ready</code>.</p>
<p>If both <code>ready</code> and <code>PSEL</code> are asserted, <code>PREADY</code> will be asserted.</p>
<p>If the master starts new transfer, it will have to go back to setup/idle which means <code>PENABLE</code> will de-asserted anyway.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#007f7f">// internal ready flag
</span><span style="color:#007f7f"></span><span style="color:#fff;font-weight:bold">logic</span> ready=<span style="color:#ff0;font-weight:bold">0</span>;
<span style="color:#fff;font-weight:bold">logic</span> pready;

<span style="color:#fff;font-weight:bold">assign</span> PREADY = pready;

<span style="color:#fff;font-weight:bold">always</span> @(<span style="color:#fff;font-weight:bold">posedge</span> PCLK) <span style="color:#fff;font-weight:bold">begin</span>
    <span style="color:#fff;font-weight:bold">if</span> (PRESETn == <span style="color:#ff0;font-weight:bold">0</span> ) <span style="color:#fff;font-weight:bold">begin</span>
        pready &lt;= #<span style="color:#ff0;font-weight:bold">1</span> <span style="color:#ff0;font-weight:bold">1</span><span style="color:#ff0;font-weight:bold">&#39;b1</span>;
    <span style="color:#fff;font-weight:bold">end</span>
    <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">begin</span>
        <span style="color:#fff;font-weight:bold">if</span> (PSELx == <span style="color:#ff0;font-weight:bold">1</span>)  <span style="color:#fff;font-weight:bold">begin</span>
            <span style="color:#fff;font-weight:bold">if</span>(ready == <span style="color:#ff0;font-weight:bold">1</span>) <span style="color:#fff;font-weight:bold">begin</span>
                pready &lt;= #<span style="color:#ff0;font-weight:bold">1</span> <span style="color:#ff0;font-weight:bold">1</span>;
            <span style="color:#fff;font-weight:bold">end</span>
            <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">begin</span>
                pready &lt;= #<span style="color:#ff0;font-weight:bold">1</span> <span style="color:#ff0;font-weight:bold">0</span>;
            <span style="color:#fff;font-weight:bold">end</span>
        <span style="color:#fff;font-weight:bold">end</span>
    <span style="color:#fff;font-weight:bold">end</span>
<span style="color:#fff;font-weight:bold">end</span>

<span style="color:#fff;font-weight:bold">always</span> @(<span style="color:#fff;font-weight:bold">posedge</span> PCLK) <span style="color:#fff;font-weight:bold">begin</span>
    <span style="color:#fff;font-weight:bold">if</span> (pready &amp;&amp; PENABLE) <span style="color:#fff;font-weight:bold">begin</span>
    <span style="color:#fff;font-weight:bold">$display</span>(<span style="color:#fff;font-weight:bold">$time</span>,, <span style="color:#0ff;font-weight:bold">&#34;DATA ADDR=%x, DATA=%x&#34;</span>, PADDR, PWDATA);
    <span style="color:#fff;font-weight:bold">end</span>
<span style="color:#fff;font-weight:bold">end</span>
</code></pre></div><p>I used iverilog and gtkwave to test the master and slave above which works. kinda!</p>
<p><img src="/apb-4.png" alt="Example image"></p>
]]></content>
        </item>
        
        <item>
            <title>Nginx Configuration</title>
            <link>/posts/2020/07/nginx-configuration/</link>
            <pubDate>Wed, 15 Jul 2020 20:52:51 +0200</pubDate>
            
            <guid>/posts/2020/07/nginx-configuration/</guid>
            <description>apt install nginx allow HTTP and HTTPS ports sudo ufw allow https sudo ufw allow http Add nginx configuration touch /etc/nginx/sites-available/foobar.com.conf ln -s /etc/nginx/sites-available/foobar.com.conf /etc/nginx/sites-enable server { listen 80; listen [::]:80; server_name foobar.com www.foobar.com; root /var/www/example.com; index index.html; location / { try_files $uri $uri/ =404; } } then reload nginx
service nginx reload Change DNS on domain and DNS provider Change the domain to point to your VPS provider. In my case, I am using digitalocean.</description>
            <content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">apt install nginx
</code></pre></div><h1 id="allow-http-and-https-ports">allow HTTP and HTTPS ports</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo ufw allow https
sudo ufw allow http
</code></pre></div><h1 id="add-nginx-configuration">Add nginx configuration</h1>
<pre tabindex="0"><code>touch /etc/nginx/sites-available/foobar.com.conf
ln -s /etc/nginx/sites-available/foobar.com.conf /etc/nginx/sites-enable

</code></pre><pre tabindex="0"><code>server {
        listen 80;
        listen [::]:80;

        server_name foobar.com www.foobar.com;

        root /var/www/example.com;
        index index.html;

        location / {
                try_files $uri $uri/ =404;
        }
}

</code></pre><p>then reload nginx</p>
<pre tabindex="0"><code>service nginx reload
</code></pre><h1 id="change-dns-on-domain-and-dns-provider">Change DNS on domain and DNS provider</h1>
<p>Change the domain to point to your VPS provider. In my case, I am using digitalocean.</p>
<pre tabindex="0"><code>ns1.digitalocean.com
ns2.digitalocean.com
ns3.digitalocean.com

</code></pre><p>Then create Domain Entry with VPS provider with &ldquo;foobar.com&rdquo;. under the domain, create 2 &ldquo;A&rdquo; records to point to the VPS with nginx</p>
<ul>
<li>foobar.com</li>
<li><a href="http://www.foobar.com">www.foobar.com</a></li>
</ul>
<h1 id="lets-encrypt-for-ssl">Let&rsquo;s Encrypt for SSL</h1>
<pre tabindex="0"><code>sudo add-apt-repository ppa:certbot/certbot
sudo apt install python-certbot-nginx
</code></pre><p>run certbot and follow the steps:</p>
<pre tabindex="0"><code>sudo certbot --nginx -d foobar.com -d www.foobar.com
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Stm32f4 Discovery - Part1 - ARM Cortex M4 Initialization</title>
            <link>/posts/2020/07/stm32f4-discovery-part1-arm-cortex-m4-initialization/</link>
            <pubDate>Sat, 11 Jul 2020 17:48:31 +0200</pubDate>
            
            <guid>/posts/2020/07/stm32f4-discovery-part1-arm-cortex-m4-initialization/</guid>
            <description>Introduction This post will explain the linker script and assembly initialization before jumping to main using stm32f4 board and Hello world example from github.
The end I will describe this the same way i gone through it. Starting with the linking command.
arm-none-eabi-gcc -g -O2 -Wall -Tstm32_flash.ld -mlittle-endian -mthumb -mcpu=cortex-m4 -mthumb-interwork -mfloat-abi=hard -mfpu=fpv4-sp-d16 -Iinc -Ilib -Ilib/inc -Ilib/inc/core -Ilib/inc/peripherals src/main.c src/stm32f4xx_it.c src/system_stm32f4xx.c lib/startup_stm32f4xx.s -o main.elf -Llib -lstm32f4 Starting with main.c, well nothing interesting there.</description>
            <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>This post will explain the linker script and assembly initialization before jumping to main using <a href="https://www.st.com/en/evaluation-tools/stm32f4discovery.html">stm32f4</a> board and Hello world example from <a href="git://github.com/jeremyherbert/stm32-templates.git">github</a>.</p>
<h1 id="the-end">The end</h1>
<p>I will describe this the same way i gone through it. <em>Starting with the linking command</em>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">arm-none-eabi-gcc -g -O2 -Wall -Tstm32_flash.ld  -mlittle-endian -mthumb -mcpu=cortex-m4 -mthumb-interwork -mfloat-abi=hard -mfpu=fpv4-sp-d16 -Iinc -Ilib -Ilib/inc  -Ilib/inc/core -Ilib/inc/peripherals  src/main.c src/stm32f4xx_it.c src/system_stm32f4xx.c lib/startup_stm32f4xx.s -o main.elf -Llib -lstm32f4
</code></pre></div><p>Starting with <code>main.c</code>, well nothing interesting there. just the <code>main</code>, obviously.</p>
<p>So,I jumped to <code>system_stm32f4xx.c</code>, it has 2 functions but only <code>SystemInit</code> called somewhere else. It&rsquo;s called from <code>startup_stm32f4xx.s</code> specifically from routine <code>Reset_Handler</code>.</p>
<p>From the snippet below, it&rsquo;s clear that <code>Reset_Handler</code> is the bootstrap routine because it does two things</p>
<ul>
<li>Hardware-specific initialization with <code>SystemInit</code></li>
<li>Jump to <code>main</code></li>
</ul>
<pre tabindex="0"><code>/* Call the clock system intitialization function.*/
  bl  SystemInit   
/* Call static constructors */
    bl __libc_init_array
/* Call the application's entry point.*/
  bl  main
  bx  lr 
</code></pre><h1 id="reset_handler-and-arm-m4-boot">Reset_Handler and ARM M4 boot</h1>
<p><code>Reset_Handler</code> is 2nd entry in interrupt vector <code>isr_vector</code> defined in the same file.</p>
<pre tabindex="0"><code>   .section  .isr_vector,&quot;a&quot;,%progbits
  .type  g_pfnVectors, %object
  .size  g_pfnVectors, .-g_pfnVectors
    
    
g_pfnVectors:
  .word  _estack
  .word  Reset_Handler
  .word  NMI_Handler
</code></pre><p>So, How is <code>Reset_Handler</code> is called?</p>
<p><a href="https://www.st.com/resource/en/reference_manual/dm00031020-stm32f405-415-stm32f407-417-stm32f427-437-and-stm32f429-439-advanced-arm-based-32-bit-mcus-stmicroelectronics.pdf">stm32 RM</a> Describes the boot process from address <code>0x0000 0000</code>.</p>
<blockquote>
<p>Due to its fixed memory map, the code area starts from address 0x0000 0000 (accessed
through the ICode/DCode buses) while the data area (SRAM) starts from address
0x2000 0000 (accessed through the system bus). The CortexTM-M4 with FPU CPU always
fetches the reset vector on the ICode bus, which implies to have the boot space available
only in the code area (typically, Flash memory). STM32F4xx microcontrollers implement a
special mechanism to be able to boot from other memories (like the internal SRAM).</p>
</blockquote>
<p>And next section describes the memory remap to allow ICode to access the boot memories (Flash, SRAM).</p>
<blockquote>
<p>Physical remap in STM32F405xx/07xx and STM32F415xx/17xx
Once the boot pins are selected, the application software can modify the memory
accessible in the code area (in this way the code can be executed through the ICode bus in</p>
</blockquote>
<p>The way i understand it, the boot mode is selected based on BOOT1 and BOOT0. and the address range starting 0x00000000 gets remapped to the boot source. Table 3 shows that mapping.</p>
<p>And finally it mentions, the first 2 entries that the core need. So, we know that core will start executing from address at 0x00000004. in our case, 0x080000000 + 0x00000004.</p>
<blockquote>
<p>The BOOT pins are also resampled when the device exits the Standby mode. Consequently,
they must be kept in the required Boot mode configuration when the device is in the Standby
mode. After this startup delay is over, the CPU fetches the top-of-stack value from address
0x0000 0000, then starts code execution from the boot memory starting from 0x0000 0004.</p>
</blockquote>
<p>So, we know what the program will execute somewhere after 0x08000000 and  we need to put the address of  <code>Reset_Handler</code> at offset 0x00000004.</p>
<p>how is that done?</p>
<h1 id="the-linker-black-magic">The linker black magic</h1>
<p><code>stm32_flash.ld</code> defines the memory regions and how sections will be linked into the final ELF.</p>
<h2 id="the-memory-map">The memory map</h2>
<p><code>MEMORY</code> defines the memory map available on the system bus. Note that FLASH origin at <code>0x08000000</code> and RAM origin at <code>0x20000000</code> as defined by <a href="https://www.st.com/resource/en/reference_manual/dm00031020-stm32f405-415-stm32f407-417-stm32f427-437-and-stm32f429-439-advanced-arm-based-32-bit-mcus-stmicroelectronics.pdf">RM</a></p>
<pre tabindex="0"><code>MEMORY
{
  FLASH (rx)      : ORIGIN = 0x08000000, LENGTH = 1024K
  RAM (xrw)       : ORIGIN = 0x20000000, LENGTH = 192K
  MEMORY_B1 (rx)  : ORIGIN = 0x60000000, LENGTH = 0K
}
</code></pre><h2 id="ist_vector">ist_vector</h2>
<p>This section puts <code>isr_vector</code> section into the FLASH memory region and being the first one, it will be placed at address <code>0x080000000</code>. Remember the memory remap from the last section? this means that <code>Reset_Handler</code> will be at the correct address.</p>
<pre tabindex="0"><code>  .isr_vector :
  {
    . = ALIGN(4);
    KEEP(*(.isr_vector)) /* Startup code */
    . = ALIGN(4);
  } &gt;FLASH

</code></pre><p>Dumping the elf section after linking with <code>arm-none-eabi-objdump -x main.elf</code> shows the ist_vector at address <code>0800000</code>.</p>
<pre tabindex="0"><code>Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
</code></pre><h2 id="text">text</h2>
<p>Same as isr_vector, the <code>.text</code> section is the executable code will go into the FLASH region.</p>
<pre tabindex="0"><code>  /* The program code and other data goes into FLASH */
  .text :
  {
    . = ALIGN(4);
    *(.text)           /* .text sections (code) */
    *(.text*)          /* .text* sections (code) */

  } &gt;FLASH

</code></pre><p>with <code>objdump</code>, we see that <code>.text</code> section starts right after isr_vector at <code>0x08000188</code></p>
<pre tabindex="0"><code>  1 .text         00000ea8  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

</code></pre><h2 id="data-and-bss">data and BSS</h2>
<p>Data and BSS are used for static variables in each object file. data is used to allocate variables with initial value. BSS used for variables without initial value.</p>
<p>There are 3 important parts here</p>
<ul>
<li><code>_sidata</code> before the <code>.data</code> section</li>
<li><code>.data : AT ( _sidata )</code> while defining the data section</li>
<li><code>_sdata</code> and <code>_edata</code></li>
</ul>
<pre tabindex="0"><code>  /* used by the startup to initialize data */
  _sidata = .;

  /* Initialized data sections goes into RAM, load LMA copy after code */
  .data : AT ( _sidata )
  {
    . = ALIGN(4);
    _sdata = .;        /* create a global symbol at data start */
    *(.data)           /* .data sections */
    *(.data*)          /* .data* sections */

    . = ALIGN(4);
    _edata = .;        /* define a global symbol at data end */
  } &gt;RAM

</code></pre><p>By doing <code>_sidata =.;</code>,  we store the current address(that depends on how big sections were) in <code>_sidata</code>.</p>
<p>Next, By using <code>AT</code> for <code>.data</code>, we define the <code>VMA</code> and <code>LMA</code> to be different. in this case</p>
<ul>
<li><code>VMA</code> will be the address from RAM (from <code>&gt;RAM</code>)</li>
<li><code>LMA</code> will be the address we are at the ELF(or in this case, FLASH).</li>
</ul>
<p><em>What are LMA and VMA and why they are important?</em></p>
<p>The problem is  data are read/write regions so, it lives in the RAM but we need to allocate initial values in the FLASH . We will see that <code>Reset_Handler</code> will need to copy that from the flash to the RAM.
But Linker will use VMA to resolve and relocate the variables. More details at <a href="https://sourceware.org/binutils/docs/ld/Output-Section-LMA.html#Output-Section-LMA">ld doc</a>.</p>
<p>With <code>odjdump</code>, We can see the difference between <code>LMA</code> and <code>VMA</code>.
Note that wasn&rsquo;t the case in <code>.text</code> and <code>.bss</code>.</p>
<pre tabindex="0"><code>Idx Name          Size      VMA       LMA       File off  Algn
  5 .data         00000458  20000000  08001040  00010000  2**3
  6 .jcr          00000004  20000458  08001498  00010458  2**2
  7 .bss          00000024  2000045c  0800149c  0001045c  2**2

</code></pre><p>So, at this points we have 3 addresses</p>
<ul>
<li><code>_sidata</code> : address of data in elf (AKA flash) relative 08000000</li>
<li><code>_sdata</code>  : start address for data section the ram relative 20000000</li>
<li><code>_edata</code>  : end address for data section the ram.</li>
</ul>
<p>for BSS, it&rsquo;s same. There are addresses <code>_sbss</code> and <code>_ebss</code> like we have <code>_sdata</code> and <code>_edata</code>.</p>
<h1 id="what-does-reset_handler-do">What Does Reset_handler do?</h1>
<p>At this point, we have done the following:</p>
<ul>
<li>Went through ARM M4 boot sequence and saw how it eventually calls <code>Reset_Handler</code>.</li>
<li>Understood how the linker script tells the linker where to loads elf sections in FLASH and RAM regions.</li>
</ul>
<p>Now that <code>Reset_Handler</code> is called. It does 4 things:</p>
<ul>
<li>Initialize the data section by copying from the flash to the ram. This is done by <code>LoopCopyDataInit</code> and using <code>_sidata</code>, <code>_sdata</code> and <code>_edata</code>.</li>
<li>Initialize BSS section in ram with zeros. This is done by <code>LoopFillZerobss</code> and uses <code>_sbss</code> and <code>_ebss</code>.</li>
<li>Calls <code>SystemInit</code></li>
<li>Calls <code>main</code></li>
</ul>
<p>Note, <code>__libc_init_array</code> seems like call-back from compiler/libc to initialized things before calling the main. Not even trying to go there!</p>
<pre tabindex="0"><code>Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
  ldr  r3, =_edata
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
  b  LoopFillZerobss
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
  cmp  r2, r3
  bcc  FillZerobss

/* Call the clock system intitialization function.*/
  bl  SystemInit   
/* Call static constructors */
    bl __libc_init_array
/* Call the application's entry point.*/
  bl  main
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Golang Part1</title>
            <link>/posts/2020/07/golang-part1/</link>
            <pubDate>Fri, 10 Jul 2020 01:59:51 +0200</pubDate>
            
            <guid>/posts/2020/07/golang-part1/</guid>
            <description>These are notes i document while learning Go.
Go package the core of GO is packages. the main package contains one main function which is entry point for the build elf. The ways i can run this file
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) func main() { fmt.Println(os.Args) }  Passing the file directory  go build main.go  Passing the directory. In this case, the files in that directory will be compiled to generate the elf binary.</description>
            <content type="html"><![CDATA[<p>These are notes i document while learning Go.</p>
<h1 id="go-package">Go package</h1>
<p>the core of GO is packages. the main package contains one main function which is entry point for the build elf.
The ways i can run this file</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#fff;font-weight:bold">package</span> main

<span style="color:#fff;font-weight:bold">import</span> (
	<span style="color:#0ff;font-weight:bold">&#34;fmt&#34;</span>
	<span style="color:#0ff;font-weight:bold">&#34;os&#34;</span>
)

<span style="color:#fff;font-weight:bold">func</span> main() {
	fmt.Println(os.Args)
}
</code></pre></div><ul>
<li>Passing the file directory</li>
</ul>
<pre tabindex="0"><code>go build main.go
</code></pre><ul>
<li>Passing the directory. In this case, the files in that directory will be compiled to generate the elf binary.</li>
</ul>
<pre tabindex="0"><code>go build ./
</code></pre><p>Note that all names should be unique in the files compiled into the same package.</p>
<h1 id="user-defined-package">User defined package</h1>
<p>By default, go searches the the go <code>worksapaces</code>. The <code>workspace</code> is directory that contains <code>src</code> and <code>pkg</code> directory.</p>
<pre tabindex="0"><code>&lt;GOPATH&gt;/src/github.com/&lt;user&gt;/packages/
├── main.go
└── pks
    └── pks.go
</code></pre><p>for that we need to set the GOPATH. In main.go, <code>pks</code> needs to be imported relative to GOPATH.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#fff;font-weight:bold">package</span> main

<span style="color:#fff;font-weight:bold">import</span> (
	<span style="color:#0ff;font-weight:bold">&#34;fmt&#34;</span>
	<span style="color:#0ff;font-weight:bold">&#34;math/rand&#34;</span>
	<span style="color:#0ff;font-weight:bold">&#34;github.com/&lt;user&gt;/packages/pks&#34;</span>
)

<span style="color:#fff;font-weight:bold">func</span> main() {
	fmt.Println(<span style="color:#0ff;font-weight:bold">&#34;My favorite number is&#34;</span>, rand.Intn(<span style="color:#ff0;font-weight:bold">10</span>))
	pks.F(<span style="color:#0ff;font-weight:bold">&#34;Test&#34;</span>)
	F(<span style="color:#0ff;font-weight:bold">&#34;test1&#34;</span>)
}
</code></pre></div><p>The trick here is the export symbols(variable or functions) should start with Capital char.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#fff;font-weight:bold">package</span> pks

<span style="color:#fff;font-weight:bold">import</span> <span style="color:#0ff;font-weight:bold">&#34;fmt&#34;</span>

<span style="color:#fff;font-weight:bold">func</span> F(i1 <span style="color:#fff;font-weight:bold">string</span>) {
	fmt.Println(i1)
}

</code></pre></div><h1 id="env-variables">Env variables</h1>
<p><code>os.Getenv</code> and <code>os.Setenv</code> are used for well Getting and Setting variables.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#fff;font-weight:bold">package</span> main

<span style="color:#fff;font-weight:bold">import</span> (
	<span style="color:#0ff;font-weight:bold">&#34;fmt&#34;</span>
	<span style="color:#0ff;font-weight:bold">&#34;os&#34;</span>
	<span style="color:#0ff;font-weight:bold">&#34;strings&#34;</span>
)

<span style="color:#fff;font-weight:bold">func</span> main() {

	gopath := os.Getenv(<span style="color:#0ff;font-weight:bold">&#34;GOPATH&#34;</span>)
	fmt.Println(gopath)
	<span style="color:#fff;font-weight:bold">for</span> _, g := <span style="color:#fff;font-weight:bold">range</span> strings.Split(gopath, <span style="color:#0ff;font-weight:bold">&#34;:&#34;</span>) {
		fmt.Println(g)
	}
	os.Setenv(<span style="color:#0ff;font-weight:bold">&#34;GOPATH1&#34;</span>, gopath)
	<span style="color:#fff;font-weight:bold">for</span> _, e := <span style="color:#fff;font-weight:bold">range</span> os.Environ() {
		fmt.Println(e)
	}
}
</code></pre></div><h1 id="command-line-arguments">Command line arguments</h1>
<p><code>os.Args</code> is <code>[]string</code>. I can&rsquo;t find <code>argc</code> but there is <code>len(os.Args)</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#fff;font-weight:bold">package</span> main

<span style="color:#fff;font-weight:bold">import</span> (
	<span style="color:#0ff;font-weight:bold">&#34;fmt&#34;</span>
	<span style="color:#0ff;font-weight:bold">&#34;os&#34;</span>
)

<span style="color:#fff;font-weight:bold">func</span> main() {

	fmt.Println(os.Args)

	<span style="color:#fff;font-weight:bold">for</span> _, a := <span style="color:#fff;font-weight:bold">range</span> os.Args {
		fmt.Println(a)
	}
}
</code></pre></div><h1 id="files-and-directory">Files and Directory</h1>
<p><code>ReadDir</code> takes string and return slice of type <code>FileInfo</code>. there are some basic types <code>File</code>, <code>FileInfo</code> and <code>FileMode</code>. Full <code>os</code> package docs at <a href="https://golang.org/pkg/os/">golang doc</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#fff;font-weight:bold">package</span> main

<span style="color:#fff;font-weight:bold">import</span> (
	<span style="color:#0ff;font-weight:bold">&#34;fmt&#34;</span>
	<span style="color:#0ff;font-weight:bold">&#34;io/ioutil&#34;</span>
	<span style="color:#0ff;font-weight:bold">&#34;os&#34;</span>
)

<span style="color:#fff;font-weight:bold">func</span> main() {
	fmt.Println(<span style="color:#0ff;font-weight:bold">&#34;Hello gotree&#34;</span>)

	<span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">len</span>(os.Args) &lt; <span style="color:#ff0;font-weight:bold">2</span> {
		fmt.Println(<span style="color:#0ff;font-weight:bold">&#34;Missing argument: Path to diretory&#34;</span>)
		os.Exit(<span style="color:#ff0;font-weight:bold">1</span>)
	}
	dir := os.Args[<span style="color:#ff0;font-weight:bold">1</span>]

	files, err := ioutil.ReadDir(dir)
	fmt.Println(err)

	<span style="color:#fff;font-weight:bold">for</span> _, file := <span style="color:#fff;font-weight:bold">range</span> files {

		<span style="color:#fff;font-weight:bold">if</span> file.IsDir() {
			fmt.Println(<span style="color:#0ff;font-weight:bold">&#34;Directory:&#34;</span> + file.Name())
		} <span style="color:#fff;font-weight:bold">else</span> {
			fmt.Println(file.Name())
		}
	}
}
</code></pre></div><h1 id="writing-and-reading-files">Writing and Reading Files</h1>
<p><code>os.OpenFile</code> takes path, Flags and permissions. Then <code>File.Write</code> of <code>File.WriteString</code>.
There is also <code>ioutil.ReadFile</code> to read the whole in one go.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#fff;font-weight:bold">package</span> main

<span style="color:#fff;font-weight:bold">import</span> (
	<span style="color:#0ff;font-weight:bold">&#34;fmt&#34;</span>
	<span style="color:#0ff;font-weight:bold">&#34;io/ioutil&#34;</span>
	<span style="color:#0ff;font-weight:bold">&#34;os&#34;</span>
)

<span style="color:#fff;font-weight:bold">func</span> main() {
	fmt.Println(<span style="color:#0ff;font-weight:bold">&#34;Hello&#34;</span>)

	<span style="color:#007f7f">// Write
</span><span style="color:#007f7f"></span>	f, err := os.OpenFile(<span style="color:#0ff;font-weight:bold">&#34;tmp.txt&#34;</span>, os.O_RDWR|os.O_CREATE, <span style="color:#ff0;font-weight:bold">0777</span>)
	<span style="color:#fff;font-weight:bold">if</span> err != <span style="color:#fff;font-weight:bold">nil</span> {
		fmt.Println(err)
	}
	fmt.Println(f.Name())

	n := []<span style="color:#fff;font-weight:bold">byte</span>{<span style="color:#ff0;font-weight:bold">65</span>}
	f.Write(n)

	f.WriteString(<span style="color:#0ff;font-weight:bold">&#34;This is text&#34;</span>)
	f.Close()

	<span style="color:#007f7f">// Reading
</span><span style="color:#007f7f"></span>	f, err = os.OpenFile(<span style="color:#0ff;font-weight:bold">&#34;/etc/passwd&#34;</span>, os.O_RDONLY, <span style="color:#ff0;font-weight:bold">0777</span>)
	<span style="color:#fff;font-weight:bold">if</span> err != <span style="color:#fff;font-weight:bold">nil</span> {
		fmt.Println(err)
	}

	b1 := <span style="color:#fff;font-weight:bold">make</span>([]<span style="color:#fff;font-weight:bold">byte</span>, <span style="color:#ff0;font-weight:bold">5</span>)
	n1, err := f.Read(b1)
	fmt.Println(<span style="color:#fff;font-weight:bold">string</span>(b1))
	fmt.Println(n1, err)
	f.Close()

	b2, err := ioutil.ReadFile(<span style="color:#0ff;font-weight:bold">&#34;/etc/passwd&#34;</span>)
	<span style="color:#fff;font-weight:bold">if</span> err != <span style="color:#fff;font-weight:bold">nil</span> {
		fmt.Println(err)
	}
	fmt.Println(<span style="color:#fff;font-weight:bold">string</span>(b2))
}
</code></pre></div><h1 id="slices">Slices</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#fff;font-weight:bold">package</span> main

<span style="color:#fff;font-weight:bold">import</span> (
	<span style="color:#0ff;font-weight:bold">&#34;fmt&#34;</span>
)

<span style="color:#fff;font-weight:bold">func</span> main() {
	fmt.Println(<span style="color:#0ff;font-weight:bold">&#34;Slices&#34;</span>)

	<span style="color:#007f7f">// Slice is refernce to part of Array
</span><span style="color:#007f7f"></span>	b := [<span style="color:#ff0;font-weight:bold">5</span>]<span style="color:#fff;font-weight:bold">string</span>{<span style="color:#0ff;font-weight:bold">&#34;A&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;b&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;c&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;D&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;E&#34;</span>}
	s := b[<span style="color:#ff0;font-weight:bold">1</span>:<span style="color:#ff0;font-weight:bold">4</span>]
	fmt.Println(s)
	s[<span style="color:#ff0;font-weight:bold">0</span>] = <span style="color:#0ff;font-weight:bold">&#34;THE&#34;</span>
	fmt.Println(b)

	<span style="color:#007f7f">// Slice literal
</span><span style="color:#007f7f"></span>	bl := []<span style="color:#fff;font-weight:bold">bool</span>{<span style="color:#fff;font-weight:bold">true</span>, <span style="color:#fff;font-weight:bold">false</span>}
	fmt.Println(bl)

	<span style="color:#007f7f">// len, cap
</span><span style="color:#007f7f"></span>	s1 := []<span style="color:#fff;font-weight:bold">int</span>{<span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#ff0;font-weight:bold">3</span>, <span style="color:#ff0;font-weight:bold">5</span>, <span style="color:#ff0;font-weight:bold">7</span>, <span style="color:#ff0;font-weight:bold">11</span>, <span style="color:#ff0;font-weight:bold">13</span>}
	fmt.Println(<span style="color:#fff;font-weight:bold">cap</span>(s1), <span style="color:#fff;font-weight:bold">len</span>(s1))
	s2 := s1[<span style="color:#ff0;font-weight:bold">2</span>:<span style="color:#ff0;font-weight:bold">5</span>]
	fmt.Println(<span style="color:#fff;font-weight:bold">cap</span>(s2), <span style="color:#fff;font-weight:bold">len</span>(s2))

	<span style="color:#007f7f">// make(dynamic slices)
</span><span style="color:#007f7f"></span>	s3 := <span style="color:#fff;font-weight:bold">make</span>([]<span style="color:#fff;font-weight:bold">int</span>, <span style="color:#ff0;font-weight:bold">5</span>)
	fmt.Println(<span style="color:#fff;font-weight:bold">cap</span>(s3), <span style="color:#fff;font-weight:bold">len</span>(s3))

	<span style="color:#007f7f">// Append
</span><span style="color:#007f7f"></span>	s3 = <span style="color:#fff;font-weight:bold">append</span>(s3, s1...)
	fmt.Println(s3)
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Golang Part2</title>
            <link>/posts/2020/07/golang-part2/</link>
            <pubDate>Fri, 10 Jul 2020 01:59:51 +0200</pubDate>
            
            <guid>/posts/2020/07/golang-part2/</guid>
            <description>Maps map has to initialized with make
package main import &amp;#34;fmt&amp;#34; func main() { var m map[string]string m = make(map[string]string) m[&amp;#34;a&amp;#34;] = &amp;#34;a1&amp;#34; fmt.Println(m) } Structure type struct to create a container for variables. in this example, b1 variable of type Book. b2 is the same with initialized.
package main import &amp;#34;fmt&amp;#34; type Book struct { title string pages int } func main() { var b1 Book b1.pages = 100 b1.</description>
            <content type="html"><![CDATA[<h1 id="maps">Maps</h1>
<p>map has to initialized with <code>make</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#fff;font-weight:bold">package</span> main

<span style="color:#fff;font-weight:bold">import</span> <span style="color:#0ff;font-weight:bold">&#34;fmt&#34;</span>

<span style="color:#fff;font-weight:bold">func</span> main() {
	<span style="color:#fff;font-weight:bold">var</span> m <span style="color:#fff;font-weight:bold">map</span>[<span style="color:#fff;font-weight:bold">string</span>]<span style="color:#fff;font-weight:bold">string</span>
	m = <span style="color:#fff;font-weight:bold">make</span>(<span style="color:#fff;font-weight:bold">map</span>[<span style="color:#fff;font-weight:bold">string</span>]<span style="color:#fff;font-weight:bold">string</span>)
	m[<span style="color:#0ff;font-weight:bold">&#34;a&#34;</span>] = <span style="color:#0ff;font-weight:bold">&#34;a1&#34;</span>
	fmt.Println(m)
}
</code></pre></div><h1 id="structure">Structure</h1>
<p><code>type struct</code> to create a container for variables. in this example, <code>b1</code> variable of type <code>Book</code>. <code>b2</code> is the same with initialized.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#fff;font-weight:bold">package</span> main

<span style="color:#fff;font-weight:bold">import</span> <span style="color:#0ff;font-weight:bold">&#34;fmt&#34;</span>

<span style="color:#fff;font-weight:bold">type</span> Book <span style="color:#fff;font-weight:bold">struct</span> {
	title <span style="color:#fff;font-weight:bold">string</span>
	pages <span style="color:#fff;font-weight:bold">int</span>
}

<span style="color:#fff;font-weight:bold">func</span> main() {
	<span style="color:#fff;font-weight:bold">var</span> b1 Book

	b1.pages = <span style="color:#ff0;font-weight:bold">100</span>
	b1.title = <span style="color:#0ff;font-weight:bold">&#34;koko&#34;</span>
	fmt.Println(b1)

	b2 := Book{title: <span style="color:#0ff;font-weight:bold">&#34;b2&#34;</span>, pages: <span style="color:#ff0;font-weight:bold">100</span>}
	fmt.Println(b2)
}
</code></pre></div><h1 id="oop-ish">OOP-ish</h1>
<p>class can be defined with <code>type &lt;name&gt; struct</code>. the class methods can be defined with <code>type &lt;intf&gt; interface</code>. and finally to define type method.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#fff;font-weight:bold">package</span> main

<span style="color:#fff;font-weight:bold">import</span> <span style="color:#0ff;font-weight:bold">&#34;fmt&#34;</span>

<span style="color:#fff;font-weight:bold">type</span> PersonIntf <span style="color:#fff;font-weight:bold">interface</span> {
	GetAge() <span style="color:#fff;font-weight:bold">int</span>
}

<span style="color:#fff;font-weight:bold">type</span> Person <span style="color:#fff;font-weight:bold">struct</span> {
	name <span style="color:#fff;font-weight:bold">string</span>
	age  <span style="color:#fff;font-weight:bold">int</span>
}

<span style="color:#fff;font-weight:bold">func</span> (person Person) GetAge() <span style="color:#fff;font-weight:bold">int</span> {
	<span style="color:#fff;font-weight:bold">return</span> person.age
}

<span style="color:#fff;font-weight:bold">func</span> main() {
	p := Person{name: <span style="color:#0ff;font-weight:bold">&#34;ah&#34;</span>, age: <span style="color:#ff0;font-weight:bold">100</span>}
	fmt.Println(p)
	fmt.Println(p.GetAge())
}
</code></pre></div><h1 id="error-handling">Error Handling</h1>
<p>go handle error with multiple return functions. The second return can be error.
if all is well, you can return <code>nil</code>. in case of error, we can return <code>errors.New</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#fff;font-weight:bold">package</span> main

<span style="color:#fff;font-weight:bold">import</span> (
	<span style="color:#0ff;font-weight:bold">&#34;errors&#34;</span>
	<span style="color:#0ff;font-weight:bold">&#34;fmt&#34;</span>
)

<span style="color:#fff;font-weight:bold">func</span> e(i <span style="color:#fff;font-weight:bold">int</span>) (<span style="color:#fff;font-weight:bold">int</span>, <span style="color:#fff;font-weight:bold">error</span>) {
	<span style="color:#fff;font-weight:bold">if</span> i &lt; <span style="color:#ff0;font-weight:bold">0</span> {
		<span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>, errors.New(<span style="color:#0ff;font-weight:bold">&#34;bad&#34;</span>)
	} <span style="color:#fff;font-weight:bold">else</span> {
		<span style="color:#fff;font-weight:bold">return</span> i, <span style="color:#fff;font-weight:bold">nil</span>
	}
}
<span style="color:#fff;font-weight:bold">func</span> ce(i <span style="color:#fff;font-weight:bold">int</span>) {
	fmt.Println(<span style="color:#0ff;font-weight:bold">&#34;===========&#34;</span>)
	i, err := e(i)
	<span style="color:#fff;font-weight:bold">if</span> err != <span style="color:#fff;font-weight:bold">nil</span> {
		fmt.Println(err)
	}
	fmt.Println(i)
}
<span style="color:#fff;font-weight:bold">func</span> main() {
	ce(<span style="color:#ff0;font-weight:bold">2</span>)
	ce(-<span style="color:#ff0;font-weight:bold">1</span>)
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Bitbake Tutorial</title>
            <link>/posts/2020/07/bitbake-tutorial/</link>
            <pubDate>Fri, 03 Jul 2020 16:47:59 +0200</pubDate>
            
            <guid>/posts/2020/07/bitbake-tutorial/</guid>
            <description>Introdction Bitbake is make-like build system. It was a part of openembedded project but split at some point to function as task runner.
This is small working exaple of bitbake layer. I extracted it from docs and Yocto-poky repo.
Installation Download git repo from git. and set PATH to bitbake/bin. that&amp;rsquo;s it :)
Basic concepts Bitbake uses recipes to control how to build software packages. Recipes can be grouped in layer.</description>
            <content type="html"><![CDATA[<h1 id="introdction">Introdction</h1>
<p>Bitbake is make-like build system. It was a part of openembedded project but split at some point to function as task runner.</p>
<p>This is small working exaple of bitbake layer. I extracted it from <a href="https://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html">docs</a> and Yocto-poky repo.</p>
<h1 id="installation">Installation</h1>
<p>Download git repo from <a href="https://github.com/openembedded/bitbake">git</a>. and set PATH to <code>bitbake/bin</code>. that&rsquo;s it :)</p>
<h1 id="basic-concepts">Basic concepts</h1>
<p>Bitbake uses <code>recipes</code> to control how to build software packages. Recipes can be grouped in <code>layer</code>.It is useful to isolate related recipes into separate layer. And you can add customization or more recipes with additional layers.</p>
<p>This is the structure of bitbake &ldquo;Hello world&rdquo;</p>
<pre tabindex="0"><code>├── conf
│   └── bblayers.conf
└── layer1
    ├── classes
    │   └── base.bbclass
    ├── conf
    │   ├── bitbake.conf
    │   └── layer.conf
    └── recipes
        └── coolpkg
            └── coolpkg.bb
</code></pre><h2 id="bblayer-configuration">bblayer Configuration</h2>
<p>To run bitbake, it needs to parse configuration files from <code>conf</code> directory in <code>$PWD</code>. It has to include at least  <code>bblayers.conf</code>. <code>bblayers.conf</code> points bitbake to the layers.</p>
<p>The smallest <code>bblayers.conf</code> just sets <code>BBPATH</code> and <code>BBLAYERS</code>.</p>
<pre tabindex="0"><code>BBPATH = &quot;${TOPDIR}&quot;

BBLAYERS = &quot; \
    ${TOPDIR}/layer1 \
&quot;
</code></pre><p>Note, <code>TOPDIR</code> is an internal variable in Bitbake.</p>
<h2 id="bitbake-configuration">bitbake configuration</h2>
<p><code>bitbake.conf</code> provides configuration meta data for all recipes. <code>cond/bitbake.conf</code> is expected to be somewhere under <code>BBPATH</code>.</p>
<p>The following <code>bitbake.conf</code> adds the minimal configuration for a working bitbake setup.</p>
<pre tabindex="0"><code>TMPDIR ?= &quot;${TOPDIR}/tmp&quot;
CACHE = &quot;${TMPDIR}/cache&quot;
PERSISTENT_DIR = &quot;${TOPDIR}/cache&quot;
STAMPS_DIR ?= &quot;${TMPDIR}/stamps&quot;
STAMP = &quot;${STAMPS_DIR}/pkg1&quot;
BASE_WORKDIR ?= &quot;${TMPDIR}/work&quot;
WORKDIR = &quot;${BASE_WORKDIR}/pkg1&quot;

T = &quot;${WORKDIR}/temp&quot;
</code></pre><p>The above configuration would normally depend on the layer/recipes running at a given point but for simplicity I used fixed paths.</p>
<h2 id="layer">layer</h2>
<p>layer is a directory that contains related recipes. It has to contain <code>conf/layer.conf</code></p>
<p><code>layer.conf</code> has to  update <code>BBPATH</code> and <code>BBFILES</code> with files in that layer.</p>
<pre tabindex="0"><code>BBPATH =. &quot;${LAYERDIR}:&quot;
BBFILES = &quot;${LAYERDIR}/recipes/*/*.bb&quot;

</code></pre><p>Note, <code>${LAYERDIR}</code> variable can be used to reference current layer.</p>
<h2 id="classes">classes</h2>
<p>layer should contain <code>classes/base.bbclass</code>. It defines the tasks for recipes in that layer. Note that default  bitbake task is <code>build</code>. So, we have to provide that in base.bbclass. Also, bitbake adds <code>do_</code> before each task. So, that function has be called <code>do_build</code>.</p>
<p>Minimal <code>base.bbclass</code></p>
<pre tabindex="0"><code>addtask build
do_build () {
    :
}
</code></pre><p>Note, the build task contains <code>:</code> because recipe will provide <code>do_build</code>. if recipe doesn&rsquo;t provide build task, do_build from <code>base.bbclass</code> will be called.</p>
<h2 id="recipes">recipes</h2>
<p>recipe is a file with extension  <code>.bb</code>. It implicitly inherit from <code>base.bbclass</code>. so, it provides implementation for tasks like <code>do_build</code>.</p>
<pre tabindex="0"><code>SUMMARY = &quot;First Recipe&quot;
python do_build(){
    print(&quot;Hello world from coolpkg:do_build&quot;)
}
</code></pre><h1 id="hello-world">Hello World</h1>
<p>we are ready for &ldquo;Hello World&rdquo;, just do <code>bitbake world</code></p>
<pre tabindex="0"><code>Loading cache: 100% |                                                             | ETA:  --:--:--
Loaded 0 entries from dependency cache.
Parsing recipes: 100% |############################################################| Time: 0:00:00
Parsing of 1 .bb files complete (0 cached, 1 parsed). 1 targets, 0 skipped, 0 masked, 0 errors.
NOTE: Resolving any missing task queue dependencies
Initialising tasks: 100% |#########################################################| Time: 0:00:00
NOTE: No setscene tasks
NOTE: Executing Tasks
NOTE: Tasks Summary: Attempted 1 tasks of which 0 didn't need to be rerun and all succeeded.
</code></pre><p>You can see the output in <code>tmp/work/log.do_build</code></p>
<pre tabindex="0"><code>DEBUG: Executing python function do_build
DEBUG: Python function do_build finished
Hello world from coolpkg:do_build
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Starting With Wordpress</title>
            <link>/posts/2020/06/starting-with-wordpress/</link>
            <pubDate>Thu, 25 Jun 2020 19:14:05 +0200</pubDate>
            
            <guid>/posts/2020/06/starting-with-wordpress/</guid>
            <description>Dependencies sudo apt install wordpress php libapache2-mod-php mysql-server php-mysql This will install some important files at /usr/share/wordpress. If this is the first time to install mysql you may be asked to set root user password.
Apache setup First we need to setup Apache to serve php files from /usr/share/wordpress. Edit /etc/apache2/sites-available/wordpress.conf with the following content
Alias /blog /usr/share/wordpress &amp;lt;Directory /usr/share/wordpress&amp;gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Order allow,deny Allow from all &amp;lt;/Directory&amp;gt; &amp;lt;Directory /usr/share/wordpress/wp-content&amp;gt; Options FollowSymLinks Order allow,deny Allow from all &amp;lt;/Directory&amp;gt; Then update Apache and restart</description>
            <content type="html"><![CDATA[<h1 id="dependencies">Dependencies</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo apt install wordpress php libapache2-mod-php mysql-server php-mysql
</code></pre></div><p>This will install some important files at <code>/usr/share/wordpress</code>. If this is the first time to install mysql you may be asked to set root user password.</p>
<h1 id="apache-setup">Apache setup</h1>
<p>First we need to setup Apache to serve php files from <code>/usr/share/wordpress</code>. Edit <code>/etc/apache2/sites-available/wordpress.conf</code> with the following content</p>
<pre tabindex="0"><code>Alias /blog /usr/share/wordpress
&lt;Directory /usr/share/wordpress&gt;
    Options FollowSymLinks
    AllowOverride Limit Options FileInfo
    DirectoryIndex index.php
    Order allow,deny
    Allow from all
&lt;/Directory&gt;
&lt;Directory /usr/share/wordpress/wp-content&gt;
    Options FollowSymLinks
    Order allow,deny
    Allow from all
&lt;/Directory&gt;
</code></pre><p>Then update Apache and restart</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo a2ensite wordpress
sudo a2enmod rewrite
sudo service apache2 reload
</code></pre></div><h1 id="mysql-setup">MYSQL setup</h1>
<p>We need to create database called <code>wordpress</code> and give access to <code>wordpress</code></p>
<pre tabindex="0"><code>sudo mysql -u root
</code></pre><p>Then in mysql REPL</p>
<pre tabindex="0"><code>mysql&gt; CREATE DATABASE wordpress;
Query OK, 1 row affected (0.01 sec)

mysql&gt; CREATE USER 'wordpress'@'localhost' IDENTIFIED BY 'password';
Query OK, 0 rows affected (0.02 sec)

mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER
    -&gt; ON wordpress.*
    -&gt; TO 'wordpress'@'localhost';
Query OK, 0 rows affected (0.01 sec)

mysql&gt; quit
Bye
</code></pre><p>The restart mysql service</p>
<pre tabindex="0"><code>sudo service mysql start
</code></pre><p>Then create the following <code>.php</code> so that wordpress can access the database server. use the same password used to create database. It should be at <code>/etc/wordpress/config-localhost.php</code></p>
<pre tabindex="0"><code>&lt;?php
define('DB_NAME', 'wordpress');
define('DB_USER', 'wordpress');
define('DB_PASSWORD', 'password');
define('DB_HOST', 'localhost');
define('DB_COLLATE', 'utf8_general_ci');
define('WP_CONTENT_DIR', '/usr/share/wordpress/wp-content');
?&gt;
        
</code></pre><h1 id="create-admin-user">Create Admin User</h1>
<p>when you navigate to <code>localhost/blog</code>, it will ask to create a user and same for the site.
Note that password here is user admin password and should be kept to log in.</p>
]]></content>
        </item>
        
        <item>
            <title>Breadth-first and Depth-first Graph Searches</title>
            <link>/posts/2020/06/breadth-first-and-depth-first-graph-searches/</link>
            <pubDate>Fri, 12 Jun 2020 19:04:24 +0200</pubDate>
            
            <guid>/posts/2020/06/breadth-first-and-depth-first-graph-searches/</guid>
            <description>Introduction DFS and BFS are probably first topic to do when doing anything related to graphs. I started with things like Dijkstra and prim which could be extension of DFS and BFS.
DFS and BFS can be used for several application like shortest path and detecting cycles and connected components.
Breadth first search wiki says that BFS visits the nodes of a graph by visiting the neighbour nodes first then move to the next level of neighbours.</description>
            <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>DFS and BFS  are probably first topic to do when doing anything related to graphs. I started with things like Dijkstra and prim which could be extension of DFS and BFS.</p>
<p>DFS and BFS can be used for several application like shortest path and detecting cycles and connected components.</p>
<h1 id="breadth-first-search">Breadth first search</h1>
<p><a href="https://en.wikipedia.org/wiki/Breadth-first_search">wiki</a> says that BFS visits the nodes of a graph by visiting the neighbour nodes first then move to the next level of neighbours.</p>
<p>For implementation, a queue can be used to push the nodes being visited. and as long that q is not empty the traversal will keeping going until no more nodes to enqueue or dequeue.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> BFS(self,start):
        <span style="color:#007f7f"># init queue and visited</span>
        q = []
        visited = [<span style="color:#fff;font-weight:bold">False</span>] * self.V
        <span style="color:#007f7f"># Added start node to queue and mark it visited</span>
        q.append(start)
        visited[start] = <span style="color:#fff;font-weight:bold">True</span>

        <span style="color:#fff;font-weight:bold">while</span> <span style="color:#fff;font-weight:bold">len</span>(q) !=<span style="color:#ff0;font-weight:bold">0</span>:
            current = q.pop(<span style="color:#ff0;font-weight:bold">0</span>)
            <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;BFS Node </span><span style="color:#0ff;font-weight:bold">{</span>current<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
            <span style="color:#fff;font-weight:bold">for</span> (n,w) in self.graph[current]:
                <span style="color:#fff;font-weight:bold">if</span> visited[n] == <span style="color:#fff;font-weight:bold">False</span> and (not n in q): <span style="color:#007f7f"># the second condition </span>
                    visited[n] = <span style="color:#fff;font-weight:bold">True</span>
                    q.append(n)
</code></pre></div><h1 id="depth-first-search">Depth first search</h1>
<p><a href="https://en.wikipedia.org/wiki/Depth-first_search">wiki</a> says that DFS visits nodes be going down in the graph until there is no reachable adjacent nodes. Then it backtracks to parent node and start iterating adjacent from there.</p>
<p>Stack is used to store nodes in the path from root to current node. Again, visiting means printing the correct node at correct time.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> DFS(self,start):
        <span style="color:#007f7f"># init stack and visited</span>
        s = []
        visited = [<span style="color:#fff;font-weight:bold">False</span>] * self.V

        s.append(start)
        
        <span style="color:#fff;font-weight:bold">while</span> <span style="color:#fff;font-weight:bold">len</span>(s) != <span style="color:#ff0;font-weight:bold">0</span>:
            v = s.pop()
            <span style="color:#fff;font-weight:bold">if</span> visited[v] == <span style="color:#fff;font-weight:bold">False</span>:
                visited[v] = <span style="color:#fff;font-weight:bold">True</span>
                <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;DFS Node = </span><span style="color:#0ff;font-weight:bold">{</span>v<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
                <span style="color:#fff;font-weight:bold">for</span> (n2,w) in self.graph[v]:
                    s.append(n2)

</code></pre></div><h1 id="putting-it-all-together">Putting it all together</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> Graph:
    <span style="color:#fff;font-weight:bold">def</span> BFS(self,start):

        q = []
        visited = [<span style="color:#fff;font-weight:bold">False</span>] * self.V

        q.append(start)
        
        <span style="color:#fff;font-weight:bold">while</span> <span style="color:#fff;font-weight:bold">len</span>(q) !=<span style="color:#ff0;font-weight:bold">0</span>:
            current = q.pop(<span style="color:#ff0;font-weight:bold">0</span>)
            visited[current] = <span style="color:#fff;font-weight:bold">True</span>
            <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">{</span>current<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
            <span style="color:#fff;font-weight:bold">for</span> (n,w) in self.graph[current]:
                <span style="color:#fff;font-weight:bold">if</span> visited[n] == <span style="color:#fff;font-weight:bold">False</span> and (not n in q):
                    q.append(n)
    
    <span style="color:#fff;font-weight:bold">def</span> getVertix(self,n,s,visitied):
        <span style="color:#fff;font-weight:bold">for</span> (n2,w) in self.graph[n]:
            <span style="color:#fff;font-weight:bold">if</span> (visitied[n2] == <span style="color:#fff;font-weight:bold">False</span>):
                <span style="color:#fff;font-weight:bold">return</span> n2
        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">None</span>

    <span style="color:#fff;font-weight:bold">def</span> DFS(self,start):

        s = []
        visited = [<span style="color:#fff;font-weight:bold">False</span>] * self.V

        s.append(start)
        visited[start] = <span style="color:#fff;font-weight:bold">True</span>
        <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;DFS Node = </span><span style="color:#0ff;font-weight:bold">{</span>start<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)

        <span style="color:#fff;font-weight:bold">while</span> <span style="color:#fff;font-weight:bold">len</span>(s) != <span style="color:#ff0;font-weight:bold">0</span>:
            adjVertix = self.getVertix(s[-<span style="color:#ff0;font-weight:bold">1</span>],s,visited)
            <span style="color:#fff;font-weight:bold">print</span>(adjVertix)
            <span style="color:#fff;font-weight:bold">if</span> adjVertix is <span style="color:#fff;font-weight:bold">None</span>:
                s.pop()
            <span style="color:#fff;font-weight:bold">else</span>:
                visited[adjVertix] = <span style="color:#fff;font-weight:bold">True</span>
                <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;DFS Node = </span><span style="color:#0ff;font-weight:bold">{</span>adjVertix<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
                s.append(adjVertix)




<span style="color:#fff;font-weight:bold">class</span> UndirectedGraph(Graph):
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, V):
        self.V = V
        self.graph = [[] <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(V)]

    <span style="color:#fff;font-weight:bold">def</span> connect(self, n1,n2, w):
        self.graph[n1].append((n2,w))
        self.graph[n2].append((n1,w))

<span style="color:#fff;font-weight:bold">class</span> DirectedGraph(Graph):
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, V):
        self.V = V
        self.graph = [[] <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(V)]

    <span style="color:#fff;font-weight:bold">def</span> connect(self, n1,n2, w):
        self.graph[n1].append((n2,w))



        
<span style="color:#fff;font-weight:bold">def</span> main():
    g = DirectedGraph(<span style="color:#ff0;font-weight:bold">4</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">2</span>,<span style="color:#ff0;font-weight:bold">0</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">2</span>,<span style="color:#ff0;font-weight:bold">0</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">0</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">2</span>,<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">0</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">2</span>,<span style="color:#ff0;font-weight:bold">3</span>,<span style="color:#ff0;font-weight:bold">0</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">3</span>,<span style="color:#ff0;font-weight:bold">3</span>,<span style="color:#ff0;font-weight:bold">0</span>)
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#39;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; BFS&#39;</span>)
    g.BFS(<span style="color:#ff0;font-weight:bold">2</span>)
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#39;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; DFS&#39;</span>)
    g.DFS(<span style="color:#ff0;font-weight:bold">2</span>)

    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#39;===================&#39;</span>)
    g1 = UndirectedGraph(<span style="color:#ff0;font-weight:bold">6</span>)
    g1.connect(<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">0</span>)
    g1.connect(<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">2</span>,<span style="color:#ff0;font-weight:bold">0</span>)
    g1.connect(<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">4</span>,<span style="color:#ff0;font-weight:bold">0</span>)
    g1.connect(<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">3</span>,<span style="color:#ff0;font-weight:bold">0</span>)
    g1.connect(<span style="color:#ff0;font-weight:bold">2</span>,<span style="color:#ff0;font-weight:bold">4</span>,<span style="color:#ff0;font-weight:bold">0</span>)
    g1.connect(<span style="color:#ff0;font-weight:bold">3</span>,<span style="color:#ff0;font-weight:bold">4</span>,<span style="color:#ff0;font-weight:bold">0</span>)
    g1.connect(<span style="color:#ff0;font-weight:bold">3</span>,<span style="color:#ff0;font-weight:bold">5</span>,<span style="color:#ff0;font-weight:bold">0</span>)
    g1.connect(<span style="color:#ff0;font-weight:bold">4</span>,<span style="color:#ff0;font-weight:bold">5</span>,<span style="color:#ff0;font-weight:bold">0</span>)
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#39;BFS&#39;</span>)
    g1.BFS(<span style="color:#ff0;font-weight:bold">0</span>)
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#39;DFS&#39;</span>)
    g1.DFS(<span style="color:#ff0;font-weight:bold">0</span>)
<span style="color:#fff;font-weight:bold">if</span> __name__ == <span style="color:#0ff;font-weight:bold">&#34;__main__&#34;</span>:
    main()

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Prim&#39;s Minimum Spanning Tree</title>
            <link>/posts/2020/06/prims-minimum-spanning-tree/</link>
            <pubDate>Fri, 12 Jun 2020 00:56:05 +0200</pubDate>
            
            <guid>/posts/2020/06/prims-minimum-spanning-tree/</guid>
            <description>Introduction prim&amp;rsquo;s Algorithm find minimum spanning tree for weighted undirected graph.
basically, Minimum spanning tree is sub-graph (in this case tree) that connect all vertices of weight graph. This requires that original graph is connected.
MST is useful for network distribution problems.
The algorithm From the wiki:
 Initialize a tree with a single vertex, chosen arbitrarily from the graph. Grow the tree by one edge: of the edges that connect the tree to vertices not yet in the tree, find the minimum-weight edge, and transfer it to the tree.</description>
            <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p><a href="https://en.wikipedia.org/wiki/Prim%27s_algorithm">prim&rsquo;s Algorithm</a> find minimum spanning tree for weighted undirected graph.</p>
<p>basically, Minimum spanning tree is sub-graph (in this case tree) that connect all vertices of weight graph. This requires that original graph is connected.</p>
<p>MST is useful for network distribution problems.</p>
<h1 id="the-algorithm">The algorithm</h1>
<p>From the wiki:</p>
<ul>
<li>Initialize a tree with a single vertex, chosen arbitrarily from the graph.</li>
<li>Grow the tree by one edge: of the edges that connect the tree to vertices not yet in the tree, find the minimum-weight edge, and transfer it to the tree.</li>
<li>Repeat step 2 (until all vertices are in the tree).</li>
</ul>
<h1 id="implementation">Implementation</h1>
<ul>
<li>As usual, adjacency list graph.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> Graph:
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, V):
        self.V = V
        self.graph = [[] <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(V)]

    <span style="color:#fff;font-weight:bold">def</span> connect(self, n1,n2, w):
        self.graph[n1].append((n2,w))
        self.graph[n2].append((n1,w))
</code></pre></div><ul>
<li>The tricky part is knowing the edge to add. I use <code>mstSet</code> as the temp sub-graph. This means the termination condition is  all vertices are in <code>mstSet</code>. probably, This is not the best implementation but it&rsquo;s good enough for this.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">            value = <span style="color:#fff;font-weight:bold">float</span>(<span style="color:#0ff;font-weight:bold">&#39;inf&#39;</span>)
            <span style="color:#fff;font-weight:bold">for</span> n1 in mstSet:
                <span style="color:#fff;font-weight:bold">for</span> (n2,w) in self.graph[n1]:
                    <span style="color:#fff;font-weight:bold">if</span> w &lt; value and (not n2 in mstSet):
                        edge = (n1,n2,w)
                        value = w

          run = <span style="color:#fff;font-weight:bold">len</span>(mstSet) != self.V
</code></pre></div><h1 id="putting-it-all-together">Putting it all together</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#fff;font-weight:bold">import</span> random

<span style="color:#fff;font-weight:bold">class</span> Graph:
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, V):
        self.V = V
        self.graph = [[] <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(V)]

    <span style="color:#fff;font-weight:bold">def</span> connect(self, n1,n2, w):
        self.graph[n1].append((n2,w))
        self.graph[n2].append((n1,w))


<span style="color:#fff;font-weight:bold">class</span> Prim(Graph):
    <span style="color:#fff;font-weight:bold">def</span> __init__(self,V):
        Graph.__init__(self,V)
        self.mst  = Graph(self.V)

        
    <span style="color:#fff;font-weight:bold">def</span> MST(self):
        mstSet = []
        <span style="color:#007f7f"># initial random node</span>
        start = random.randint(<span style="color:#ff0;font-weight:bold">0</span>, self.V-<span style="color:#ff0;font-weight:bold">1</span>)
        mstSet.append(start)
        <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;&gt;&gt; Starting at node </span><span style="color:#0ff;font-weight:bold">{</span>start<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
        total = <span style="color:#ff0;font-weight:bold">0</span>
        run = <span style="color:#fff;font-weight:bold">True</span>
        <span style="color:#fff;font-weight:bold">while</span> run:
            <span style="color:#007f7f"># Get the edge and add the node to mstSet</span>
            edge= ()
            
            value = <span style="color:#fff;font-weight:bold">float</span>(<span style="color:#0ff;font-weight:bold">&#39;inf&#39;</span>)
            <span style="color:#fff;font-weight:bold">for</span> n1 in mstSet:
                <span style="color:#fff;font-weight:bold">for</span> (n2,w) in self.graph[n1]:
                    <span style="color:#fff;font-weight:bold">if</span> w &lt; value and (not n2 in mstSet):
                        edge = (n1,n2,w)
                        value = w
                        
            
            mstSet.append(edge[<span style="color:#ff0;font-weight:bold">1</span>])
            total += edge[<span style="color:#ff0;font-weight:bold">2</span>]
            <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;edge=</span><span style="color:#0ff;font-weight:bold">{</span>edge<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
            <span style="color:#007f7f"># connect the node </span>
            self.mst.connect(*edge)
            <span style="color:#007f7f"># check if all nodes are in the MST</span>
            run = <span style="color:#fff;font-weight:bold">len</span>(mstSet) != self.V
        <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;total weight=</span><span style="color:#0ff;font-weight:bold">{</span>total<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
        


<span style="color:#fff;font-weight:bold">def</span> main():
    g = Prim(<span style="color:#ff0;font-weight:bold">9</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">4</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">7</span>,<span style="color:#ff0;font-weight:bold">8</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">7</span>,<span style="color:#ff0;font-weight:bold">11</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">2</span>,<span style="color:#ff0;font-weight:bold">8</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">7</span>,<span style="color:#ff0;font-weight:bold">8</span>,<span style="color:#ff0;font-weight:bold">7</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">7</span>,<span style="color:#ff0;font-weight:bold">6</span>,<span style="color:#ff0;font-weight:bold">1</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">2</span>,<span style="color:#ff0;font-weight:bold">8</span>,<span style="color:#ff0;font-weight:bold">2</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">2</span>,<span style="color:#ff0;font-weight:bold">5</span>,<span style="color:#ff0;font-weight:bold">4</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">2</span>,<span style="color:#ff0;font-weight:bold">3</span>,<span style="color:#ff0;font-weight:bold">7</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">8</span>,<span style="color:#ff0;font-weight:bold">6</span>,<span style="color:#ff0;font-weight:bold">6</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">6</span>,<span style="color:#ff0;font-weight:bold">5</span>,<span style="color:#ff0;font-weight:bold">2</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">3</span>,<span style="color:#ff0;font-weight:bold">5</span>,<span style="color:#ff0;font-weight:bold">14</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">3</span>,<span style="color:#ff0;font-weight:bold">4</span>,<span style="color:#ff0;font-weight:bold">9</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">5</span>,<span style="color:#ff0;font-weight:bold">4</span>,<span style="color:#ff0;font-weight:bold">10</span>)
    g.MST()

    <span style="color:#fff;font-weight:bold">for</span> v in g.mst.graph:
        <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;vertix=</span><span style="color:#0ff;font-weight:bold">{</span>v<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)

<span style="color:#fff;font-weight:bold">if</span> __name__ == <span style="color:#0ff;font-weight:bold">&#34;__main__&#34;</span>:
    main()

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Dijkstra Algorithm</title>
            <link>/posts/2020/06/dijkstra-algorithm/</link>
            <pubDate>Wed, 10 Jun 2020 22:04:46 +0200</pubDate>
            
            <guid>/posts/2020/06/dijkstra-algorithm/</guid>
            <description>Introduction Dijkstra&amp;rsquo;s algorithm says it is an algorithm for finding the shortest paths between nodes in a graph.
Dijkstra is big deal because it&amp;rsquo;s used to find the best way (based on weight function) between points A and B on a graph. It works well on graphs with non-negative edges.
Considering the instance of the problem where A and B is connected and graph and required to calculate minimum cost for that path.</description>
            <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p><a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm">Dijkstra&rsquo;s algorithm</a> says it is an algorithm for finding the shortest paths between nodes in a graph.</p>
<p>Dijkstra is big deal because it&rsquo;s used to find the best way (based on weight function) between points A and B on a graph. It works well on graphs with non-negative edges.</p>
<p>Considering the instance of the problem where A and B is connected and graph and required to calculate minimum cost for that path.</p>
<h1 id="algorithm">Algorithm</h1>
<p>I used the same exact algorithm as wiki page.</p>
<ul>
<li>Mark all nodes unvisited. Create a set of all the unvisited nodes called the unvisited set.
Assign to every node a tentative distance value: set it to zero for our initial node and to infinity for all other nodes. Set the initial node as current.[14]</li>
<li>For the current node, consider all of its unvisited neighbours and calculate their tentative distances through the current node. Compare the newly calculated tentative distance to the current assigned value and assign the smaller one. For example, if the current node A is marked with a distance of 6, and the edge connecting it with a neighbour B has length 2, then the distance to B through A will be 6 + 2 = 8. If B was previously marked with a distance greater than 8 then change it to 8. Otherwise, the current value will be kept.</li>
<li>When we are done considering all of the unvisited neighbours of the current node, mark the current node as visited and remove it from the unvisited set. A visited node will never be checked again.</li>
<li>If the destination node has been marked visited (when planning a route between two specific nodes) or if the smallest tentative distance among the nodes in the unvisited set is infinity (when planning a complete traversal; occurs when there is no connection between the initial node and remaining unvisited nodes), then stop. The algorithm has finished.</li>
<li>Otherwise, select the unvisited node that is marked with the smallest tentative distance, set it as the new &ldquo;current node&rdquo;, and go back to step 3.</li>
</ul>
<p>There is variant where it&rsquo;s need to calculate minimum distance to all nodes. It&rsquo;s essentially the same steps but the condition for search termination will be that all nodes are visited instead of the destination node.</p>
<h1 id="implementation">Implementation</h1>
<ul>
<li>I used adjacency list to represent the graph.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> __init__(self, V):
        self.V = V
        self.graph = [[] <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(V)]

    <span style="color:#fff;font-weight:bold">def</span> connect(self, n1,n2, w):
        self.graph[n1].append((n2,w))
        self.graph[n2].append((n1,w))
</code></pre></div><ul>
<li>
<p>The algorithm says <em>inf</em> as initial distance to all nodes. I initially used -1 to represent inf but i complicated the comparisons. but i found out python have <code>float('inf')</code> which works fine in arithmetic operations.</p>
</li>
<li>
<p>The shortest path between two points and shortest path spanning tree(shortest path to all nodes) is the same. the only difference is the termination condition. For two points, i just need to check the destination node was visited.</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
            <span style="color:#007f7f"># check for algorithm termination and calculate the new &#34;current&#34;</span>
            <span style="color:#fff;font-weight:bold">if</span> n2 is <span style="color:#fff;font-weight:bold">None</span>:
                run =  (<span style="color:#fff;font-weight:bold">True</span> in unvisited) 
            <span style="color:#fff;font-weight:bold">else</span>:
                run = (unvisited[n2] == <span style="color:#fff;font-weight:bold">True</span>)
</code></pre></div><h1 id="putting-it-all-together">Putting it all together</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#fff;font-weight:bold">class</span> Dijkstra:
    <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;
</span><span style="color:#0ff;font-weight:bold">    Implementation based on algorithm in 
</span><span style="color:#0ff;font-weight:bold">    https://en.wikipedia.org/wiki/Dijkstra</span><span style="color:#0ff;font-weight:bold">%27s</span><span style="color:#0ff;font-weight:bold">_algorithm
</span><span style="color:#0ff;font-weight:bold">    &#34;&#34;&#34;</span>
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, V):
        self.V = V
        self.graph = [[] <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(V)]

    <span style="color:#fff;font-weight:bold">def</span> connect(self, n1,n2, w):
        self.graph[n1].append((n2,w))
        self.graph[n2].append((n1,w))

    <span style="color:#fff;font-weight:bold">def</span> shortestPath(self, n1, n2=<span style="color:#fff;font-weight:bold">None</span>):
        unvisited = [<span style="color:#fff;font-weight:bold">True</span>] * self.V

        distance = [ <span style="color:#fff;font-weight:bold">float</span>(<span style="color:#0ff;font-weight:bold">&#39;inf&#39;</span>) ] * self.V
        distance[n1] = <span style="color:#ff0;font-weight:bold">0</span>

        current = n1

        run  = <span style="color:#fff;font-weight:bold">True</span>
        <span style="color:#fff;font-weight:bold">while</span> run:
            <span style="color:#007f7f">#print(f&#34;&gt;&gt;&gt;&gt; current={current}&#34;)</span>
            <span style="color:#007f7f"># iterate the neighbours</span>
            <span style="color:#fff;font-weight:bold">for</span> neighbour in self.graph[current]:
                (n,w) = neighbour

                <span style="color:#fff;font-weight:bold">if</span> unvisited[n]:
                    <span style="color:#007f7f"># Loop over neighbours</span>
                    <span style="color:#007f7f">#print(f&#34;    &gt;&gt;&gt;&gt; neighbour={n} weight={w}&#34;)</span>
                    new_dist = distance[current] + w

                    <span style="color:#fff;font-weight:bold">if</span>  new_dist &lt; distance[n]:
                        <span style="color:#007f7f">#print(f&#34;        &gt;&gt;&gt;&gt; updated distance {new_dist}&#34;)</span>
                        distance[n] = new_dist
                    
            unvisited[current] = <span style="color:#fff;font-weight:bold">False</span>

            <span style="color:#007f7f"># check for algorithm termination and calculate the new &#34;current&#34;</span>
            <span style="color:#fff;font-weight:bold">if</span> n2 is <span style="color:#fff;font-weight:bold">None</span>:
                run =  (<span style="color:#fff;font-weight:bold">True</span> in unvisited) 
            <span style="color:#fff;font-weight:bold">else</span>:
                run = (unvisited[n2] == <span style="color:#fff;font-weight:bold">True</span>)
            
            value = <span style="color:#fff;font-weight:bold">float</span>(<span style="color:#0ff;font-weight:bold">&#39;inf&#39;</span>)
            <span style="color:#fff;font-weight:bold">for</span> v in <span style="color:#fff;font-weight:bold">range</span>(self.V):
                <span style="color:#fff;font-weight:bold">if</span> distance[v] &lt; value and unvisited[v] == <span style="color:#fff;font-weight:bold">True</span>:
                    value = distance[v]
                    n_current = v
            
            current = n_current

        <span style="color:#fff;font-weight:bold">print</span>(distance)
            

<span style="color:#fff;font-weight:bold">def</span> main():
    g = Dijkstra(<span style="color:#ff0;font-weight:bold">9</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">4</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">7</span>,<span style="color:#ff0;font-weight:bold">8</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">7</span>,<span style="color:#ff0;font-weight:bold">11</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">2</span>,<span style="color:#ff0;font-weight:bold">8</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">7</span>,<span style="color:#ff0;font-weight:bold">8</span>,<span style="color:#ff0;font-weight:bold">7</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">7</span>,<span style="color:#ff0;font-weight:bold">6</span>,<span style="color:#ff0;font-weight:bold">1</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">2</span>,<span style="color:#ff0;font-weight:bold">8</span>,<span style="color:#ff0;font-weight:bold">2</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">2</span>,<span style="color:#ff0;font-weight:bold">5</span>,<span style="color:#ff0;font-weight:bold">4</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">2</span>,<span style="color:#ff0;font-weight:bold">3</span>,<span style="color:#ff0;font-weight:bold">7</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">8</span>,<span style="color:#ff0;font-weight:bold">6</span>,<span style="color:#ff0;font-weight:bold">6</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">6</span>,<span style="color:#ff0;font-weight:bold">5</span>,<span style="color:#ff0;font-weight:bold">2</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">3</span>,<span style="color:#ff0;font-weight:bold">5</span>,<span style="color:#ff0;font-weight:bold">14</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">3</span>,<span style="color:#ff0;font-weight:bold">4</span>,<span style="color:#ff0;font-weight:bold">9</span>)
    g.connect(<span style="color:#ff0;font-weight:bold">5</span>,<span style="color:#ff0;font-weight:bold">4</span>,<span style="color:#ff0;font-weight:bold">10</span>)
    g.shortestPath(<span style="color:#ff0;font-weight:bold">0</span>,<span style="color:#ff0;font-weight:bold">7</span>)
    
    g.shortestPath(<span style="color:#ff0;font-weight:bold">0</span>)
    g.shortestPath(<span style="color:#ff0;font-weight:bold">1</span>)
<span style="color:#fff;font-weight:bold">if</span> __name__ == <span style="color:#0ff;font-weight:bold">&#34;__main__&#34;</span>:
    main()
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Merkle Tree</title>
            <link>/posts/2020/05/merkle-tree/</link>
            <pubDate>Fri, 29 May 2020 23:04:23 +0200</pubDate>
            
            <guid>/posts/2020/05/merkle-tree/</guid>
            <description>Merkle tree is hash tree (usually binary tree) where each node is hash function of children nodes. i used binary tree with sha256 from hashlib.
Building the tree i choose to start from the leafs and build up the tree bottom-to-top. _buildTree does that by the recursively building parent nodes. for uniformity, i chose to add padding node to the tree (with empty hash string). this way the nodes are always even number all the way to the root node.</description>
            <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Merkle_tree">Merkle tree</a> is hash tree (usually binary tree) where each node is hash function of children nodes.
i used binary tree with sha256 from <code>hashlib</code>.</p>
<h1 id="building-the-tree">Building the tree</h1>
<p>i choose to start from the leafs and build up the tree bottom-to-top. <code>_buildTree</code> does that by the recursively building parent nodes. for uniformity, i chose to add padding node to the tree (with empty hash string). this way the nodes are always even number all the way to the root node. this means unneeded nodes but easier logic. I didn&rsquo;t put much thought about the upper limit for the number of dummy nodes.</p>
<p><code>_buildTree</code> will be called <code>log2(N)</code> where N is number of original leafs. and each call loops over <code>log2(n)</code>
this means <code>log2(N/2) + Log2(N/4) + log2(N/8) ... + log(1)</code> loops.</p>
<p>for each two nodes, hash is calculated with concatenating left and right hashes in that order.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> buildTree(self, data):
        nodes = [MerkleNode(self.getHash(d)) <span style="color:#fff;font-weight:bold">for</span> d in data]
        self.root = self._buildTree(nodes,<span style="color:#ff0;font-weight:bold">1</span>)
    
    <span style="color:#fff;font-weight:bold">def</span> _buildTree(self, nodes,level):
        <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">len</span>(nodes) == <span style="color:#ff0;font-weight:bold">1</span>:
            <span style="color:#fff;font-weight:bold">return</span> nodes[<span style="color:#ff0;font-weight:bold">0</span>]
        <span style="color:#fff;font-weight:bold">else</span>:
            new_level =[]
            <span style="color:#007f7f"># the extra padding node here!</span>
            (depth, isOdd) = <span style="color:#fff;font-weight:bold">divmod</span>(<span style="color:#fff;font-weight:bold">len</span>(nodes),<span style="color:#ff0;font-weight:bold">2</span>)
            <span style="color:#fff;font-weight:bold">if</span> (isOdd):
                nodes.append(MerkleNode(<span style="color:#0ff;font-weight:bold">&#39;&#39;</span>))
                depth = depth + <span style="color:#ff0;font-weight:bold">1</span>

            <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(depth):
                left = nodes[<span style="color:#ff0;font-weight:bold">2</span>*i]
                right = nodes[<span style="color:#ff0;font-weight:bold">2</span>*i+<span style="color:#ff0;font-weight:bold">1</span>]
                children_data = (left.data  + right.data)
                node = MerkleNode(self.getHash(children_data)) 
                node.left = left
                node.right = right
                left.parent = node
                right.parent = node
                new_level.append(node)
            <span style="color:#fff;font-weight:bold">return</span> self._buildTree(new_level,level +<span style="color:#ff0;font-weight:bold">1</span>)

</code></pre></div><h1 id="getting-trail">Getting Trail</h1>
<p>The second part of Merkle tree, is that multiple parties can calculate <em>trail</em> hashes to leaf nodes and we can verify that trail with leaf hash.</p>
<p>for easy implementation,i did the trail traversal in two steps</p>
<ul>
<li>Get the path from root to leaf (if it&rsquo;s there)</li>
<li>if found, iterate on the path and get the sibling child of each node.</li>
</ul>
<p>if hash is not found, <code>getTrail</code> returns <code>[]</code>. if found it returns the path as <code>list</code> of <code>[root, (node,direction), (node,direction)...]</code></p>
<p>There are several improvements that can be done here:</p>
<ul>
<li>change the interface for <code>_getTrail</code> and make it pure instead of using <code>self.found_trail</code></li>
<li>Traverse the tree once and terminate afterwards</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> <span style="color:#fff;font-weight:bold">def</span> getTrail(self,data):
        self.trail = []
        self.found_trail = []
        self._getTrail(self.root,<span style="color:#ff0;font-weight:bold">0</span>,data)

        <span style="color:#007f7f"># Trail not found at self.found_trail</span>
        <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">len</span>(self.found_trail) ==<span style="color:#ff0;font-weight:bold">0</span>:
            <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">list</span>()
        <span style="color:#007f7f"># Trail found. from parent(root), get the sibilings</span>
        hash_trail = [self.root]
        <span style="color:#fff;font-weight:bold">for</span> idx in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#fff;font-weight:bold">len</span>(self.found_trail)-<span style="color:#ff0;font-weight:bold">1</span>):
            <span style="color:#fff;font-weight:bold">if</span> (self.found_trail[idx].left.data == self.found_trail[idx+<span style="color:#ff0;font-weight:bold">1</span>].data):
                hash_trail.append((self.found_trail[idx].right,<span style="color:#0ff;font-weight:bold">&#39;left&#39;</span>))
            <span style="color:#fff;font-weight:bold">elif</span> (self.found_trail[idx].right.data == self.found_trail[idx+<span style="color:#ff0;font-weight:bold">1</span>].data):
                hash_trail.append((self.found_trail[idx].left,<span style="color:#0ff;font-weight:bold">&#39;right&#39;</span>))
        <span style="color:#fff;font-weight:bold">return</span> hash_trail
        
    <span style="color:#fff;font-weight:bold">def</span> _getTrail(self,node, level,data):
        self.trail.append(node)
        <span style="color:#fff;font-weight:bold">if</span>(node.left ==<span style="color:#fff;font-weight:bold">None</span> and node.right == <span style="color:#fff;font-weight:bold">None</span> and data == node.data):
            self.found_trail = <span style="color:#fff;font-weight:bold">list</span>(self.trail)
        <span style="color:#fff;font-weight:bold">if</span> node.left != <span style="color:#fff;font-weight:bold">None</span>:
            self._getTrail(node.left, level+<span style="color:#ff0;font-weight:bold">1</span>,data)
        <span style="color:#fff;font-weight:bold">if</span> node.right != <span style="color:#fff;font-weight:bold">None</span>:
            self._getTrail(node.right,level+<span style="color:#ff0;font-weight:bold">1</span>,data)
        self.trail.pop()
</code></pre></div><h1 id="verify-trail-and-hash">Verify trail and hash</h1>
<p>once we have a trail, we can reverse the trail and calculate the hashes every two nodes all the way up to the root.
I am assuming the trail is given with first node as root then tuples of <code>(node, direction)</code> same as calculated with <code>getTrail</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> verifyTrail(self,trail, data):
        <span style="color:#fff;font-weight:bold">hash</span> = <span style="color:#fff;font-weight:bold">None</span>
        root = trail[<span style="color:#ff0;font-weight:bold">0</span>]
        <span style="color:#fff;font-weight:bold">hash</span> = data
        new_trail = <span style="color:#fff;font-weight:bold">list</span>(trail[<span style="color:#ff0;font-weight:bold">1</span>:])
        new_trail.reverse()
        <span style="color:#fff;font-weight:bold">for</span> (node,direction) in new_trail:
            <span style="color:#fff;font-weight:bold">if</span> direction == <span style="color:#0ff;font-weight:bold">&#39;left&#39;</span>:
                term =  <span style="color:#fff;font-weight:bold">hash</span> + node.data
            <span style="color:#fff;font-weight:bold">else</span>:
                term = node.data + <span style="color:#fff;font-weight:bold">hash</span>
            <span style="color:#fff;font-weight:bold">hash</span> = self.getHash(term)
        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">hash</span> == root.data
</code></pre></div><h1 id="all-together">All together</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#fff;font-weight:bold">import</span> hashlib
<span style="color:#fff;font-weight:bold">import</span> string

<span style="color:#fff;font-weight:bold">class</span> MerkleNode():
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, data):
        self.right = <span style="color:#fff;font-weight:bold">None</span>
        self.left  = <span style="color:#fff;font-weight:bold">None</span>
        self.parent = <span style="color:#fff;font-weight:bold">None</span>
        self.data  = data

<span style="color:#fff;font-weight:bold">class</span> MerkleTree():
    <span style="color:#fff;font-weight:bold">def</span> __init__(self):
        self.root = <span style="color:#fff;font-weight:bold">None</span>
    
    <span style="color:#fff;font-weight:bold">def</span> getHash(self,data):
        <span style="color:#fff;font-weight:bold">return</span> hashlib.sha256(data.encode()).hexdigest()
        
    <span style="color:#fff;font-weight:bold">def</span> buildTree(self, data):
        nodes = [MerkleNode(self.getHash(d)) <span style="color:#fff;font-weight:bold">for</span> d in data]
        self.root = self._buildTree(nodes,<span style="color:#ff0;font-weight:bold">1</span>)
    
    <span style="color:#fff;font-weight:bold">def</span> _buildTree(self, nodes,level):
        <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">len</span>(nodes) == <span style="color:#ff0;font-weight:bold">1</span>:
            <span style="color:#fff;font-weight:bold">return</span> nodes[<span style="color:#ff0;font-weight:bold">0</span>]
        <span style="color:#fff;font-weight:bold">else</span>:
            new_level =[]
            (depth, isOdd) = <span style="color:#fff;font-weight:bold">divmod</span>(<span style="color:#fff;font-weight:bold">len</span>(nodes),<span style="color:#ff0;font-weight:bold">2</span>)
            <span style="color:#fff;font-weight:bold">if</span> (isOdd):
                nodes.append(MerkleNode(<span style="color:#0ff;font-weight:bold">&#39;&#39;</span>))
                depth = depth + <span style="color:#ff0;font-weight:bold">1</span>

            <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(depth):
                left = nodes[<span style="color:#ff0;font-weight:bold">2</span>*i]
                right = nodes[<span style="color:#ff0;font-weight:bold">2</span>*i+<span style="color:#ff0;font-weight:bold">1</span>]
                children_data = (left.data  + right.data)
                node = MerkleNode(self.getHash(children_data)) 
                node.left = left
                node.right = right
                left.parent = node
                right.parent = node
                new_level.append(node)
            <span style="color:#fff;font-weight:bold">return</span> self._buildTree(new_level,level +<span style="color:#ff0;font-weight:bold">1</span>)

    <span style="color:#fff;font-weight:bold">def</span> printTree(self):
        self._printTree(self.root,<span style="color:#ff0;font-weight:bold">0</span>)
        
    <span style="color:#fff;font-weight:bold">def</span> _printTree(self,node, level):
        <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">{</span>level<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">: </span><span style="color:#0ff;font-weight:bold">{</span>node.data<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
        <span style="color:#fff;font-weight:bold">if</span> node.left != <span style="color:#fff;font-weight:bold">None</span>:
            self._printTree(node.left, level+<span style="color:#ff0;font-weight:bold">1</span>)
        <span style="color:#fff;font-weight:bold">if</span> node.right != <span style="color:#fff;font-weight:bold">None</span>:
            self._printTree(node.right,level+<span style="color:#ff0;font-weight:bold">1</span>)

    <span style="color:#fff;font-weight:bold">def</span> getRoot(self):
        <span style="color:#fff;font-weight:bold">return</span> self.root.data

    <span style="color:#fff;font-weight:bold">def</span> getTrail(self,data):
        self.trail = []
        self.found_trail = []
        self._getTrail(self.root,<span style="color:#ff0;font-weight:bold">0</span>,data)

        <span style="color:#007f7f"># Trail not found at self.found_trail</span>
        <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">len</span>(self.found_trail) ==<span style="color:#ff0;font-weight:bold">0</span>:
            <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">list</span>()
        <span style="color:#007f7f"># Trail found. from parent(root), get the sibilings</span>
        hash_trail = [self.root]
        <span style="color:#fff;font-weight:bold">for</span> idx in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#fff;font-weight:bold">len</span>(self.found_trail)-<span style="color:#ff0;font-weight:bold">1</span>):
            <span style="color:#fff;font-weight:bold">if</span> (self.found_trail[idx].left.data == self.found_trail[idx+<span style="color:#ff0;font-weight:bold">1</span>].data):
                hash_trail.append((self.found_trail[idx].right,<span style="color:#0ff;font-weight:bold">&#39;left&#39;</span>))
            <span style="color:#fff;font-weight:bold">elif</span> (self.found_trail[idx].right.data == self.found_trail[idx+<span style="color:#ff0;font-weight:bold">1</span>].data):
                hash_trail.append((self.found_trail[idx].left,<span style="color:#0ff;font-weight:bold">&#39;right&#39;</span>))
        <span style="color:#fff;font-weight:bold">return</span> hash_trail
        
    <span style="color:#fff;font-weight:bold">def</span> _getTrail(self,node, level,data):
        self.trail.append(node)
        <span style="color:#fff;font-weight:bold">if</span>(node.left ==<span style="color:#fff;font-weight:bold">None</span> and node.right == <span style="color:#fff;font-weight:bold">None</span> and data == node.data):
            self.found_trail = <span style="color:#fff;font-weight:bold">list</span>(self.trail)
        <span style="color:#fff;font-weight:bold">if</span> node.left != <span style="color:#fff;font-weight:bold">None</span>:
            self._getTrail(node.left, level+<span style="color:#ff0;font-weight:bold">1</span>,data)
        <span style="color:#fff;font-weight:bold">if</span> node.right != <span style="color:#fff;font-weight:bold">None</span>:
            self._getTrail(node.right,level+<span style="color:#ff0;font-weight:bold">1</span>,data)
        
        self.trail.pop()

    <span style="color:#fff;font-weight:bold">def</span> verifyTrail(self,trail, data):
        <span style="color:#fff;font-weight:bold">hash</span> = <span style="color:#fff;font-weight:bold">None</span>
        root = trail[<span style="color:#ff0;font-weight:bold">0</span>]
        <span style="color:#fff;font-weight:bold">hash</span> = data
        new_trail = <span style="color:#fff;font-weight:bold">list</span>(trail[<span style="color:#ff0;font-weight:bold">1</span>:])
        new_trail.reverse()
        <span style="color:#fff;font-weight:bold">for</span> (node,direction) in new_trail:
            <span style="color:#fff;font-weight:bold">if</span> direction == <span style="color:#0ff;font-weight:bold">&#39;left&#39;</span>:
                term =  <span style="color:#fff;font-weight:bold">hash</span> + node.data
            <span style="color:#fff;font-weight:bold">else</span>:
                term = node.data + <span style="color:#fff;font-weight:bold">hash</span>
            <span style="color:#fff;font-weight:bold">hash</span> = self.getHash(term)
        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">hash</span> == root.data

<span style="color:#fff;font-weight:bold">def</span> main():
    file = <span style="color:#0ff;font-weight:bold">&#34;01234567&#34;</span> 
    data = <span style="color:#fff;font-weight:bold">list</span>(file)

    tree = MerkleTree()
    tree.buildTree(data)

    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;Root: </span><span style="color:#0ff;font-weight:bold">{</span>tree.getRoot()<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)

    tree.printTree()

    trail = tree.getTrail(tree.getHash(<span style="color:#0ff;font-weight:bold">&#34;3&#34;</span>))
    ret = tree.verifyTrail(trail,tree.getHash(<span style="color:#0ff;font-weight:bold">&#34;3&#34;</span>))
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">{</span>ret<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)

<span style="color:#fff;font-weight:bold">if</span> __name__ == <span style="color:#0ff;font-weight:bold">&#34;__main__&#34;</span>:
    main()

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Xilinx Vivado - Part1 The Flow</title>
            <link>/posts/2020/05/xilinx-vivado-part1-the-flow/</link>
            <pubDate>Thu, 28 May 2020 20:14:08 +0200</pubDate>
            
            <guid>/posts/2020/05/xilinx-vivado-part1-the-flow/</guid>
            <description>This post explains the simple vivado non-project flow for synthesis and implementation. The advantage of non-project mode is full control over the flow and reports generated. Note that non-project runs in-memory (no file generated).So, It does need some extra work to create checkpoints and reports as needed.
Invoking Vivado vivado takes -mode as one of gui, tcl, batch
 gui: default. start vivado in gui mode tcl: starts vivado in tcl (interactive mode) batch: starts vivado and exit after executing commands (regression mode)  Also, -source run.</description>
            <content type="html"><![CDATA[<p>This post explains the simple vivado non-project flow for synthesis and implementation. The advantage of non-project mode is full control over the flow and reports generated. Note that non-project runs in-memory (no file generated).So, It does need some extra work to create checkpoints and reports as needed.</p>
<h1 id="invoking-vivado">Invoking Vivado</h1>
<p>vivado takes <code>-mode</code> as one of <code>gui, tcl, batch</code></p>
<ul>
<li>gui: default. start vivado in gui mode</li>
<li>tcl: starts vivado in tcl (interactive mode)</li>
<li>batch: starts vivado and exit after executing commands (regression mode)</li>
</ul>
<p>Also, <code>-source run.tcl</code> is used to run <code>run.tcl</code> after init. I like to use <code>-nojournal -nolog</code> to get rid of annoying log and journal files.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">vivado -mode batch -source run.tcl -nojournal -nolog
</code></pre></div><h1 id="synthesis">Synthesis</h1>
<h2 id="setup">Setup</h2>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-tcl" data-lang="tcl">set_part &lt;FPGA-PART-NUMBER&gt;
<span style="color:#fff;font-weight:bold">set</span> outputDir ./output
<span style="color:#fff;font-weight:bold">file</span> makdir $outputDir
</code></pre></div><h2 id="reading-files">Reading files</h2>
<ul>
<li><code>read_verilog</code>
from UG835</li>
</ul>
<blockquote>
<p>You can use this command to read the contents of source files into the in-memory design, when
running the Vivado tool in Non Project mode, in which there is no project file to maintain and
manage the various project source files.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-tcl" data-lang="tcl">read_verilog ./rtl/top.v
</code></pre></div><p>Important options:
<code>-sv</code>: Treat as Systemverilog</p>
<ul>
<li><code>read_xdc</code>
from UG835</li>
</ul>
<blockquote>
<p>Imports physical and timing constraints from a Xilinx Design Constraints file (XDC). The XDC is
imported into the current_instance level of the design hierarchy, which defaults to the top-
level of the design, or can be imported into specified cells.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-tcl" data-lang="tcl">read_xdc -unmanaged ./data/top.xdc
</code></pre></div><p>important options:
<code>-unmanaged</code>: Vivado tool will not save constraint changes back into these unmanaged Tcl files.</p>
<h2 id="run-synthesis">Run synthesis</h2>
<p><code>synth_desgin</code> from UG835</p>
<blockquote>
<p>Directly launches the Vivado synthesis engine to compile and synthesize a design in either
Project Mode or Non-Project Mode in the Vivado Design Suite.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-tcl" data-lang="tcl">synth_design -top top -include_dirs ./rtl
</code></pre></div><p>important options</p>
<ul>
<li><code>include_dirs</code>: Path of files included in rtl. initially, i though that something <code>read_verilog</code> would need.</li>
<li><code>-generic</code> to override parameters</li>
</ul>
<p>There are many options to control the synthesis. Check UG901 for more details.</p>
<h2 id="checkpoint">checkpoint</h2>
<p>At this point, it&rsquo;s good idea to create checkpoint in case we exited vivado. this way we can load the checkpoint and move on with implementation later.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-tcl" data-lang="tcl">write_checkpoint $outputDir/post_synth -force
</code></pre></div><h2 id="reports">Reports</h2>
<p><code>report_timing_summary</code></p>
<blockquote>
<p>Generate a timing summary to help understand if the design has met timing requirements. The
timing summary can be run on an open Synthesized or Implemented Design.</p>
</blockquote>
<p>we are looking at <code>Design Timing SUmmary</code> section. if all is good, There should be at the end of section</p>
<pre tabindex="0"><code>All user specified timing constraints are met
</code></pre><p><code>report_utilization</code></p>
<blockquote>
<p>Report the utilization of resources on the target part by the current synthesized or implemented
design.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-tcl" data-lang="tcl">report_timing_summary -file $outputDir/post_synth_report_timing_summary.rpt
report_utilization -file $outputDir/post_synth_report_utilization.rpt
</code></pre></div><p>Notes:</p>
<ul>
<li><code>report_timing_summary</code> is the most important report because it reports <code>WNS</code> (worst negative slack).
the max freq is defined with <code>1/(T-WNS)</code>.</li>
<li>After synth, reports are still not final. we will need to generate the reports again after implementation.</li>
</ul>
<h2 id="netlist-generation">Netlist generation</h2>
<p>If we need to do GLS, we will need to generate post-synth netlist. Note we will need to generate xiling simulation libraries to actually use generated netlist and SDF</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-tcl" data-lang="tcl">write_verilog $outputDir/post_synth_netlist.v
write_sdf     $outputDir/post_synth_netlist.sdf
</code></pre></div><h1 id="implementation">Implementation</h1>
<p>There are several ways to read design for implementation flow</p>
<ul>
<li>in-memory design after synth_design</li>
<li>Read checkpoint</li>
<li>Load EDIF (from synth or 3rd party synthesis tool)</li>
</ul>
<p>For checkpoint, <code>open_checkpoint</code> can be used to read and link design in-memory</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-tcl" data-lang="tcl">open_checkpoint post_synth.dcp
</code></pre></div><p>in this example, i am assuming single in-memory run.</p>
<h2 id="optimization">Optimization</h2>
<p>After synthesis, there are many optimization that vivado can do to improve area and spead.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-tcl" data-lang="tcl">opt_design
</code></pre></div><p>According to docs, this list of optimization done by default.</p>
<ul>
<li>Retarget</li>
<li>Constant Propagation</li>
<li>Sweep</li>
<li>Global Buffer (BUFG) optimizations</li>
<li>Shift-Register Logic optimizations</li>
<li>Block RAM Power optimizations</li>
</ul>
<h2 id="place">Place</h2>
<p>from UG835</p>
<blockquote>
<p>Automatically place ports and leaf-level instances.</p>
</blockquote>
<p>It seems default setting is good enough. but in case we need to change it, there is <code>-directive</code> which takes several options to control the priority of placement.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-tcl" data-lang="tcl">place_design
</code></pre></div><h2 id="routing">Routing</h2>
<p>from UG835</p>
<blockquote>
<p>Route the nets in the current design to complete logic connections on the target part.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-tcl" data-lang="tcl">route_design
</code></pre></div><p>like <code>place_design</code>, i don&rsquo;t think we need to change default setting unless you really know what you are doing.</p>
<h2 id="reports-1">Reports</h2>
<p>At this point, the reports should have the best estimate after place and route</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-tcl" data-lang="tcl">report_timing_summary -file $outputDir/post_route_report_timing_summary.rpt
report_utilization -file $outputDir/post_route_report_utilization.rpt
</code></pre></div><h2 id="bit-generation">Bit generation</h2>
<p>Finally the bit stream!</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-tcl" data-lang="tcl">write_bitsteam -force top.bit
</code></pre></div><h2 id="putting-it-all-together">Putting it all together</h2>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-tcl" data-lang="tcl">set_part &lt;FPGA-PART-NUMBER&gt;
<span style="color:#fff;font-weight:bold">set</span> outputDir ./output
<span style="color:#fff;font-weight:bold">file</span> makdir $outputDir

read_verilog ./rtl/top.v

read_xdc -unmanaged ./data/top.xdc

synth_design -top top -include_dirs ./rtl

write_checkpoint $outputDir/post_synth -force

report_timing_summary -file $outputDir/post_synth_report_timing_summary.rpt
report_utilization -file $outputDir/post_synth_report_utilization.rpt

write_verilog $outputDir/post_synth_netlist.v
write_sdf     $outputDir/post_synth_netlist.sdf


opt_design

place_design

write_checkpoint $outputDir/post_place -force

route_design

report_timing_summary -file $outputDir/post_route_report_timing_summary.rpt
report_utilization -file $outputDir/post_route_report_utilization.rpt

write_bitsteam -force top.bit
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Percolation Union find</title>
            <link>/posts/2020/05/percolation-union-find/</link>
            <pubDate>Tue, 26 May 2020 18:08:00 +0200</pubDate>
            
            <guid>/posts/2020/05/percolation-union-find/</guid>
            <description>Wiki says that Percolation is
 refers to the movement and filtering of fluids through porous materials
 To put this in CS/Math terms:
 Starting with N*N grid with and open and closed cells, is there a path from top row to bottom row?
 This is an example from link that shows how system percolates or not. Percolation is a problem that shows up in chemistry and physics. Also, in network connectivity or Maze connectivity.</description>
            <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Percolation">Wiki</a> says that Percolation is</p>
<blockquote>
<p>refers to the movement and filtering of fluids through porous materials</p>
</blockquote>
<p>To put this in CS/Math terms:</p>
<blockquote>
<p>Starting with N*N grid with and open and closed cells, is there a path from top row to bottom row?</p>
</blockquote>
<p>This is an example from <a href="https://www2.cs.duke.edu/courses/cps100r/spring18/notes/0228/13-percolation-uf.pdf">link</a>
that shows how system percolates or not.
<img src="/percolation.png" alt="Example image"></p>
<p>Percolation is a problem that shows up in chemistry and physics. Also, in network connectivity or Maze connectivity. basically asking &ldquo;is there a path between two points on grid&rdquo;.</p>
<h1 id="union-find">Union find</h1>
<p>one of the algorithms to solve the percolation system is converting the grid to <a href="https://en.wikipedia.org/wiki/Disjoint-set_data_structure">union-find</a> problem and check if the bottom and top nodes are connected.</p>
<p>The union find works by separating nodes into components. and defining operations that process these components.</p>
<p><code>union</code> merges the components that contain nodes <code>p,q</code>. <code>find</code> returns the component containing the node p. <code>connected</code> checks if two nodes are in the same component.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> union( p ,q):
    <span style="color:#fff;font-weight:bold">def</span> find( p):
    <span style="color:#fff;font-weight:bold">def</span> connected(p,q):
</code></pre></div><p>I did two implementation one for <code>QuickFind</code> with fast lookup but slow union. and <code>QuickUnion</code> which uses Fast union operation. that said, <code>QuickUnion</code> may show O(N) in worst case for both find and union.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> QuickFind():
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, N):
        self.N = N
        self.id = []
        <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(N):
            self.id.append(i)

    <span style="color:#fff;font-weight:bold">def</span> union(self, p ,q):
        logging.info(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;UF: Connecting </span><span style="color:#0ff;font-weight:bold">{</span>p<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> and </span><span style="color:#0ff;font-weight:bold">{</span>q<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
        new_id = self.id[q]
        old_id = self.id[p]
        <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(self.N):
            <span style="color:#fff;font-weight:bold">if</span> (self.id[i] == old_id):
                self.id[i] = new_id
    <span style="color:#fff;font-weight:bold">def</span> find(self, p):
        <span style="color:#fff;font-weight:bold">return</span> self.id[p]
    <span style="color:#fff;font-weight:bold">def</span> connected(self,p,q):
        <span style="color:#fff;font-weight:bold">return</span> self.find(p) == self.find(q)
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">class</span> QuickUnion():
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, N):
        self.N = N
        self.id = []
        <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(N):
            self.id.append(i)

    <span style="color:#fff;font-weight:bold">def</span> union(self, p ,q):
        logging.info(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;UF: Connecting </span><span style="color:#0ff;font-weight:bold">{</span>p<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold"> and </span><span style="color:#0ff;font-weight:bold">{</span>q<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
        self.id[self.find(p)] = self.find(q)
        logging.info(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;id=</span><span style="color:#0ff;font-weight:bold">{</span>self.id<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">&#34;</span>)
    <span style="color:#fff;font-weight:bold">def</span> find(self, p):
        root = self.id[p]
        <span style="color:#fff;font-weight:bold">while</span> (not root ==  self.id[root]):
            root = self.id[root]
        <span style="color:#fff;font-weight:bold">return</span> root
    <span style="color:#fff;font-weight:bold">def</span> connected(self,p,q):
        <span style="color:#fff;font-weight:bold">return</span> self.find(p) == self.find(q)
</code></pre></div><h1 id="percolation">Percolation</h1>
<p>I created UF with (N*N+2) nodes. the extra 2 notes are top and bottom notes. At the start, the first row is connected to top node and bottom row is connected to bottom row.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        self.TOP    = (N * N)
        self.BOTTOM = (N * N) + <span style="color:#ff0;font-weight:bold">1</span>
        uf = QuickUnion((N*N)+<span style="color:#ff0;font-weight:bold">2</span>) <span style="color:#007f7f"># N*N nodes and 2 for top and bottom nodes</span>
        <span style="color:#007f7f"># Connect top and bottom nodes</span>
        <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(self.N):
            uf.union(xy_to_idx(<span style="color:#ff0;font-weight:bold">0</span>,   i,N), self.TOP)
            uf.union(xy_to_idx(N-<span style="color:#ff0;font-weight:bold">1</span>, i,N), self.BOTTOM)
</code></pre></div><p>the main loop starts opening cells in the grid and check if system percolates</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> open_site(self):
        <span style="color:#007f7f"># generate random cell and copen it</span>
        idx = randrange(self.N * self.N)
        (x,y) = idx_to_xy(idx, self.N)

        <span style="color:#fff;font-weight:bold">if</span> self.grid[x][y] == <span style="color:#fff;font-weight:bold">False</span>:
            logging.info(<span style="color:#0ff;font-weight:bold">f</span><span style="color:#0ff;font-weight:bold">&#34;Opening cell (</span><span style="color:#0ff;font-weight:bold">{</span>x<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">,</span><span style="color:#0ff;font-weight:bold">{</span>y<span style="color:#0ff;font-weight:bold">}</span><span style="color:#0ff;font-weight:bold">)&#34;</span>)
            self.grid[x][y] = <span style="color:#fff;font-weight:bold">True</span>
            
            <span style="color:#007f7f"># connect to surrouding cells</span>
            <span style="color:#fff;font-weight:bold">for</span> cell in neighbours(x,y,self.N):
                <span style="color:#fff;font-weight:bold">if</span> self.grid[cell[<span style="color:#ff0;font-weight:bold">0</span>]][cell[<span style="color:#ff0;font-weight:bold">1</span>]] == <span style="color:#fff;font-weight:bold">True</span>:
                    self.uf.union(xy_to_idx(x,y,self.N), xy_to_idx(cell[<span style="color:#ff0;font-weight:bold">0</span>], cell[<span style="color:#ff0;font-weight:bold">1</span>],self.N))
</code></pre></div><p>Side note, <code>neighbours</code> is utility created to get the neighbour cells taking into account the edges and corner</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> isOnGrid(x,y,N):
    <span style="color:#fff;font-weight:bold">return</span> (x &gt;=<span style="color:#ff0;font-weight:bold">0</span>) and (y &gt;=<span style="color:#ff0;font-weight:bold">0</span>) and (x &lt; N) and (y &lt; N)
<span style="color:#fff;font-weight:bold">def</span> neighbours(x,y,N):
    l = []
    xx = <span style="color:#ff0;font-weight:bold">0</span>
    <span style="color:#fff;font-weight:bold">for</span> yy in [-<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">1</span>]:
        <span style="color:#fff;font-weight:bold">if</span> isOnGrid(x + xx, y + yy,N):
            l.append((x+xx,y+yy))
    yy = <span style="color:#ff0;font-weight:bold">0</span>
    <span style="color:#fff;font-weight:bold">for</span> xx in [-<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">1</span>]:
        <span style="color:#fff;font-weight:bold">if</span> isOnGrid(x + xx, y + yy,N):
            l.append((x+xx,y+yy)) 
</code></pre></div><p>Checking if system percolates is just asking if TOP and BOTTOM nodes are connected (ie in the same component).</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> is_perculatres(self):
        <span style="color:#fff;font-weight:bold">return</span> self.uf.connected(self.TOP, self.BOTTOM)

</code></pre></div><p>Finally, matplotlib is used to show the final grid for reference and calculate the percentage of opened cells.</p>
<pre tabindex="0"><code>WARNING:root:Percentage=0.5852
</code></pre><p><img src="/percolation1.png" alt="Example image"></p>
]]></content>
        </item>
        
        <item>
            <title>Sudoku SAT Solution</title>
            <link>/posts/2020/05/sudoku-sat-solution/</link>
            <pubDate>Sun, 24 May 2020 20:49:37 +0200</pubDate>
            
            <guid>/posts/2020/05/sudoku-sat-solution/</guid>
            <description>This one is about two things Sudoku and SAT (obviously!). Let&amp;rsquo;s start with definitions:
Sudoku Sudoku is a puzzle with the objective to fill 9x9 grid with numbers between 1 and 9. There are few rules
 All cells must have one number between 1 and 9 Rows and columns must contain unique numbers 1 to 9 (no repeated digits) each 3x3 sub-grid (AKA box) must contain unique numbers 1 to 9 (to repeated digits)  Check out the wiki</description>
            <content type="html"><![CDATA[<p>This one is about two things Sudoku and SAT (obviously!). Let&rsquo;s start with definitions:</p>
<h1 id="sudoku">Sudoku</h1>
<p>Sudoku is a puzzle with the objective to fill 9x9 grid with numbers between 1 and 9. There are few rules</p>
<ul>
<li>All cells must have one number between 1 and 9</li>
<li>Rows and columns must contain unique numbers 1 to 9 (no repeated digits)</li>
<li>each 3x3 sub-grid (AKA box) must contain unique numbers 1 to 9 (to repeated digits)</li>
</ul>
<p>Check out the <a href="https://en.wikipedia.org/wiki/Sudoku">wiki</a></p>
<p>it usually starts with an initial combination that should result into one unique solution. this is example from the wiki page.
<img src="/sudoku-wiki.png" alt="Example image"></p>
<h1 id="sat-problem">SAT Problem</h1>
<p><code>Boolean satisfiability problem</code> is an important computer science NP-complete problem. It has many applications in circuit design and formal proves. for now, I found the best resource is wiki <a href="https://en.wikipedia.org/wiki/Boolean_satisfiability_problem">SAT wiki</a> but there other books and lectures all over the place.</p>
<p>basically, SAT answers one question. For bool function <code>f(x1,x2, ... ,xn)</code>, is there a combination of values for <code>x1, x2, .. xn</code> that could make <code>f</code> true.</p>
<p>if it finds one, it will return it. otherwise, <code>f</code> is UNSAT.</p>
<p>One way to represent SAT input data set is <a href="https://en.wikipedia.org/wiki/Conjunctive_normal_form">CNF</a>.</p>
<blockquote>
<p>In Boolean logic, a formula is in conjunctive normal form (CNF) or clausal normal form if it is a conjunction of one or more clauses, where a clause is a disjunction of literals; otherwise put, it is an AND of ORs. As a canonical normal form, it is useful in automated theorem proving and circuit theory.</p>
</blockquote>
<p>it is basically  POS (product of sum).</p>
<p>for example, function <code>(x1 | x2) &amp; (x2 | ~x3)</code> with 3 variables x1, x2 ,x3 can be used for represented</p>
<pre tabindex="0"><code>1 2
2 -3 
</code></pre><p>this format is called <a href="https://people.sc.fsu.edu/~jburkardt/data/cnf/cnf.html">DIMACS</a> and used with many SAT solvers. one famous solver is <a href="http://minisat.se/">minisat</a> which reads DIMACS directly.</p>
<p>for this post, I used <a href="https://github.com/ContinuumIO/pycosat">pycosat</a> with simple API for simple problem like one we have here.</p>
<pre tabindex="0"><code>&gt;&gt;&gt; import pycosat
&gt;&gt;&gt; cnf = [[1, -5, 4], [-1, 5, 3, 4], [-3, -4]]
&gt;&gt;&gt; pycosat.solve(cnf)
[1, -2, -3, -4, 5]
</code></pre><h1 id="implementation">Implementation</h1>
<p>At this point, the biggest problem is how to translate sudoku into CNF.</p>
<p>The most useful resource was <a href="http://cse.unl.edu/~choueiry/S17-235H/files/SATslides02.pdf">lecture</a>, it has instructions how to map sudoku rules into CNF. Combined with <a href="http://www.cs.qub.ac.uk/~I.Spence/SuDoku/SuDoku.html">instructions</a>, i could write the CNF generator for  sudoku and append the initial state.</p>
<p>One important aspect here is that we need to translate the sudoku grid which includes i, j and value to linear variable list that CNF needs. <code>ijk_idx</code> is used for that and it&rsquo;s used heavily for CNF generator.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">N=<span style="color:#ff0;font-weight:bold">10</span>
<span style="color:#fff;font-weight:bold">def</span> ijk_idx(i,j,k):
    <span style="color:#fff;font-weight:bold">return</span> (i * N * N + j * N + k)
</code></pre></div><p>the full source can be found on github, but i am including 9x9 cells rule. i added comments for more clarification.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">10</span>):
        <span style="color:#fff;font-weight:bold">for</span> j in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">10</span>): <span style="color:#007f7f"># loop over cells</span>
            <span style="color:#007f7f"># for all values 1-9  that could at this cell. </span>
            <span style="color:#007f7f">#for example for row 1 col 1, the cl will be</span>
            <span style="color:#007f7f"># [111 112 113 ... 119]</span>
            cl = [ijk_idx(i,j,k) <span style="color:#fff;font-weight:bold">for</span> k in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">10</span>)] 
            cnf.append(cl)

    <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">10</span>):
        <span style="color:#fff;font-weight:bold">for</span> j in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">10</span>):
            <span style="color:#007f7f"># for cell you can have only one value</span>
            <span style="color:#007f7f"># if it contains 1, it shouldn&#39;t contain 2 , 3, 4... 9</span>
            <span style="color:#007f7f"># if it contains 2, it shouldn&#39;t contain 3, 4, ...9</span>
            <span style="color:#fff;font-weight:bold">for</span> x in <span style="color:#fff;font-weight:bold">range</span>(<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">9</span>):
                <span style="color:#fff;font-weight:bold">for</span> y in <span style="color:#fff;font-weight:bold">range</span>(x+<span style="color:#ff0;font-weight:bold">1</span>,<span style="color:#ff0;font-weight:bold">10</span>):
                    cl = [-<span style="color:#ff0;font-weight:bold">1</span>*ijk_idx(i,j,x), -<span style="color:#ff0;font-weight:bold">1</span>*ijk_idx(i,j,y)]
                    cnf.append(cl)
</code></pre></div><p>I used numpy matric as sudoku grid for easier indexing and printing. this is grid after initial state.</p>
<pre tabindex="0"><code>Sudoku After initialization
===========================
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 8. 9. 4. 1. 0. 0. 0. 0.]
 [0. 0. 6. 7. 0. 0. 1. 9. 3.]
 [2. 0. 0. 0. 0. 0. 7. 0. 0.]
 [3. 4. 0. 6. 0. 0. 0. 1. 0.]
 [0. 0. 0. 9. 0. 0. 0. 0. 5.]
 [0. 0. 0. 0. 2. 0. 0. 5. 0.]
 [6. 5. 0. 0. 4. 0. 0. 2. 0.]
 [7. 3. 0. 1. 0. 0. 0. 0. 0.]]
</code></pre><p>And after solution</p>
<pre tabindex="0"><code>Sudoku After Solving
===========================
[[1. 7. 3. 2. 6. 9. 5. 8. 4.]
[5. 8. 9. 4. 1. 3. 6. 7. 2.]
[4. 2. 6. 7. 5. 8. 1. 9. 3.]
[2. 9. 1. 5. 8. 4. 7. 3. 6.]
[3. 4. 5. 6. 7. 2. 8. 1. 9.]
[8. 6. 7. 9. 3. 1. 2. 4. 5.]
[9. 1. 4. 8. 2. 6. 3. 5. 7.]
[6. 5. 8. 3. 4. 7. 9. 2. 1.]
[7. 3. 2. 1. 9. 5. 4. 6. 8.]]
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Conway Game of Life</title>
            <link>/posts/2020/05/conway-game-of-life/</link>
            <pubDate>Sat, 23 May 2020 15:23:40 +0200</pubDate>
            
            <guid>/posts/2020/05/conway-game-of-life/</guid>
            <description>Conway&amp;rsquo;s Game of Life is a zero-player game introduced by the mathematician John Horton Conway in 1970. Well, It has it&amp;rsquo;s own wiki and all.
The rules are simple. You start with a grid of cells with initial state of either living or dead. Cells interact with neighbors to define the next generation of cells.
 Any live cell with fewer than two live neighbors dies, as if by under-population. Any live cell with two or three live neighbors lives on to the next generation.</description>
            <content type="html"><![CDATA[<p>Conway&rsquo;s Game of Life is a zero-player game introduced by the mathematician John Horton Conway in 1970. Well, It has it&rsquo;s own <a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">wiki</a> and all.</p>
<p>The rules are simple. You start with a grid of cells with initial state of either living or dead. Cells interact with neighbors to define the next generation of cells.</p>
<ul>
<li>Any live cell with fewer than two live neighbors dies, as if by under-population.</li>
<li>Any live cell with two or three live neighbors lives on to the next generation.</li>
<li>Any live cell with more than three live neighbors dies, as if by overpopulation.</li>
<li>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction</li>
</ul>
<h1 id="implementation">Implementation</h1>
<p>It&rsquo;s using the following packages</p>
<ul>
<li>numpy and scipy for matrix operations</li>
<li>matplotlib for plotting and animation</li>
</ul>
<p><img src="/conway01.png" alt="Example image"></p>
<h1 id="animation">Animation</h1>
<p>matplotlib is new to me, so it took me some time to understand the basic building blocks. but what i want to highlight below is <code>FuncAnimation</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> generations(self):
        <span style="color:#fff;font-weight:bold">for</span> g in <span style="color:#fff;font-weight:bold">range</span> (self.G):
            <span style="color:#fff;font-weight:bold">yield</span> self.step()


    <span style="color:#fff;font-weight:bold">def</span> run(self):
        fig, ax = plt.subplots()
        mat = ax.matshow(self.grid)   
        ani = animation.FuncAnimation(fig, mat.set_data, self.generations, interval=<span style="color:#ff0;font-weight:bold">500</span>, repeat=<span style="color:#fff;font-weight:bold">False</span>)
        plt.show()
</code></pre></div><p><a href="https://matplotlib.org/3.2.1/api/_as_gen/matplotlib.animation.FuncAnimation.html">docs</a> says</p>
<blockquote>
<p>fig: Figure
The figure object that is used to get draw, resize, and any other needed events.</p>
<p>func: callable
The function to call at each frame. The first argument will be the next value in frames. Any additional positional arguments can be &gt; supplied via the fargs parameter.</p>
<p>frames: iterable, int, generator function, or None, optional
If an iterable, then simply use the values provided. If the iterable has a length, it will override the save_count kwarg.</p>
</blockquote>
<p>So, the second parameter is <code>callable</code>, in this case i am passing <code>mat.set_data</code> so, it will be called by matplolib to update frames.
but the most important part is that third parameter is <code>iterable</code> or <code>int</code> or <code>generator function</code>. and this parameter will be passed to the callable in parameter 2.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> func(frame, *fargs) 
</code></pre></div><p>which effectively is doing the following considering the generator will run <code>G</code> generations before stopping.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> mat.set_data(this.grid)
</code></pre></div><h1 id="gotcha">gotcha</h1>
<p>well, the game is straightforward to write but there was something that bugged me little. Mainly, calculating the number of neighbors living cells.</p>
<p>I initially implemented it by manually counting ucelsls sing (i,j) index and it worked but it was ugly because of the boundary checks.  Then I found <code>convolve2d</code> from <code>scipy</code>. It&rsquo;s neat because using the right kernel, i can count the neighbors for all cells with one line. more details about convolution <a href="https://en.wikipedia.org/wiki/Kernel_(image_processing)">wiki</a></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        W = np.array([[<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">1</span>],
              [<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">1</span>],
              [<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">1</span>]])
        self.neighbour = signal.convolve2d(self.grid, W, <span style="color:#0ff;font-weight:bold">&#39;same&#39;</span>)
</code></pre></div><h1 id="putting-it-all-together">putting it all together</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">import</span> numpy <span style="color:#fff;font-weight:bold">as</span> np
<span style="color:#fff;font-weight:bold">from</span> scipy <span style="color:#fff;font-weight:bold">import</span> signal
<span style="color:#fff;font-weight:bold">import</span> matplotlib.pyplot <span style="color:#fff;font-weight:bold">as</span> plt 
<span style="color:#fff;font-weight:bold">import</span> matplotlib.animation <span style="color:#fff;font-weight:bold">as</span> animation

<span style="color:#fff;font-weight:bold">import</span> argparse

<span style="color:#fff;font-weight:bold">class</span> Conway():
    <span style="color:#fff;font-weight:bold">def</span> __init__(self, N=<span style="color:#ff0;font-weight:bold">10</span>, G=<span style="color:#ff0;font-weight:bold">1</span>, shape=<span style="color:#0ff;font-weight:bold">&#39;random&#39;</span>):
        self.N = N
        self.G = G
        self.grid = <span style="color:#fff;font-weight:bold">None</span>
        self.neighbour = <span style="color:#fff;font-weight:bold">None</span>

        <span style="color:#fff;font-weight:bold">if</span> shape == <span style="color:#0ff;font-weight:bold">&#39;random&#39;</span>:
            self.grid = np.random.choice(a=[<span style="color:#fff;font-weight:bold">False</span>, <span style="color:#fff;font-weight:bold">True</span>], size=(N, N))
        <span style="color:#fff;font-weight:bold">else</span>:
            self.grid = np.zeros((N, N), dtype=<span style="color:#0ff;font-weight:bold">&#39;bool&#39;</span>)

    <span style="color:#fff;font-weight:bold">def</span> calc(self):
        W = np.array([[<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">1</span>],
              [<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">1</span>],
              [<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">1</span>]])
        self.neighbour = signal.convolve2d(self.grid, W, <span style="color:#0ff;font-weight:bold">&#39;same&#39;</span>)
            
    <span style="color:#fff;font-weight:bold">def</span> step(self):
        self.calc()
        <span style="color:#fff;font-weight:bold">for</span> i in <span style="color:#fff;font-weight:bold">range</span>(self.N):
            <span style="color:#fff;font-weight:bold">for</span> j in <span style="color:#fff;font-weight:bold">range</span>(self.N):
                <span style="color:#007f7f"># Rule1: if dead cell have exactly 3 surrouding living cell, it become a live</span>
                <span style="color:#fff;font-weight:bold">if</span> (self.grid[i,j] ==  <span style="color:#ff0;font-weight:bold">0</span> and self.neighbour[i,j] == <span style="color:#ff0;font-weight:bold">3</span>):
                    self.grid[i,j] = <span style="color:#ff0;font-weight:bold">1</span>
                <span style="color:#007f7f"># Rule2 and Rule3: if living cell has &gt; 3 or &lt; 2 surrounding, it dies</span>
                <span style="color:#fff;font-weight:bold">if</span> (self.grid[i,j] == <span style="color:#ff0;font-weight:bold">1</span> and(self.neighbour[i,j] &lt; <span style="color:#ff0;font-weight:bold">2</span> or self.neighbour[i,j] &gt; <span style="color:#ff0;font-weight:bold">3</span>) ):
                    self.grid[i,j] = <span style="color:#ff0;font-weight:bold">0</span>
                <span style="color:#007f7f"># livining cell has 2 or 3, it staying alive</span>
        <span style="color:#fff;font-weight:bold">return</span> self.grid

    <span style="color:#fff;font-weight:bold">def</span> generations(self):
        <span style="color:#fff;font-weight:bold">for</span> g in <span style="color:#fff;font-weight:bold">range</span> (self.G):
            <span style="color:#fff;font-weight:bold">yield</span> self.step()


    <span style="color:#fff;font-weight:bold">def</span> run(self):
        fig, ax = plt.subplots()
        mat = ax.matshow(self.grid)   
        ani = animation.FuncAnimation(fig, mat.set_data, self.generations, interval=<span style="color:#ff0;font-weight:bold">500</span>, repeat=<span style="color:#fff;font-weight:bold">False</span>)
        plt.show()

<span style="color:#fff;font-weight:bold">def</span> main():
    parser = argparse.ArgumentParser(description=<span style="color:#0ff;font-weight:bold">&#39;Conway game of life&#39;</span>)

    parser.add_argument(<span style="color:#0ff;font-weight:bold">&#39;N&#39;</span>, <span style="color:#fff;font-weight:bold">type</span>=<span style="color:#fff;font-weight:bold">int</span>, help=<span style="color:#0ff;font-weight:bold">&#39;Grid Size&#39;</span>)
    parser.add_argument(<span style="color:#0ff;font-weight:bold">&#39;G&#39;</span>, <span style="color:#fff;font-weight:bold">type</span>=<span style="color:#fff;font-weight:bold">int</span>, help=<span style="color:#0ff;font-weight:bold">&#39;Generations Count&#39;</span>)

    args = parser.parse_args()

    g = Conway(args.N,args.G)
    g.run()
    

<span style="color:#fff;font-weight:bold">if</span> __name__ == <span style="color:#0ff;font-weight:bold">&#34;__main__&#34;</span>:
    main()
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>MD5 python implementation</title>
            <link>/posts/2020/05/md5-python-implementation/</link>
            <pubDate>Fri, 15 May 2020 23:04:19 +0200</pubDate>
            
            <guid>/posts/2020/05/md5-python-implementation/</guid>
            <description>I thought it would be fun to implement MD5 from scratch. it was indeed fun but with few Gotchas. so, after shaking off PTSD, i wrote this post.
The rfc1321 defines MD5 digest algorithm. It also has reference C implementation which is nice (and needlessly complicated). That said, I don&amp;rsquo;t think Python is really the best language for bit manipulations of binary files. but that is part of the fun, right?</description>
            <content type="html"><![CDATA[<p>I thought it would be fun to implement MD5 from scratch. it was indeed fun but with few Gotchas. so, after shaking off PTSD, i wrote this post.</p>
<p>The <a href="https://tools.ietf.org/html/rfc1321">rfc1321</a> defines MD5 digest algorithm. It also has reference C implementation which is nice (and needlessly complicated). That said, I don&rsquo;t think Python is really the best language for bit manipulations of binary files. but that is part of the fun, right?</p>
<h1 id="the-padding">The padding</h1>
<p>it starts with padding the message block. the final size of the message should be <code>b + p</code></p>
<pre tabindex="0"><code>b + p mod 512 = 448
</code></pre><p>where b is original message size and p is padding size. This is mentioned is this part of RFC</p>
<blockquote>
<p>The message is &ldquo;padded&rdquo; (extended) so that its length (in bits) is
congruent to 448, modulo 512. That is, the message is extended so
that it is just 64 bits shy of being a multiple of 512 bits long.
Padding is always performed, even if the length of the message is
already congruent to 448, modulo 512.</p>
<p>Padding is performed as follows: a single &ldquo;1&rdquo; bit is appended to the
message, and then &ldquo;0&rdquo; bits are appended so that the length in bits of
the padded message becomes congruent to 448, modulo 512. In all, at
least one bit and at most 512 bits are appended.</p>
</blockquote>
<p>it can be done with smarter way but i didn&rsquo;t want to burn any mental calories on this.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    rem = message_len % <span style="color:#ff0;font-weight:bold">512</span>
    <span style="color:#fff;font-weight:bold">if</span> rem &gt;= <span style="color:#ff0;font-weight:bold">448</span>:
        num_padding = <span style="color:#ff0;font-weight:bold">512</span> -rem + <span style="color:#ff0;font-weight:bold">448</span>
    <span style="color:#fff;font-weight:bold">else</span>:
        num_padding = <span style="color:#ff0;font-weight:bold">448</span> - rem
    padding = bitarray(<span style="color:#0ff;font-weight:bold">&#39;1&#39;</span>+ (<span style="color:#0ff;font-weight:bold">&#39;0&#39;</span> * (num_padding - <span style="color:#ff0;font-weight:bold">1</span>)))
</code></pre></div><p>At this point, there are 64 bits free in the last 512 bit data block. the size of original message (b) is  appended to fill up these bits.</p>
<blockquote>
<p>A 64-bit representation of b (the length of the message before the
padding bits were added) is appended to the result of the previous
step. In the unlikely event that b is greater than 2^64, then only
the low-order 64 bits of b are used. (These bits are appended as two
32-bit words and appended low-order word first in accordance with the
previous conventions.)</p>
</blockquote>
<h1 id="the-buffers">The Buffers</h1>
<p>the RFC defines 4 32-bit buffers  A,B,C,D. they are initialized with these values.</p>
<blockquote>
<pre><code>     word A: 01 23 45 67
     word B: 89 ab cd ef
     word C: fe dc ba 98
     word D: 76 54 32 10
</code></pre>
</blockquote>
<p>Gotcha, they are little endian. so, hex values are use like this.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    A = hexstr_to_bitarray(<span style="color:#0ff;font-weight:bold">&#39;67452301&#39;</span>)
    B = hexstr_to_bitarray(<span style="color:#0ff;font-weight:bold">&#39;efcdab89&#39;</span>)
    C = hexstr_to_bitarray(<span style="color:#0ff;font-weight:bold">&#39;98badcfe&#39;</span>)
    D = hexstr_to_bitarray(<span style="color:#0ff;font-weight:bold">&#39;10325476&#39;</span>)

</code></pre></div><p>the final 128-bit  MD4 digest is the concatenation of 4 32-bit buffers with LITTLE ENDIAN.</p>
<h1 id="the-building-blocks">The building blocks</h1>
<p>first step is defining 4 operations as building block for the digest calculation</p>
<blockquote>
<pre><code>    F(X,Y,Z) = XY v not(X) Z
    G(X,Y,Z) = XZ v Y not(Z)
    H(X,Y,Z) = X xor Y xor Z
    I(X,Y,Z) = Y xor (X v not(Z))
</code></pre>
</blockquote>
<p>in python, easy enough:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> F(x,y,z):
    <span style="color:#fff;font-weight:bold">return</span> (x &amp; y) | (~x &amp; z)
<span style="color:#fff;font-weight:bold">def</span> G(x,y,z):
    <span style="color:#fff;font-weight:bold">return</span> (x &amp; z) | (y &amp; ~z)
<span style="color:#fff;font-weight:bold">def</span> H(x,y,z):
    <span style="color:#fff;font-weight:bold">return</span> (x ^ y ^ z)
<span style="color:#fff;font-weight:bold">def</span> I(x,y,z):
    <span style="color:#fff;font-weight:bold">return</span> y ^ (x | ~z)
</code></pre></div><p>Also, there is also operation that will be used in 4 rounds. more details below.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;
</span><span style="color:#0ff;font-weight:bold">#a = b + ((a + func(b,c,d) + x + t) &lt;&lt;&lt; s)
</span><span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;</span>
<span style="color:#fff;font-weight:bold">def</span> op(a, b, c , d, x, s, t, func):
    bit_tmp = func(b,c,d)
    bit_tmp  = add_bitarray(bit_tmp, x)
    bit_tmp  = add_bitarray(bit_tmp, a)

    bit_tmp  = add_bitarray(bit_tmp, t)
    bit_tmp  = rotate(bit_tmp,s)
    bit_tmp  = add_bitarray(bit_tmp,b)
    <span style="color:#fff;font-weight:bold">return</span> bit_tmp
</code></pre></div><p>Side note, <code>add_bitarray</code> will be explained in the implementation details section</p>
<h1 id="the-loop">The loop</h1>
<p>The loop processes the 512-bit blocks and Move it to X array. X is 16 32-bit words (512 bits)</p>
<blockquote>
<p>For i = 0 to N/16-1 do</p>
<pre><code>/* Copy block i into X. */
For j = 0 to 15 do
  Set X[j] to M[i*16+j].
end /* of loop on j */
</code></pre>
</blockquote>
<p>the next part stores A,B,C,D in temp variables</p>
<blockquote>
<pre><code>/* Save A as AA, B as BB, C as CC, and D as DD. */
AA = A
BB = B
CC = C
DD = D
</code></pre>
</blockquote>
<p>The RFC defines 4 rounds of calculations where A,B,C,D are updated by 64 operations. i am putting here only 16 operations to keep it short.</p>
<blockquote>
<pre><code>/* Round 1. */
/* Let [abcd k s i] denote the operation
     a = b + ((a + F(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s). */
/* Do the following 16 operations. */
[ABCD  0  7  1]  [DABC  1 12  2]  [CDAB  2 17  3]  [BCDA  3 22  4]
[ABCD  4  7  5]  [DABC  5 12  6]  [CDAB  6 17  7]  [BCDA  7 22  8]
[ABCD  8  7  9]  [DABC  9 12 10]  [CDAB 10 17 11]  [BCDA 11 22 12]
[ABCD 12  7 13]  [DABC 13 12 14]  [CDAB 14 17 15]  [BCDA 15 22 16]
</code></pre>
</blockquote>
<p>again,  there is fancier way to do this but i wrote down the 64 operations to keep it verbose and simple. below, the first 4 operations. Note, <code>op</code> is defined above and takes the function <code>F</code> to apply on <code>b,c,d</code>. Round 2,3 and 4 use G,H,I functions for calculations.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        A = op(A,B,C,D,X[<span style="color:#ff0;font-weight:bold">0</span>],<span style="color:#ff0;font-weight:bold">7</span>,T[<span style="color:#ff0;font-weight:bold">1</span>],F)
        D = op(D,A,B,C,X[<span style="color:#ff0;font-weight:bold">1</span>],<span style="color:#ff0;font-weight:bold">12</span>,T[<span style="color:#ff0;font-weight:bold">2</span>],F)
        C = op(C,D,A,B,X[<span style="color:#ff0;font-weight:bold">2</span>],<span style="color:#ff0;font-weight:bold">17</span>,T[<span style="color:#ff0;font-weight:bold">3</span>],F)
        B = op(B,C,D,A,X[<span style="color:#ff0;font-weight:bold">3</span>],<span style="color:#ff0;font-weight:bold">22</span>,T[<span style="color:#ff0;font-weight:bold">4</span>],F)
</code></pre></div><p>at the end of the loop, adding temp variables to the A,B,C,D buffers.</p>
<blockquote>
<pre><code>A = A + AA
B = B + BB
C = C + CC
D = D + DD
</code></pre>
</blockquote>
<h1 id="implementation-details">Implementation details</h1>
<p>I used <code>bitarray</code> package to to convert bytes to bits and used as main container throughout the program. it works with logical arithmetic but it doesn&rsquo;t work with  addition.
what make it worse, the algorithm assumes 32 bit operands and addition will overflow on <code>2^32</code> (at least in C). Obviously, i can&rsquo;t guarantee that in python. so, i wrote down the addition to make sure the results in under <code>2^32</code>. that can be seen in <code>add_bitarray</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> hexstr_to_bitarray(h):
    ba = bitarray(endian=<span style="color:#0ff;font-weight:bold">&#39;big&#39;</span>)
    ba.frombytes(<span style="color:#fff;font-weight:bold">bytes</span>.fromhex(h))
    <span style="color:#fff;font-weight:bold">return</span> ba

<span style="color:#fff;font-weight:bold">def</span> bitarray_to_hexstr(ba):
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">hex</span>(<span style="color:#fff;font-weight:bold">int</span>.from_bytes(ba.tobytes(),byteorder=<span style="color:#0ff;font-weight:bold">&#39;big&#39;</span>))

<span style="color:#fff;font-weight:bold">def</span> bitarray_to_int(ba):
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">int</span>.from_bytes(ba.tobytes(),byteorder=<span style="color:#0ff;font-weight:bold">&#39;big&#39;</span>)

<span style="color:#fff;font-weight:bold">def</span> int_to_bitarray(i):
     ba = bitarray()
     ba.frombytes(i.to_bytes(<span style="color:#ff0;font-weight:bold">4</span>,byteorder=<span style="color:#0ff;font-weight:bold">&#39;big&#39;</span>))
     <span style="color:#fff;font-weight:bold">return</span> ba

<span style="color:#fff;font-weight:bold">def</span> add_bitarray(a,b):
    i1 = bitarray_to_int(a)
    i2 = bitarray_to_int(b)
    i3 = (i1 + i2) % <span style="color:#fff;font-weight:bold">pow</span>(<span style="color:#ff0;font-weight:bold">2</span>,<span style="color:#ff0;font-weight:bold">32</span>)
    <span style="color:#fff;font-weight:bold">return</span> int_to_bitarray(i3)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM Internals - Configuration database</title>
            <link>/posts/2020/05/uvm-internals-configuration-database/</link>
            <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/05/uvm-internals-configuration-database/</guid>
            <description>The White Rabbit Configuration database is used to pass around configuration parameters through centralized database. one of the famous patterns is storing the virtual interface.
uvm_config_db#(virtual v_if)::set(null,&amp;#34;*&amp;#34;,&amp;#34;v_if&amp;#34;,intf); Then any component(driver/monitor) can get the virtual interface
uvm_config_db#(virtual v_if)::get(null,&amp;#34;*&amp;#34;,&amp;#34;v_if&amp;#34;,vintf); ::set Starting with ::set, it is defined in src/base/uvm_config_db.svh as static method of class uvm_class_db
class uvm_config_db#(type T=int) extends uvm_resource_db#(T); ... ... static function void set(uvm_component cntxt, string inst_name, string field_name, T value); set uses cntxt to build the inst_name then add resource m_rsc if it doesn&amp;rsquo;t exist</description>
            <content type="html"><![CDATA[<h1 id="the-white-rabbit">The White Rabbit</h1>
<p>Configuration database is used to pass around configuration parameters through centralized database. one of the famous patterns is storing the virtual interface.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">uvm_config_db#(virtual v_if)::set(null,<span style="color:#0ff;font-weight:bold">&#34;*&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;v_if&#34;</span>,intf);
</code></pre></div><p>Then any component(driver/monitor) can get the virtual interface</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">uvm_config_db#(virtual v_if)::get(null,<span style="color:#0ff;font-weight:bold">&#34;*&#34;</span>,<span style="color:#0ff;font-weight:bold">&#34;v_if&#34;</span>,vintf);
</code></pre></div><h1 id="set">::set</h1>
<p>Starting with <code>::set</code>, it is defined in <code>src/base/uvm_config_db.svh</code> as static method of class <code>uvm_class_db</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class uvm_config_db#(<span style="color:#fff;font-weight:bold">type</span> T=<span style="color:#fff;font-weight:bold">int</span>) extends uvm_resource_db#(T);

...
...
  static <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> set(uvm_component cntxt,
                           <span style="color:#fff;font-weight:bold">string</span> inst_name,
                           <span style="color:#fff;font-weight:bold">string</span> field_name,
                           T value);
</code></pre></div><p><code>set</code> uses <code>cntxt</code> to build the <code>inst_name</code> then add resource <code>m_rsc</code> if it doesn&rsquo;t exist</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    uvm_pool#(<span style="color:#fff;font-weight:bold">string</span>,uvm_resource#(T)) pool;


    <span style="color:#fff;font-weight:bold">if</span>(cntxt == null) 
      cntxt = top;
    <span style="color:#fff;font-weight:bold">if</span>(inst_name == <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>) 
      inst_name = cntxt.get_full_name();
    <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">if</span>(cntxt.get_full_name() != <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>) 
      inst_name = {cntxt.get_full_name(), <span style="color:#0ff;font-weight:bold">&#34;.&#34;</span>, inst_name};

    <span style="color:#fff;font-weight:bold">if</span>(!m_rsc.exists(cntxt)) <span style="color:#fff;font-weight:bold">begin</span>
      m_rsc[cntxt] = new;
    <span style="color:#fff;font-weight:bold">end</span>
    pool = m_rsc[cntxt];
</code></pre></div><p><code>m_rsc</code> is defined as assoc array of pools</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  static uvm_pool#(<span style="color:#fff;font-weight:bold">string</span>,uvm_resource#(T)) m_rsc[uvm_component];
</code></pre></div><p>Assuming the field wasn&rsquo;t already in the pool for that context, a new resource is created and added to the pool</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">       r = new(field_name, inst_name);
       pool.add(lookup, r);
</code></pre></div><p>and in <code>uvm_pool.svh</code>,  <code>add</code> just adds the item (in this case resource to local protected assoc array)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  virtual <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> add (KEY key, T item);
    pool[key] = item;
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p>at this point, the value and cntxt are passed to resource.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  r.write(value, cntxt);
</code></pre></div><p>and <code>write</code>, define in <code>uvm_resource.svh</code>, just stores the value in local variable <code>val</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    val = t;
</code></pre></div><p>at this point, we have the resource <code>r</code> ready to be in <code>uvm_resource_pool</code>. Note that <code>uvm_resource_pool</code> will be used by <code>::get</code> in the next section.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    <span style="color:#fff;font-weight:bold">if</span>(exists) <span style="color:#fff;font-weight:bold">begin</span>
      uvm_resource_pool rp = uvm_resource_pool::get();
      rp.set_priority_name(r, uvm_resource_types::PRI_HIGH);
    <span style="color:#fff;font-weight:bold">end</span>
    <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">begin</span>
      <span style="color:#007f7f">//Doesn&#39;t exist yet, so put it in resource db at the head.
</span><span style="color:#007f7f"></span>      r.set_override();
    <span style="color:#fff;font-weight:bold">end</span>
</code></pre></div><p><code>set_override</code> is defined in <code>uvm_resource.svh</code>,</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> set_override(uvm_resource_types::override_t override = <span style="color:#ff0;font-weight:bold">2</span><span style="color:#ff0;font-weight:bold">&#39;b11</span>);
    uvm_resource_pool rp = uvm_resource_pool::get();
    rp.set(this, override);
  <span style="color:#fff;font-weight:bold">endfunction</span>

</code></pre></div><p><code>uvm_resource_pool</code> has the <code>set</code> method called with resource. Note the resource has the value and context at this point. <code>rq</code> is created for that resource, and added to <code>rtab</code> assoc array</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">        rq = new();
        ....
      <span style="color:#fff;font-weight:bold">if</span>(override &amp; uvm_resource_types::NAME_OVERRIDE)
        rq.push_front(rsrc);
      <span style="color:#fff;font-weight:bold">else</span>
        rq.push_back(rsrc);

      rtab[name] = rq;
</code></pre></div><h1 id="get">::get</h1>
<p>it is also defined in <code>src/base/uvm_config_db.svh</code> as static method of class <code>uvm_class_db</code>. have similar logic to <code>set</code></p>
<p>starting with creating the <code>inst_name</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">   <span style="color:#fff;font-weight:bold">if</span>(cntxt == null) 
      cntxt = uvm_root::get();
    <span style="color:#fff;font-weight:bold">if</span>(inst_name == <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>) 
      inst_name = cntxt.get_full_name();
    <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">if</span>(cntxt.get_full_name() != <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>) 
      inst_name = {cntxt.get_full_name(), <span style="color:#0ff;font-weight:bold">&#34;.&#34;</span>, inst_name};
</code></pre></div><p>then the instance name is looked up in <code>uvm_resource_pool</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    uvm_resource_pool rp = uvm_resource_pool::get();
    uvm_resource_types::rsrc_q_t rq;
    ...
    rq = rp.lookup_regex_names(inst_name, field_name, uvm_resource#(T)::get_type());
    r = uvm_resource#(T)::get_highest_precedence(rq);
    ...
        value = r.read(cntxt);
</code></pre></div><p><code>lookup_regex_names</code> looks up the name and returns the <code>uvm_resource_pool</code>. it iterates over rq in rtab and returns it.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">function</span> uvm_resource_types::rsrc_q_t lookup_regex_names(<span style="color:#fff;font-weight:bold">string</span> scope,
                                                           <span style="color:#fff;font-weight:bold">string</span> name,
                                                           uvm_resource_base type_handle = null);

...
...
      foreach (rtab[re]) <span style="color:#fff;font-weight:bold">begin</span>
      rq = rtab[re];
      <span style="color:#fff;font-weight:bold">for</span>(i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; rq.size(); i++) <span style="color:#fff;font-weight:bold">begin</span>
        r = rq.get(i);
        <span style="color:#fff;font-weight:bold">if</span>(uvm_re_match(uvm_glob_to_re(re),name) == <span style="color:#ff0;font-weight:bold">0</span>)
          <span style="color:#007f7f">// does the type and scope match?
</span><span style="color:#007f7f"></span>          <span style="color:#fff;font-weight:bold">if</span>(((type_handle == null) || (r.get_type_handle() == type_handle)) &amp;&amp;
             r.match_scope(scope))
            result_q.push_back(r);
      <span style="color:#fff;font-weight:bold">end</span>
    <span style="color:#fff;font-weight:bold">end</span>
    <span style="color:#fff;font-weight:bold">return</span> result_q;
</code></pre></div><p><code>get_highest_precedence</code> given <code>uvm_resource_types::rsrc_q_t</code>, will get the first element in the queue that was <code>push_front</code> in last stage in <code>::set</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">function</span> uvm_resource_base get_highest_precedence(<span style="color:#fff;font-weight:bold">ref</span> uvm_resource_types::rsrc_q_t q);
...
...
    <span style="color:#007f7f">// get the first resources in the queue
</span><span style="color:#007f7f"></span>    rsrc = q.get(<span style="color:#ff0;font-weight:bold">0</span>);
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM Internals - Reporting</title>
            <link>/posts/2020/05/uvm-internals-reporting/</link>
            <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/05/uvm-internals-reporting/</guid>
            <description>The White Rabbit uvm reporting is the mechanism to control which/how messages are printed to the logs. In this post, i am going to trace one of the macro down to IO system task.
Starting with an example of uvm_warning macro
`uvm_warning(&amp;#34;MYWARN1&amp;#34;, &amp;#34;This is a warning&amp;#34;) uvm_warning starting with macro expansion
`define uvm_warning(ID,MSG) \ begin \ if (uvm_report_enabled(UVM_NONE,UVM_WARNING,ID)) \ uvm_report_warning (ID, MSG, UVM_NONE, `uvm_file, `uvm_line); \ end  in uvm_globals.svh, the function uvm_report_warning is defined</description>
            <content type="html"><![CDATA[<h1 id="the-white-rabbit">The White Rabbit</h1>
<p>uvm reporting is the mechanism to control which/how messages are printed to the logs. In this post, i am going to trace one of the macro down to IO system task.</p>
<p>Starting with an example of <code>uvm_warning</code> macro</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">`uvm_warning(<span style="color:#0ff;font-weight:bold">&#34;MYWARN1&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;This is a warning&#34;</span>)
</code></pre></div><h1 id="uvm_warning">uvm_warning</h1>
<p>starting with macro expansion</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#0f0;font-weight:bold">`define uvm_warning(ID,MSG) \
</span><span style="color:#0f0;font-weight:bold">   begin \
</span><span style="color:#0f0;font-weight:bold">     if (uvm_report_enabled(UVM_NONE,UVM_WARNING,ID)) \
</span><span style="color:#0f0;font-weight:bold">       uvm_report_warning (ID, MSG, UVM_NONE, `uvm_file, `uvm_line); \
</span><span style="color:#0f0;font-weight:bold">   end
</span><span style="color:#0f0;font-weight:bold"></span>
</code></pre></div><p>in <code>uvm_globals.svh</code>, the function <code>uvm_report_warning</code> is defined</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> uvm_report_warning(<span style="color:#fff;font-weight:bold">string</span> id,
                                 <span style="color:#fff;font-weight:bold">string</span> message,
                                 <span style="color:#fff;font-weight:bold">int</span> verbosity = UVM_MEDIUM,
				 <span style="color:#fff;font-weight:bold">string</span> filename = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>,
				 <span style="color:#fff;font-weight:bold">int</span> line = <span style="color:#ff0;font-weight:bold">0</span>);
  uvm_root top;
  top = uvm_root::get();
  top.uvm_report_warning(id, message, verbosity, filename, line);
<span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p><code>top</code> is uvm_root which extends <code>uvm_component</code> which extends <code>uvm_report_object</code> and <code>uvm_report_warning</code> is defined in <code>uvm_report_object</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  virtual <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> uvm_report_warning( <span style="color:#fff;font-weight:bold">string</span> id,
                                            <span style="color:#fff;font-weight:bold">string</span> message,
                                            <span style="color:#fff;font-weight:bold">int</span> verbosity = UVM_MEDIUM,
                                            <span style="color:#fff;font-weight:bold">string</span> filename = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>,
                                            <span style="color:#fff;font-weight:bold">int</span> line = <span style="color:#ff0;font-weight:bold">0</span>);
    m_rh.report(UVM_WARNING, get_full_name(), id, message, verbosity, 
               filename, line, this);
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p>and <code>m_rh</code> is defined as <code>uvm_report_handler</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  uvm_report_handler m_rh;
</code></pre></div><p>in <code>uvm_report_handler.svh</code>, <code>report</code> function is defined</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  virtual <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> report(
      uvm_severity severity,
      <span style="color:#fff;font-weight:bold">string</span> name,
      <span style="color:#fff;font-weight:bold">string</span> id,
      <span style="color:#fff;font-weight:bold">string</span> message,
      <span style="color:#fff;font-weight:bold">int</span> verbosity_level=UVM_MEDIUM,
      <span style="color:#fff;font-weight:bold">string</span> filename=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>,
      <span style="color:#fff;font-weight:bold">int</span> line=<span style="color:#ff0;font-weight:bold">0</span>,
      uvm_report_object client=null
      );

    uvm_report_server srvr;
    srvr = uvm_report_server::get_server();

    <span style="color:#fff;font-weight:bold">if</span> (client==null)
      client = uvm_root::get();


    srvr.report(severity,name,id,message,verbosity_level,filename,line,client);
    
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p>in <code>uvm_report_server.svh</code>, <code>srvr.report</code> is defined</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">    <span style="color:#fff;font-weight:bold">if</span>(report_ok)
      report_ok = uvm_report_catcher::process_all_report_catchers(
                     this, client, severity, name, id, message,
                     verbosity_level, a, filename, line);

    <span style="color:#fff;font-weight:bold">if</span>(report_ok) <span style="color:#fff;font-weight:bold">begin</span>	
      m = compose_message(severity, name, id, message, filename, line); 
      process_report(severity, name, id, message, a, f, filename,
                     line, m, verbosity_level, client);
    <span style="color:#fff;font-weight:bold">end</span>
</code></pre></div><p>and finally the printing is done in <code>process_report</code> with <code>$display</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  virtual <span style="color:#fff;font-weight:bold">function</span> <span style="color:#fff;font-weight:bold">void</span> process_report(
      uvm_severity severity,
      <span style="color:#fff;font-weight:bold">string</span> name,
      <span style="color:#fff;font-weight:bold">string</span> id,
      <span style="color:#fff;font-weight:bold">string</span> message,
      uvm_action action,
      UVM_FILE file,
      <span style="color:#fff;font-weight:bold">string</span> filename,
      <span style="color:#fff;font-weight:bold">int</span> line,
      <span style="color:#fff;font-weight:bold">string</span> composed_message,
      <span style="color:#fff;font-weight:bold">int</span> verbosity_level,
      uvm_report_object client
      );
    <span style="color:#007f7f">// update counts
</span><span style="color:#007f7f"></span>    incr_severity_count(severity);
    incr_id_count(id);

    <span style="color:#fff;font-weight:bold">if</span>(action &amp; UVM_DISPLAY)
      <span style="color:#fff;font-weight:bold">$display</span>(<span style="color:#0ff;font-weight:bold">&#34;%s&#34;</span>,composed_message);
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM Internals - Factory</title>
            <link>/posts/2020/05/uvm-internals-factory/</link>
            <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/05/uvm-internals-factory/</guid>
            <description>The White Rabbit The factory is a way to dynamically construct objects(see wiki). For UVM, Factory can be used to override the objected created which allow injection of new functionality into already existing sequences.
It requires registering the class first then using create to get an object
 registration  class env extends uvm_env; `uvm_component_utils(uvm_env)  Creation  env = uvm_env::type_id::create(&amp;#34;env&amp;#34;,this); Registration uvm_component_utils is defined in src/macros/uvm_object_defines.svh
`define uvm_component_utils(T) \ `m_uvm_component_registry_internal(T,T) \ `m_uvm_get_type_name_func(T) \ let&amp;rsquo;s start with m_uvm_get_type_name_func which simply defines the type_name by stringify the T</description>
            <content type="html"><![CDATA[<h1 id="the-white-rabbit">The White Rabbit</h1>
<p>The factory is a way to dynamically construct objects(see wiki). For UVM, Factory can be used to override the objected created which allow <code>injection</code> of new functionality into already existing sequences.</p>
<p>It requires registering the class first then using <code>create</code> to get an object</p>
<ul>
<li>registration</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">class env extends uvm_env;
 `uvm_component_utils(uvm_env)
</code></pre></div><ul>
<li>Creation</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">env = uvm_env::type_id::create(<span style="color:#0ff;font-weight:bold">&#34;env&#34;</span>,this);
</code></pre></div><h2 id="registration">Registration</h2>
<p><code>uvm_component_utils</code> is defined in <code>src/macros/uvm_object_defines.svh</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#0f0;font-weight:bold">`define uvm_component_utils(T) \
</span><span style="color:#0f0;font-weight:bold">   `m_uvm_component_registry_internal(T,T) \
</span><span style="color:#0f0;font-weight:bold">   `m_uvm_get_type_name_func(T) \
</span></code></pre></div><p>let&rsquo;s start with <code>m_uvm_get_type_name_func</code> which simply defines the <code>type_name</code> by stringify the <code>T</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#0f0;font-weight:bold">`define m_uvm_get_type_name_func(T) \
</span><span style="color:#0f0;font-weight:bold">   const static string type_name = `&#34;T`&#34;; \
</span><span style="color:#0f0;font-weight:bold">   virtual function string get_type_name (); \
</span><span style="color:#0f0;font-weight:bold">     return type_name; \
</span><span style="color:#0f0;font-weight:bold">   endfunction
</span></code></pre></div><p>Then <code>m_uvm_component_registry_internal</code> just adds <code>type_id</code>  type which is going to be called to create the object. (the protagonist)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#0f0;font-weight:bold">`define m_uvm_component_registry_internal(T,S) \
</span><span style="color:#0f0;font-weight:bold">   typedef uvm_component_registry #(T,`&#34;S`&#34;) type_id; \
</span><span style="color:#0f0;font-weight:bold">   static function type_id get_type(); \
</span><span style="color:#0f0;font-weight:bold">     return type_id::get(); \
</span><span style="color:#0f0;font-weight:bold">   endfunction \
</span><span style="color:#0f0;font-weight:bold">   virtual function uvm_object_wrapper get_object_type(); \
</span><span style="color:#0f0;font-weight:bold">     return type_id::get(); \
</span><span style="color:#0f0;font-weight:bold">   endfunction
</span></code></pre></div><h1 id="initialization">Initialization</h1>
<p>It&rsquo;s clear that the heavy stuff is done by <code>uvm_component_registry::create</code> but first looking at <code>get</code> in <code>src/base/uvm_registry.svh</code>, <code>get</code> returns <code>me</code> if initialized. but <code>me</code> is static and already initialized before any create is called.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  local static this_type me = get();


  <span style="color:#007f7f">// Function: get
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">//
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// Returns the singleton instance of this type. Type-based factory operation
</span><span style="color:#007f7f"></span>  <span style="color:#007f7f">// depends on there being a single proxy instance for each registered type. 
</span><span style="color:#007f7f"></span>
  static <span style="color:#fff;font-weight:bold">function</span> this_type get();
    <span style="color:#fff;font-weight:bold">if</span> (me == null) <span style="color:#fff;font-weight:bold">begin</span>
      uvm_factory f = uvm_factory::get();
      me = new;
      f.register(me);
    <span style="color:#fff;font-weight:bold">end</span>
    <span style="color:#fff;font-weight:bold">return</span> me;
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p>in <code>get</code> above, the factory singleton is created as well(if not already). so in <code>src/base/uvm_factory.svh</code>, <code>get</code> is defined.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">function</span> uvm_factory uvm_factory::get();
  <span style="color:#fff;font-weight:bold">if</span> (m_inst == null) <span style="color:#fff;font-weight:bold">begin</span>
    m_inst = new();
  <span style="color:#fff;font-weight:bold">end</span>
  <span style="color:#fff;font-weight:bold">return</span> m_inst;
<span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><h1 id="creation">Creation</h1>
<p>To create the component, in build phase the <code>type_id::create</code> is called</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">env = uvm_env::type_id::create(<span style="color:#0ff;font-weight:bold">&#34;env&#34;</span>,this);
</code></pre></div><p><code>create</code> in <code>src/base/uvm_registry.svh</code>, calls <code>create_component_by_type</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  static <span style="color:#fff;font-weight:bold">function</span> T create (<span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, uvm_component parent=null,
                            <span style="color:#fff;font-weight:bold">string</span> contxt=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>);
    uvm_object obj;
    uvm_factory f = uvm_factory::get();
    ...
    ...
    obj = f.create_object_by_type(get(),contxt,name);
    ...
    ...
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p><code>create_component_by_type</code> first calls <code>find_override_by_type</code> which checks for override. if there is no override, it returns <code>requested_type</code> as is.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog"><span style="color:#fff;font-weight:bold">function</span> uvm_object uvm_factory::create_object_by_type (uvm_object_wrapper requested_type,  
                                                        <span style="color:#fff;font-weight:bold">string</span> parent_inst_path=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>,  
                                                        <span style="color:#fff;font-weight:bold">string</span> name=<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>); 

...
...

  requested_type = find_override_by_type(requested_type, full_inst_path);

  <span style="color:#fff;font-weight:bold">return</span> requested_type.create_object(name);

<span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div><p>Finally <code>create_component_by_type</code> calls <code>create_component</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">  <span style="color:#fff;font-weight:bold">return</span> requested_type.create_component(name, parent);
</code></pre></div><p><code>create_component</code> is picked up from requested_type which is <code>uvm_component_registry</code>
and it calls <code>new</code> to create the object</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-verilog" data-lang="verilog">virtual <span style="color:#fff;font-weight:bold">function</span> uvm_component create_component (<span style="color:#fff;font-weight:bold">string</span> name,
                                                   uvm_component parent);
    T obj;
    obj = new(name, parent);
    <span style="color:#fff;font-weight:bold">return</span> obj;
  <span style="color:#fff;font-weight:bold">endfunction</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UVM Internals - run_test</title>
            <link>/posts/2020/04/uvm-internals-run_test/</link>
            <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/04/uvm-internals-run_test/</guid>
            <description>Hello World The simplest UVM testbench starts with run_test.
initial begin run_test(&amp;quot;test01&amp;quot;); end run_test is defined on src/base/uvm_globals.svh where it constructs uvm_root and run run_test from top.run_test()
task run_test (string test_name=&amp;quot;&amp;quot;); uvm_root top; top = uvm_root::get(); top.run_test(test_name); endtask Creating uvm_root uvm_root is created by calling uvm_root::get static method. Beside creating the singelton uvm_root, it creates the uvm_domain which is also a singelton.
// src/base/uvm_root.svh function uvm_root uvm_root::get(); if (m_inst == null) begin m_inst = new(); void&#39;(uvm_domain::get_common_domain()); m_inst.</description>
            <content type="html"><![CDATA[<h1 id="hello-world">Hello World</h1>
<p>The simplest UVM testbench starts with <code>run_test</code>.</p>
<pre tabindex="0"><code>initial begin
  run_test(&quot;test01&quot;);
end
</code></pre><p><code>run_test</code> is defined on <code>src/base/uvm_globals.svh</code> where it constructs <code>uvm_root</code> and run run_test from <code>top.run_test()</code></p>
<pre tabindex="0"><code>task run_test (string test_name=&quot;&quot;);
  uvm_root top;
  top = uvm_root::get();
  top.run_test(test_name);
endtask
</code></pre><h1 id="creating-uvm_root">Creating uvm_root</h1>
<p>uvm_root is created by calling <code>uvm_root::get</code> static method. Beside creating the singelton <code>uvm_root</code>, it creates the <code>uvm_domain</code> which is also a singelton.</p>
<pre tabindex="0"><code>// src/base/uvm_root.svh
function uvm_root uvm_root::get();
  if (m_inst == null) begin
    m_inst = new();
    void'(uvm_domain::get_common_domain());
    m_inst.m_domain = uvm_domain::get_uvm_domain();
  end
  return m_inst;
endfunction
</code></pre><p><code>get_common_domain</code> initializes <code>m_common_domain</code> and register phases (build, connect, etc.).</p>
<pre tabindex="0"><code>  static function uvm_domain get_common_domain();

    uvm_domain domain;
    uvm_phase schedule;

    if (m_common_domain != null)
      return m_common_domain;

    domain = new(&quot;common&quot;);
    domain.add(uvm_build_phase::get());
    domain.add(uvm_connect_phase::get());
    domain.add(uvm_end_of_elaboration_phase::get());
    domain.add(uvm_start_of_simulation_phase::get());
    domain.add(uvm_run_phase::get());
    domain.add(uvm_extract_phase::get());
    domain.add(uvm_check_phase::get());
    domain.add(uvm_report_phase::get());
    domain.add(uvm_final_phase::get());
    m_domains[&quot;common&quot;] = domain;

    // for backward compatibility, make common phases visible;
    // same as uvm_&lt;name&gt;_phase::get().
    build_ph               = domain.find(uvm_build_phase::get());
    connect_ph             = domain.find(uvm_connect_phase::get());
    end_of_elaboration_ph  = domain.find(uvm_end_of_elaboration_phase::get());
    start_of_simulation_ph = domain.find(uvm_start_of_simulation_phase::get());
    run_ph                 = domain.find(uvm_run_phase::get());
    extract_ph             = domain.find(uvm_extract_phase::get());
    check_ph               = domain.find(uvm_check_phase::get());
    report_ph              = domain.find(uvm_report_phase::get());
    m_common_domain = domain;

    domain = get_uvm_domain();
    m_common_domain.add(domain,
                     .with_phase(m_common_domain.find(uvm_run_phase::get())));


    return m_common_domain;

  endfunction
</code></pre><p>In this snippet from <code>get_common_domain</code>, there is <code>get_uvm_domain</code> that fills the run phases (reset, main, etc).</p>
<pre tabindex="0"><code> domain = get_uvm_domain();
    m_common_domain.add(domain,
                     .with_phase(m_common_domain.find(uvm_run_phase::get())));
</code></pre><p>I traced <code>get_uvm_domain</code>, but i will focus on common uvm phases. The phase are defined in <code>src/base/uvm_common_phases.svh</code>.</p>
<p>The key task is <code>exec_task</code> which calls <code>comp.run_phase(phase)</code>.</p>
<pre tabindex="0"><code>// src/base/uvm_common_phases.svh
class uvm_run_phase extends uvm_task_phase;
   virtual task exec_task(uvm_component comp, uvm_phase phase);
      comp.run_phase(phase);
   endtask
   ...
endclass
</code></pre><h1 id="running-the-test">Running the test</h1>
<p><code>top.run_test</code> is defined in <code>src/base/uvm_root.svh</code></p>
<pre tabindex="0"><code>task uvm_root::run_test(string test_name=&quot;&quot;);
</code></pre><p><code>uvm_root:run_test</code> first parses +UVM_TESTNAME and eventually creates <code>uvm_test_top</code> object</p>
<pre tabindex="0"><code>    $cast(uvm_test_top, factory.create_component_by_name(test_name,
          &quot;&quot;, &quot;uvm_test_top&quot;, null));
</code></pre><p>and then calls <code>uvm_phase::m_run_phases</code>, well to run the phases.</p>
<pre tabindex="0"><code>  // phase runner, isolated from calling process
  fork begin
    // spawn the phase runner task
    phase_runner_proc = process::self();
    uvm_phase::m_run_phases();
  end
  join_none
  #0; // let the phase runner start

  wait (m_phase_all_done == 1);
</code></pre><p>at this point <code>uvm_phase::m_run_phases</code> calls <code>get_common_domain</code> to return the <code>m_common_domain</code> that was already constructed in the top (<code>uvm_root</code>).</p>
<pre tabindex="0"><code>task uvm_phase::m_run_phases();
  uvm_root top = uvm_root::get();

  // initiate by starting first phase in common domain
  begin
    uvm_phase ph = uvm_domain::get_common_domain();
    void'(m_phase_hopper.try_put(ph));
  end

  forever begin
    uvm_phase phase;
    m_phase_hopper.get(phase);
    fork
      begin
        phase.execute_phase();
      end
    join_none
    #0;  // let the process start running
  end
endtask
</code></pre><p>jumping to <code>execute_phase</code> which is a beast and worthy of another post on it own.</p>
<p>but the key point here is calls to <code>task_phase.traverse</code></p>
<pre tabindex="0"><code>            task_phase.traverse(top,this,UVM_PHASE_EXECUTING);

</code></pre><p>and in <code>src/base/uvm_task_phase.svh</code>, traverse is called. <code>traverse</code> calls <code>m_traverse</code> recursively</p>
<pre tabindex="0"><code>  virtual function void traverse(uvm_component comp,
                                 uvm_phase phase,
                                 uvm_phase_state state);
    phase.m_num_procs_not_yet_returned = 0;
    m_traverse(comp, phase, state);
  endfunction

  function void m_traverse(uvm_component comp,
                           uvm_phase phase,
                           uvm_phase_state st

 ph.execute(comp, phase);
 ...
 endfunction
</code></pre><p>in <code>execute</code>, <code>exec_task</code> is called with component and phase. which links us to other side of the thread.</p>
<pre tabindex="0"><code>  virtual function void execute(uvm_component comp,
                                          uvm_phase phase);

    fork
      begin
        uvm_sequencer_base seqr;
        process proc;

        // reseed this process for random stability
        proc = process::self();
        proc.srandom(uvm_create_random_seed(phase.get_type_name(), comp.get_full_name()));

        phase.m_num_procs_not_yet_returned++;

        if ($cast(seqr,comp))
          seqr.start_phase_sequence(phase);

        exec_task(comp,phase);

        phase.m_num_procs_not_yet_returned--;

      end
    join_none

  endfunction
endclass
</code></pre>]]></content>
        </item>
        
        <item>
            <title>C&#43;&#43; - member initializer lists  </title>
            <link>/posts/2020/03/c-member-initializer-lists/</link>
            <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/03/c-member-initializer-lists/</guid>
            <description>c++11 feature to initialize public members without using constructor using c1{1, 2};
#include &amp;lt;iostream&amp;gt; class cls { public: int x; int y; }; int main() { cls c1{1, 2}; std::cout &amp;lt;&amp;lt; c1.x &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; c1.y &amp;lt;&amp;lt; std::endl; } most GNU toolchains support 11 by default. so, it works as expected
$ ./a.out 12 when compiled with std=c++98, it prints
member-class-init.cpp:12:8: warning: extended initializer lists only available with -std=c++11 or -std=gnu++11 cls c1{1, 2}; ^ </description>
            <content type="html"><![CDATA[<p>c++11 feature to initialize public members without using constructor using <code>c1{1, 2};</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">class</span> cls
{
<span style="color:#fff;font-weight:bold">public</span>:
	<span style="color:#fff;font-weight:bold">int</span> x;
	<span style="color:#fff;font-weight:bold">int</span> y;
};

<span style="color:#fff;font-weight:bold">int</span> main()
{
	cls c1{<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">2</span>};
	std::cout &lt;&lt; c1.x &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34; &#34;</span> &lt;&lt; c1.y &lt;&lt; std::endl;
}
</code></pre></div><p>most GNU toolchains support 11 by default. so, it works as expected</p>
<pre tabindex="0"><code>$ ./a.out
12
</code></pre><p>when compiled with <code>std=c++98</code>, it prints</p>
<pre tabindex="0"><code>member-class-init.cpp:12:8: warning: extended initializer lists only available with -std=c++11 or -std=gnu++11
  cls c1{1, 2};
        ^
</code></pre>]]></content>
        </item>
        
        <item>
            <title>C&#43;&#43; - Type alias</title>
            <link>/posts/2020/03/c-type-alias/</link>
            <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/03/c-type-alias/</guid>
            <description>for template classes, alias can be used to declare specialization of template class. I guess it can used to define default configuration of the template class.
#include &amp;lt;iostream&amp;gt; template &amp;lt;unsigned T&amp;gt; class cls { public: cls() { std::cout &amp;lt;&amp;lt; T &amp;lt;&amp;lt; std::endl; } }; // The alias with T=32 using alias = cls&amp;lt;32&amp;gt;; int main() { alias c; } </description>
            <content type="html"><![CDATA[<p>for template classes, alias can be used to declare specialization of template class. I guess it can used to define default configuration of the template class.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span>
<span style="color:#fff;font-weight:bold">template</span> &lt;<span style="color:#fff;font-weight:bold">unsigned</span> T&gt;
<span style="color:#fff;font-weight:bold">class</span> cls
{
<span style="color:#fff;font-weight:bold">public</span>:
  cls()
  {
    std::cout &lt;&lt; T &lt;&lt; std::endl;
  }
};

<span style="color:#007f7f">// The alias with T=32
</span><span style="color:#007f7f"></span><span style="color:#fff;font-weight:bold">using</span> alias = cls&lt;<span style="color:#ff0;font-weight:bold">32</span>&gt;;

<span style="color:#fff;font-weight:bold">int</span> main()
{
  alias c;
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>C&#43;&#43; -initializer_list</title>
            <link>/posts/2020/03/c-initializer_list/</link>
            <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/03/c-initializer_list/</guid>
            <description>initializer_list is wrapper (proxy) to allow passing arrays as curly braces. according to link, it can be used for class constructor to initialize class with arrays.
#include &amp;lt;initializer_list&amp;gt;#include &amp;lt;iostream&amp;gt;using namespace std; class cls { public: void func(std::initializer_list&amp;lt;int&amp;gt; ins) { for (auto in : ins) cout &amp;lt;&amp;lt; in &amp;lt;&amp;lt; endl; } }; int main() { cls c; c.func({1, 2, 3}); return 0; } </description>
            <content type="html"><![CDATA[<p><code>initializer_list</code> is wrapper (proxy) to allow passing arrays as curly braces. according to <a href="https://en.cppreference.com/w/cpp/utility/initializer_list">link</a>, it can be used for class constructor to initialize class with arrays.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;initializer_list&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold">#include</span> <span style="color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style="color:#0f0;font-weight:bold">
</span><span style="color:#0f0;font-weight:bold"></span><span style="color:#fff;font-weight:bold">using</span> <span style="color:#fff;font-weight:bold">namespace</span> std;

<span style="color:#fff;font-weight:bold">class</span> cls
{
<span style="color:#fff;font-weight:bold">public</span>:
    <span style="color:#fff;font-weight:bold">void</span> func(std::initializer_list&lt;<span style="color:#fff;font-weight:bold">int</span>&gt; ins)
    {
        <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">auto</span> in : ins)
            cout &lt;&lt; in &lt;&lt; endl;
    }
};

<span style="color:#fff;font-weight:bold">int</span> main()
{
    cls c;
    c.func({<span style="color:#ff0;font-weight:bold">1</span>, <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#ff0;font-weight:bold">3</span>});
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Building OSS FPGA Toolchain</title>
            <link>/posts/2020/02/building-oss-fpga-toolchain/</link>
            <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/02/building-oss-fpga-toolchain/</guid>
            <description>Introduction I used yosys occasionally but never tried the whole yosys-nexpnr-icestorm toolchain. This post documents the steps to compile the toolchain. Spoiler alert, the order is important.
Setup export BASRPATH=$PWD export OSSFPGA=$BASRPATH/opt export MAKEPARALLEL=&amp;#34;-j4&amp;#34; sudo apt-get install build-essential clang bison flex \  libreadline-dev gawk tcl-dev libffi-dev git \  graphviz xdot pkg-config python3 libboost-system-dev \  libboost-python-dev libboost-filesystem-dev zlib1g-dev \  libboost-program-options-dev libboost-thread-dev libboost-iostreams-dev \  libftdi-dev libeigen3-dev qtbase5-dev Building Yosys git clone https://github.</description>
            <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>I used yosys occasionally but never tried the whole yosys-nexpnr-icestorm toolchain. This post documents the steps to compile the toolchain. Spoiler alert, the order is important.</p>
<h1 id="setup">Setup</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#fff;font-weight:bold">export</span> BASRPATH=$PWD
<span style="color:#fff;font-weight:bold">export</span> OSSFPGA=$BASRPATH/opt
<span style="color:#fff;font-weight:bold">export</span> MAKEPARALLEL=<span style="color:#0ff;font-weight:bold">&#34;-j4&#34;</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo apt-get install build-essential clang bison flex <span style="color:#0ff;font-weight:bold">\
</span><span style="color:#0ff;font-weight:bold"></span>                libreadline-dev gawk tcl-dev libffi-dev git <span style="color:#0ff;font-weight:bold">\
</span><span style="color:#0ff;font-weight:bold"></span>                graphviz xdot pkg-config python3 libboost-system-dev <span style="color:#0ff;font-weight:bold">\
</span><span style="color:#0ff;font-weight:bold"></span>                libboost-python-dev libboost-filesystem-dev zlib1g-dev <span style="color:#0ff;font-weight:bold">\
</span><span style="color:#0ff;font-weight:bold"></span>                libboost-program-options-dev libboost-thread-dev libboost-iostreams-dev <span style="color:#0ff;font-weight:bold">\
</span><span style="color:#0ff;font-weight:bold"></span>                libftdi-dev libeigen3-dev qtbase5-dev
</code></pre></div><h1 id="building-yosys">Building Yosys</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">
git clone https://github.com/YosysHQ/yosys.git
<span style="color:#fff;font-weight:bold">cd</span> yosys
make config-gcc
make $MAKEPARALLEL
make install PREFIX=$OSSFPGA
<span style="color:#fff;font-weight:bold">cd</span> $BASRPATH
</code></pre></div><h1 id="building-trellis">Building trellis</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://github.com/SymbiFlow/prjtrellis
<span style="color:#fff;font-weight:bold">cd</span> prjtrellis/libtrellis
cmake -DCMAKE_INSTALL_PREFIX=$OSSFPGA .
make $MAKEPARALLEL
make install
<span style="color:#fff;font-weight:bold">cd</span> $BASRPATH
</code></pre></div><h1 id="building-icestorm">Building icestorm</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://github.com/cliffordwolf/icestorm.git
<span style="color:#fff;font-weight:bold">cd</span> icestorm
make
make install PREFIX=$OSSFPGA
<span style="color:#fff;font-weight:bold">cd</span> $BASRPATH
</code></pre></div><h1 id="building-nextpnr">Building nextpnr</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://github.com/YosysHQ/nextpnr.git
<span style="color:#fff;font-weight:bold">cd</span> nextpnr
mkdir build
<span style="color:#fff;font-weight:bold">cd</span> build
cmake .. -DARCH=all -DCMAKE_INSTALL_PREFIX=$OSSFPGA -DTRELLIS_ROOT=$BASRPATH/prjtrellis <span style="color:#0ff;font-weight:bold">\
</span><span style="color:#0ff;font-weight:bold"></span> -DICEBOX_ROOT=$OSSFPGA/share/icebox
make
make install
<span style="color:#fff;font-weight:bold">cd</span> $BASRPATH
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Setup Git without server</title>
            <link>/posts/2020/01/setup-git-without-server/</link>
            <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/01/setup-git-without-server/</guid>
            <description>I recently had to setup a git repo on nfs path. So, there are the steps i used to setup it up (and Gotcha)
To do that, bare repo must be used. basically, bare repo is shared repo. You can&amp;rsquo;t work directly on it because it doesn&amp;rsquo;t have the source code. It contains whatever .git has.
Create bare repo
git init --bare myrepo.git Then set your remote to the bare repo.</description>
            <content type="html"><![CDATA[<p>I recently had to setup a git repo on nfs path. So, there are the steps i used to setup it up (and Gotcha)</p>
<p>To do that, <em>bare</em> repo must be used. basically, bare repo is shared repo. You can&rsquo;t work directly on it because it doesn&rsquo;t have the source code. It contains whatever <em>.git</em> has.</p>
<p>Create bare repo</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git init --bare myrepo.git
</code></pre></div><p>Then set your remote to the bare repo.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git remote add origin /path/to/repos/myrepo.git
</code></pre></div><p>to clone the repo</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone /path/to/repos/myrepo.git
</code></pre></div><h1 id="gotcha">Gotcha</h1>
<p>It&rsquo;s very easy, Right? Not. when you share that repo, people will start seeing permissions errors.</p>
<p>I found two solutions</p>
<h3 id="solution-1">Solution 1</h3>
<p>Adding <code>--shared</code> while creating the repo</p>
<pre tabindex="0"><code>git init --bare --shared myrepo.git
</code></pre><h3 id="solution-2">Solution 2</h3>
<p>manually fixing permission on directories. i found that at <a href="https://blog.christophersmart.com/2014/01/10/permanently-fixing-permissions-on-a-shared-git-repo/">link</a></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">chown -Rf root:git /path/to/bare/git/repo
<span style="color:#fff;font-weight:bold">cd</span> /path/to/bare/git/repo
git config core.sharedRepository group
find /path/to/bare/git/repo -type f | xargs chmod <span style="color:#ff0;font-weight:bold">664</span>
find /path/to/bare/git/repo -type d | xargs chmod <span style="color:#ff0;font-weight:bold">775</span>
find /path/to/bare/git/repo -type d | xargs chmod g+s
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Solve Vscode extension download errors</title>
            <link>/posts/2019/10/solve-vscode-extension-download-errors/</link>
            <pubDate>Thu, 24 Oct 2019 00:00:00 +0000</pubDate>
            
            <guid>/posts/2019/10/solve-vscode-extension-download-errors/</guid>
            <description>This is write-up about how i solved a problem with vscode where i couldn&amp;rsquo;t download/update any extensions.
well, if you see an error like this, read on.
&amp;quot;Failed to update &#39;ms-python.python&#39;.&amp;quot; After spending hours reading github issues on vscode repo, it turned out to simple (but stupid) problem. So, I am documenting it for future me when i forget how i solved it.
The problem The vscode code marketplace (where all extensions live) can&amp;rsquo;t be resolved unless i have cloudflare 1.</description>
            <content type="html"><![CDATA[<p>This is write-up about how i solved a problem with vscode where i couldn&rsquo;t download/update any extensions.</p>
<p>well, if you see an error like this, read on.</p>
<pre tabindex="0"><code>&quot;Failed to update 'ms-python.python'.&quot;
</code></pre><p>After spending hours reading github issues on vscode repo, it turned out to simple (but stupid) problem. So, I am documenting it for future me when i forget how i solved it.</p>
<h1 id="the-problem">The problem</h1>
<p>The vscode code marketplace (where all extensions live) can&rsquo;t be resolved unless i have cloudflare <code>1.1.1.1</code></p>
<p>Not sure what changed, but i don&rsquo;t have that <code>resolv.conf</code>.</p>
<h1 id="the-solution">The solution</h1>
<p>if you are using systemd, Edit <code>/etc/systemd/resolved.conf</code> to add both google and cloudflare DNS</p>
<pre tabindex="0"><code>[Resolve]
DNS=1.1.1.1 8.8.8.8
</code></pre><p>Then restart systemd-resolved</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo service systemd-resolved restart
sudo systemctl restart networking.service
</code></pre></div><p><code>/etc/resolv.conf</code> should be updated with new DNS</p>
<pre tabindex="0"><code>nameserver 1.1.1.1

</code></pre><h1 id="gotcha">Gotcha</h1>
<p>At some point, systemd changed generated <code>resolv.conf</code> to <code>/run/systemd/resolve/resolv.conf</code>. So, make sure that <code>/etc/resolv.co</code> links to correct file.</p>
<pre tabindex="0"><code>sudo rm -rf /etc/resolv.conf
sudo ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Flask Internals Part1</title>
            <link>/posts/2019/09/flask-internals-part1/</link>
            <pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate>
            
            <guid>/posts/2019/09/flask-internals-part1/</guid>
            <description>Introduction I have been playing around with flask for few weeks now. It&amp;rsquo;s definitely leaner than Django but still there are some parts that look like black magic (I am looking at you, g).
So, Starting with&amp;hellip;
Hello world This looks like a good to place to start. This is the smallest functional flask app, I guess.
Basically, there are two things happening here:
 Route registration with @app.rount Web Application with app.</description>
            <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>I have been playing around with flask for few weeks now. It&rsquo;s definitely leaner than Django but still there are some parts that look like  <em>black magic</em> (I am looking at you, g).</p>
<p>So, Starting with&hellip;</p>
<h1 id="hello-world">Hello world</h1>
<p>This looks like a good to place to start. This is the smallest functional flask app, I guess.</p>
<p>Basically, there are two things happening here:</p>
<ul>
<li>Route registration with <code>@app.rount</code></li>
<li>Web Application with <code>app.run()</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">from</span> flask <span style="color:#fff;font-weight:bold">import</span> Flask

app = Flask(__name__)

@app.route(<span style="color:#0ff;font-weight:bold">&#39;/&#39;</span>)
<span style="color:#fff;font-weight:bold">def</span> index():
    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#0ff;font-weight:bold">&#34;Hello, World!&#34;</span>

<span style="color:#fff;font-weight:bold">if</span> __name__ == <span style="color:#0ff;font-weight:bold">&#39;__main__&#39;</span>:
   app.run(debug = <span style="color:#fff;font-weight:bold">True</span>)

</code></pre></div><h1 id="route-registration">Route registration</h1>
<p>Let&rsquo;s start with app registration part.</p>
<p><code>@app.route</code> defined in <code>flask/app.py</code> calls <code>add_url_rule</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> <span style="color:#fff;font-weight:bold">def</span> route(self, rule, **options):
        <span style="color:#fff;font-weight:bold">def</span> decorator(f):
            endpoint = options.pop(<span style="color:#0ff;font-weight:bold">&#34;endpoint&#34;</span>, <span style="color:#fff;font-weight:bold">None</span>)
            self.add_url_rule(rule, endpoint, f, **options)
            <span style="color:#fff;font-weight:bold">return</span> f

        <span style="color:#fff;font-weight:bold">return</span> decorator
</code></pre></div><p>and <code>add_url_rule</code>  takes f as <code>view_func</code> and register <code>rule</code> that maps that route to view_func</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> add_url_rule(
        self,
        rule,
        endpoint=<span style="color:#fff;font-weight:bold">None</span>,
        view_func=<span style="color:#fff;font-weight:bold">None</span>,
        provide_automatic_options=<span style="color:#fff;font-weight:bold">None</span>,
        **options
    ):
</code></pre></div><p>in the example above, <code>endpoint</code> is None, endpoint is set to <code>__name__</code> of the view_func</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        <span style="color:#fff;font-weight:bold">if</span> endpoint is <span style="color:#fff;font-weight:bold">None</span>:
            endpoint = _endpoint_from_view_func(view_func)
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">def</span> _endpoint_from_view_func(view_func):
    <span style="color:#fff;font-weight:bold">assert</span> view_func is not <span style="color:#fff;font-weight:bold">None</span>, <span style="color:#0ff;font-weight:bold">&#34;expected view func if endpoint is not provided.&#34;</span>
    <span style="color:#fff;font-weight:bold">return</span> view_func.__name__
</code></pre></div><p>at this point we have rule as <code>/</code> and endpoint as <code>index</code>. Then, rule is used to create an object of <code>Rule</code> which takes <code>options</code> dict. and the newly created rule is added to <code>url_map</code></p>
<p>To sum up, the following part registered url <code>/</code> to endpoint <code>index</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        options[<span style="color:#0ff;font-weight:bold">&#34;endpoint&#34;</span>] = endpoint
      ...
      ...
        rule = self.url_rule_class(rule, methods=methods, **options)
        rule.provide_automatic_options = provide_automatic_options

        self.url_map.add(rule)
</code></pre></div><p>and eventually, endpoint <code>index</code> is linked to the actual function <code>view_func</code> using view_functions</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">            self.view_functions[endpoint] = view_func
</code></pre></div><h1 id="web-application">Web Application</h1>
<p>For the second part, now that I know <code>view_functions</code> where the magic is, I can look for whoever doing lookup and  start from there.</p>
<p>But we know that flask is WSGI application. So, we can start with <code>__call__</code>. If you haven&rsquo;t heard about WSGI before, look into <a href="https://www.python.org/dev/peps/pep-0333/">pep333</a>. The important part:</p>
<blockquote>
<p>The Application/Framework Side
The application object is simply a callable object that accepts two arguments. The term &ldquo;object&rdquo; should not be misconstrued as requiring an actual object instance: a function, method, class, or instance with a <strong>call</strong> method are all acceptable for use as an application object. Application objects must be able to be invoked more than once, as virtually all servers/gateways (other than CGI) will make such repeated requests.</p>
</blockquote>
<p>So, In <code>flask/app.py</code>, <code>__call__</code> is defined as</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> __call__(self, environ, start_response):
        <span style="color:#0ff;font-weight:bold">&#34;&#34;&#34;The WSGI server calls the Flask application object as the
</span><span style="color:#0ff;font-weight:bold">        WSGI application. This calls :meth:`wsgi_app` which can be
</span><span style="color:#0ff;font-weight:bold">        wrapped to applying middleware.&#34;&#34;&#34;</span>
        <span style="color:#fff;font-weight:bold">return</span> self.wsgi_app(environ, start_response)
</code></pre></div><p>In <code>wsgi_app</code>,</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">                response = self.full_dispatch_request()
   ...
   ...
            <span style="color:#fff;font-weight:bold">return</span> response(environ, start_response)
</code></pre></div><p>in <code>full_dispatch_request</code>,</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> full_dispatch_request(self):

                rv = self.dispatch_request()
</code></pre></div><p>In <code>dispatch_request</code>, <code>rule</code> is extract from the request and <code>rule.endpoint</code> is used to lookup the registered view from, wait for it, <code>view_functions</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#fff;font-weight:bold">def</span> dispatch_request(self):

        <span style="color:#fff;font-weight:bold">return</span> self.view_functions[rule.endpoint](**req.view_args)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>VPS Configuration</title>
            <link>/posts/2019/09/vps-configuration/</link>
            <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
            
            <guid>/posts/2019/09/vps-configuration/</guid>
            <description>Steps to setup VPS machine.
Change default Hostname hostnamectl set-hostname VPS Add sudo user adduser admin usermod -aG sudo admin Setup up strict Firewall ufw app list ufw allow OpenSSH ufw status ufw enable ufw status Harden sshd $ vi /etc/ssh/sshd_config Disable Root ssh access
PermitRootLogin no Disable empty passwords
PermitEmptyPasswords no Limit Authentication
MaxAuthTries 5 Set Idle Time
ClientAliveInterval 1200 Then restart sshd service
$ service ssh restart Install fail2ban apt install fail2ban Configuration files is /etc/fail2ban/jail.</description>
            <content type="html"><![CDATA[<p>Steps to setup VPS machine.</p>
<h1 id="change-default-hostname">Change default Hostname</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hostnamectl set-hostname VPS
</code></pre></div><h1 id="add-sudo-user">Add sudo user</h1>
<pre tabindex="0"><code>adduser admin
usermod -aG sudo admin
</code></pre><h1 id="setup-up-strict-firewall">Setup up strict Firewall</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ufw app list
ufw allow OpenSSH
ufw status
ufw <span style="color:#fff;font-weight:bold">enable</span>
ufw status
</code></pre></div><h1 id="harden-sshd">Harden sshd</h1>
<pre tabindex="0"><code>$ vi /etc/ssh/sshd_config
</code></pre><p>Disable Root ssh access</p>
<pre tabindex="0"><code>PermitRootLogin no
</code></pre><p>Disable empty passwords</p>
<pre tabindex="0"><code>PermitEmptyPasswords no
</code></pre><p>Limit Authentication</p>
<pre tabindex="0"><code>MaxAuthTries 5
</code></pre><p>Set Idle Time</p>
<pre tabindex="0"><code>ClientAliveInterval 1200
</code></pre><p>Then restart sshd service</p>
<pre tabindex="0"><code>$ service ssh restart
</code></pre><h1 id="install-fail2ban">Install fail2ban</h1>
<pre tabindex="0"><code>apt install fail2ban
</code></pre><p>Configuration files is <code>/etc/fail2ban/jail.conf</code> but can be overridden by <code>/etc/fail2ban/jail.local</code></p>
<pre tabindex="0"><code>cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
</code></pre><p>and configure</p>
<pre tabindex="0"><code># Ban hosts for one day
bantime = 86400

# Override /etc/fail2ban/jail.d/00-firewalld.conf:
banaction = iptables-multiport
ignoreip = 127.0.0.1/8

[sshd]
enabled = true

</code></pre><p>to check status of fail2ban sshd jail</p>
<pre tabindex="0"><code>$ sudo fail2ban-client status sshd
Status for the jail: sshd
|- Filter
|  |- Currently failed:	0
|  |- Total failed:	0
|  `- File list:	/var/log/auth.log
`- Actions
   |- Currently banned:	0
   |- Total banned:	0
   `- Banned IP list:
</code></pre><h1 id="create-ssh-with-correct-permission">Create .ssh with correct permission</h1>
<p>use <code>admin</code> user to create <code>~/.ssh</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">su admin
mkdir .ssh
chmod <span style="color:#ff0;font-weight:bold">700</span> ~/.ssh
</code></pre></div><h1 id="add-ssh-keys">Add ssh keys</h1>
<p>Generate public key on other machine if you don&rsquo;t have one</p>
<pre tabindex="0"><code>ssh-keygen
</code></pre><p>move <code>id_rsa.pub</code> to VPS</p>
<pre tabindex="0"><code>scp ~/.ssh/id_rsa.pub  admin@VPS:~/.ssh/authorized_keys
</code></pre>]]></content>
        </item>
        
        <item>
            <title> Book review - The Pragmatic Programmer</title>
            <link>/posts/2019/08/book-review-the-pragmatic-programmer/</link>
            <pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate>
            
            <guid>/posts/2019/08/book-review-the-pragmatic-programmer/</guid>
            <description>The Pragmatic Programmer is a small book about the best practices to be a &amp;ldquo;Pragmatic&amp;rdquo; Programmer. It talks about handling software projects with large teams, changing requirements and complex environments.
I liked the first chapter where it goes through the philosophy of pragmatic engineers. I have been following these practices for years but i haven&amp;rsquo;t see them actually written somewhere. things, like investing in personal portofolio, are the best investment an engineer can do.</description>
            <content type="html"><![CDATA[<p>The Pragmatic Programmer is a small book about the best practices to be a &ldquo;Pragmatic&rdquo; Programmer. It talks about handling software projects with large teams, changing requirements and complex environments.</p>
<p>I liked the first chapter where it goes through the philosophy of <em>pragmatic engineers</em>. I have been following these practices for years but i haven&rsquo;t see them actually written somewhere. things, like investing in personal portofolio, are the best investment an engineer can do. well, They apply to any field not just engineering.</p>
<p>It was easy one to read. I actually read it in two days. And it had several funny jokes (well, they were funny to me!). It&rsquo;s not very technical book but it does mention some design patterns, methodologies, devops tools but it refers to other technical references for more details.</p>
<p>That said, most of the practices are obvious for modern software engineers. Things like version control, metadata and continuous integration are the norm in the industry now. That said, this edition was written in 2000 and these things weren&rsquo;t popular back then. Generally, It&rsquo;s very useful book, I am just readying it 20 years late :).</p>
]]></content>
        </item>
        
        <item>
            <title>vscode Tips and Tricks</title>
            <link>/posts/2019/06/vscode-tips-and-tricks/</link>
            <pubDate>Sun, 02 Jun 2019 00:00:00 +0000</pubDate>
            
            <guid>/posts/2019/06/vscode-tips-and-tricks/</guid>
            <description>Recovering deleted files If you deleted something through vscode, you can find at
&amp;lt;mounted_disk&amp;gt;/.Trash-1000/files/&amp;lt;deleted_file_name&amp;gt;
I found the solution at github issue
Spelling checks I use spell-right vscode extension for spelling suggestions.
sudo apt-get install hunspell-en-us ln -s /usr/share/hunspell/* ~/.config/Code/Dictionaries then Alt-Shift-p to choose spellRight: Select Dictionary and it works!.</description>
            <content type="html"><![CDATA[<h1 id="recovering-deleted-files">Recovering deleted files</h1>
<p>If you deleted something through vscode, you can find at</p>
<p><code>&lt;mounted_disk&gt;/.Trash-1000/files/&lt;deleted_file_name&gt;</code></p>
<p>I found the solution at <a href="https://github.com/Microsoft/vscode/issues/32078">github issue</a></p>
<h1 id="spelling-checks">Spelling checks</h1>
<p>I use <code>spell-right</code> vscode extension for spelling suggestions.</p>
<pre tabindex="0"><code>sudo apt-get install hunspell-en-us
ln -s /usr/share/hunspell/* ~/.config/Code/Dictionaries
</code></pre><p>then <code>Alt-Shift-p</code> to choose <code>spellRight: Select Dictionary</code> and it works!.</p>
]]></content>
        </item>
        
        <item>
            <title>Web scraping with python</title>
            <link>/posts/2019/06/web-scraping-with-python/</link>
            <pubDate>Sun, 02 Jun 2019 00:00:00 +0000</pubDate>
            
            <guid>/posts/2019/06/web-scraping-with-python/</guid>
            <description>This post is about the fetch and crawl of html pages using requests and BeautifulSoup
I came across an interesting forum and i was looking for posts with some keywords. The forum did have a search form but didn&amp;rsquo;t support any kind of regex. I think it uses some kind OR&amp;rsquo;ing logic for search keywords and returns any post that has any of the words. It was built in early 00&amp;rsquo;s using PHP, lucky for me.</description>
            <content type="html"><![CDATA[<p>This post is about the fetch and crawl of html pages using <code>requests</code> and <code>BeautifulSoup</code></p>
<p>I came across an interesting forum and i was looking for posts with some keywords. The forum did have a search form but didn&rsquo;t support any kind of regex. I think it uses some kind OR&rsquo;ing logic for search keywords and returns any post that has any of the words. It was built in early 00&rsquo;s using PHP, lucky for me. So, the approach was</p>
<ul>
<li>Format the search URL based on given keywords</li>
<li>Fetch the search results and crawl the hits and fetch them</li>
<li>Search for given patterns(including regex)</li>
</ul>
<h1 id="getting-and-parsing-pages">Getting and parsing pages</h1>
<p><code>requests</code> is very easy way to get raw HTML pages</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">url = <span style="color:#0ff;font-weight:bold">&#34;www.forum.com/search?q=something&#34;</span>
<span style="color:#fff;font-weight:bold">import</span> requests

r = requests.get(url)
<span style="color:#fff;font-weight:bold">print</span>(r.content)
</code></pre></div><p>Now we have the HTML in <code>r.content</code>, <code>BeautifulSoup</code> is used to parse HTML into something i can traverse with <code>find</code> and <code>findAll</code> methods. Below an example of parsing a list with CSS class <code>search1</code> and getting all links.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">from</span> bs4 <span style="color:#fff;font-weight:bold">import</span> BeautifulSoup
<span style="color:#fff;font-weight:bold">import</span> requests

r = requests.get(new_page)

soup = BeautifulSoup(r.content, <span style="color:#0ff;font-weight:bold">&#39;html5lib&#39;</span>)
threads = soup.find(<span style="color:#0ff;font-weight:bold">&#39;li&#39;</span>, attrs = {<span style="color:#0ff;font-weight:bold">&#39;class&#39;</span>:<span style="color:#0ff;font-weight:bold">&#39;search1&#39;</span>}).findAll(<span style="color:#0ff;font-weight:bold">&#39;a&#39;</span>, attrs = {<span style="color:#0ff;font-weight:bold">&#39;title&#39;</span>:<span style="color:#0ff;font-weight:bold">&#39;View This Message&#39;</span>})
</code></pre></div><p>At this point, i have links to posts with attribute <code>href</code>, i can fetch the individual post pages, parse them and extract the raw text. well, the next step is just <code>re.search</code> and i am done.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">for</span> thread in threads:

    r = requests.get(thread[<span style="color:#0ff;font-weight:bold">&#39;href&#39;</span>])
    soup = BeautifulSoup(r.content, <span style="color:#0ff;font-weight:bold">&#39;html5lib&#39;</span>)

    posts = [p.findAll(<span style="color:#0ff;font-weight:bold">&#39;div&#39;</span>)[<span style="color:#ff0;font-weight:bold">0</span>].text <span style="color:#fff;font-weight:bold">for</span> p in soup.findAll(<span style="color:#0ff;font-weight:bold">&#39;div&#39;</span>, attrs = {<span style="color:#0ff;font-weight:bold">&#39;class&#39;</span>:<span style="color:#0ff;font-weight:bold">&#39;am_body_left&#39;</span>})]

</code></pre></div><h1 id="useful-libraries">Useful libraries</h1>
<ul>
<li><code>requests_cache</code> to cache requests. very useful as this website is static.</li>
<li><code>argparse</code> to parse command line options and provide grep-like features.</li>
<li><code>logging</code> to control verbosity.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Boot linux in Qemu</title>
            <link>/posts/2019/05/boot-linux-in-qemu/</link>
            <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
            
            <guid>/posts/2019/05/boot-linux-in-qemu/</guid>
            <description>This is quick guide to compile linux kernel and minimal boot in Qemu.
Compiling linux kernel To compile linux kernel, you will need .config to configure the build. To generate default .config:
make defconfig if you are planning to upgrade the kernel version on your machine, you need to use the current config to generate compatible configuration
cp /boot/config-`kernel version` ./config make oldconfig Creating busybox initramfs mkinitramfs creates minimal busybox file system with busybox unix commands.</description>
            <content type="html"><![CDATA[<p>This is quick guide to compile linux kernel and minimal boot in Qemu.</p>
<h1 id="compiling-linux-kernel">Compiling linux kernel</h1>
<p>To compile linux kernel, you will need <code>.config</code> to configure the build. To generate default <code>.config</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">make defconfig
</code></pre></div><p>if you are planning to upgrade the kernel version on your machine, you need to use the current config to generate compatible configuration</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cp /boot/config-<span style="color:#0ff;font-weight:bold">`</span>kernel version<span style="color:#0ff;font-weight:bold">`</span> ./config
make oldconfig
</code></pre></div><h1 id="creating-busybox-initramfs">Creating busybox initramfs</h1>
<p><code>mkinitramfs</code> creates minimal busybox file system with busybox unix commands.
More importantly, the kernel will try to mount root file system by default.So, you will get kernel panic if kernel didn&rsquo;t find one.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mkinitramfs -o initrd.img
</code></pre></div><h1 id="booting-qemu">Booting qemu</h1>
<p>Using <code>qemu-system-x86_64</code> which is vanilla qemu (No KVM)</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">qemu-system-x86_64 -kernel ./arch/x86_64/boot/bzImage -initrd initrd.img -m <span style="color:#ff0;font-weight:bold">2048</span> -nographic -append <span style="color:#0ff;font-weight:bold">&#34;console=ttyS0&#34;</span>
</code></pre></div><p>After boot messages, you should see something like:</p>
<pre tabindex="0"><code>[    5.916979] ata_id (1021) used greatest stack depth: 14128 bytes left

...
...


BusyBox v1.27.2 (Ubuntu 1:1.27.2-2ubuntu3.2) built-in shell (ash)
Enter 'help' for a list of built-in commands.

(initramfs) uname -a
Linux (none) 4.15.0-rc6+ #12 SMP Sat May 11 11:09:29 EET 2019 x86_64 GNU/Linux
</code></pre><h1 id="moving-between-console-and-qemu-monitor">Moving between console and qemu monitor</h1>
<p>To reboot qemu, you can move to qemu monitor by <code>Ctrl-a</code> then <code>c</code></p>
<h1 id="references">References</h1>
<ul>
<li><a href="https://nostillsearching.wordpress.com/2012/09/22/compiling-linux-kernel-and-running-it-using-qemu/">https://nostillsearching.wordpress.com/2012/09/22/compiling-linux-kernel-and-running-it-using-qemu/</a></li>
<li><a href="https://www.zachpfeffer.com/single-post/Build-the-Linux-kernel-and-Busybox-and-run-on-QEMU">https://www.zachpfeffer.com/single-post/Build-the-Linux-kernel-and-Busybox-and-run-on-QEMU</a></li>
<li><a href="http://manpages.ubuntu.com/manpages/bionic/man8/mkinitramfs.8.html">http://manpages.ubuntu.com/manpages/bionic/man8/mkinitramfs.8.html</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Console boot options in linux</title>
            <link>/posts/2019/05/console-boot-options-in-linux/</link>
            <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
            
            <guid>/posts/2019/05/console-boot-options-in-linux/</guid>
            <description>Introduction I was trying to boot linux with qemu and it didn&amp;rsquo;t work until i added console=ttyS0.So, I decided to take a deep dive into the kernel boot sequence to understand it.
I looked into kernel docs,and found console supports several console types like ttyS, tty, ttyUSB and few others. but i was interested in ttyS0 only for now.
Boot options registration Linux has infrastructure to register boot options and parsers will iterate boot options and call the registered functions.</description>
            <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>I was trying to boot linux with qemu and it didn&rsquo;t work until i added <code>console=ttyS0</code>.So, I decided to take a deep dive into the kernel boot sequence to understand it.</p>
<p>I looked into kernel docs,and found <code>console</code> supports several console types like ttyS, tty, ttyUSB and few others. but i was interested in ttyS0 only for now.</p>
<h1 id="boot-options-registration">Boot options registration</h1>
<p>Linux has infrastructure to register boot options and parsers will iterate boot options and call the registered functions.</p>
<p>in <code>init/main.c</code>, the chain of calls will eventually call <code>do_early_param</code> which specifically looks for <code>&quot;console&quot;</code> and calls <code>setup_func()</code> through <code>obs_kernel_param</code> structure.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">int</span> __init do_early_param(<span style="color:#fff;font-weight:bold">char</span> *param, <span style="color:#fff;font-weight:bold">char</span> *val,
				 <span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">char</span> *unused, <span style="color:#fff;font-weight:bold">void</span> *arg)
{
	<span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">struct</span> obs_kernel_param *p;

	<span style="color:#fff;font-weight:bold">for</span> (p = __setup_start; p &lt; __setup_end; p++) {
		<span style="color:#fff;font-weight:bold">if</span> ((p-&gt;early &amp;&amp; parameq(param, p-&gt;str)) ||
		    (strcmp(param, <span style="color:#0ff;font-weight:bold">&#34;console&#34;</span>) == <span style="color:#ff0;font-weight:bold">0</span> &amp;&amp;
		     strcmp(p-&gt;str, <span style="color:#0ff;font-weight:bold">&#34;earlycon&#34;</span>) == <span style="color:#ff0;font-weight:bold">0</span>)
		) {
			<span style="color:#fff;font-weight:bold">if</span> (p-&gt;setup_func(val) != <span style="color:#ff0;font-weight:bold">0</span>)
				pr_warn(<span style="color:#0ff;font-weight:bold">&#34;Malformed early option &#39;%s&#39;</span><span style="color:#0ff;font-weight:bold">\n</span><span style="color:#0ff;font-weight:bold">&#34;</span>, param);
		}
	}
	<span style="color:#007f7f">/* We accept everything at this stage. */</span>
	<span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}
</code></pre></div><p>So, what are <code>__setup_start</code>, <code>__setup_end</code> and <code>setup_func</code>?</p>
<p><code>__setup_start</code> are <code>__setup_end</code> pointers built into the elf at compile time with <em>super</em> linker scripts and macros. anyway, that&rsquo;s topic for another post.</p>
<p>In <code>kernel/printk/printk.c</code>, there is the registration of the boot option</p>
<pre tabindex="0"><code>__setup(&quot;console=&quot;, console_setup);
</code></pre><p>tracing it down the rabbit hole</p>
<pre tabindex="0"><code>#define __setup_param(str, unique_id, fn, early)			\
	static const char __setup_str_##unique_id[] __initconst		\
		__aligned(1) = str; 					\
	static struct obs_kernel_param __setup_##unique_id		\
		__used __section(.init.setup)				\
		__attribute__((aligned((sizeof(long)))))		\
		= { __setup_str_##unique_id, fn, early }

#define __setup(str, fn)						\
	__setup_param(str, fn, fn, 0)
</code></pre><p>so, in our case, <code>setup_func</code> is <code>console_setup</code>.</p>
<p>and in <code>include/asm-generic/vmlinux.lds.h</code></p>
<pre tabindex="0"><code>#define INIT_SETUP(initsetup_align)					\
		. = ALIGN(initsetup_align);				\
		VMLINUX_SYMBOL(__setup_start) = .;			\
		KEEP(*(.init.setup))					\
		VMLINUX_SYMBOL(__setup_end) = .;
</code></pre><p>back to the <code>console</code>, <code>console_setup</code> does basic parsing of <code>console=</code> options</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">int</span> __init console_setup(<span style="color:#fff;font-weight:bold">char</span> *str)
{
	<span style="color:#fff;font-weight:bold">if</span> (str[<span style="color:#ff0;font-weight:bold">0</span>] &gt;= <span style="color:#0ff;font-weight:bold">&#39;0&#39;</span> &amp;&amp; str[<span style="color:#ff0;font-weight:bold">0</span>] &lt;= <span style="color:#0ff;font-weight:bold">&#39;9&#39;</span>) {
		strcpy(buf, <span style="color:#0ff;font-weight:bold">&#34;ttyS&#34;</span>);
		strncpy(buf + <span style="color:#ff0;font-weight:bold">4</span>, str, <span style="color:#fff;font-weight:bold">sizeof</span>(buf) - <span style="color:#ff0;font-weight:bold">5</span>);
	} <span style="color:#fff;font-weight:bold">else</span> {
		strncpy(buf, str, <span style="color:#fff;font-weight:bold">sizeof</span>(buf) - <span style="color:#ff0;font-weight:bold">1</span>);
	}

	<span style="color:#fff;font-weight:bold">for</span> (s = buf; *s; s++)
		<span style="color:#fff;font-weight:bold">if</span> (isdigit(*s) || *s == <span style="color:#0ff;font-weight:bold">&#39;,&#39;</span>)
			<span style="color:#fff;font-weight:bold">break</span>;
	idx = simple_strtoul(s, <span style="color:#fff;font-weight:bold">NULL</span>, <span style="color:#ff0;font-weight:bold">10</span>);
	*s = <span style="color:#ff0;font-weight:bold">0</span>;

	__add_preferred_console(buf, idx, options, brl_options);
	console_set_on_cmdline = <span style="color:#ff0;font-weight:bold">1</span>;
	<span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">1</span>;
}
__setup(<span style="color:#0ff;font-weight:bold">&#34;console=&#34;</span>, console_setup);
</code></pre></div><p>The real work is done by <code>__add_preferred_console</code>. it will put the boot option in global array <code>console_cmdline</code>. Here is the declaration from <code>printk.c</code></p>
<pre tabindex="0"><code>#define MAX_CMDLINECONSOLES 8

static struct console_cmdline console_cmdline[MAX_CMDLINECONSOLES];
</code></pre><p>Note that <code>__add_preferred_console</code> will use an existing entry if found. And it will be marked as <code>preferred_console</code>.</p>
<p>Normally, it wouldn&rsquo;t match anything and <code>c</code> pointer will point to the next empty entry in the array. in my case, loop didn&rsquo;t even start because nothing was in <code>console_cmdline</code>.</p>
<p>So, using <code>console=ttyS0</code> will populate the first entry in the <code>console_cmdline</code> only.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">int</span> __add_preferred_console(<span style="color:#fff;font-weight:bold">char</span> *name, <span style="color:#fff;font-weight:bold">int</span> idx, <span style="color:#fff;font-weight:bold">char</span> *options,
				   <span style="color:#fff;font-weight:bold">char</span> *brl_options)
{
	<span style="color:#fff;font-weight:bold">struct</span> console_cmdline *c;
	<span style="color:#fff;font-weight:bold">int</span> i;

	<span style="color:#007f7f">/*
</span><span style="color:#007f7f">	 *	See if this tty is not yet registered, and
</span><span style="color:#007f7f">	 *	if we have a slot free.
</span><span style="color:#007f7f">	 */</span>
	<span style="color:#fff;font-weight:bold">for</span> (i = <span style="color:#ff0;font-weight:bold">0</span>, c = console_cmdline;
	     i &lt; MAX_CMDLINECONSOLES &amp;&amp; c-&gt;name[<span style="color:#ff0;font-weight:bold">0</span>];
	     i++, c++) {
		<span style="color:#fff;font-weight:bold">if</span> (strcmp(c-&gt;name, name) == <span style="color:#ff0;font-weight:bold">0</span> &amp;&amp; c-&gt;index == idx) {
			<span style="color:#fff;font-weight:bold">if</span> (!brl_options)
				preferred_console = i;
			<span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
		}
	}

	<span style="color:#fff;font-weight:bold">if</span> (i == MAX_CMDLINECONSOLES)
		<span style="color:#fff;font-weight:bold">return</span> -E2BIG;
	<span style="color:#fff;font-weight:bold">if</span> (!brl_options)
		preferred_console = i;
	strlcpy(c-&gt;name, name, <span style="color:#fff;font-weight:bold">sizeof</span>(c-&gt;name));
	c-&gt;options = options;
	braille_set_options(c, brl_options);
	c-&gt;index = idx;
	<span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}
</code></pre></div><h1 id="driver-registration">Driver Registration</h1>
<p>Now we have <code>console_cmdline</code> populated with boot options, something needs to handle these consoles. well, here comes the driver :)</p>
<p>in <code>kernel/printk/printk.c</code>, the <code>console_cmdline</code> array is accessed through <code>register_console</code>
which matches the name of console to driver and does some magic to print the messages in printk buffer.</p>
<p>for uart serial console, i have 8259 driver compiled as part of kernel. from <code>drivers/tty/serial/8250/8250_core.c</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">int</span> __init univ8250_console_init(<span style="color:#fff;font-weight:bold">void</span>)
{
	<span style="color:#fff;font-weight:bold">if</span> (nr_uarts == <span style="color:#ff0;font-weight:bold">0</span>)
		<span style="color:#fff;font-weight:bold">return</span> -ENODEV;

	serial8250_isa_init_ports();
	register_console(&amp;univ8250_console);
	<span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
}
console_initcall(univ8250_console_init);
</code></pre></div><p>Note that <code>console_initcall</code> has to be called after <code>__setup</code>. So, that driver can find the console device.</p>
<p>The driver will define needed function for setup/write</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">struct</span> console univ8250_console = {
	.name		= <span style="color:#0ff;font-weight:bold">&#34;ttyS&#34;</span>,
	.write		= univ8250_console_write,
	.device		= uart_console_device,
	.setup		= univ8250_console_setup,
	.match		= univ8250_console_match,
	.flags		= CON_PRINTBUFFER | CON_ANYTIME,
	.index		= -<span style="color:#ff0;font-weight:bold">1</span>,
	.data		= &amp;serial8250_reg,
};
</code></pre></div><p>The interesting part is in <code>register_console</code>, the comments says that <code>console_unlock</code> will flush the buffer.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">		<span style="color:#007f7f">/*
</span><span style="color:#007f7f">		 * console_unlock(); will print out the buffered messages
</span><span style="color:#007f7f">		 * for us.
</span><span style="color:#007f7f">		 */</span>
		logbuf_lock_irqsave(flags);
		console_seq = syslog_seq;
		console_idx = syslog_idx;
		logbuf_unlock_irqrestore(flags);
		<span style="color:#007f7f">/*
</span><span style="color:#007f7f">		 * We&#39;re about to replay the log buffer.  Only do this to the
</span><span style="color:#007f7f">		 * just-registered console to avoid excessive message spam to
</span><span style="color:#007f7f">		 * the already-registered consoles.
</span><span style="color:#007f7f">		 */</span>
		exclusive_console = newcon;
	}
	console_unlock();
</code></pre></div><p>So, <code>console_unlock</code> will call <code>call_console_drivers</code> which will call <code>write</code> registered in the driver.</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">void</span> call_console_drivers(<span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">char</span> *ext_text, size_t ext_len,
				 <span style="color:#fff;font-weight:bold">const</span> <span style="color:#fff;font-weight:bold">char</span> *text, size_t len)
{
	<span style="color:#fff;font-weight:bold">struct</span> console *con;

	trace_console_rcuidle(text, len);

	<span style="color:#fff;font-weight:bold">if</span> (!console_drivers)
		<span style="color:#fff;font-weight:bold">return</span>;

	for_each_console(con) {
		<span style="color:#fff;font-weight:bold">if</span> (exclusive_console &amp;&amp; con != exclusive_console)
			<span style="color:#fff;font-weight:bold">continue</span>;
		<span style="color:#fff;font-weight:bold">if</span> (!(con-&gt;flags &amp; CON_ENABLED))
			<span style="color:#fff;font-weight:bold">continue</span>;
		<span style="color:#fff;font-weight:bold">if</span> (!con-&gt;write)
			<span style="color:#fff;font-weight:bold">continue</span>;
		<span style="color:#fff;font-weight:bold">if</span> (!cpu_online(smp_processor_id()) &amp;&amp;
		    !(con-&gt;flags &amp; CON_ANYTIME))
			<span style="color:#fff;font-weight:bold">continue</span>;
		<span style="color:#fff;font-weight:bold">if</span> (con-&gt;flags &amp; CON_EXTENDED)
			con-&gt;write(con, ext_text, ext_len);
		<span style="color:#fff;font-weight:bold">else</span>
			con-&gt;write(con, text, len);
	}
}
</code></pre></div><h1 id="reference">Reference</h1>
<ul>
<li><a href="https://www.kernel.org/doc/html/latest/admin-guide/serial-console.html">https://www.kernel.org/doc/html/latest/admin-guide/serial-console.html</a></li>
<li><a href="https://www.tldp.org/HOWTO/Remote-Serial-Console-HOWTO/configure-kernel.html">https://www.tldp.org/HOWTO/Remote-Serial-Console-HOWTO/configure-kernel.html</a></li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
