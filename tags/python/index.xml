<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Techiedeepdive</title>
    <link>/tags/python/</link>
    <description>Recent content in python on Techiedeepdive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 26 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python - pip</title>
      <link>/posts/2024/05/python-pip/</link>
      <pubDate>Sun, 26 May 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/2024/05/python-pip/</guid>
      <description>pip is python package manager. We will use virtualenv to play around with pip
Create virtualenv  Link to heading   we can use venv module to create virtualenv. You many need to install for the required python version.
apt install python3.10-venv python 3.10 -m venv venv source venv/bin/activate which pip install  Link to heading   $ pip install requests $ pip list Package Version ------------------ -------- certifi 2024.</description>
    </item>
    
    <item>
      <title>Python - fastapi </title>
      <link>/posts/2024/05/python-fastapi/</link>
      <pubDate>Thu, 23 May 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/2024/05/python-fastapi/</guid>
      <description>fastapi is quick way to develop REST API. It can be done with flask or Django but fastapi can do a lot of stuff out of the box. For example, fastapi creates openapi SWAGGER UI on /docs.
from typing import Union from fastapi import FastAPI app = FastAPI() @app.get(&amp;#34;/&amp;#34;) def read_root(): return {&amp;#34;Hello&amp;#34;: &amp;#34;World&amp;#34;} @app.get(&amp;#34;/items/{item_id}&amp;#34;) def read_item(item_id: int, q: Union[str, None] = None): return {&amp;#34;item_id&amp;#34;: item_id, &amp;#34;q&amp;#34;: q} To start the server, we can use dev server from the application app.</description>
    </item>
    
    <item>
      <title>Python - package of the week - Pydantic</title>
      <link>/posts/2024/05/python-package-of-the-week-pydantic/</link>
      <pubDate>Thu, 23 May 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/2024/05/python-package-of-the-week-pydantic/</guid>
      <description>Pydantic is python library for data validation and parsing. It provides classes and API to validate, serialize, de-serialize class attributes. It&amp;rsquo;s similar to python dataclass.
Models  Link to heading    One of the primary ways of defining schema in Pydantic is via models. Models are simply classes which inherit from pydantic.BaseModel and define fields as annotated attributes.
 from typing import List, Optional from pydantic import BaseModel class Model(BaseModel): v: str id : int = 0 size: Optional[float] = None bars: List[int] m = Model(v=&amp;#34;hello&amp;#34;, bars=[1,2]) print(m)  v=&amp;lsquo;hello&amp;rsquo; id=0</description>
    </item>
    
    <item>
      <title>Python - type hints  typing</title>
      <link>/posts/2024/05/python-type-hints-typing/</link>
      <pubDate>Thu, 23 May 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/2024/05/python-type-hints-typing/</guid>
      <description>Python is, by design, dynamic typing language. which means you don&amp;rsquo;t have define types for variable. but that can be confusing for liners and IDE. This is from the offical docs
 Note The Python runtime does not enforce function and variable type annotations. They can be used by third party tools such as type checkers, IDEs, linters, etc.
 There are simple types that can be used to hint</description>
    </item>
    
    <item>
      <title>Python Entry points</title>
      <link>/posts/2024/04/python-entry-points/</link>
      <pubDate>Fri, 05 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/2024/04/python-entry-points/</guid>
      <description>From docs, entry points are used to define things that installers know about for example, cli main scripts or plugins
 Entry points are a mechanism for an installed distribution to advertise components it provides to be discovered and used by other code. For example:
Distributions can specify console_scripts entry points, each referring to a function. When pip (or another console_scripts aware installer) installs the distribution, it will create a command-line wrapper for each entry point.</description>
    </item>
    
    <item>
      <title>Python package of the week: pluggy</title>
      <link>/posts/2024/04/python-package-of-the-week-pluggy/</link>
      <pubDate>Fri, 05 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/2024/04/python-package-of-the-week-pluggy/</guid>
      <description>pluggy provides a way to register plugins with a manager and call the registered hooks with the same arguments. This is an example from the github README.
First, we need to create 2 decorators:
 hookspec: used by base method definition that will be implemented with plugins as well hookimpl: used by the plugin to register the actual hooks  hookspec = pluggy.HookspecMarker(&amp;#34;myproject&amp;#34;) hookimpl = pluggy.HookimplMarker(&amp;#34;myproject&amp;#34;) Then define the base hook</description>
    </item>
    
    <item>
      <title>Cocotb Deepdive - Force and release</title>
      <link>/posts/2023/03/cocotb-deepdive-force-and-release/</link>
      <pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/03/cocotb-deepdive-force-and-release/</guid>
      <description>A really nice feature of cocotb is force and release which map to RTL force and release depending on the language (and simulator). This is example how to use Force and Release.
from cocotb.handle import Force, Release, Deposit from cocotb.binary import BinaryValue value = &amp;#34;0&amp;#34; sig = .... sig.value = Force(BinaryValue(len(sig) * value) sig.value = Release() Force and Release are defines in handle.py and defines _as_gpi_args_for.
class _SetValueAction(_SetAction): __slots__ = (&amp;#34;value&amp;#34;,) &amp;#34;&amp;#34;&amp;#34;Base class representing the type of action used while write-accessing a handle with a value.</description>
    </item>
    
    <item>
      <title>Python package highlight: Easy progress bar - tqdm</title>
      <link>/posts/2022/12/python-package-highlight-easy-progress-bar-tqdm/</link>
      <pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/12/python-package-highlight-easy-progress-bar-tqdm/</guid>
      <description>tqdm is nice package to show progress bar for loops. tqdm() takes iterable and returns another iterable with updating the bar. This is the comments from the tqdm class in tqdm/std.py
  &amp;quot;&amp;quot;&amp;quot; Decorate an iterable object, returning an iterator which acts exactly like the original iterable, but prints a dynamically updating progressbar every time a value is requested. &amp;quot;&amp;quot;&amp;quot;   Quick example of tqdm iterable in a loop.</description>
    </item>
    
    <item>
      <title>Python package of the week: colorama</title>
      <link>/posts/2022/12/python-package-of-the-week-colorama/</link>
      <pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/12/python-package-of-the-week-colorama/</guid>
      <description>colorama is nice little package to add color to console messages. It make the logs look better where you can spot important messages quickly.
I usually add the argument to disable coloring if i need to.
from colorama import Fore,Style import config if not config.batch: class DummyFore: BLACK=RED=GREEN=YELLOW=BLUE=MAGENTA=CYAN=WHITE=RESET=&amp;#39;&amp;#39; class DummyStyle: RESET_ALL = &amp;#34;&amp;#34; saved_Fore, Fore = Fore, DummyFore saved_Style, Style = Style, DummyStyle Then use my package instead using of using colorama directly.</description>
    </item>
    
    <item>
      <title>Cocotb - writing toggle coverage collctor in 20 lines</title>
      <link>/posts/2022/12/cocotb-writing-toggle-coverage-collctor-in-20-lines/</link>
      <pubDate>Mon, 26 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/12/cocotb-writing-toggle-coverage-collctor-in-20-lines/</guid>
      <description>This post is about poor man&amp;rsquo;s toggle coverage collector written purely in cocotb. You may ask why? and i will simply reply by with &amp;ldquo;why not?!&amp;rdquo;.
First thing is getting design signals through cocotb infrastructure. I know that signals would be of type ModifiableObject so i use dir to everything and register monitors on signal objects.
for i in dir(tb.top): o = getattr(tb.top,i) if (isinstance(o, ModifiableObject)): S = SignalToggleCov(o) sigs.append(S) cocotb.</description>
    </item>
    
    <item>
      <title>Python: bisect</title>
      <link>/posts/2022/11/python-bisect/</link>
      <pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/python-bisect/</guid>
      <description>bisect_left is documented by link. Basically, it returns the index to of sorted list to keep the list sorted.
 bisect.bisect_left(a, x, lo=0, hi=len(a), *, key=None) Locate the insertion point for x in a to maintain sorted order. The parameters lo and hi may be used to specify a subset of the list which should be considered; by default the entire list is used. If x is already present in a, the insertion point will be before (to the left of) any existing entries.</description>
    </item>
    
    <item>
      <title>PyQt5 hello world</title>
      <link>/posts/2022/11/pyqt5-hello-world/</link>
      <pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/pyqt5-hello-world/</guid>
      <description>GUI can be fun but choosing the right library for the job can be daunting task. I recently evaluated several libraries GTK,wxWidgets and other libraries. and finally settled on Qt. and PyQt5 is great because it is easy to integrate with python application.
This is hello world and explanation to create and populate PyQt5 widgets.
Starting with QApplication instantiated from QtWidgets. The typical PyQt5 skelton uses and class from QMainWindow. In this example, it&amp;rsquo;s called MainWindow.</description>
    </item>
    
    <item>
      <title>Python: Higher order functions - reduce</title>
      <link>/posts/2022/11/python-higher-order-functions-reduce/</link>
      <pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/python-higher-order-functions-reduce/</guid>
      <description>This post is about reduce. It&amp;rsquo;s higher order function part of functool package.
The documentation describes it as
 Apply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value.
 combing lambda and reduce can be save a lot of time while processing bunch of lists. It recently saved me some time to and all expressions in list of objects.</description>
    </item>
    
    <item>
      <title>Python packages of the week: Jinja2 and pystache</title>
      <link>/posts/2022/11/python-packages-of-the-week-jinja2-and-pystache/</link>
      <pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/python-packages-of-the-week-jinja2-and-pystache/</guid>
      <description>Let&amp;rsquo;s start with an important question: what is the plural of Hello world? Is it Hello worlds? Anyway, I recently used pystache because I wanted something simpler than Jinja2. So, Thought it would be nice to compare small hello world for both engines.
pystache  Link to heading   pystche is very simple to use. Just render and passing template and variable dict.
import pystache template = &amp;#34;Hello World and {{ person }}&amp;#34; template_txt = pystache.</description>
    </item>
    
    <item>
      <title>Cocotb Internals - xunit Reporter</title>
      <link>/posts/2022/11/cocotb-internals-xunit-reporter/</link>
      <pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/cocotb-internals-xunit-reporter/</guid>
      <description>cocotb generates results.xml file which xunit format (XML). I didn&amp;rsquo;t look that long for standard xunit schema because it doesn&amp;rsquo;t seem to exist. So, I analysed the xunit_reporter.py instead. Well, I can&amp;rsquo;t sleep anyway. so why not?!
I have to start by saying &amp;ldquo;xml.. ugh!&amp;rdquo;&amp;hellip; writing the IPXACT parser made me hate xml forever.
The xunit report from simple_dff would look like this:
&amp;lt;testsuites name=&amp;#34;results&amp;#34;&amp;gt; &amp;lt;testsuite name=&amp;#34;all&amp;#34; package=&amp;#34;all&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;random_seed&amp;#34; value=&amp;#34;1667509785&amp;#34; /&amp;gt; &amp;lt;testcase name=&amp;#34;dff_simple_test&amp;#34; classname=&amp;#34;test_dff&amp;#34; file=&amp;#34;~/examples/simple_dff/test_dff.</description>
    </item>
    
    <item>
      <title>Cocotb Internals - wavedrom dumper</title>
      <link>/posts/2022/11/cocotb-internals-wavedrom-dumper/</link>
      <pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/cocotb-internals-wavedrom-dumper/</guid>
      <description>One of the things I love about reading open source is randomly finding unused features. There are many reasons a part of the code is not used, It could can experimental, untested or it is only there because the developer had too much fun writing it :) Anyway, It&amp;rsquo;s interesting when i find these bits..
In cocotb,I found built-in utility to generate wavedrom. It&amp;rsquo;s defined in cocotb/wavedrom.py. From comments, I modified dff_simple_test to dump dut.</description>
    </item>
    
    <item>
      <title>Cocotb Deepdive - Edge Trigger and cocotb trampoline</title>
      <link>/posts/2022/10/cocotb-deepdive-edge-trigger-and-cocotb-trampoline/</link>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/cocotb-deepdive-edge-trigger-and-cocotb-trampoline/</guid>
      <description>I wrote a previous post about clock and Timer triggers in cocotb. Considering that all triggers yield to core scheduler, I thought to do another trigger (Posedge) and the trampoline.
Class hierarchy  Link to heading   Starting with FallingEdge where it takes the signal handle, In this example, dut.clk is passed to FallingEdge
await FallingEdge(dut.clk) FallingEdge sets the edge type for generic _EdgeBase
class FallingEdge(_EdgeBase): &amp;#34;&amp;#34;&amp;#34;Fires on the falling edge of *signal*, on a transition from ``1`` to ``0``.</description>
    </item>
    
    <item>
      <title>python asyncio - user-defined await-able object</title>
      <link>/posts/2022/10/python-asyncio-user-defined-await-able-object/</link>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/python-asyncio-user-defined-await-able-object/</guid>
      <description>__await__ method defines the behavior of class with await is called on class object.
 The await() magic method defines the behavior of an awaitable object. An awaitable object is used to implement asynchronous behavior in Python.
 __await__ is not async method but it returns closure __await__ from a closure method.
import asyncio from collections.abc import Awaitable class Trigger(Awaitable): def __init__(self): pass def __await__(self): async def c(): print(&amp;#34;Do async stuff here&amp;#34;) return self return c().</description>
    </item>
    
    <item>
      <title>Cocotb Deepdive - start vs start_soon and scheduler implementation</title>
      <link>/posts/2022/10/cocotb-deepdive-start-vs-start_soon-and-scheduler-implementation/</link>
      <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/cocotb-deepdive-start-vs-start_soon-and-scheduler-implementation/</guid>
      <description>cocotb provides couple of routines to start concurrent coroutine. The implementation shows that start calls start_soon and yield for the forked process to start right now. That&amp;rsquo;s a big deal because start_soon doesn&amp;rsquo;t star the coro until the parent coro yields control (ie await from something).
def start_soon(coro: Union[Task, Coroutine]) -&amp;gt; Task: &amp;#34;&amp;#34;&amp;#34; Schedule a coroutine to be run concurrently. Note that this is not an async function, and the new task will not execute until the calling task yields control.</description>
    </item>
    
    <item>
      <title>python asyncio - not-so-deep dive into asyncio and cpython</title>
      <link>/posts/2022/09/python-asyncio-not-so-deep-dive-into-asyncio-and-cpython/</link>
      <pubDate>Fri, 23 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/python-asyncio-not-so-deep-dive-into-asyncio-and-cpython/</guid>
      <description>This post is about python asyncio. asyncio is python asynchronous implementation providing event loop functionality. From &amp;ldquo;event loop&amp;rdquo; wiki:
 In computer science, the event loop is a programming construct or design pattern that waits for and dispatches events or messages in a program. The event loop works by making a request to some internal or external &amp;ldquo;event provider&amp;rdquo; (that generally blocks the request until an event has arrived), then calls the relevant event handler (&amp;ldquo;dispatches the event&amp;rdquo;).</description>
    </item>
    
    <item>
      <title>Cocotb Deepdive - Makefiles</title>
      <link>/posts/2022/09/cocotb-deepdive-makefiles/</link>
      <pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/cocotb-deepdive-makefiles/</guid>
      <description>This post is about the Makefile shipped with cocotb. I will trace Makefiles targets for iverilog but most of the target are generic.
Startin with final outupt with &amp;ldquo;make -n&amp;rdquo; when running one of the examples examples/adder/tests/
cd cocotb/examples/adder/tests export PYTHONPATH=$PWD/../model:$PYTHONPATH echo &amp;#34;+timescale+1ns/1ps&amp;#34; &amp;gt; sim_build/cmds.f iverilog -o sim_build/sim.vvp -D COCOTB_SIM=1 -s adder -f sim_build/cmds.f -g2012 ../hdl/adder.sv MODULE=test_adder TESTCASE= TOPLEVEL=adder TOPLEVEL_LANG=verilog vvp -M ../../../.venv/lib/python3.8/site-packages/cocotb/libs -m libcocotbvpi_icarus sim_build/sim.vvp So, How do we get here?</description>
    </item>
    
    <item>
      <title>Cocotb Deepdive - Clock and Timer Trigger</title>
      <link>/posts/2022/09/cocotb-deepdive-clock-and-timer-trigger/</link>
      <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/cocotb-deepdive-clock-and-timer-trigger/</guid>
      <description>cocob provides a periodic clock class Clock which depends on Timer trigger. I will start with an examples of Clock usage.
clock = Clock(dut.clk, 10, units=&amp;#34;us&amp;#34;) cocotb.start_soon(clock.start()) Note That start_soon is just starting cocotb coroutine after the current routines yields. Any let&amp;rsquo;s focus on Clock
In Clock, The initialization __init__ sets some local vars (most importantly period and half_period)
118 BaseClock.__init__(self, signal) 126 self.period = get_sim_steps(period, units) 127 self.half_period = get_sim_steps(period / 2.</description>
    </item>
    
    <item>
      <title>Python package of the week: vcdvcd</title>
      <link>/posts/2022/08/python-package-of-the-week-vcdvcd/</link>
      <pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/08/python-package-of-the-week-vcdvcd/</guid>
      <description>This post is about VCD parsing library called vcdvcd. It&amp;rsquo;s great way to load up vcd and do some processing instead of losing my mind looking at gtkwave. Honestly, The API documentation is not that great but there is an examples.py which helped a little.
So, I wrote this example which should be good enough to get started. It iterates the design hierarchy and gets tv (time and value) tuples for each signal.</description>
    </item>
    
    <item>
      <title>Python classmethod vs static method</title>
      <link>/posts/2022/08/python-classmethod-vs-static-method/</link>
      <pubDate>Fri, 12 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/08/python-classmethod-vs-static-method/</guid>
      <description>classmethod and staticmethod are very similar. both are called by class but classmethod get passed class object as first argument(convention is to call it cls)
class c: @staticmethod def stmethod(arg): print(arg) @classmethod def clsmethod(cls, args): print(cls, args) c.stmethod(&amp;#34;static method&amp;#34;) c.clsmethod(&amp;#34;class method&amp;#34;) </description>
    </item>
    
    <item>
      <title>Python Ellipsis</title>
      <link>/posts/2022/08/python-ellipsis/</link>
      <pubDate>Fri, 12 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/08/python-ellipsis/</guid>
      <description>I was today years old when i knew ellipsis can be used as empty body. handy if you want to define something but not sure what to write there. It&amp;rsquo;s basically same as pass.
class s: ... </description>
    </item>
    
    <item>
      <title>Levenshtein Distance</title>
      <link>/posts/2022/05/levenshtein-distance/</link>
      <pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/05/levenshtein-distance/</guid>
      <description>Levenshtein distance defines the distance between strings. It is used for spell checking and suggestions (among other applications). It is interesting as it reminded me of Hamming distance (I am looking at you, undergrad information theory course!) which led me the rabbit hole of string distance functions.
Well, wiki says it all
 In information theory, linguistics, and computer science, the Levenshtein distance is a string metric for measuring the difference between two sequences.</description>
    </item>
    
    <item>
      <title>Simple recursive solution to Maze path finding</title>
      <link>/posts/2022/05/simple-recursive-solution-to-maze-path-finding/</link>
      <pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/05/simple-recursive-solution-to-maze-path-finding/</guid>
      <description>Maze path finding is an interesting problem to find if there path(and the path) between start and dest points on grid. More details on wiki. There many solutions some of them are more complicate than others. I am looking at backtracking or A* search. Normally simple solution is model the grid (open cells) as graph nodes and try to find shorted path between two nodes.
In this instance of this problem, there is an extra requirement.</description>
    </item>
    
    <item>
      <title>Python package of the week: tempfile</title>
      <link>/posts/2022/03/python-package-of-the-week-tempfile/</link>
      <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/03/python-package-of-the-week-tempfile/</guid>
      <description>tempfile is a useful to create files and directories under system temp path whatever that is.
To create a temp directory, tempfile.TemporaryDirectory returns a full path to temp directory.
In [8]: x = tempfile.TemporaryDirectory() In [9]: x.name Out[9]: &amp;#39;/tmp/tmp_olncqa8&amp;#39; To create a file, tempfile.NamedTemporaryFile does exactly that.
In [5]: x = tempfile.NamedTemporaryFile() In [6]: x.name Out[6]: &amp;#39;/tmp/tmpn7oud6l_&amp;#39; PS. the directory path is determined with following rules
 If dir is not None, the file will be created in that directory; otherwise, a default directory is used.</description>
    </item>
    
    <item>
      <title>Python package of the week: argparse</title>
      <link>/posts/2022/02/python-package-of-the-week-argparse/</link>
      <pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/02/python-package-of-the-week-argparse/</guid>
      <description>argparse is a great library to write CLI application with clean consistent interface. The main features are
 Sub-parsers Positional arguments Options arguments  Full docs can found at link
It&amp;rsquo;s definitely better than DIY parsing sys.argv.
An example  Link to heading   This is an examples that shows the most important features. It even prints nifty help message like this
import argparse parser = argparse.ArgumentParser() subparsers = parser.</description>
    </item>
    
    <item>
      <title>Python package of the week: Lark</title>
      <link>/posts/2022/02/python-package-of-the-week-lark/</link>
      <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/02/python-package-of-the-week-lark/</guid>
      <description>Do you know the ancient proverb that says &amp;ldquo;If you want to really understand something, parse or generate it!&amp;rdquo;. Just kidding :) I made that up. But doesn&amp;rsquo;t make less true through.
This post briefly explains BNF and how Lark uses it to build AST(Abstract syntax tree) which is basically the biggest computer science-y part of the job.
BNF  Link to heading   BNF is used to define formal specifications of context-free grammars using Production Rules and Terminal symbols.</description>
    </item>
    
    <item>
      <title>Python bits - PEP0380 Delegating to a Subgenerator - yield from</title>
      <link>/posts/2022/01/python-bits-pep0380-delegating-to-a-subgenerator-yield-from/</link>
      <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/01/python-bits-pep0380-delegating-to-a-subgenerator-yield-from/</guid>
      <description>This post is about PEP-0380
 A syntax is proposed for a generator to delegate part of its operations to another generator. This allows a section of code containing &amp;lsquo;yield&amp;rsquo; to be factored out and placed in another generator. Additionally, the subgenerator is allowed to return with a value, and the value is made available to the delegating generator.
 Basically, It&amp;rsquo;s a way to chain generators(generator is routine that yield to immediate caller.</description>
    </item>
    
    <item>
      <title>Langton Ant game</title>
      <link>/posts/2021/12/langton-ant-game/</link>
      <pubDate>Fri, 31 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/12/langton-ant-game/</guid>
      <description>This is post is about Langton&amp;rsquo;s ant. Like Conway&amp;rsquo;s game of life, It&amp;rsquo;s considered Cellular automaton.
 A cellular automaton consists of a regular grid of cells, each in one of a finite number of states, such as on and off (in contrast to a coupled map lattice). The grid can be in any finite number of dimensions. For each cell, a set of cells called its neighborhood is defined relative to the specified cell.</description>
    </item>
    
    <item>
      <title>Cocotb Deepdive - Test discovery</title>
      <link>/posts/2021/11/cocotb-deepdive-test-discovery/</link>
      <pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/11/cocotb-deepdive-test-discovery/</guid>
      <description>This is a write-up of Cocotb test discovery mechanism including the decorator and regression runner infrastructure.
Part1: Discovery with regression runner  Link to heading   Starting with __init__.py where from_discovery is called to lookup the tests.
# start Regression Manager global regression_manager regression_manager = RegressionManager.from_discovery(top) regression_manager.execute() And from_discorvery calls _discover_tests (static class method in RegressionManager)
tests = cls._discover_tests() _discover_tests loads test module (or modules) and detects classes derived from Test</description>
    </item>
    
    <item>
      <title>Python Descriptor Protocol</title>
      <link>/posts/2021/10/python-descriptor-protocol/</link>
      <pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/10/python-descriptor-protocol/</guid>
      <description>First Example  Link to heading   This is write-up based on link for python descriptors.
Descriptors are described as
 Descriptors let objects customize attribute lookup, storage, and deletion.
 lets start with simplest example
class Age: def __get__(self, instance, owner): return instance.age_years * 12 def __set__(self, instance, value): instance.age_years = value / 12 class Person3: age_months = Age() def __init__(self, age): self.age_years = age p3 = Person3(2) print(p3.</description>
    </item>
    
    <item>
      <title>Python class registration decorator</title>
      <link>/posts/2021/10/python-class-registration-decorator/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/10/python-class-registration-decorator/</guid>
      <description>Flask used decorators to register routes handlers. I have another post about flask internal to match function to specific URI.
@app.route(&amp;#34;/&amp;#34;) def hello_world(): return &amp;#34;&amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;&amp;#34; That said, I wanted to implement similar registration but for classes.
class Block(): def __init__(self) -&amp;gt; None: pass class Env(): _blocks = [] def __init__(self) -&amp;gt; None: pass @classmethod def register(cls): def decorator(fn): cls._blocks.append(fn) return fn return decorator @Env.register() class block1(Block): pass env = Env() print(env.</description>
    </item>
    
    <item>
      <title>Python Pandas cheat sheet</title>
      <link>/posts/2021/10/python-pandas-cheat-sheet/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/10/python-pandas-cheat-sheet/</guid>
      <description>Basics  Link to heading   Create DataFrame
df = pd.DataFrame([[1,0],[4,5]], columns=[&amp;#39;A&amp;#39;,&amp;#39;B&amp;#39;]) df = df.append(pd.DataFrame([[6,9]], columns=list(df.columns))) # df = pd.read_csv(&amp;#34;File.csv&amp;#34;) #  df.shape df.info() df.head() df.tail() Get all row with one column. This returns Series
df[&amp;#34;col1&amp;#34;] df[&amp;#34;col1&amp;#34;].value_counts() return multiple columns. This returns Dataframe
df[[&amp;#34;col1&amp;#34;,&amp;#34;col2&amp;#34;]] This returns pandas.core.indexes.base.Index.
df.columns list(df.columns) #pandas.core.series.Series df.iloc[0] df.iloc[0][&amp;#34;col1&amp;#34;] df.iloc[ [0,1] ] df.iloc[ [0,1] , [0,1] ] df.loc[ [0,1] , [&amp;#34;col1&amp;#34;,&amp;#34;col2&amp;#34;] ] df.loc[ 0:1 , &amp;#34;col1&amp;#34;:&amp;#34;col2&amp;#34; ] df.</description>
    </item>
    
    <item>
      <title>Python sequence slicing</title>
      <link>/posts/2021/09/python-sequence-slicing/</link>
      <pubDate>Sun, 19 Sep 2021 20:13:02 +0100</pubDate>
      
      <guid>/posts/2021/09/python-sequence-slicing/</guid>
      <description>Basic index slicing  Link to heading   python defines slicing with [start:stop:step] to access elements of sequences(list, seq, str).
&amp;gt;&amp;gt;&amp;gt; x = list(range(10)) &amp;gt;&amp;gt;&amp;gt; x [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &amp;gt;&amp;gt;&amp;gt; x[1:8:2] [1, 3, 5, 7] &amp;gt;&amp;gt;&amp;gt; x[:3] [0, 1, 2] &amp;gt;&amp;gt;&amp;gt; x[5:] [5, 6, 7, 8, 9] Named slice  Link to heading   for readability, index range can be names with slice object and used to index sequences.</description>
    </item>
    
    <item>
      <title>Python sequence unpacking</title>
      <link>/posts/2021/09/python-sequence-unpacking/</link>
      <pubDate>Sun, 19 Sep 2021 20:13:02 +0100</pubDate>
      
      <guid>/posts/2021/09/python-sequence-unpacking/</guid>
      <description>Python defines unpacking for sequences(lists, tuple for example). RHS length has to match seq.len
&amp;gt;&amp;gt;&amp;gt; x = [1,2] &amp;gt;&amp;gt;&amp;gt; a , b = x also, there is star expression for unpacking in pep-3132.
&amp;gt;&amp;gt;&amp;gt; a, *b, c = range(5) &amp;gt;&amp;gt;&amp;gt; a 0 &amp;gt;&amp;gt;&amp;gt; c 4 &amp;gt;&amp;gt;&amp;gt; b [1, 2, 3] Also, useful trick for unpacking while calling a function. where is two types list unpack (one star) and names unpack(double star).</description>
    </item>
    
    <item>
      <title>Python Template String</title>
      <link>/posts/2021/09/python-template-string/</link>
      <pubDate>Wed, 15 Sep 2021 18:02:53 +0100</pubDate>
      
      <guid>/posts/2021/09/python-template-string/</guid>
      <description>Template strings (as define in PEP292)
 We propose the addition of a new class, called Template, which will live in the string module. The Template class supports new rules for string substitution; its value contains placeholders, introduced with the $ character. The following rules for $-placeholders apply:
$$ is an escape; it is replaced with a single $
$identifier names a substitution placeholder matching a mapping key of &amp;ldquo;identifier&amp;rdquo;. By default, &amp;ldquo;identifier&amp;rdquo; must spell a Python identifier as defined in [2].</description>
    </item>
    
    <item>
      <title>Python Install without root</title>
      <link>/posts/2021/05/python-install-without-root/</link>
      <pubDate>Wed, 05 May 2021 20:13:02 +0100</pubDate>
      
      <guid>/posts/2021/05/python-install-without-root/</guid>
      <description>This post documents the steps to install python without root.
libffi  Link to heading   libffi is required by ctypes module which is an important module for python/c interface.
./autogen.sh ./configure --prefix=$LOCAL make make install sqlite3  Link to heading   sqlite3 required by sqlite3 module. Python can compile without it but it is good module to have. So worth the trouble.
./configure --prefix=$LOCAL make make install python  Link to heading   env  Link to heading   Note that LDFLAGS below is need for compiling ctypes with local libffi and be removed after compilation.</description>
    </item>
    
    <item>
      <title>Python Pep 503</title>
      <link>/posts/2021/05/python-pep-503/</link>
      <pubDate>Sat, 01 May 2021 13:09:31 +0100</pubDate>
      
      <guid>/posts/2021/05/python-pep-503/</guid>
      <description>pep 503 defines the python package repo api used py pypi.org. I thought it was fun to create small repo using Flask (to host Flask) :)
The spec require two urls
 root url project url  root url return html listing available project page. the anchor tags has the following requirements
 The text of the anchor tag MUST be the name of the project and the href attribute MUST link to the URL for that particular project.</description>
    </item>
    
    <item>
      <title>Python Wheels</title>
      <link>/posts/2021/05/python-wheels/</link>
      <pubDate>Sat, 01 May 2021 10:00:20 +0100</pubDate>
      
      <guid>/posts/2021/05/python-wheels/</guid>
      <description>Python wheels is zip file with package content as opposed to source distribution. It&amp;rsquo;s faster to install than the normal tar(or whatever).
The article has really good description for wheels.
For me, wheels are most helpful for installing packages on air-gapped machines. I can just copy the wheels and install. These are the steps based on SO.
export PD=/var/tmp/python-deps mkdir $PD python -m pip download wheel setuptools cocotb setuptools_scm -d $PD And to install on another machine</description>
    </item>
    
    <item>
      <title>Python Context Manager</title>
      <link>/posts/2021/05/python-context-manager/</link>
      <pubDate>Sat, 01 May 2021 08:53:49 +0100</pubDate>
      
      <guid>/posts/2021/05/python-context-manager/</guid>
      <description>Intro  Link to heading   pep-343 describes the context(pun intended) of context managers.
 PEP 340, Anonymous Block Statements, combined many powerful ideas: using generators as block templates, adding exception handling and finalization to generators, and more
 Basically pep 340 introduced the concept of anonymous blocks. which means that something
block EXPR1 as VAR1: BLOCK1 is the same as
itr = EXPR1 # The iterator ret = False # True if a return statement is active val = None # Return value, if ret == True exc = None # sys.</description>
    </item>
    
    <item>
      <title>Python Dist utils</title>
      <link>/posts/2021/05/python-dist-utils/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/05/python-dist-utils/</guid>
      <description>├── MANIFEST.in ├── mypkg │ ├── data.json │ ├── __init__.py │ └── mmod.py ├── README.md ├── requirements.txt ├── runner └── setup.py more MANIFEST.in include README.md requirements.txt more setup.py from distutils.core import setup with open(&amp;#39;requirements.txt&amp;#39;) as f: required = f.read().splitlines() print(required) setup(name = &amp;#34;appname&amp;#34;, version = &amp;#34;100&amp;#34;, description = &amp;#34;yadda yadda&amp;#34;, author = &amp;#34;myself and I&amp;#34;, author_email = &amp;#34;email@someplace.com&amp;#34;, url = &amp;#34;whatever&amp;#34;, packages = [&amp;#39;mypkg&amp;#39;], package_data = {&amp;#39;&amp;#39; : [&amp;#34;data.json&amp;#34;] }, scripts = [&amp;#34;runner&amp;#34;], long_description = &amp;#34;&amp;#34;&amp;#34;Really long text here.</description>
    </item>
    
    <item>
      <title>Python int/hex and bytes</title>
      <link>/posts/2021/04/python-int/hex-and-bytes/</link>
      <pubDate>Thu, 22 Apr 2021 22:15:10 +0100</pubDate>
      
      <guid>/posts/2021/04/python-int/hex-and-bytes/</guid>
      <description>few years ago, i tried to write ELF parser in python and it was fun to write hacky code to parse and manipulate binary/hex (not easy though). This is quick write-up to decribe python bin/hex methods.
ord and chr  Link to heading   ord takes string of one char and returns ascii code. The doc descibes it as:
 Given a string representing one Unicode character, return an integer representing the Unicode code point of that character.</description>
    </item>
    
    <item>
      <title>Python Decorators</title>
      <link>/posts/2021/04/python-decorators/</link>
      <pubDate>Mon, 19 Apr 2021 12:08:54 +0100</pubDate>
      
      <guid>/posts/2021/04/python-decorators/</guid>
      <description>pep describes decorators as better way for method transformation.
 The current method of applying a transformation to a function or method places the actual transformation after the function body. For large functions this separates a key component of the function&amp;rsquo;s behavior from the definition of the rest of the function&amp;rsquo;s external interface
 the pep mentions an example or the function transformation:
def foo(self): perform method operation foo = classmethod(foo) Syntax  Link to heading   syntax</description>
    </item>
    
    <item>
      <title>Python Threading</title>
      <link>/posts/2021/04/python-threading/</link>
      <pubDate>Sun, 18 Apr 2021 16:01:24 +0100</pubDate>
      
      <guid>/posts/2021/04/python-threading/</guid>
      <description>python threading module provides a way to start python callable in a thread of execution
class threading.Thread(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None) This constructor should always be called with keyword arguments. Arguments are: group should be None; reserved for future extension when a ThreadGroup class is implemented. target is the callable object to be invoked by the run() method. Defaults to None, meaning nothing is called. name is the thread name.</description>
    </item>
    
    <item>
      <title>Python Subprocess</title>
      <link>/posts/2021/04/python-subprocess/</link>
      <pubDate>Sun, 18 Apr 2021 14:44:43 +0100</pubDate>
      
      <guid>/posts/2021/04/python-subprocess/</guid>
      <description>subprocess.run  Link to heading   python 3.5 provided new interface to replace older os.system to call programs and shell commands. doc
run() is wrapper around the lower interface Popen which provides finer and more complicated control. Also, run waits until process is done but popen will continue execution and user needs to check for process termination.
subprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, capture_output=False, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None, text=None, env=None, universal_newlines=None, **other_popen_kwargs) as docs mentions these are the most important options.</description>
    </item>
    
    <item>
      <title>Python filter/map</title>
      <link>/posts/2021/04/python-filter/map/</link>
      <pubDate>Sun, 18 Apr 2021 12:39:44 +0100</pubDate>
      
      <guid>/posts/2021/04/python-filter/map/</guid>
      <description>filter()  Link to heading   Define in docs,
 Construct an iterator from those elements of iterable for which function returns true. iterable may be either a sequence, a container which supports iteration, or an iterator. If function is None, the identity function is assumed, that is, all elements of iterable that are false are removed
 This is very similar to filter and map from other languages like javascript</description>
    </item>
    
    <item>
      <title>Python zip()</title>
      <link>/posts/2021/04/python-zip/</link>
      <pubDate>Sun, 18 Apr 2021 12:08:54 +0100</pubDate>
      
      <guid>/posts/2021/04/python-zip/</guid>
      <description>zip iterable collections  Link to heading   zip is a way to iterate several iterable collections in the same loop. from docs
 Make an iterator that aggregates elements from each of the iterables. Returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables. The iterator stops when the shortest input iterable is exhausted. With a single iterable argument, it returns an iterator of 1-tuples.</description>
    </item>
    
    <item>
      <title>Python dict.items and enumerate</title>
      <link>/posts/2021/04/python-dict.items-and-enumerate/</link>
      <pubDate>Sun, 18 Apr 2021 11:49:07 +0100</pubDate>
      
      <guid>/posts/2021/04/python-dict.items-and-enumerate/</guid>
      <description>Python provides several iteration API over collections(specially dictionary). In python2, there was dict.iteritems() for key/value iteration. Starting from python3, iteritems was replaced by items()i (see SO). and there is also enumerate which works with all collections not just dict.
dict.items()  Link to heading   Defined in pep, items() returns key/value iterator over dict. Although, items behaves the same in python2 and 3. but there is a difference in return type.</description>
    </item>
    
    <item>
      <title>Python Generator vs Iterator</title>
      <link>/posts/2021/04/python-generator-vs-iterator/</link>
      <pubDate>Sat, 17 Apr 2021 15:15:17 +0100</pubDate>
      
      <guid>/posts/2021/04/python-generator-vs-iterator/</guid>
      <description>This is quick write-up about python iterators and generators.
Iterator objects  Link to heading   docs defines iter functions
&amp;quot;&amp;quot;&amp;quot; Return an iterator object. The first argument is interpreted very differently depending on the presence of the second argument. Without a second argument, object must be a collection object which supports the iteration protocol (the iter() method) &amp;quot;&amp;quot;&amp;quot;
This is an example of built-in iterators where iter() and next() are called to get iterator object and get next element in the list.</description>
    </item>
    
    <item>
      <title>Conway Game of Life</title>
      <link>/posts/2020/05/conway-game-of-life/</link>
      <pubDate>Sat, 23 May 2020 15:23:40 +0200</pubDate>
      
      <guid>/posts/2020/05/conway-game-of-life/</guid>
      <description>Conway&amp;rsquo;s Game of Life is a zero-player game introduced by the mathematician John Horton Conway in 1970. Well, It has it&amp;rsquo;s own wiki and all.
The rules are simple. You start with a grid of cells with initial state of either living or dead. Cells interact with neighbors to define the next generation of cells.
 Any live cell with fewer than two live neighbors dies, as if by under-population. Any live cell with two or three live neighbors lives on to the next generation.</description>
    </item>
    
  </channel>
</rss>
