<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pci on Techiedeepdive</title>
    <link>/tags/pci/</link>
    <description>Recent content in pci on Techiedeepdive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 19 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/pci/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Security Protocol and Data Model(SPDM) primer</title>
      <link>/posts/2023/02/security-protocol-and-data-modelspdm-primer/</link>
      <pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/security-protocol-and-data-modelspdm-primer/</guid>
      <description>SPDM defines the messages exchange protocol to do the following tasks
 The specification-defined message exchanges enable Requesters to: Discover and negotiate the security capabilities of a Responder. Authenticate or provision an identity of a Responder. Retrieve the measurements of a Responder. Securely establish cryptographic session keys to construct a secure communication channel for the transmission or reception of application data.
 In English, SPDM allows requester to know the capability of responder, encrypt/decrypt stuff.</description>
    </item>
    
    <item>
      <title>Deepdive - DOE CXL Linux driver</title>
      <link>/posts/2023/02/deepdive-doe-cxl-linux-driver/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/deepdive-doe-cxl-linux-driver/</guid>
      <description>This post is about DOE which is Data Object Exchange which is used by CMA to implement SPDM for PCI/CXL IDE specification(starting Gen5, I think). I can&amp;rsquo;t download ENC on PCI SIG, So the next best thing is reading the Linux kernel driver that uses DOE. Luckily, CXL driver uses it. win-win!
Entry point the probe Starting with drivers/cxl/pci.c, .probe is called with devices by PCI core.
static struct pci_driver cxl_pci_driver = { .</description>
    </item>
    
    <item>
      <title>PCIe physical layer 8b/10b encoder</title>
      <link>/posts/2023/02/pcie-physical-layer-8b/10b-encoder/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/pcie-physical-layer-8b/10b-encoder/</guid>
      <description>This is a quick post about 8b/10b encoder in PCIE Gen1/2. Not that change in Gen3.
From Mindeshare PCIe book, encoder balances out the
 Maintaining DC Balance. PCIe uses an AC‐coupled link, placing a capaci‐ tor serially in the path to isolate the DC part of the signal from the other end of the Link. This allows the Transmitter and Receiver to use different com‐ mon‐mode voltages and makes the electrical design easier for cases where the path between them is long enough that they’re less likely to have exactly the same reference voltages.</description>
    </item>
    
    <item>
      <title>PCIe Galois LSFR scrambler - one way to do it!</title>
      <link>/posts/2023/02/pcie-galois-lsfr-scrambler-one-way-to-do-it/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/pcie-galois-lsfr-scrambler-one-way-to-do-it/</guid>
      <description>This is a quick post about PCIe scrambler as part of the physical layer. The polynomial is
 X^16 + X^5 + X^4 + X^3 + 1.
 From Wiki, This type of LSFR is called Galois LSFR where bits at taps(xor) is inverted when bit is 1.
 Named after the French mathematician Évariste Galois, an LFSR in Galois configuration, which is also known as modular, internal XORs, or one-to-many LFSR, is an alternate structure that can generate the same output stream as a conventional LFSR (but offset in time).</description>
    </item>
    
    <item>
      <title>PCIE TLP Header python serializer</title>
      <link>/posts/2022/10/pcie-tlp-header-python-serializer/</link>
      <pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/pcie-tlp-header-python-serializer/</guid>
      <description>I always wanted to write scapy-like framework for PCIE TLP serialization and This is a quick and dirty prototype I wrote at 1 AM. So, Don&amp;rsquo;t judge me.
The final output of the serializer would be as follows. basically, something similar to scapy or wireshark breakdown of header fields.
name:memwr32 size:96 0000000000000000000000100000000000000000100000001100000001111111100000000000000010010000000000000 name:hdr size:32 000000000000000000000010000000000 name:RESERVED size:1 0 name:FMT size:2 00 name:TYPE size:5 00000 name:RESERVED size:1 0 name:TC size:3 000 name:RESERVED size:4 0000 name:TD size:1 0 name:EP size:1 0 name:ATTR size:2 00 name:AT size:2 00 name:LENGTH size:10 10000000000 name:requestID size:16 0000000100000001 name:BUS size:8 00000001 name:DEVICE size:4 0000 name:FUNCTION size:4 0001 name:TAG size:8 10000000 name:LASTDWBE size:4 1111 name:STDWBE size:4 1111 name:ADDR size:32 00000000000000010010000000000000 The PCIE TLP (Tranaction Layer Packet) header depends on type of transaction: Memory, I/O, Configuration, and Messages.</description>
    </item>
    
    <item>
      <title>iwlwifi driver crash - The problem and workaround</title>
      <link>/posts/2022/08/iwlwifi-driver-crash-the-problem-and-workaround/</link>
      <pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/08/iwlwifi-driver-crash-the-problem-and-workaround/</guid>
      <description>iwlwifi has been crashing a lot on me recently and it is driving me crazy because the only way to fix it is rebooting. The errors indicate that crash happens while NIC is waking up. I am currently using 5.4 kernel and i will see if updating the new version fixes it. At this point, I managed to produce the crash and test a workaround without rebooting.
The problem Starting with dmesg errors</description>
    </item>
    
    <item>
      <title>PCIe SRIOV linux initialization</title>
      <link>/posts/2022/08/pcie-sriov-linux-initialization/</link>
      <pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/08/pcie-sriov-linux-initialization/</guid>
      <description>single root input/output virtualization (SR-IOV) is PCIe specifications that provide virtual function (in this context, the usual PCIe function would be physical function). virtual function is used VM for better performance. It allows flow the data like physical function with limited capabilities.
Finding SRIOV capabilities space 897 int pci_iov_init(struct pci_dev *dev) 898 { 899 int pos; 900 901 if (!pci_is_pcie(dev)) 902 return -ENODEV; 903 904 pos = pci_find_ext_capability(dev, PCI_EXT_CAP_ID_SRIOV); 905 if (pos) 906 return sriov_init(dev, pos); 907 908 return -ENODEV; 909 } pos is found by pci_find_ext_capability which calls pci_find_next_ext_capability to get the extended configuration capabilities with SRIOV ID.</description>
    </item>
    
    <item>
      <title>iwlwifi - Not The Hitchhiker&#39;s guide to intel wireless driver</title>
      <link>/posts/2022/08/iwlwifi-not-the-hitchhikers-guide-to-intel-wireless-driver/</link>
      <pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/08/iwlwifi-not-the-hitchhikers-guide-to-intel-wireless-driver/</guid>
      <description>This is the second post in a series about iwlwifi the linux intel wireless controller driver. Unlucky(or luck) me, this driver crashes randomly on my machine. I decided to debug the crash before giving up and bump up kernel and modules version. iwlwifi is basically PCIe driver but it also interacts with network stack and network configuration stack.
PCIe driver Starting with PCIe side, Drivers have to register with the PCIe subsystem and the PCIe core will iterate devices and match drivers to the devices.</description>
    </item>
    
    <item>
      <title>A 5 minute tour of my PCI wireless controller sysfs</title>
      <link>/posts/2022/08/a-5-minute-tour-of-my-pci-wireless-controller-sysfs/</link>
      <pubDate>Tue, 23 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/08/a-5-minute-tour-of-my-pci-wireless-controller-sysfs/</guid>
      <description>It started with me trying to debug iwlwifi kernel panic which brings down the network interface. So, I thought to write some stuff about the controller itself.
Starting with lspci output which basically reads sysfs (that would be /sys, more about sysfs in another post).
$ lspci -s 0000:03:00.0 -v 03:00.0 Network controller: Intel Corporation Dual Band Wireless-AC 3165 Plus Bluetooth (rev 99) Subsystem: Intel Corporation Dual Band Wireless-AC 3165 Plus Bluetooth Flags: bus master, fast devsel, latency 0, IRQ 125 Memory at 91000000 (64-bit, non-prefetchable) [size=8K] Capabilities: &amp;lt;access denied&amp;gt; Kernel driver in use: iwlwifi Kernel modules: iwlwifi Well, I can see all the information at /sys/bus/pci/devices/0000:03:00.</description>
    </item>
    
  </channel>
</rss>
