<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graphs on Techiedeepdive</title>
    <link>/tags/graphs/</link>
    <description>Recent content in Graphs on Techiedeepdive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 01 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/graphs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AIG - And Inverter graph</title>
      <link>/posts/2022/10/aig-and-inverter-graph/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/aig-and-inverter-graph/</guid>
      <description>An and-inverter graph (AIG) is a directed, acyclic graph that represents a structural implementation of the logical functionality of a circuit or network. An AIG consists of two-input nodes representing logical conjunction, terminal nodes labeled with variable names, and edges optionally containing markers indicating logical negation. This representation of a logic function is rarely structurally efficient for large circuits, but is an efficient representation for manipulation of boolean functions. Typically, the abstract graph is represented as a data structure in software.</description>
    </item>
    
    <item>
      <title>Breadth-first and Depth-first Graph Searches</title>
      <link>/posts/2020/06/breadth-first-and-depth-first-graph-searches/</link>
      <pubDate>Fri, 12 Jun 2020 19:04:24 +0200</pubDate>
      
      <guid>/posts/2020/06/breadth-first-and-depth-first-graph-searches/</guid>
      <description>Introduction  Link to heading   DFS and BFS are probably first topic to do when doing anything related to graphs. I started with things like Dijkstra and prim which could be extension of DFS and BFS.
DFS and BFS can be used for several application like shortest path and detecting cycles and connected components.
Breadth first search  Link to heading   wiki says that BFS visits the nodes of a graph by visiting the neighbour nodes first then move to the next level of neighbours.</description>
    </item>
    
    <item>
      <title>Prim&#39;s Minimum Spanning Tree</title>
      <link>/posts/2020/06/prims-minimum-spanning-tree/</link>
      <pubDate>Fri, 12 Jun 2020 00:56:05 +0200</pubDate>
      
      <guid>/posts/2020/06/prims-minimum-spanning-tree/</guid>
      <description>Introduction  Link to heading   prim&amp;rsquo;s Algorithm find minimum spanning tree for weighted undirected graph.
basically, Minimum spanning tree is sub-graph (in this case tree) that connect all vertices of weight graph. This requires that original graph is connected.
MST is useful for network distribution problems.
The algorithm  Link to heading   From the wiki:
 Initialize a tree with a single vertex, chosen arbitrarily from the graph.</description>
    </item>
    
    <item>
      <title>Dijkstra Algorithm</title>
      <link>/posts/2020/06/dijkstra-algorithm/</link>
      <pubDate>Wed, 10 Jun 2020 22:04:46 +0200</pubDate>
      
      <guid>/posts/2020/06/dijkstra-algorithm/</guid>
      <description>Introduction  Link to heading   Dijkstra&amp;rsquo;s algorithm says it is an algorithm for finding the shortest paths between nodes in a graph.
Dijkstra is big deal because it&amp;rsquo;s used to find the best way (based on weight function) between points A and B on a graph. It works well on graphs with non-negative edges.
Considering the instance of the problem where A and B is connected and graph and required to calculate minimum cost for that path.</description>
    </item>
    
  </channel>
</rss>
