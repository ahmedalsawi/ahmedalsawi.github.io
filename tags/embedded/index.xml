<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Embedded on Techiedeepdive</title>
    <link>/tags/embedded/</link>
    <description>Recent content in Embedded on Techiedeepdive</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 08 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/embedded/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>beaglev-fire walk-through: FPGA Programming</title>
      <link>/posts/2025/03/beaglev-fire-walk-through-fpga-programming/</link>
      <pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/03/beaglev-fire-walk-through-fpga-programming/</guid>
      <description>&lt;p&gt;This is a quick guide how to program FPGA fabric on Microchip Polarfire, more specifically Beaglev-fire board.&lt;/p&gt;&#xA;&lt;h1 id=&#34;programming&#34;&gt;&#xA;  Programming&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#programming&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In &lt;a href=&#34;https://docs.beagleboard.org/boards/beaglev/fire/demos-and-tutorials/gateware/customize-cape-gateware-verilog.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;4&lt;/a&gt;, We need to get bitstream directory generated by gateware first. In this example, it&amp;rsquo;s called &lt;code&gt;my_custom_fpga_design&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;change-gateway&#34;&gt;&#xA;  change-gateway&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#change-gateway&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;So, what is there? We need to the bitstream and dtb overlay.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;mpfs_bitstream.spi : spi bitstream&lt;/li&gt;&#xA;&lt;li&gt;mpfs_dtbo.spi : overlay device tree&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Then we call &lt;code&gt;change-gateway&lt;/code&gt; script with &lt;code&gt;my_custom_fpga_design&lt;/code&gt; to copy the files above.&lt;/p&gt;</description>
    </item>
    <item>
      <title>riscv picorv32 hello demystified</title>
      <link>/posts/2022/01/riscv-picorv32-hello-demystified/</link>
      <pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/01/riscv-picorv32-hello-demystified/</guid>
      <description>&lt;p&gt;This is a post about hello test in &lt;a href=&#34;https://github.com/YosysHQ/picorv32&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;piscorv32&lt;/a&gt;. I am not going to dig deep into picorv32 itself. Just the firmware.&lt;/p&gt;&#xA;&lt;h1 id=&#34;where-to-start&#34;&gt;&#xA;  Where to start&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#where-to-start&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;As usual, It makes sense to start with &lt;code&gt;Makefile&lt;/code&gt; and work backward.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make -n test&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After removing verilog related commands and tests, We have the following commands for the firmware.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32imc -o firmware/start.o firmware/start.S&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32ic -Os --std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/irq.o firmware/irq.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32ic -Os --std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/print.o firmware/print.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32ic -Os --std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/hello.o firmware/hello.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32ic -Os --std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/sieve.o firmware/sieve.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32ic -Os --std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/multest.o firmware/multest.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32ic -Os --std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/stats.o firmware/stats.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -Os -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32imc -ffreestanding -nostdlib -o firmware/firmware.elf &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;&#x9;-Wl,--build-id&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;none,-Bstatic,-T,firmware/sections.lds,-Map,firmware/firmware.map,--strip-debug &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;&#x9;firmware/start.o firmware/irq.o firmware/print.o firmware/hello.o firmware/sieve.o firmware/multest.o firmware/stats.o -lgcc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-objcopy -O binary firmware/firmware.elf firmware/firmware.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 firmware/makehex.py firmware/firmware.bin &lt;span style=&#34;color:#a5d6ff&#34;&gt;32768&lt;/span&gt; &amp;gt; firmware/firmware.hex&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;startup-assembly&#34;&gt;&#xA;  Startup assembly&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#startup-assembly&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Probably the most important part(beside linking):&lt;/p&gt;</description>
    </item>
    <item>
      <title>Device Tree hello world</title>
      <link>/posts/2020/09/device-tree-hello-world/</link>
      <pubDate>Sun, 06 Sep 2020 16:05:18 +0200</pubDate>
      <guid>/posts/2020/09/device-tree-hello-world/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Device_tree&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Device Tree&lt;/a&gt; is defined as&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;In computing, a device tree (also written devicetree) is a data structure describing the hardware components of a particular computer so that the operating system&amp;rsquo;s kernel can use and manage those components, including the CPU or CPUs, the memory, the buses and the peripherals.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Basically, device tree defines SOC architecture for operating system or boot-loader. This is widely used in embedded systems where the system is not configurable and not going to change.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Stm32f4 Discovery - Part1 - ARM Cortex M4 Initialization</title>
      <link>/posts/2020/07/stm32f4-discovery-part1-arm-cortex-m4-initialization/</link>
      <pubDate>Sat, 11 Jul 2020 17:48:31 +0200</pubDate>
      <guid>/posts/2020/07/stm32f4-discovery-part1-arm-cortex-m4-initialization/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This post will explain the linker script and assembly initialization before jumping to main using &lt;a href=&#34;https://www.st.com/en/evaluation-tools/stm32f4discovery.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stm32f4&lt;/a&gt; board and Hello world example from &lt;a href=&#34;git://github.com/jeremyherbert/stm32-templates.git&#34; &gt;github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-end&#34;&gt;&#xA;  The end&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-end&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I will describe this the same way i gone through it. &lt;em&gt;Starting with the linking command&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;arm-none-eabi-gcc -g -O2 -Wall -Tstm32_flash.ld  -mlittle-endian -mthumb -mcpu&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;cortex-m4 -mthumb-interwork -mfloat-abi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;hard -mfpu&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;fpv4-sp-d16 -Iinc -Ilib -Ilib/inc  -Ilib/inc/core -Ilib/inc/peripherals  src/main.c src/stm32f4xx_it.c src/system_stm32f4xx.c lib/startup_stm32f4xx.s -o main.elf -Llib -lstm32f4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Starting with &lt;code&gt;main.c&lt;/code&gt;, well nothing interesting there. just the &lt;code&gt;main&lt;/code&gt;, obviously.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bitbake Tutorial</title>
      <link>/posts/2020/07/bitbake-tutorial/</link>
      <pubDate>Fri, 03 Jul 2020 16:47:59 +0200</pubDate>
      <guid>/posts/2020/07/bitbake-tutorial/</guid>
      <description>&lt;h1 id=&#34;introdction&#34;&gt;&#xA;  Introdction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introdction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Bitbake is make-like build system. It was a part of openembedded project but split at some point to function as task runner.&lt;/p&gt;&#xA;&lt;p&gt;This is small working exaple of bitbake layer. I extracted it from &lt;a href=&#34;https://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docs&lt;/a&gt; and Yocto-poky repo.&lt;/p&gt;&#xA;&lt;h1 id=&#34;installation&#34;&gt;&#xA;  Installation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#installation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Download git repo from &lt;a href=&#34;https://github.com/openembedded/bitbake&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;git&lt;/a&gt;. and set PATH to &lt;code&gt;bitbake/bin&lt;/code&gt;. that&amp;rsquo;s it :)&lt;/p&gt;&#xA;&lt;h1 id=&#34;basic-concepts&#34;&gt;&#xA;  Basic concepts&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#basic-concepts&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Bitbake uses &lt;code&gt;recipes&lt;/code&gt; to control how to build software packages. Recipes can be grouped in &lt;code&gt;layer&lt;/code&gt;.It is useful to isolate related recipes into separate layer. And you can add customization or more recipes with additional layers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Console boot options in linux</title>
      <link>/posts/2019/05/console-boot-options-in-linux/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      <guid>/posts/2019/05/console-boot-options-in-linux/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I was trying to boot linux with qemu and it didn&amp;rsquo;t work until i added &lt;code&gt;console=ttyS0&lt;/code&gt;.So, I decided to take a deep dive into the kernel boot sequence to understand it.&lt;/p&gt;&#xA;&lt;p&gt;I looked into kernel docs,and found &lt;code&gt;console&lt;/code&gt; supports several console types like ttyS, tty, ttyUSB and few others. but i was interested in ttyS0 only for now.&lt;/p&gt;&#xA;&lt;h1 id=&#34;boot-options-registration&#34;&gt;&#xA;  Boot options registration&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#boot-options-registration&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Linux has infrastructure to register boot options and parsers will iterate boot options and call the registered functions.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
