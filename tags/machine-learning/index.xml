<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Machine Learning on Techiedeepdive</title>
    <link>/tags/machine-learning/</link>
    <description>Recent content in Machine Learning on Techiedeepdive</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 13 Nov 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/machine-learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Levenshtein similarity matrix and Affinity Propagation clustering</title>
      <link>/posts/2022/11/levenshtein-similarity-matrix-and-affinity-propagation-clustering/</link>
      <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/11/levenshtein-similarity-matrix-and-affinity-propagation-clustering/</guid>
      <description>&lt;p&gt;This post is a breakdown of the code in &lt;a href=&#34;https://stats.stackexchange.com/questions/123060/clustering-a-long-list-of-strings-words-into-similarity-groups&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt; which uses levenshtein and affinity propagation to cluster string list.&lt;/p&gt;&#xA;&lt;p&gt;In previous post, I wrote simple levenshtein implementation to calculate the similarity between strings. And it turns out to be a good metric for clustering. Basically, affinity propagation and distance similarity matrix is match made in heaven.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;distance.levenshtein&lt;/code&gt; is called with each word in the wordlist to calculate the distance.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lev_similarity &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;np&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;array([[distance&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;levenshtein(w1,w2) &lt;span style=&#34;color:#ff7b72&#34;&gt;for&lt;/span&gt; w1 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;in&lt;/span&gt; words] &lt;span style=&#34;color:#ff7b72&#34;&gt;for&lt;/span&gt; w2 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;in&lt;/span&gt; words])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And calling &lt;code&gt;AffinityPropagation&lt;/code&gt; from &lt;code&gt;sklearn.cluster&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
