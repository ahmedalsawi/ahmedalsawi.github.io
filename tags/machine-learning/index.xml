<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>machine learning on Techiedeepdive</title>
    <link>/tags/machine-learning/</link>
    <description>Recent content in machine learning on Techiedeepdive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 13 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/machine-learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Levenshtein similarity matrix and Affinity Propagation clustering</title>
      <link>/posts/2022/11/levenshtein-similarity-matrix-and-affinity-propagation-clustering/</link>
      <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/levenshtein-similarity-matrix-and-affinity-propagation-clustering/</guid>
      <description>This post is a breakdown of the code in link which uses levenshtein and affinity propagation to cluster string list.
In previous post, I wrote simple levenshtein implementation to calculate the similarity between strings. And it turns out to be a good metric for clustering. Basically, affinity propagation and distance similarity matrix is match made in heaven.
distance.levenshtein is called with each word in the wordlist to calculate the distance.</description>
    </item>
    
  </channel>
</rss>
