<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Machine Learning on Techiedeepdive</title>
    <link>/tags/machine-learning/</link>
    <description>Recent content in Machine Learning on Techiedeepdive</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 13 Nov 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/machine-learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Levenshtein Similarity Matrix and Affinity Propagation Clustering</title>
      <link>/posts/2022/11/levenshtein-similarity-matrix-and-affinity-propagation-clustering/</link>
      <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/11/levenshtein-similarity-matrix-and-affinity-propagation-clustering/</guid>
      <description>&lt;p&gt;This post is a breakdown of the code in &lt;a href=&#34;https://stats.stackexchange.com/questions/123060/clustering-a-long-list-of-strings-words-into-similarity-groups&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;, which uses Levenshtein and Affinity Propagation to cluster a string list.&lt;/p&gt;&#xA;&lt;p&gt;In a previous post, I wrote a simple Levenshtein implementation to calculate the similarity between strings. It turns out to be a good metric for clustering. Basically, Affinity Propagation and a distance similarity matrix are a match made in heaven.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;distance.levenshtein&lt;/code&gt; is called with each word in the wordlist to calculate the distance.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
