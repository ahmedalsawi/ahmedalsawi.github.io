<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design-Patterns on Techiedeepdive</title>
    <link>/tags/design-patterns/</link>
    <description>Recent content in Design-Patterns on Techiedeepdive</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 08 Sep 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/design-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43; - Builder Design Pattern</title>
      <link>/posts/2025/09/c-builder-design-pattern/</link>
      <pubDate>Mon, 08 Sep 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/09/c-builder-design-pattern/</guid>
      <description>&lt;p&gt;The Builder pattern is a creational design pattern that allows you to construct complex objects step by step. It&amp;rsquo;s useful when you need to create objects with many optional parameters.&lt;/p&gt;&#xA;&lt;p&gt;The Builder pattern separates the construction of a complex object from its representation, allowing you to create different representations using the same construction process.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Product&lt;/strong&gt; - The complex object being built (&lt;code&gt;Car&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Builder&lt;/strong&gt; - Abstract interface defining construction steps (&lt;code&gt;CarBuilder&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Concrete Builder&lt;/strong&gt; - Implements the building steps (&lt;code&gt;SportsCarBuilder&lt;/code&gt;, &lt;code&gt;FamilyCarBuilder&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;example&#34;&gt;&#xA;  Example&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#example&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s a complete implementation of the Builder pattern for constructing different types of cars. Each build method returns a reference to the builder (&lt;code&gt;return *this&lt;/code&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; - Strategy Design Pattern</title>
      <link>/posts/2025/09/c-strategy-design-pattern/</link>
      <pubDate>Mon, 08 Sep 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/09/c-strategy-design-pattern/</guid>
      <description>&lt;p&gt;The Strategy pattern is one of the simplest and most useful design patterns. It lets you swap out different algorithms or behaviors at runtime.&lt;/p&gt;&#xA;&lt;p&gt;The Strategy pattern says: &amp;ldquo;Define a family of algorithms, encapsulate each one, and make them interchangeable&amp;rdquo;. Here&amp;rsquo;s how it works with a simple shopping cart example:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Strategy Interface&lt;/strong&gt; (&lt;code&gt;PaymentStrategy&lt;/code&gt;) - Defines what all strategies must implement&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Concrete Strategies&lt;/strong&gt; (&lt;code&gt;CreditCard&lt;/code&gt;, &lt;code&gt;PayPal&lt;/code&gt;) - Different implementations of the interface&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Context&lt;/strong&gt; (&lt;code&gt;ShoppingCart&lt;/code&gt;) - Uses the strategy without knowing which specific one&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The magic is that &lt;code&gt;ShoppingCart&lt;/code&gt; doesn&amp;rsquo;t care how the payment is processed. It just calls &lt;code&gt;pay()&lt;/code&gt; and lets the strategy handle the details.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
