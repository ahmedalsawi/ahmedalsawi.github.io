<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>opengl on Techiedeepdive</title>
    <link>/tags/opengl/</link>
    <description>Recent content in opengl on Techiedeepdive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 28 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/opengl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OpenGL and Intel Graphics linux driver deepdive</title>
      <link>/posts/2023/01/opengl-and-intel-graphics-linux-driver-deepdive/</link>
      <pubDate>Sat, 28 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/01/opengl-and-intel-graphics-linux-driver-deepdive/</guid>
      <description>This post is deepdive into how opengl application interacts with underlying software stack which are opengl implementation and graphics drivers in the kernel. The stack is something like this.
User Land ------------&amp;gt; OpenGL implementation (Mesa) -------------&amp;gt; Intel driver (i915) -----------&amp;gt; HW Userland1: application and GLUT  Link to heading   Starting with a simple application to show square polygon. This application uses libglut for window management and to start the opengl application.</description>
    </item>
    
    <item>
      <title>OpenGL Hello world</title>
      <link>/posts/2022/07/opengl-hello-world/</link>
      <pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/07/opengl-hello-world/</guid>
      <description>I have been playing with some opengl examples from the graphics bible Computer graphics Principles and Practice. The first step is getting hello world to work.
Hello World  Link to heading   This example shows polygon by defining 4 points.
#include &amp;lt;GL/glut.h&amp;gt; void displayMe(void) { glClear(GL_COLOR_BUFFER_BIT); glBegin(GL_POLYGON); glVertex3f(0.0, 0.0, 0.0); glVertex3f(0.5, 0.0, 0.0); glVertex3f(0.5, 0.5, 0.0); glVertex3f(0.0, 0.5, 0.0); glEnd(); glFlush(); } int main(int argc, char **argv) { glutInit(&amp;amp;argc, argv); glutInitDisplayMode(GLUT_SINGLE); glutInitWindowSize(300, 300); glutInitWindowPosition(100, 100); glutCreateWindow(&amp;#34;Hello world&amp;#34;); glutDisplayFunc(displayMe); glutMainLoop(); return 0; } The generated graphics would be</description>
    </item>
    
  </channel>
</rss>
