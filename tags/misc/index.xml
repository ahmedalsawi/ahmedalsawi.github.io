<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Misc on Techiedeepdive</title>
    <link>/tags/misc/</link>
    <description>Recent content in Misc on Techiedeepdive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 24 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/misc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Generating sequence diagram using planuml</title>
      <link>/posts/2023/02/generating-sequence-diagram-using-planuml/</link>
      <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/generating-sequence-diagram-using-planuml/</guid>
      <description>This post is about generating sequence diagram using a tool called plantuml. It can be used for a lot of things, but I use it mainly for sequence diagram generation.
Sequence diagram is used to describe message-based protocols (like network TCP/UDP). That said, I have used it to visualize a lot of things. For example:
 Bus transaction (write/read) side-band signals (interrupts) req/ack handshakes power sequence FSM state changes UVM messages  Basically, Anything I can parse from logs.</description>
    </item>
    
    <item>
      <title>Haiku </title>
      <link>/posts/2023/02/haiku/</link>
      <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/haiku/</guid>
      <description>These are some haiku about random stuff. In case you are wondering what is haiku, here is one-liner from wiki:
 A Japanese poem in three lines, the first and last consisting of five morae, and the second consisting of seven morae, usually with an emphasis on the season or a naturalistic theme.
 Gate level simulation  Link to heading   This one is about the existential pain everyone gets while debugging GLS failures.</description>
    </item>
    
    <item>
      <title>Graphviz - Hello world</title>
      <link>/posts/2020/12/graphviz-hello-world/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/12/graphviz-hello-world/</guid>
      <description>Garphviz is very useful package to visualize data. They define their own &amp;ldquo;language&amp;rdquo; to render the graphs. More details about the dot language.
Example  Link to heading   This is example i found on SO and i think it&amp;rsquo;s great way to quickly visualize diagrams.
digraph G { graph [rankdir = LR]; node[shape=record]; Bar[label=&amp;quot;{ \&amp;quot;Bar\&amp;quot;|{&amp;lt;p1&amp;gt;pin 1|&amp;lt;p2&amp;gt; 2|&amp;lt;p3&amp;gt; 3|&amp;lt;p4&amp;gt; 4|&amp;lt;p5&amp;gt; 5} }&amp;quot;]; Foo[label=&amp;quot;{ {&amp;lt;data0&amp;gt;data0|&amp;lt;data1&amp;gt;data1|&amp;lt;data2&amp;gt;data2|&amp;lt;data3&amp;gt;data3|&amp;lt;data4&amp;gt;data4}|\&amp;quot;Foo\&amp;quot; |{&amp;lt;out0&amp;gt;out0|&amp;lt;out1&amp;gt;out1|&amp;lt;out2&amp;gt;out2|&amp;lt;GND&amp;gt;gnd|&amp;lt;ex0&amp;gt;ex0|&amp;lt;hi&amp;gt;hi|&amp;lt;lo&amp;gt;lo} }&amp;quot;]; Bew[label=&amp;quot;{ {&amp;lt;clk&amp;gt;clk|&amp;lt;syn&amp;gt;syn|&amp;lt;mux0&amp;gt;mux0|&amp;lt;mux1&amp;gt;mux1|&amp;lt;signal&amp;gt;signal}|\&amp;quot;Bew\&amp;quot; |{&amp;lt;out0&amp;gt;out0|&amp;lt;out1&amp;gt;out1|&amp;lt;out2&amp;gt;out2} }&amp;quot;]; Bar:p1 -&amp;gt; Foo:data0; Bar:p2 -&amp;gt; Foo:data1; Bar:p3 -&amp;gt; Foo:data2; Bar:p4 -&amp;gt; Foo:data3; Bar:p5 -&amp;gt; Foo:data4; Foo:out0 -&amp;gt; Bew:mux0; Foo:out1 -&amp;gt; Bew:mux1; Bew:clk -&amp;gt; Foo:ex0; Gate[label=&amp;quot;{ {&amp;lt;a&amp;gt;a|&amp;lt;b&amp;gt;b}|OR|{&amp;lt;ab&amp;gt;a\|b} }&amp;quot;]; Foo:hi -&amp;gt; Gate:a; Foo:lo -&amp;gt; Gate:b; Gate:ab -&amp;gt; Bew:signal; } dot program (part of graphviz) is used to generate png</description>
    </item>
    
  </channel>
</rss>
