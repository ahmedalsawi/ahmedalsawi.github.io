<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DV on Techiedeepdive</title>
    <link>/tags/dv/</link>
    <description>Recent content in DV on Techiedeepdive</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 01 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/dv/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Slang SystemVerilog Language Services - Hello World</title>
      <link>/posts/2025/03/slang-systemverilog-language-services-hello-world/</link>
      <pubDate>Sat, 01 Mar 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/03/slang-systemverilog-language-services-hello-world/</guid>
      <description>&lt;p&gt;This is a quick hello-world about &lt;code&gt;slang&lt;/code&gt;. &lt;code&gt;slang&lt;/code&gt; is a really interesting library (it has a CLI too) to parse, process, and check SystemVerilog. This is a snippet from &lt;a href=&#34;https://sv-lang.com/index.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;doc&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;slang is a software library that provides various components for lexing, parsing, type checking, and elaborating SystemVerilog code. It comes with an executable tool that can compile and lint any SystemVerilog project, but it is also intended to be usable as a front end for synthesis tools, simulators, linters, code editors, and refactoring tools.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb deepdive - 2024 - TestFactory vs parameterize</title>
      <link>/posts/2024/11/cocotb-deepdive-2024-testfactory-vs-parameterize/</link>
      <pubDate>Mon, 25 Nov 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/11/cocotb-deepdive-2024-testfactory-vs-parameterize/</guid>
      <description>&lt;p&gt;&lt;code&gt;TestFactory&lt;/code&gt; is cocotb-y way for test sweep with different configuration (ie parameters). As part of Cocotb 2.0, &lt;code&gt;TestFactory&lt;/code&gt; is deprecated and &lt;code&gt;parameterize&lt;/code&gt; is recommended instead.&lt;/p&gt;&#xA;&lt;p&gt;Starting with the deprecation messages for &lt;code&gt;TestFactory&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; __init__(self, test_function: F, &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt;args: Any, &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;**&lt;/span&gt;kwargs: Any) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;None&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        warnings&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;warn(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;TestFactory is deprecated, use `@cocotb.parameterize` instead&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;DeprecationWarning&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            stacklevel&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Jumping to &lt;code&gt;parameterize&lt;/code&gt; decorator where the documentation pretty much sums it up. The test takes the parameters which is cross combination of &lt;code&gt;arg1&lt;/code&gt; and &lt;code&gt;arg2&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb deepdive - 2024 - C&#43;&#43; to python Bootstrap</title>
      <link>/posts/2024/06/cocotb-deepdive-2024-c-to-python-bootstrap/</link>
      <pubDate>Fri, 07 Jun 2024 00:00:00 +0000</pubDate>
      <guid>/posts/2024/06/cocotb-deepdive-2024-c-to-python-bootstrap/</guid>
      <description>&lt;p&gt;There have been a refactor going on in Cocotb in the last few months. So, a quick write-up would be good.&lt;/p&gt;&#xA;&lt;h1 id=&#34;c-bootstrap&#34;&gt;&#xA;  C++ bootstrap&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c-bootstrap&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with entry point to python in file &lt;code&gt;src/pygpi/entry.pysrc/pygpi/entry.py&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;load_entry&lt;/code&gt; loads &lt;code&gt;cocotb:_initialise_testbench&lt;/code&gt; but will get back to that later.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;load_entry&lt;/span&gt;() &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; Tuple[ModuleType, Callable]:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Gather entry point information by parsing :envvar:`PYGPI_ENTRY_POINT`.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    entry_point_str &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;environ&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;get(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;PYGPI_ENTRY_POINT&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;cocotb:_initialise_testbench&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;in&lt;/span&gt; entry_point_str:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff7b72&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Invalid PYGPI_ENTRY_POINT, missing entry function (no colon).&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        entry_module_str, entry_func_str &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; entry_point_str&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        entry_module &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; importlib&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;import_module(entry_module_str)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        entry_func &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; reduce(getattr, entry_func_str&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;), entry_module)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;as&lt;/span&gt; e:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;RuntimeError&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#79c0ff&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;Failure to parse PYGPI_ENTRY_POINT (&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;{&lt;/span&gt;entry_point_str&lt;span style=&#34;color:#a5d6ff&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#39;)&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ) &lt;span style=&#34;color:#ff7b72&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;e&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;else&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; entry_module, entry_func&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Tracing who calls first, &lt;code&gt;load_entry&lt;/code&gt; is called from &lt;code&gt;_embed_sim_init&lt;/code&gt; and rest of call trace all the way to VPI bootstrap.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb Deepdive - Force and release</title>
      <link>/posts/2023/03/cocotb-deepdive-force-and-release/</link>
      <pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/03/cocotb-deepdive-force-and-release/</guid>
      <description>&lt;p&gt;A really nice feature of cocotb is force and release which map to RTL force and release depending on the language (and simulator). This is example how to use &lt;code&gt;Force&lt;/code&gt; and &lt;code&gt;Release&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;cocotb.handle&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; Force, Release, Deposit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;cocotb.binary&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;import&lt;/span&gt; BinaryValue&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;value &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sig  &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;....&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sig&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; Force(BinaryValue(len(sig) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;*&lt;/span&gt; value)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sig&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; Release()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Force&lt;/code&gt; and &lt;code&gt;Release&lt;/code&gt; are defines in &lt;code&gt;handle.py&lt;/code&gt; and defines &lt;code&gt;_as_gpi_args_for&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;_SetValueAction&lt;/span&gt;(_SetAction):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __slots__ &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;,)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Base class representing the type of action used while write-accessing a handle with a value.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; __init__(self, value):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; value&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Force&lt;/span&gt;(_SetValueAction):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Action used to force a handle to a given value until a release is applied.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;_as_gpi_args_for&lt;/span&gt;(self, hdl):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;value, &lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# GPI_FORCE&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;Release&lt;/span&gt;(_SetAction):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Action used to stop the effects of a previously applied force/freeze action.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;_as_gpi_args_for&lt;/span&gt;(self, hdl):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# GPI_RELEASE&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, Let&amp;rsquo;s look what happens when testbench calls &lt;code&gt;sig.value = Force(v)&lt;/code&gt;. Starting with &lt;code&gt;setter&lt;/code&gt; function which calls &lt;code&gt;_set_value&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Yosys Python bindings pyosys - Hello world and deepdive</title>
      <link>/posts/2023/03/yosys-python-bindings-pyosys-hello-world-and-deepdive/</link>
      <pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/03/yosys-python-bindings-pyosys-hello-world-and-deepdive/</guid>
      <description>&lt;p&gt;I think Yosys is one most important open sources projects ever created, at least for hardware development. It enabled so much research and innovation in FPGA and ASIC area. It did what gcc did for software development.&lt;/p&gt;&#xA;&lt;h1 id=&#34;building-and-installation&#34;&gt;&#xA;  Building and installation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#building-and-installation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;These are the steps to build yosys with pyosys(python bindings). It&amp;rsquo;s not enabled by default. So you have to pass &lt;code&gt;ENABLE_PYOSYS&lt;/code&gt;. Also, I am using virtualenv as I don&amp;rsquo;t want to install anything with root.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Portable Stimulus Standard - Part 1</title>
      <link>/posts/2023/02/portable-stimulus-standard-part-1/</link>
      <pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/portable-stimulus-standard-part-1/</guid>
      <description>&lt;p&gt;Portable stimulus standard (PSS) is very interesting. That said, It&amp;rsquo;s surprising simple.&lt;/p&gt;&#xA;&lt;p&gt;These are important abstraction units specific by the spec:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;component&lt;/li&gt;&#xA;&lt;li&gt;action&lt;/li&gt;&#xA;&lt;li&gt;Activity&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;component&#34;&gt;&#xA;  Component&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#component&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Component is a way to encapsulate other elements (mainly actions)&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Components serve as a mechanism to encapsulate and reuse elements of functionality in a portable stimulus&#xA;model. Typically, a model is broken down into parts that correspond to roles played by different actors&#xA;during test execution. Components often align with certain structural elements of the system and execution&#xA;environment, such as hardware engines, software packages, or testbench agents.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Liberty - Hello World</title>
      <link>/posts/2023/02/liberty-hello-world/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/liberty-hello-world/</guid>
      <description>&lt;p&gt;Liberty format defines delays and power of cells. It&amp;rsquo;s important part of ASIC flow for delay calculation and power estimation.&lt;/p&gt;&#xA;&lt;h1 id=&#34;syntax&#34;&gt;&#xA;  Syntax&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#syntax&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Liberty defines 3 types statements&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;group statement&lt;/li&gt;&#xA;&lt;li&gt;attribute statement&lt;/li&gt;&#xA;&lt;li&gt;define statement&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;group-statements&#34;&gt;&#xA;  Group Statements&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#group-statements&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A group is a named collection of statements that defines a library, a cell, a pin, a timing arc,&#xA;and so forth. Braces ({}), which are used in pairs, enclose the contents of the group.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Weekend project - Python Hardware Description Language - PHDL</title>
      <link>/posts/2023/02/weekend-project-python-hardware-description-language-phdl/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/weekend-project-python-hardware-description-language-phdl/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s Saturday night and I have been cleaning up my github repos. And I found this old defunct project I wrote few years ago. So, I thought to write this post about it.&lt;/p&gt;&#xA;&lt;p&gt;This is a quick prototype for Python Hardware Description Language(Ironically, Named PHDL). Basically, I wanted to figure out semantics to specify verilog design programmatically. I started with defining components I need to generate a module.  The snippet below shows &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;Parameter&lt;/code&gt;. I am using python templates to generate fragments of texts after full tree is build.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to read network tunnel packets in verilog using VPI</title>
      <link>/posts/2023/01/how-to-read-network-tunnel-packets-in-verilog-using-vpi/</link>
      <pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/01/how-to-read-network-tunnel-packets-in-verilog-using-vpi/</guid>
      <description>&lt;p&gt;In previous post, I went through example how to get raw IP packets instead of going to link/phy layer. So, in this post, I thought what if i have IP stack in verilog  and i want to get actual IP packets from the interface instead of creating packets myself? why not?! It&amp;rsquo;s slow sunday after all.&lt;/p&gt;&#xA;&lt;p&gt;So, the idea is using VPI to get the packets and pass it back to verilog. Simple, Right?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb - writing toggle coverage collctor in 20 lines</title>
      <link>/posts/2022/12/cocotb-writing-toggle-coverage-collctor-in-20-lines/</link>
      <pubDate>Mon, 26 Dec 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/12/cocotb-writing-toggle-coverage-collctor-in-20-lines/</guid>
      <description>&lt;p&gt;This post is about poor man&amp;rsquo;s toggle coverage collector written purely in cocotb. You may ask why? and i will simply reply by with &amp;ldquo;why not?!&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;First thing is getting design signals through cocotb infrastructure. I know that signals would be of type &lt;code&gt;ModifiableObject&lt;/code&gt; so i use &lt;code&gt;dir&lt;/code&gt; to everything and register monitors on signal objects.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#ff7b72&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;in&lt;/span&gt; dir(tb&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;top):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         o &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; getattr(tb&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;top,i)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt; (isinstance(o, ModifiableObject)):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             S &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; SignalToggleCov(o)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             sigs&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;append(S)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             cocotb&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;start_soon(S&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;signal_mon())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, what is &lt;code&gt;SignalToggleCov&lt;/code&gt;? it&amp;rsquo;s just wrapper over cocotb handle with the &lt;code&gt;signal_mon&lt;/code&gt; waits on signal change and compare old and new values. Not the most efficient but good enough for what i am doing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb Internals - xunit Reporter</title>
      <link>/posts/2022/11/cocotb-internals-xunit-reporter/</link>
      <pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/11/cocotb-internals-xunit-reporter/</guid>
      <description>&lt;p&gt;cocotb generates &lt;code&gt;results.xml&lt;/code&gt; file which xunit format (XML). I didn&amp;rsquo;t look that long for standard xunit schema because it doesn&amp;rsquo;t seem to exist. So, I analysed the &lt;code&gt;xunit_reporter.py&lt;/code&gt; instead. Well, I can&amp;rsquo;t sleep anyway. so why not?!&lt;/p&gt;&#xA;&lt;p&gt;I have to start by saying &amp;ldquo;xml.. ugh!&amp;rdquo;&amp;hellip; writing the IPXACT parser made me hate xml forever.&lt;/p&gt;&#xA;&lt;p&gt;The xunit report from &lt;code&gt;simple_dff&lt;/code&gt; would look like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;testsuites &lt;span style=&#34;color:#79c0ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;results&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;testsuite &lt;span style=&#34;color:#79c0ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;all&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;package&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;all&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;property &lt;span style=&#34;color:#79c0ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;random_seed&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;1667509785&amp;#34;&lt;/span&gt; /&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;testcase &lt;span style=&#34;color:#79c0ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;dff_simple_test&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;classname&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;test_dff&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;~/examples/simple_dff/test_dff.py&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;lineno&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;20&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;0.11331820487976074&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;sim_time_ns&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;106000&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;ratio_time&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;935418.9833175886&amp;#34;&lt;/span&gt; /&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/testsuite&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/testsuites&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;the module uses the python standard xml to create tree and add nodes to it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb Internals - wavedrom dumper</title>
      <link>/posts/2022/11/cocotb-internals-wavedrom-dumper/</link>
      <pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/11/cocotb-internals-wavedrom-dumper/</guid>
      <description>&lt;p&gt;One of the things I love about reading open source is randomly finding unused features. There are many reasons a part of the code is not used, It could can experimental, untested or it is only there because the developer had too much fun writing it :) Anyway, It&amp;rsquo;s interesting when i find these bits..&lt;/p&gt;&#xA;&lt;p&gt;In cocotb,I found built-in utility to generate wavedrom. It&amp;rsquo;s defined in &lt;code&gt;cocotb/wavedrom.py&lt;/code&gt;. From comments, I modified &lt;code&gt;dff_simple_test&lt;/code&gt; to dump &lt;code&gt;dut.q&lt;/code&gt; and &lt;code&gt;dut.d&lt;/code&gt; sampled on &lt;code&gt;dut.clk&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb Internals - python runner</title>
      <link>/posts/2022/10/cocotb-internals-python-runner/</link>
      <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/cocotb-internals-python-runner/</guid>
      <description>&lt;p&gt;In older post, I went through cocotb Makefile and i wished if there python runner. Well, I should have wished for something better because I found there is already a runner. I just didn&amp;rsquo;t see it :)&lt;/p&gt;&#xA;&lt;p&gt;The runner is called as follows to build and run test&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      runner &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; get_runner(sim)()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      runner&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;build(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          verilog_sources&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;verilog_sources, vhdl_sources&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;vhdl_sources, toplevel&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;dff&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      runner&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;test(toplevel&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;dff&amp;#34;&lt;/span&gt;, py_module&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;test_dff&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;build&#34;&gt;&#xA;  Build&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#build&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In &lt;code&gt;runner.py&lt;/code&gt;, &lt;code&gt;get_runner&lt;/code&gt; returns the runner depending on simulator string. In case of icarus, &lt;code&gt;Icarus&lt;/code&gt; is used&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb Deepdive - Edge Trigger and cocotb trampoline</title>
      <link>/posts/2022/10/cocotb-deepdive-edge-trigger-and-cocotb-trampoline/</link>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/cocotb-deepdive-edge-trigger-and-cocotb-trampoline/</guid>
      <description>&lt;p&gt;I wrote a previous post about clock and Timer triggers in cocotb. Considering that all triggers yield to core scheduler, I thought to do another trigger (Posedge) and the trampoline.&lt;/p&gt;&#xA;&lt;h1 id=&#34;class-hierarchy&#34;&gt;&#xA;  Class hierarchy&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#class-hierarchy&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting  with &lt;code&gt;FallingEdge&lt;/code&gt; where it takes the signal handle, In this example, &lt;code&gt;dut.clk&lt;/code&gt; is passed to &lt;code&gt;FallingEdge&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;await&lt;/span&gt; FallingEdge(dut&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;clk)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;FallingEdge&lt;/code&gt; sets the edge type for generic &lt;code&gt;_EdgeBase&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f0883e;font-weight:bold&#34;&gt;FallingEdge&lt;/span&gt;(_EdgeBase):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Fires on the falling edge of *signal*, on a transition from ``1`` to ``0``.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     __slots__ &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; ()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     _edge_type &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;_EdgeBase&lt;/code&gt; defines the &lt;code&gt;prime&lt;/code&gt; that registers &lt;code&gt;callback&lt;/code&gt; with the simulator.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb - start vs start_soon and scheduler implementation</title>
      <link>/posts/2022/10/cocotb-start-vs-start_soon-and-scheduler-implementation/</link>
      <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/cocotb-start-vs-start_soon-and-scheduler-implementation/</guid>
      <description>&lt;p&gt;cocotb provides couple of routines to start concurrent coroutine. The implementation shows that &lt;code&gt;start&lt;/code&gt; calls &lt;code&gt;start_soon&lt;/code&gt; and yield for the forked process to start right now. That&amp;rsquo;s a big deal because &lt;code&gt;start_soon&lt;/code&gt; doesn&amp;rsquo;t star the coro until the parent coro yields control (ie await from something).&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;start_soon&lt;/span&gt;(coro: Union[Task, Coroutine]) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; Task:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    Schedule a coroutine to be run concurrently.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    Note that this is not an async function,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    and the new task will not execute until the calling task yields control.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    .. versionadded:: 1.6.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; scheduler&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;start_soon(coro)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;start&lt;/span&gt;(coro: Union[Task, Coroutine]) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; Task:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    Schedule a coroutine to be run concurrently, then yield control to allow pending tasks to execute.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    The calling task will resume execution before control is returned to the simulator.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    .. versionadded:: 1.6.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    task &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; scheduler&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;start_soon(coro)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;await&lt;/span&gt; cocotb&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;triggers&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;NullTrigger()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; task&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s jump into &lt;code&gt;start_soon&lt;/code&gt; into the scheduler&lt;/p&gt;</description>
    </item>
    <item>
      <title>Portable Stimulus Standard for fun and profit</title>
      <link>/posts/2022/10/portable-stimulus-standard-for-fun-and-profit/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/portable-stimulus-standard-for-fun-and-profit/</guid>
      <description>&lt;p&gt;These are my notes while reading the Portable Stimulus Standard. I will keep updating on the go.&lt;/p&gt;&#xA;&lt;p&gt;The specs define PSS as:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The Portable Test and Stimulus Standard defines a specification for creating a single representation of&#xA;stimulus and test scenarios, usable by a variety of users across different levels of integration under different&#xA;configurations, enabling the generation of different implementations of a scenario that run on a variety of&#xA;execution platforms, including, but not necessarily limited to, simulation, emulation, FPGA prototyping, and&#xA;post-silicon. With this standard, users can specify a set of behaviors once, from which multiple&#xA;implementations may be derived.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wavedrom to SVA generator</title>
      <link>/posts/2022/10/wavedrom-to-sva-generator/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/wavedrom-to-sva-generator/</guid>
      <description>&lt;p&gt;WaveDrom is really great tool to generate timing diagram. It provide nice features to annotate the diagrams with arrows to link between edges. So, it was fun to invent simple convention using WaveDrom to generate simple SVA expressions.&lt;/p&gt;&#xA;&lt;p&gt;I thought to start with 2 assertions:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;-~&amp;gt;&lt;/code&gt; Horizontal arrow between nodes&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-|&amp;gt;&lt;/code&gt; Vertical arrow between nodes&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The first step is defining the nodes to anchor the arrows(Horizontal and  Vertical).&lt;/p&gt;&#xA;&lt;p&gt;The horizontal specifies &lt;code&gt;delayed&lt;/code&gt; between the events.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb Deepdive - Clock and Timer Trigger</title>
      <link>/posts/2022/09/cocotb-deepdive-clock-and-timer-trigger/</link>
      <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/09/cocotb-deepdive-clock-and-timer-trigger/</guid>
      <description>&lt;p&gt;cocob provides a periodic clock class &lt;code&gt;Clock&lt;/code&gt; which depends on &lt;code&gt;Timer&lt;/code&gt; trigger. I will start with an examples of &lt;code&gt;Clock&lt;/code&gt; usage.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clock &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; Clock(dut&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;clk, &lt;span style=&#34;color:#a5d6ff&#34;&gt;10&lt;/span&gt;, units&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;us&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cocotb&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;start_soon(clock&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;start())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note That &lt;code&gt;start_soon&lt;/code&gt; is just starting cocotb coroutine after the current routines yields. Any let&amp;rsquo;s focus on &lt;code&gt;Clock&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;In &lt;code&gt;Clock&lt;/code&gt;, The initialization &lt;code&gt;__init__&lt;/code&gt; sets some local vars (most importantly period and half_period)&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;118&lt;/span&gt;         BaseClock&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;__init__(self, signal)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;126&lt;/span&gt;         self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;period &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; get_sim_steps(period, units)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;127&lt;/span&gt;         self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;half_period &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; get_sim_steps(period &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;2.0&lt;/span&gt;, units)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;128&lt;/span&gt;         self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;frequency &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;1.0&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;/&lt;/span&gt; get_time_from_sim_steps(self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;period, units&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;us&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;130&lt;/span&gt;         self&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;signal &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; signal&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Side note, &lt;code&gt;get_sim_steps&lt;/code&gt; calculates steps from real time passed to &lt;code&gt;Clock&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solving Magic Square using Systemverilog Constraints</title>
      <link>/posts/2022/09/solving-magic-square-using-systemverilog-constraints/</link>
      <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/09/solving-magic-square-using-systemverilog-constraints/</guid>
      <description>&lt;p&gt;This is probably the last post in this series, at least until i find an interesting problem.&lt;/p&gt;&#xA;&lt;p&gt;Magic square is an interesting one problem indeed. From &lt;a href=&#34;https://en.wikipedia.org/wiki/Magic_square&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;In recreational mathematics, a square array of numbers, usually positive integers, is called a magic square if the sums of the numbers in each row, each column, and both main diagonals are the same&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/magic-square.png&#34; alt=&#34;Example image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s interesting because constraints span across rows, columns and diagonals. So, I used the same technique as in the no-three-line problem but extending to diagonals(positive and negative) as well.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solving No-three-in-line puzzle using SV constraints</title>
      <link>/posts/2022/09/solving-no-three-in-line-puzzle-using-sv-constraints/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/09/solving-no-three-in-line-puzzle-using-sv-constraints/</guid>
      <description>&lt;p&gt;Continuing the series on solving puzzles using SV constraints, This post is about no-three-in-line puzzle. From Wiki,&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The no-three-in-line problem in discrete geometry asks how many points can be placed in the NxN grid so that no three points lie on the same line.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;It&amp;rsquo;s nice problem because it&amp;rsquo;s more complicated than n-queen. Why more complicated? mainly because we need to include more than just 2 cells in the constraints. Let&amp;rsquo;s start with the easy ones first.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solving N-Queen using Systemverilog Constraints</title>
      <link>/posts/2022/06/solving-n-queen-using-systemverilog-constraints/</link>
      <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/06/solving-n-queen-using-systemverilog-constraints/</guid>
      <description>&lt;p&gt;This time I will try to solve &lt;a href=&#34;https://en.wikipedia.org/wiki/Eight_queens_puzzle&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;N-Queen&lt;/a&gt; problem using Systemverilog solver constraint.  They really need to add systemverilog to leetcode. Kidding! All the cool kids use python these days :).&lt;/p&gt;&#xA;&lt;p&gt;The Rules are simple:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Queens can&amp;rsquo;t be on the same rows&lt;/li&gt;&#xA;&lt;li&gt;Queens can&amp;rsquo;t be on the same columns&lt;/li&gt;&#xA;&lt;li&gt;Queens can&amp;rsquo;t be on diagonal (this really expands to +ve and -ve diagonals)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// square can be 0 or 1 (1 means queen)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;constraint a01 {foreach(grid[i][j]) grid[i][j] inside {[&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;]};}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// Each row can have one queen&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;constraint rows {foreach(grid[i][j]) grid[i].sum() &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// Each col can have one queen&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;consraint cols {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    foreach(grid[i][j]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        foreach(grid[r]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            (r &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;!=&lt;/span&gt; i) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; (grid[i][j] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;+&lt;/span&gt;grid[r][j] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// Diagnal can have one queen&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// +ve diagonal where col+row is constant&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 0123&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 1234&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 2345&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 3456&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// -ve diagonal where row-col is constant&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 0 -1 -2 -3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 1  0 -1 -2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 2  1  0 -1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// -3 2  1  0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;consraint pdiag {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    foreach(grid[i][j]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        foreach(grid[x][y]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ((i&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;!=&lt;/span&gt;x &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; j&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;!=&lt;/span&gt;y) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ((i &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;+&lt;/span&gt; j) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;==&lt;/span&gt; (x &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;+&lt;/span&gt; y))) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; ((grid[i][j] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;+&lt;/span&gt; grid[x][y])&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;consraint ndiag {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    foreach(grid[i][j]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        foreach(grid[x][y]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ((i&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;!=&lt;/span&gt;x &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; j&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;!=&lt;/span&gt;y) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ((i &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&lt;/span&gt; j) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;==&lt;/span&gt; (x &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&lt;/span&gt; y))) &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; ((grid[i][j] &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;+&lt;/span&gt; grid[x][y])&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Output for 4x4 queen problem can be&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solving Sudoku using Systemverilog Constraints</title>
      <link>/posts/2022/06/solving-sudoku-using-systemverilog-constraints/</link>
      <pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/06/solving-sudoku-using-systemverilog-constraints/</guid>
      <description>&lt;p&gt;In previous post, I used python SAT solver to solve sudoku. Naturally, SV constraints are perfect to solve suduko once we figure out the correct constraints.&lt;/p&gt;&#xA;&lt;p&gt;For Wiki, Sudoku is:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;In classic Sudoku, the objective is to fill a 9 × 9 grid with digits so that each column, each row, and each of the nine 3 × 3 subgrids that compose the grid (also called &amp;ldquo;boxes&amp;rdquo;, &amp;ldquo;blocks&amp;rdquo;, or &amp;ldquo;regions&amp;rdquo;) contain all of the digits from 1 to 9.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Waveforms and WaveJSON - wavedrom and wavedrompy</title>
      <link>/posts/2022/05/waveforms-and-wavejson-wavedrom-and-wavedrompy/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/05/waveforms-and-wavejson-wavedrom-and-wavedrompy/</guid>
      <description>&lt;p&gt;Wavedrom is a tool to render SVG of waveforms using &lt;code&gt;WaveJSON&lt;/code&gt;. &lt;code&gt;WaveJSON&lt;/code&gt; is JSON based format &lt;a href=&#34;https://github.com/wavedrom/schema/blob/master/WaveJSON.md&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docs&lt;/a&gt; to documents signal values with labels and annotations. wavedrom is written in javascript but there is &lt;a href=&#34;https://github.com/wallento/wavedrompy&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wavedrompy&lt;/a&gt; which is the python implementation.&lt;/p&gt;&#xA;&lt;h1 id=&#34;example&#34;&gt;&#xA;  Example&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#example&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;signal&amp;#34;&lt;/span&gt;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;clk&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;wave&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;P............&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;.............&amp;#34;&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;req&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;wave&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;01..0........&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;.a..b.C...D..&amp;#34;&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;ack&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;wave&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;0.....1...0..&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;.A..B.c...d..&amp;#34;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;edge&amp;#34;&lt;/span&gt;   : [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;b-~&amp;gt;c 1:N&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&#x9;  &#x9;&#x9;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;a-~&amp;gt;b 5&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;c-~&amp;gt;d 8&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#x9;&#x9;&#x9;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;a-|&amp;gt;A&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#x9;&#x9;&#x9;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;b-|&amp;gt;B&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#x9;&#x9;&#x9;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;c-|&amp;gt;C&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#x9;&#x9;&#x9;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;d-|&amp;gt;D&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   ],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;hscale&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#7ee787&#34;&gt;&amp;#34;scale&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And output should be something like&lt;/p&gt;</description>
    </item>
    <item>
      <title>My assumptions (pun intended) about SymbiYosys - part1 </title>
      <link>/posts/2022/05/my-assumptions-pun-intended-about-symbiyosys-part1/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/05/my-assumptions-pun-intended-about-symbiyosys-part1/</guid>
      <description>&lt;p&gt;I wanted to try yosys for long time. I played around with SAT solvers before but didn&amp;rsquo;t try full-blown formal proof before. I thought formal is complex to do. Finally, I proved myself wrong (again, pun intended).&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;SymbiYosys&lt;/code&gt; is open source formal engine based on Yosys. It&amp;rsquo;s easy and most importantly it&amp;rsquo;s free.&lt;/p&gt;&#xA;&lt;h1 id=&#34;installation&#34;&gt;&#xA;  Installation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#installation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This is summary for steps in &lt;a href=&#34;https://symbiyosys.readthedocs.io/en/latest/install.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;official doc&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;One caveat, installation requires root to copy scripts. I don&amp;rsquo;t like running script with sudo on my machine, so i used docker and i am good to go.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Systemverilog functional coverage cheat-sheet</title>
      <link>/posts/2022/04/systemverilog-functional-coverage-cheat-sheet/</link>
      <pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/04/systemverilog-functional-coverage-cheat-sheet/</guid>
      <description>&lt;h1 id=&#34;basic&#34;&gt;&#xA;  basic&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#basic&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;enum&lt;/span&gt; {r,d} color,color1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;covergroup cg @(&lt;span style=&#34;color:#ff7b72&#34;&gt;posedge&lt;/span&gt; clk);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; coverpoint color;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp1 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; coverpoint color1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xp &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; cross cp, cp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endgroup&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cg cg_i &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; new;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;embedded-coverpoint&#34;&gt;&#xA;  embedded coverpoint&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#embedded-coverpoint&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class foo;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;enum&lt;/span&gt; {r,d} color,color1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;covergroup cg @(&lt;span style=&#34;color:#ff7b72&#34;&gt;posedge&lt;/span&gt; clk);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; coverpoint color;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp1 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; coverpoint color1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xp &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; cross cp, cp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endgroup&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; new();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cg &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;new; &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// embedded cg above instance is created automatically as cg is defined in class&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;implicit-coverpoint&#34;&gt;&#xA;  implicit coverpoint&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#implicit-coverpoint&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;color1 in cross create a coverpoint there.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Systemverilog constrainted randomization cheat-sheet</title>
      <link>/posts/2022/04/systemverilog-constrainted-randomization-cheat-sheet/</link>
      <pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/04/systemverilog-constrainted-randomization-cheat-sheet/</guid>
      <description>&lt;p&gt;This posts lists small snippets from LRM 1800.&lt;/p&gt;&#xA;&lt;h1 id=&#34;set-membership---inside&#34;&gt;&#xA;  set membership - inside&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#set-membership---inside&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class b;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rand &lt;span style=&#34;color:#ff7b72&#34;&gt;logic&lt;/span&gt; [&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;] x;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constraint x_c1 {x inside {&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;};}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constraint x_c2 {x inside {[&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt;]};}     &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;//&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;constraint x_c2 {&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;!&lt;/span&gt;(x inside {[&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt;]});} &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// negation&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;distribution&#34;&gt;&#xA;  Distribution&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#distribution&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class b;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rand &lt;span style=&#34;color:#ff7b72&#34;&gt;logic&lt;/span&gt; [&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;] x;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constraint x_c1 {x dist {&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt; ,&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;};}    &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 1,2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;constraint x_c1 {x dist {[&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt; ,&lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;};} &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 1, 1, 2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;constraint x_c1 {x dist {[&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;/=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;1&lt;/span&gt; ,&lt;span style=&#34;color:#a5d6ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;2&lt;/span&gt;};} &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// 1/2,1/2,2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;unique&#34;&gt;&#xA;  unique&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#unique&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;unique&lt;/code&gt; says x and y shouldn&amp;rsquo;t take the same value.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb Internals - Cocotb Startup VPI bootstrap to Python</title>
      <link>/posts/2022/01/cocotb-internals-cocotb-startup-vpi-bootstrap-to-python/</link>
      <pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/01/cocotb-internals-cocotb-startup-vpi-bootstrap-to-python/</guid>
      <description>&lt;p&gt;This post complements an earlier post about test discovery. This should close the gap between simulation start and actual cocotb test call.&lt;/p&gt;&#xA;&lt;h1 id=&#34;cocotb-hello-world-in-2-minutes&#34;&gt;&#xA;  cocotb hello-world in 2 minutes&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#cocotb-hello-world-in-2-minutes&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I will write down the basic commands to run the &lt;code&gt;adder&lt;/code&gt; example that ships with cocotb. I am assuming latest &lt;code&gt;iverilog&lt;/code&gt; is installed already.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;virtualenv .venv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source .venv/bin/activate&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd cocotb&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd examples/adder/tests&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will probably see something like this&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reviving old project - IPXACT to UVM RAL Generator - ipxactral</title>
      <link>/posts/2022/01/reviving-old-project-ipxact-to-uvm-ral-generator-ipxactral/</link>
      <pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/01/reviving-old-project-ipxact-to-uvm-ral-generator-ipxactral/</guid>
      <description>&lt;p&gt;This was a weekend project back in 2020 to build IPXACT parser and UVM register Model generator.&#xA;As an example of the lack of imagination at that time, I decided to call it &amp;lsquo;ipaxctral&amp;rsquo;. Creative?! I know!&lt;/p&gt;&#xA;&lt;h1 id=&#34;ipxact&#34;&gt;&#xA;  IPXACT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#ipxact&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I will just copy/paste the wiki here. But full Spec is on Accellera website&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;IP-XACT is an XML format that defines and describes individual, re-usable electronic circuit designs (individual pieces of intellectual property, or IPs) to facilitate their use in creating integrated circuits (i.e. microchips).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocotb Deepdive - Test discovery</title>
      <link>/posts/2021/11/cocotb-deepdive-test-discovery/</link>
      <pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate>
      <guid>/posts/2021/11/cocotb-deepdive-test-discovery/</guid>
      <description>&lt;p&gt;This is a write-up of &lt;code&gt;Cocotb&lt;/code&gt;  test discovery mechanism including the decorator and regression runner infrastructure.&lt;/p&gt;&#xA;&lt;h1 id=&#34;part1-discovery-with-regression-runner&#34;&gt;&#xA;  Part1: Discovery with regression runner&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#part1-discovery-with-regression-runner&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with &lt;code&gt;__init__.py&lt;/code&gt; where &lt;code&gt;from_discovery&lt;/code&gt; is called to lookup the tests.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# start Regression Manager&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;global&lt;/span&gt; regression_manager&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    regression_manager &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; RegressionManager&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;from_discovery(top)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    regression_manager&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;execute()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And &lt;code&gt;from_discorvery&lt;/code&gt; calls &lt;code&gt;_discover_tests&lt;/code&gt; (static class method in  &lt;code&gt;RegressionManager&lt;/code&gt;)&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        tests &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; cls&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;.&lt;/span&gt;_discover_tests()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;_discover_tests&lt;/code&gt; loads test module (or modules) and detects classes derived from &lt;code&gt;Test&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Not the hitchhiker&#39;s guide to UPF</title>
      <link>/posts/2020/12/not-the-hitchhikers-guide-to-upf/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/12/not-the-hitchhikers-guide-to-upf/</guid>
      <description>&lt;p&gt;There are my notes while reading the UPF standard (IEEE Std 1801). The standard is short and concise document and required several re-reads to understand the UPF semantics (Exactly as painful as reading the 1800 LRM).&lt;/p&gt;&#xA;&lt;h1 id=&#34;domains&#34;&gt;&#xA;  Domains&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#domains&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This is summary of section 4.2(just in points)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;domain is a collection of design elements. Unless otherwise specified, elements of a power domain share a&#xA;common primary supply set (see 4.3).&lt;/li&gt;&#xA;&lt;li&gt;primary supply set is implicitly connected to all elements within the domain.&lt;/li&gt;&#xA;&lt;li&gt;The design consists of a hierarchical tree of design elements (logic hierarchy). The logic hierarchy level&#xA;where a power domain is created is called the scope of the power domain.&lt;/li&gt;&#xA;&lt;li&gt;The set of design elements that belong to a power domain are said to be the extent of that power domain.&lt;/li&gt;&#xA;&lt;li&gt;design element can be the scope of multiple power domains, it can be in the extent of one and only one power domain.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;So, each Domain has a scope and extent. And &lt;code&gt;extent&lt;/code&gt; is all elements are under that domain.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Systemverilog Assertions(SVA) - part1 - 5-minute tour</title>
      <link>/posts/2020/12/systemverilog-assertionssva-part1-5-minute-tour/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/12/systemverilog-assertionssva-part1-5-minute-tour/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;There are two types of assertions: immediate and concurrent. I will omit immediate here because they are simple and straightforward for anyone who wrote an assertions in any language.&lt;/p&gt;&#xA;&lt;p&gt;concurrent assertions provide temporal(over time) semantics to check the deign &amp;ldquo;intent&amp;rdquo;. Basically, They describe behavior that spans over time. Unlike immediate assertions, the evaluation model is based on a clock so that a concurrent assertion is evaluated only at the occurrence of a clock tick.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Abridged guide to Systemverilog Functional coverage</title>
      <link>/posts/2020/12/abridged-guide-to-systemverilog-functional-coverage/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/posts/2020/12/abridged-guide-to-systemverilog-functional-coverage/</guid>
      <description>&lt;p&gt;Coverage is big part of &amp;ldquo;CRV&amp;rdquo; (constrained random verification). If randomization answers the question &amp;ldquo;does it work?&amp;rdquo;, Something needs to say when to stop &amp;ldquo;randomizing&amp;rdquo; and answer the question &amp;ldquo;are done?&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;SV Standard define combine several Semantics languages (mixed bag) for OOP, SVA, Randomization and most importantly &lt;code&gt;Functional Coverage&lt;/code&gt;. This is small(or abridged if you like fancy words) intro to Coverage semantics. So, LRM reading is a must to understand all features and details about functional coverage semantics.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
