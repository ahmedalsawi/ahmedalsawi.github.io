<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DV on Techiedeepdive</title>
    <link>/tags/dv/</link>
    <description>Recent content in DV on Techiedeepdive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 10 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/dv/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cocotb Deepdive - Force and release</title>
      <link>/posts/2023/03/cocotb-deepdive-force-and-release/</link>
      <pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/03/cocotb-deepdive-force-and-release/</guid>
      <description>A really nice feature of cocotb is force and release which map to RTL force and release depending on the language (and simulator). This is example how to use Force and Release.
from cocotb.handle import Force, Release, Deposit from cocotb.binary import BinaryValue value = &amp;#34;0&amp;#34; sig = .... sig.value = Force(BinaryValue(len(sig) * value) sig.value = Release() Force and Release are defines in handle.py and defines _as_gpi_args_for.
class _SetValueAction(_SetAction): __slots__ = (&amp;#34;value&amp;#34;,) &amp;#34;&amp;#34;&amp;#34;Base class representing the type of action used while write-accessing a handle with a value.</description>
    </item>
    
    <item>
      <title>Yosys Python bindings pyosys - Hello world and deepdive</title>
      <link>/posts/2023/03/yosys-python-bindings-pyosys-hello-world-and-deepdive/</link>
      <pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/03/yosys-python-bindings-pyosys-hello-world-and-deepdive/</guid>
      <description>I think Yosys is one most important open sources projects ever created, at least for hardware development. It enabled so much research and innovation in FPGA and ASIC area. It did what gcc did for software development.
Building and installation  Link to heading   These are the steps to build yosys with pyosys(python bindings). It&amp;rsquo;s not enabled by default. So you have to pass ENABLE_PYOSYS. Also, I am using virtualenv as I don&amp;rsquo;t want to install anything with root.</description>
    </item>
    
    <item>
      <title>Portable Stimulus Standard - Part 1</title>
      <link>/posts/2023/02/portable-stimulus-standard-part-1/</link>
      <pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/portable-stimulus-standard-part-1/</guid>
      <description>Portable stimulus standard (PSS) is very interesting. That said, It&amp;rsquo;s surprising simple.
These are important abstraction units specific by the spec:
 component action Activity  Component  Link to heading   Component is a way to encapsulate other elements (mainly actions)
 Components serve as a mechanism to encapsulate and reuse elements of functionality in a portable stimulus model. Typically, a model is broken down into parts that correspond to roles played by different actors during test execution.</description>
    </item>
    
    <item>
      <title>Liberty - Hello World</title>
      <link>/posts/2023/02/liberty-hello-world/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/liberty-hello-world/</guid>
      <description>Liberty format defines delays and power of cells. It&amp;rsquo;s important part of ASIC flow for delay calculation and power estimation.
Syntax  Link to heading   Liberty defines 3 types statements
 group statement attribute statement define statement  Group Statements  Link to heading   A group is a named collection of statements that defines a library, a cell, a pin, a timing arc, and so forth. Braces ({}), which are used in pairs, enclose the contents of the group.</description>
    </item>
    
    <item>
      <title>Weekend project - Python Hardware Description Language - PHDL</title>
      <link>/posts/2023/02/weekend-project-python-hardware-description-language-phdl/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/weekend-project-python-hardware-description-language-phdl/</guid>
      <description>It&amp;rsquo;s Saturday night and I have been cleaning up my github repos. And I found this old defunct project I wrote few years ago. So, I thought to write this post about it.
This is a quick prototype for Python Hardware Description Language(Ironically, Named PHDL). Basically, I wanted to figure out semantics to specify verilog design programmatically. I started with defining components I need to generate a module. The snippet below shows Port and Parameter.</description>
    </item>
    
    <item>
      <title>How to read network tunnel packets in verilog using VPI</title>
      <link>/posts/2023/01/how-to-read-network-tunnel-packets-in-verilog-using-vpi/</link>
      <pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/01/how-to-read-network-tunnel-packets-in-verilog-using-vpi/</guid>
      <description>In previous post, I went through example how to get raw IP packets instead of going to link/phy layer. So, in this post, I thought what if i have IP stack in verilog and i want to get actual IP packets from the interface instead of creating packets myself? why not?! It&amp;rsquo;s slow sunday after all.
So, the idea is using VPI to get the packets and pass it back to verilog.</description>
    </item>
    
    <item>
      <title>Cocotb - writing toggle coverage collctor in 20 lines</title>
      <link>/posts/2022/12/cocotb-writing-toggle-coverage-collctor-in-20-lines/</link>
      <pubDate>Mon, 26 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/12/cocotb-writing-toggle-coverage-collctor-in-20-lines/</guid>
      <description>This post is about poor man&amp;rsquo;s toggle coverage collector written purely in cocotb. You may ask why? and i will simply reply by with &amp;ldquo;why not?!&amp;rdquo;.
First thing is getting design signals through cocotb infrastructure. I know that signals would be of type ModifiableObject so i use dir to everything and register monitors on signal objects.
for i in dir(tb.top): o = getattr(tb.top,i) if (isinstance(o, ModifiableObject)): S = SignalToggleCov(o) sigs.append(S) cocotb.</description>
    </item>
    
    <item>
      <title>Cocotb Internals - xunit Reporter</title>
      <link>/posts/2022/11/cocotb-internals-xunit-reporter/</link>
      <pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/cocotb-internals-xunit-reporter/</guid>
      <description>cocotb generates results.xml file which xunit format (XML). I didn&amp;rsquo;t look that long for standard xunit schema because it doesn&amp;rsquo;t seem to exist. So, I analysed the xunit_reporter.py instead. Well, I can&amp;rsquo;t sleep anyway. so why not?!
I have to start by saying &amp;ldquo;xml.. ugh!&amp;rdquo;&amp;hellip; writing the IPXACT parser made me hate xml forever.
The xunit report from simple_dff would look like this:
&amp;lt;testsuites name=&amp;#34;results&amp;#34;&amp;gt; &amp;lt;testsuite name=&amp;#34;all&amp;#34; package=&amp;#34;all&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;random_seed&amp;#34; value=&amp;#34;1667509785&amp;#34; /&amp;gt; &amp;lt;testcase name=&amp;#34;dff_simple_test&amp;#34; classname=&amp;#34;test_dff&amp;#34; file=&amp;#34;~/examples/simple_dff/test_dff.</description>
    </item>
    
    <item>
      <title>Cocotb Internals - wavedrom dumper</title>
      <link>/posts/2022/11/cocotb-internals-wavedrom-dumper/</link>
      <pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/cocotb-internals-wavedrom-dumper/</guid>
      <description>One of the things I love about reading open source is randomly finding unused features. There are many reasons a part of the code is not used, It could can experimental, untested or it is only there because the developer had too much fun writing it :) Anyway, It&amp;rsquo;s interesting when i find these bits..
In cocotb,I found built-in utility to generate wavedrom. It&amp;rsquo;s defined in cocotb/wavedrom.py. From comments, I modified dff_simple_test to dump dut.</description>
    </item>
    
    <item>
      <title>Cocotb Internals - python runner</title>
      <link>/posts/2022/10/cocotb-internals-python-runner/</link>
      <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/cocotb-internals-python-runner/</guid>
      <description>In older post, I went through cocotb Makefile and i wished if there python runner. Well, I should have wished for something better because I found there is already a runner. I just didn&amp;rsquo;t see it :)
The runner is called as follows to build and run test
runner = get_runner(sim)() runner.build( verilog_sources=verilog_sources, vhdl_sources=vhdl_sources, toplevel=&amp;#34;dff&amp;#34; ) runner.test(toplevel=&amp;#34;dff&amp;#34;, py_module=&amp;#34;test_dff&amp;#34;) Build  Link to heading   In runner.py, get_runner returns the runner depending on simulator string.</description>
    </item>
    
    <item>
      <title>Cocotb Deepdive - Edge Trigger and cocotb trampoline</title>
      <link>/posts/2022/10/cocotb-deepdive-edge-trigger-and-cocotb-trampoline/</link>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/cocotb-deepdive-edge-trigger-and-cocotb-trampoline/</guid>
      <description>I wrote a previous post about clock and Timer triggers in cocotb. Considering that all triggers yield to core scheduler, I thought to do another trigger (Posedge) and the trampoline.
Class hierarchy  Link to heading   Starting with FallingEdge where it takes the signal handle, In this example, dut.clk is passed to FallingEdge
await FallingEdge(dut.clk) FallingEdge sets the edge type for generic _EdgeBase
class FallingEdge(_EdgeBase): &amp;#34;&amp;#34;&amp;#34;Fires on the falling edge of *signal*, on a transition from ``1`` to ``0``.</description>
    </item>
    
    <item>
      <title>Cocotb Deepdive - start vs start_soon and scheduler implementation</title>
      <link>/posts/2022/10/cocotb-deepdive-start-vs-start_soon-and-scheduler-implementation/</link>
      <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/cocotb-deepdive-start-vs-start_soon-and-scheduler-implementation/</guid>
      <description>cocotb provides couple of routines to start concurrent coroutine. The implementation shows that start calls start_soon and yield for the forked process to start right now. That&amp;rsquo;s a big deal because start_soon doesn&amp;rsquo;t star the coro until the parent coro yields control (ie await from something).
def start_soon(coro: Union[Task, Coroutine]) -&amp;gt; Task: &amp;#34;&amp;#34;&amp;#34; Schedule a coroutine to be run concurrently. Note that this is not an async function, and the new task will not execute until the calling task yields control.</description>
    </item>
    
    <item>
      <title>Portable Stimulus Standard for fun and profit</title>
      <link>/posts/2022/10/portable-stimulus-standard-for-fun-and-profit/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/portable-stimulus-standard-for-fun-and-profit/</guid>
      <description>These are my notes while reading the Portable Stimulus Standard. I will keep updating on the go.
The specs define PSS as:
 The Portable Test and Stimulus Standard defines a specification for creating a single representation of stimulus and test scenarios, usable by a variety of users across different levels of integration under different configurations, enabling the generation of different implementations of a scenario that run on a variety of execution platforms, including, but not necessarily limited to, simulation, emulation, FPGA prototyping, and post-silicon.</description>
    </item>
    
    <item>
      <title>Wavedrom to SVA generator</title>
      <link>/posts/2022/10/wavedrom-to-sva-generator/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/wavedrom-to-sva-generator/</guid>
      <description>WaveDrom is really great tool to generate timing diagram. It provide nice features to annotate the diagrams with arrows to link between edges. So, it was fun to invent simple convention using WaveDrom to generate simple SVA expressions.
I thought to start with 2 assertions:
 -~&amp;gt; Horizontal arrow between nodes -|&amp;gt; Vertical arrow between nodes  The first step is defining the nodes to anchor the arrows(Horizontal and Vertical).</description>
    </item>
    
    <item>
      <title>Cocotb Deepdive - Clock and Timer Trigger</title>
      <link>/posts/2022/09/cocotb-deepdive-clock-and-timer-trigger/</link>
      <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/cocotb-deepdive-clock-and-timer-trigger/</guid>
      <description>cocob provides a periodic clock class Clock which depends on Timer trigger. I will start with an examples of Clock usage.
clock = Clock(dut.clk, 10, units=&amp;#34;us&amp;#34;) cocotb.start_soon(clock.start()) Note That start_soon is just starting cocotb coroutine after the current routines yields. Any let&amp;rsquo;s focus on Clock
In Clock, The initialization __init__ sets some local vars (most importantly period and half_period)
118 BaseClock.__init__(self, signal) 126 self.period = get_sim_steps(period, units) 127 self.half_period = get_sim_steps(period / 2.</description>
    </item>
    
    <item>
      <title>Solving Magic Square using Systemverilog Constraints</title>
      <link>/posts/2022/09/solving-magic-square-using-systemverilog-constraints/</link>
      <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/solving-magic-square-using-systemverilog-constraints/</guid>
      <description>This is probably the last post in this series, at least until i find an interesting problem.
Magic square is an interesting one problem indeed. From wiki:
 In recreational mathematics, a square array of numbers, usually positive integers, is called a magic square if the sums of the numbers in each row, each column, and both main diagonals are the same
 It&amp;rsquo;s interesting because constraints span across rows, columns and diagonals.</description>
    </item>
    
    <item>
      <title>Solving No-three-in-line puzzle using SV constraints</title>
      <link>/posts/2022/09/solving-no-three-in-line-puzzle-using-sv-constraints/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/solving-no-three-in-line-puzzle-using-sv-constraints/</guid>
      <description>Continuing the series on solving puzzles using SV constraints, This post is about no-three-in-line puzzle. From Wiki,
 The no-three-in-line problem in discrete geometry asks how many points can be placed in the NxN grid so that no three points lie on the same line.
 It&amp;rsquo;s nice problem because it&amp;rsquo;s more complicated than n-queen. Why more complicated? mainly because we need to include more than just 2 cells in the constraints.</description>
    </item>
    
    <item>
      <title>Solving N-Queen using Systemverilog Constraints</title>
      <link>/posts/2022/06/solving-n-queen-using-systemverilog-constraints/</link>
      <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/06/solving-n-queen-using-systemverilog-constraints/</guid>
      <description>This time I will try to solve N-Queen problem using Systemverilog solver constraint. They really need to add systemverilog to leetcode. Kidding! All the cool kids use python these days :).
The Rules are simple:
 Queens can&amp;rsquo;t be on the same rows Queens can&amp;rsquo;t be on the same columns Queens can&amp;rsquo;t be on diagonal (this really expands to +ve and -ve diagonals)  // square can be 0 or 1 (1 means queen) constraint a01 {foreach(grid[i][j]) grid[i][j] inside {[0:1]};} // Each row can have one queen constraint rows {foreach(grid[i][j]) grid[i].</description>
    </item>
    
    <item>
      <title>Solving Sudoku using Systemverilog Constraints</title>
      <link>/posts/2022/06/solving-sudoku-using-systemverilog-constraints/</link>
      <pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/06/solving-sudoku-using-systemverilog-constraints/</guid>
      <description>In previous post, I used python SAT solver to solve sudoku. Naturally, SV constraints are perfect to solve suduko once we figure out the correct constraints.
For Wiki, Sudoku is:
 In classic Sudoku, the objective is to fill a 9 × 9 grid with digits so that each column, each row, and each of the nine 3 × 3 subgrids that compose the grid (also called &amp;ldquo;boxes&amp;rdquo;, &amp;ldquo;blocks&amp;rdquo;, or &amp;ldquo;regions&amp;rdquo;) contain all of the digits from 1 to 9.</description>
    </item>
    
    <item>
      <title>Waveforms and WaveJSON - wavedrom and wavedrompy</title>
      <link>/posts/2022/05/waveforms-and-wavejson-wavedrom-and-wavedrompy/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/05/waveforms-and-wavejson-wavedrom-and-wavedrompy/</guid>
      <description>Wavedrom is a tool to render SVG of waveforms using WaveJSON. WaveJSON is JSON based format docs to documents signal values with labels and annotations. wavedrom is written in javascript but there is wavedrompy which is the python implementation.
Example  Link to heading   { &amp;#34;signal&amp;#34;: [ {&amp;#34;name&amp;#34;: &amp;#34;clk&amp;#34;, &amp;#34;wave&amp;#34;: &amp;#34;P............&amp;#34;, &amp;#34;node&amp;#34;:&amp;#34;.............&amp;#34;}, {&amp;#34;name&amp;#34;: &amp;#34;req&amp;#34;, &amp;#34;wave&amp;#34;: &amp;#34;01..0........&amp;#34;, &amp;#34;node&amp;#34;:&amp;#34;.a..b.C...D..&amp;#34;}, {&amp;#34;name&amp;#34;: &amp;#34;ack&amp;#34;, &amp;#34;wave&amp;#34;: &amp;#34;0.....1...0..&amp;#34;, &amp;#34;node&amp;#34;:&amp;#34;.A..B.c...d..&amp;#34;} ], &amp;#34;edge&amp;#34; : [ &amp;#34;b-~&amp;gt;c 1:N&amp;#34;, &amp;#34;a-~&amp;gt;b 5&amp;#34;, &amp;#34;c-~&amp;gt;d 8&amp;#34;, &amp;#34;a-|&amp;gt;A&amp;#34;, &amp;#34;b-|&amp;gt;B&amp;#34;, &amp;#34;c-|&amp;gt;C&amp;#34;, &amp;#34;d-|&amp;gt;D&amp;#34; ], &amp;#34;config&amp;#34;: {&amp;#34;hscale&amp;#34;:2,&amp;#34;scale&amp;#34;:2} } And output should be something like</description>
    </item>
    
    <item>
      <title>My assumptions (pun intended) about SymbiYosys - part1 </title>
      <link>/posts/2022/05/my-assumptions-pun-intended-about-symbiyosys-part1/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/05/my-assumptions-pun-intended-about-symbiyosys-part1/</guid>
      <description>I wanted to try yosys for long time. I played around with SAT solvers before but didn&amp;rsquo;t try full-blown formal proof before. I thought formal is complex to do. Finally, I proved myself wrong (again, pun intended).
SymbiYosys is open source formal engine based on Yosys. It&amp;rsquo;s easy and most importantly it&amp;rsquo;s free.
Installation  Link to heading   This is summary for steps in official doc.
One caveat, installation requires root to copy scripts.</description>
    </item>
    
    <item>
      <title>Systemverilog functional cheat-sheet</title>
      <link>/posts/2022/04/systemverilog-functional-cheat-sheet/</link>
      <pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/04/systemverilog-functional-cheat-sheet/</guid>
      <description>basic  Link to heading   enum {r,d} color,color1; covergroup cg @(posedge clk); cp : coverpoint color; cp1 : coverpoint color1; xp : cross cp, cp; endgroup cg cg_i = new; embedded coverpoint  Link to heading   class foo; enum {r,d} color,color1; covergroup cg @(posedge clk); cp : coverpoint color; cp1 : coverpoint color1; xp : cross cp, cp; endgroup function new(); cg =new; // embedded cg above instance is created automatically as cg is defined in class endfunction endclass implicit coverpoint  Link to heading   color1 in cross create a coverpoint there.</description>
    </item>
    
    <item>
      <title>Systemverilog constrainted randomization cheat-sheet</title>
      <link>/posts/2022/04/systemverilog-constrainted-randomization-cheat-sheet/</link>
      <pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/04/systemverilog-constrainted-randomization-cheat-sheet/</guid>
      <description>This posts lists small snippets from LRM 1800.
set membership - inside  Link to heading   class b; rand logic [2:0] x; constraint x_c1 {x inside {1,2};} constraint x_c2 {x inside {[0:3]};} // constraint x_c2 {!(x inside {[0:3]});} // negation endclass Distribution  Link to heading   class b; rand logic [2:0] x; constraint x_c1 {x dist {1:=1 ,2 := 2};} // 1,2 constraint x_c1 {x dist {[1:2]:=1 ,3 := 2};} // 1, 1, 2 constraint x_c1 {x dist {[1:2]/=1 ,3 := 2};} // 1/2,1/2,2 endclass unique  Link to heading   unique says x and y shouldn&amp;rsquo;t take the same value.</description>
    </item>
    
    <item>
      <title>Cocotb Internals - Cocotb Startup VPI bootstrap to Python</title>
      <link>/posts/2022/01/cocotb-internals-cocotb-startup-vpi-bootstrap-to-python/</link>
      <pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/01/cocotb-internals-cocotb-startup-vpi-bootstrap-to-python/</guid>
      <description>This post complements an earlier post about test discovery. This should close the gap between simulation start and actual cocotb test call.
cocotb hello-world in 2 minutes  Link to heading   I will write down the basic commands to run the adder example that ships with cocotb. I am assuming latest iverilog is installed already.
virtualenv .venv source .venv/bin/activate cd cocotb pip install . cd examples/adder/tests make You will probably see something like this</description>
    </item>
    
    <item>
      <title>Reviving old project - IPXACT to UVM RAL Generator - ipxactral</title>
      <link>/posts/2022/01/reviving-old-project-ipxact-to-uvm-ral-generator-ipxactral/</link>
      <pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/01/reviving-old-project-ipxact-to-uvm-ral-generator-ipxactral/</guid>
      <description>This was a weekend project back in 2020 to build IPXACT parser and UVM register Model generator. As an example of the lack of imagination at that time, I decided to call it &amp;lsquo;ipaxctral&amp;rsquo;. Creative?! I know!
IPXACT  Link to heading   I will just copy/paste the wiki here. But full Spec is on Accellera website
 IP-XACT is an XML format that defines and describes individual, re-usable electronic circuit designs (individual pieces of intellectual property, or IPs) to facilitate their use in creating integrated circuits (i.</description>
    </item>
    
    <item>
      <title>Cocotb Deepdive - Test discovery</title>
      <link>/posts/2021/11/cocotb-deepdive-test-discovery/</link>
      <pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/11/cocotb-deepdive-test-discovery/</guid>
      <description>This is a write-up of Cocotb test discovery mechanism including the decorator and regression runner infrastructure.
Part1: Discovery with regression runner  Link to heading   Starting with __init__.py where from_discovery is called to lookup the tests.
# start Regression Manager global regression_manager regression_manager = RegressionManager.from_discovery(top) regression_manager.execute() And from_discorvery calls _discover_tests (static class method in RegressionManager)
tests = cls._discover_tests() _discover_tests loads test module (or modules) and detects classes derived from Test</description>
    </item>
    
    <item>
      <title>Not the hitchhiker&#39;s guide to UPF</title>
      <link>/posts/2020/12/not-the-hitchhikers-guide-to-upf/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/12/not-the-hitchhikers-guide-to-upf/</guid>
      <description>There are my notes while reading the UPF standard (IEEE Std 1801). The standard is short and concise document and required several re-reads to understand the UPF semantics (Exactly as painful as reading the 1800 LRM).
Domains  Link to heading   This is summary of section 4.2(just in points)
 domain is a collection of design elements. Unless otherwise specified, elements of a power domain share a common primary supply set (see 4.</description>
    </item>
    
    <item>
      <title>Systemverilog Assertions(SVA) - part1 - 5-minute tour</title>
      <link>/posts/2020/12/systemverilog-assertionssva-part1-5-minute-tour/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/12/systemverilog-assertionssva-part1-5-minute-tour/</guid>
      <description>Introduction  Link to heading   There are two types of assertions: immediate and concurrent. I will omit immediate here because they are simple and straightforward for anyone who wrote an assertions in any language.
concurrent assertions provide temporal(over time) semantics to check the deign &amp;ldquo;intent&amp;rdquo;. Basically, They describe behavior that spans over time. Unlike immediate assertions, the evaluation model is based on a clock so that a concurrent assertion is evaluated only at the occurrence of a clock tick.</description>
    </item>
    
    <item>
      <title>Abridged guide to Systemverilog Functional coverage</title>
      <link>/posts/2020/12/abridged-guide-to-systemverilog-functional-coverage/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/12/abridged-guide-to-systemverilog-functional-coverage/</guid>
      <description>Coverage is big part of &amp;ldquo;CRV&amp;rdquo; (constrained random verification). If randomization answers the question &amp;ldquo;does it work?&amp;rdquo;, Something needs to say when to stop &amp;ldquo;randomizing&amp;rdquo; and answer the question &amp;ldquo;are done?&amp;rdquo;.
SV Standard define combine several Semantics languages (mixed bag) for OOP, SVA, Randomization and most importantly Functional Coverage. This is small(or abridged if you like fancy words) intro to Coverage semantics. So, LRM reading is a must to understand all features and details about functional coverage semantics.</description>
    </item>
    
  </channel>
</rss>
