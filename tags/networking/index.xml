<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Networking on Techiedeepdive</title>
    <link>/tags/networking/</link>
    <description>Recent content in Networking on Techiedeepdive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 03 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/networking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux tap interface - Hello World</title>
      <link>/posts/2022/09/linux-tap-interface-hello-world/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/linux-tap-interface-hello-world/</guid>
      <description>tap network interface is a way to forward data layer packets (ethernet) to user space. it is very similar to tun(actually they share command and /dev). note that run works on network layer (forwards IP packets to user space).
We will use 3 shells in this examples
Shell 1  Link to heading   Create interface and start a ping
sudo ip tuntap add mode tap dev tap0 sudo ip addr add 10.</description>
    </item>
    
    <item>
      <title>POSIX C client and server examples</title>
      <link>/posts/2022/08/posix-c-client-and-server-examples/</link>
      <pubDate>Mon, 08 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/08/posix-c-client-and-server-examples/</guid>
      <description>Funny story, 7 years ago, I accidentally built RCE(remove code execution protocol) between systemverilog and Matlab. The project died long time ago but still one the most fun project i have worked on. At the time, I started with a simple TCP client/server implementation and build binary parsers above it. Anyway,This post is about that simple TCP client/server sockets.
Posix sockets is the de-facto standard for network stack implementation. It evolved from BSD sockets (more details in wiki).</description>
    </item>
    
    <item>
      <title>Network layers dissection using scapy</title>
      <link>/posts/2022/05/network-layers-dissection-using-scapy/</link>
      <pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/05/network-layers-dissection-using-scapy/</guid>
      <description>This post goes through network layers(ethernet, IP, TCP) of a packet using scapy. scapy is a package to create, send and sniff packets. Well, scapy docs say it all:
 Scapy is a Python program that enables the user to send, sniff and dissect and forge network packets. This capability allows construction of tools that can probe, scan or attack networks.
 Packet fields  Link to heading   Starting with IP, RFC describes packets fields as follows</description>
    </item>
    
    <item>
      <title>Linux tun device - Hello World</title>
      <link>/posts/2022/05/linux-tun-device-hello-world/</link>
      <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/05/linux-tun-device-hello-world/</guid>
      <description>tun device is virtual network interface that can send raw IP packets to user space instead of link/phy layer. tun/tap devices are used with IPSec application like OpenVPN. more details in the wiki. This is a write up based on the answer in SO
in this example, we will use 3 to create tun, run application and capture pacp.
Shell 1 - How to create tun device  Link to heading   create the tun0 interface and update the route table for that device.</description>
    </item>
    
  </channel>
</rss>
