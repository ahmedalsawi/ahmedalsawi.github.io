<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Networking on Techiedeepdive</title>
    <link>/tags/networking/</link>
    <description>Recent content in Networking on Techiedeepdive</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 03 Sep 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/networking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux tap interface - Hello World</title>
      <link>/posts/2022/09/linux-tap-interface-hello-world/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/09/linux-tap-interface-hello-world/</guid>
      <description>&lt;p&gt;tap network interface is a way to forward data layer packets (ethernet) to user space. it is very similar to tun(actually they share command and /dev). note that run works on network layer (forwards IP packets to user space).&lt;/p&gt;&#xA;&lt;p&gt;We will use 3 shells in this examples&lt;/p&gt;&#xA;&lt;h1 id=&#34;shell-1&#34;&gt;&#xA;  Shell 1&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#shell-1&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Create interface and start a ping&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ip tuntap add mode tap dev tap0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ip addr add 10.0.3.0/24 dev tap0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ip link set dev tap0 up&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ip route get 10.0.3.50&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ping 10.0.3.30&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;shell-2&#34;&gt;&#xA;  Shell 2&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#shell-2&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Start tcp capture.&lt;/p&gt;</description>
    </item>
    <item>
      <title>POSIX C client and server examples</title>
      <link>/posts/2022/08/posix-c-client-and-server-examples/</link>
      <pubDate>Mon, 08 Aug 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/08/posix-c-client-and-server-examples/</guid>
      <description>&lt;p&gt;Funny story, 7 years ago, I accidentally built RCE(remove code execution protocol) between systemverilog and Matlab. The project died long time ago but still one the most fun project i have worked on. At the time, I started with a simple TCP client/server implementation and build binary parsers above it. Anyway,This post is about that simple TCP client/server sockets.&lt;/p&gt;&#xA;&lt;p&gt;Posix sockets is the de-facto standard for network stack implementation. It evolved from BSD sockets (more details in &lt;a href=&#34;https://en.wikipedia.org/wiki/Berkeley_sockets&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt;). and it&amp;rsquo;s supported with modern operating systems(windows API has it&amp;rsquo;s quirks, DAMN YOU MS)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Network layers dissection using scapy</title>
      <link>/posts/2022/05/network-layers-dissection-using-scapy/</link>
      <pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/05/network-layers-dissection-using-scapy/</guid>
      <description>&lt;p&gt;This post goes through network layers(ethernet, IP, TCP) of a packet using scapy. &lt;code&gt;scapy&lt;/code&gt; is a package to create, send and sniff packets. Well, scapy docs say it all:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Scapy is a Python program that enables the user to send, sniff and dissect and forge network packets. This capability allows construction of tools that can probe, scan or attack networks.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;packet-fields&#34;&gt;&#xA;  Packet fields&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#packet-fields&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Starting with IP, &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc791&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC&lt;/a&gt; describes packets fields  as follows&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux tun device - Hello World</title>
      <link>/posts/2022/05/linux-tun-device-hello-world/</link>
      <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/05/linux-tun-device-hello-world/</guid>
      <description>&lt;p&gt;tun device is virtual network interface that can send raw IP packets to user space  instead of link/phy layer. tun/tap devices are used with IPSec application like OpenVPN. more details in the &lt;a href=&#34;https://en.wikipedia.org/wiki/TUN/TAP&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt;. This is a write up based on the answer in &lt;a href=&#34;https://stackoverflow.com/questions/1003684/how-to-interface-with-the-linux-tun-driver&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SO&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;in this example, we will use 3 to create tun, run application and capture pacp.&lt;/p&gt;&#xA;&lt;h1 id=&#34;shell-1---how-to-create-tun-device&#34;&gt;&#xA;  Shell 1 - How to create tun device&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#shell-1---how-to-create-tun-device&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;create the &lt;code&gt;tun0&lt;/code&gt; interface and update the route table for that device.. and &lt;code&gt;up&lt;/code&gt; to bring up the interface&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
