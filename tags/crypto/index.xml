<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>crypto on Techiedeepdive</title>
    <link>/tags/crypto/</link>
    <description>Recent content in crypto on Techiedeepdive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 09 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/crypto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PKCS 1: RSA Cryptography Specifications</title>
      <link>/posts/2023/04/pkcs-1-rsa-cryptography-specifications/</link>
      <pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/04/pkcs-1-rsa-cryptography-specifications/</guid>
      <description>RSA Signing  Link to heading   RFV8017 defines the standard for PKCS RSA which is an update over 1.5 version from 2003. In that spec, RSASSA-PSS algorithm is defines as:
 Encoding: converting the message to encoded message Covert encoded message to octet string Octet to Integer Sign Octet with private key convert signature from int to Octet  This is the copy from the [RFV8017][spec]
 8.1.1. Signature Generation Operation</description>
    </item>
    
    <item>
      <title>X508 with openssl</title>
      <link>/posts/2023/04/x508-with-openssl/</link>
      <pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/04/x508-with-openssl/</guid>
      <description>x508 defines the format for public key based certificate.
openssl with local CA  Link to heading   In this section, I will use openssl to generates CA cert and key. And use that CA to sign the cert.
# Generate private key openssl genrsa -out server.key 2048 # Generate csr openssl req -new -key server.key -out server.csr # Create CA openssl req -x509 \  -sha256 -days 356 \  -nodes \  -newkey rsa:2048 \  -subj &amp;#34;/CN=demo.</description>
    </item>
    
    <item>
      <title>Crypto - big Picture</title>
      <link>/posts/2023/03/crypto-big-picture/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/03/crypto-big-picture/</guid>
      <description>This post describes the cryptography algorithms and their applications (As I understand them). Over the years, I read bits of &amp;ldquo;Understanding cryptography&amp;rdquo; by Cristof Paar and these are my notes which kinda match the chapters of the book. I also, added links to related posts for each section.
The crypto provides several goals (the technical name is services)
 confidentiality: Stop people from seeing the message Integrity: Make sure the message is correct(no tampering) Message Authentication (The message is coming from the right person) Nonrepudiation: prove that some person signed a message  symmetric algorithms  Link to heading   symmetric algorithms provide confidentiality by using shared key known by the Bob and Alice.</description>
    </item>
    
    <item>
      <title>Crypto - DH key exchange</title>
      <link>/posts/2023/03/crypto-dh-key-exchange/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/03/crypto-dh-key-exchange/</guid>
      <description>In most Crypto algorithms, we assumed the keys are already known by Alice and Bob. But we need a way to exchange the keys on securely first
 symmertic exchange (not common) Asymmetric exchange (very popular)  In Asymmetric exchange, Both sides share public keys and the other side uses the public key and private key, to calculate secret key.
Alice ------ A -----&amp;gt; Bob &amp;lt;-------B------ At Alice Kab = Fun(a, B) At Bob Kab = Fun(b, A) Diffie–Hellman key exchange (DHKE)  Link to heading   The problem how make sure is that Bob is Bob?</description>
    </item>
    
    <item>
      <title>AES-GCM Galois-Counter Mode </title>
      <link>/posts/2023/02/aes-gcm-galois-counter-mode/</link>
      <pubDate>Sat, 18 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/aes-gcm-galois-counter-mode/</guid>
      <description>AES is one most important block ciphers used right now. AES has several modes of operation like CBC, ECB. This post is about GCM (Galois Counter Mode). This is used in several specifications. For example, This is I and E in PCIe IDE :)
GCM provides authenticated encryption. Basically, It keeps things secret and makes sure nobody played around with these secret. I read the NIST document for GCM but I think the best resource I found is paper.</description>
    </item>
    
    <item>
      <title>PCIe IDE - Inteity and Data Encryption</title>
      <link>/posts/2023/02/pcie-ide-inteity-and-data-encryption/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/pcie-ide-inteity-and-data-encryption/</guid>
      <description>The security components are divided 3 components
 SPDM - Security Protocol and Data Model: A standard defined by [2][DMTF] for key management CMA - Component Measurement and Authentication: defined by PCI SIG and It&amp;rsquo;s adaptation of SPDM DOE - Data Object Exchange: defines by PCI SIG, CMA defines DOE to transport SPDM messages between requester and responder for key/cert exchange.  Note that CMA and SPDM are lumped together in the spec as I see it CMA is basically SPDM with extra requirement or rules.</description>
    </item>
    
    <item>
      <title>Root of trust primer</title>
      <link>/posts/2023/02/root-of-trust-primer/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/root-of-trust-primer/</guid>
      <description>NIST defines Root of trust (RoT) as follows
 Roots of trust are highly reliable hardware, firmware, and software components that perform specific, critical security functions. Because roots of trust are inherently trusted, they must be secure by design.
 Basically, It&amp;rsquo;s hardware implementation of security functions like
 key management(generation and storage) cryptographic functions(Block ciphers, Asymmetric key crypto, Hash)  The hardware is designed with security threat model in mind.</description>
    </item>
    
    <item>
      <title>AES Rijndael S-box explained</title>
      <link>/posts/2023/02/aes-rijndael-s-box-explained/</link>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/aes-rijndael-s-box-explained/</guid>
      <description>This post is about Rijndael S-box which the first stage of AES encryption. It&amp;rsquo;s substitution lookup table. AES implementation usually uses pre-computed table. I thought it would be fun to calculate it in python to see it action.
From Wiki
 the input is mapped to its multiplicative inverse in GF(28) = GF(2) [x]/(x8 + x4 + x3 + x + 1), Rijndael&amp;rsquo;s finite field. Zero, as the identity, is mapped to itself.</description>
    </item>
    
    <item>
      <title>elliptical curve crypto key exchange</title>
      <link>/posts/2022/10/elliptical-curve-crypto-key-exchange/</link>
      <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/elliptical-curve-crypto-key-exchange/</guid>
      <description>In previous post, I wrote simple Diffie-Hellman key exchange algorithm, so I wanted to do elliptical curve key exchange as well. Again, The math is there in crypto book. but the algorithm is simple(strangely simple).
The trick is calculating aP where P is point on the elliptical curve that satisfies y^2 = x^3+ a.x + y. The following algorithm calculates the addition (and incase 2 points are the same, it is doubling).</description>
    </item>
    
    <item>
      <title>The diffie hellman Key Exchange</title>
      <link>/posts/2022/10/the-diffie-hellman-key-exchange/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/the-diffie-hellman-key-exchange/</guid>
      <description>This post is about Diffie-Hellman exchange key protocol to be used for symmetric crypto protocol like AES. From Wiki:
 Diffie–Hellman key exchange[nb 1] is a method of securely exchanging cryptographic keys over a public channel and was one of the first public-key protocols as conceived by Ralph Merkle and named after Whitfield Diffie and Martin Hellman.
 Same as RSA, i am not going to go through the math, but the algorithm defines how Alice and Bob create the their keys and eventually create the common key.</description>
    </item>
    
    <item>
      <title>The slowest RSA implementation</title>
      <link>/posts/2022/09/the-slowest-rsa-implementation/</link>
      <pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/the-slowest-rsa-implementation/</guid>
      <description>This post is about the slowest and worst-ish implementation of RSA, RSA is an important public key encryption algorithm. From wiki:
 RSA (Rivest–Shamir–Adleman) is a public-key cryptosystem that is widely used for secure data transmission. It is also one of the oldest. The acronym &amp;ldquo;RSA&amp;rdquo; comes from the surnames of Ron Rivest, Adi Shamir and Leonard Adleman, who publicly described the algorithm in 1977
 The math behind RSA requires more mental calories than i can afford on Saturday morning.</description>
    </item>
    
    <item>
      <title>hash based message authentication HMAC</title>
      <link>/posts/2022/06/hash-based-message-authentication-hmac/</link>
      <pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/06/hash-based-message-authentication-hmac/</guid>
      <description>HMAC(wiki) is hash-based message authentication code which verifies data integrity and authenticity of a message. Basically, it ensure sender is really who they are and whatever they sent wasn&amp;rsquo;t changed.
The algorithm can be found on wiki which is easy enough to write(i am using sha256 from hashlib :)).
function hmac is input: key: Bytes // Array of bytes message: Bytes // Array of bytes to be hashed hash: Function // The hash function to use (e.</description>
    </item>
    
    <item>
      <title>Merkle Tree</title>
      <link>/posts/2020/05/merkle-tree/</link>
      <pubDate>Fri, 29 May 2020 23:04:23 +0200</pubDate>
      
      <guid>/posts/2020/05/merkle-tree/</guid>
      <description>Merkle tree is hash tree (usually binary tree) where each node is hash function of children nodes. i used binary tree with sha256 from hashlib.
Building the tree  Link to heading   i choose to start from the leafs and build up the tree bottom-to-top. _buildTree does that by the recursively building parent nodes. for uniformity, i chose to add padding node to the tree (with empty hash string).</description>
    </item>
    
    <item>
      <title>MD5 python implementation</title>
      <link>/posts/2020/05/md5-python-implementation/</link>
      <pubDate>Fri, 15 May 2020 23:04:19 +0200</pubDate>
      
      <guid>/posts/2020/05/md5-python-implementation/</guid>
      <description>I thought it would be fun to implement MD5 from scratch. it was indeed fun but with few Gotchas. so, after shaking off PTSD, i wrote this post.
The rfc1321 defines MD5 digest algorithm. It also has reference C implementation which is nice (and needlessly complicated). That said, I don&amp;rsquo;t think Python is really the best language for bit manipulations of binary files. but that is part of the fun, right?</description>
    </item>
    
  </channel>
</rss>
