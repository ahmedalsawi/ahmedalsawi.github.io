<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fpga on Techiedeepdive</title>
    <link>/tags/fpga/</link>
    <description>Recent content in fpga on Techiedeepdive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 23 Jul 2020 18:10:09 +0200</lastBuildDate><atom:link href="/tags/fpga/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Yosys Nextpnr Flow</title>
      <link>/posts/2020/07/yosys-nextpnr-flow/</link>
      <pubDate>Thu, 23 Jul 2020 18:10:09 +0200</pubDate>
      
      <guid>/posts/2020/07/yosys-nextpnr-flow/</guid>
      <description>I came across this riscv core. I was more interested in the setup to run Yosys and nextpnr all the way to bitstream.
The default target is board with ICE40 FPGA. These are steps the Makefile used to build bitstream.
Pre-synthesis starting with icepll, it&amp;rsquo;s part of icestorm project to reverse-engineer the binary format for ICE40 fpga.
icepll -q -i 12 -o 48 -m -f pll.sv The generated pll is wrapper around Lattice&amp;rsquo;s SB_PLL40_CORE.</description>
    </item>
    
    <item>
      <title>Xilinx Vivado - Part1 The Flow</title>
      <link>/posts/2020/05/xilinx-vivado-part1-the-flow/</link>
      <pubDate>Thu, 28 May 2020 20:14:08 +0200</pubDate>
      
      <guid>/posts/2020/05/xilinx-vivado-part1-the-flow/</guid>
      <description>This post explains the simple vivado non-project flow for synthesis and implementation. The advantage of non-project mode is full control over the flow and reports generated. Note that non-project runs in-memory (no file generated).So, It does need some extra work to create checkpoints and reports as needed.
Invoking Vivado vivado takes -mode as one of gui, tcl, batch
 gui: default. start vivado in gui mode tcl: starts vivado in tcl (interactive mode) batch: starts vivado and exit after executing commands (regression mode)  Also, -source run.</description>
    </item>
    
    <item>
      <title>Building OSS FPGA Toolchain</title>
      <link>/posts/2020/02/building-oss-fpga-toolchain/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/02/building-oss-fpga-toolchain/</guid>
      <description>Introduction I used yosys occasionally but never tried the whole yosys-nexpnr-icestorm toolchain. This post documents the steps to compile the toolchain. Spoiler alert, the order is important.
Setup export BASRPATH=$PWD export OSSFPGA=$BASRPATH/opt export MAKEPARALLEL=&amp;#34;-j4&amp;#34; sudo apt-get install build-essential clang bison flex \  libreadline-dev gawk tcl-dev libffi-dev git \  graphviz xdot pkg-config python3 libboost-system-dev \  libboost-python-dev libboost-filesystem-dev zlib1g-dev \  libboost-program-options-dev libboost-thread-dev libboost-iostreams-dev \  libftdi-dev libeigen3-dev qtbase5-dev Building Yosys git clone https://github.</description>
    </item>
    
  </channel>
</rss>
