<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Riscv on Techiedeepdive</title>
    <link>/tags/riscv/</link>
    <description>Recent content in Riscv on Techiedeepdive</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 13 Nov 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/riscv/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>force-riscv hello world</title>
      <link>/posts/2022/11/force-riscv-hello-world/</link>
      <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/11/force-riscv-hello-world/</guid>
      <description>&lt;p&gt;This post is &lt;a href=&#34;https://github.com/openhwgroup/force-riscv&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;force-riscv&lt;/a&gt; which is framework to generate random sequences of riscv instructions. I still need to dig deeper into the docs/code to understand the full feature list, but it seems very powerful with option to constraint the generation.&lt;/p&gt;&#xA;&lt;h1 id=&#34;building&#34;&gt;&#xA;  Building&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#building&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Building force-riscv as simple as calling make&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/openhwgroup/force-riscv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd force-riscv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source setenv.bash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;smoke-test&#34;&gt;&#xA;  Smoke test&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#smoke-test&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In &lt;code&gt;README.md&lt;/code&gt;, A smoke test is mentioned as first example to run&lt;/p&gt;</description>
    </item>
    <item>
      <title>RISCV riscv python model deepdive</title>
      <link>/posts/2022/05/riscv-riscv-python-model-deepdive/</link>
      <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/05/riscv-riscv-python-model-deepdive/</guid>
      <description>&lt;p&gt;This post is about &lt;a href=&#34;https://github.com/wallento/riscv-python-model&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;riscv python model&lt;/a&gt;. The doc describes it as:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;This is a python model of the RISC-V ISA. It is intended to be a resource for Python-based automated testing and verification. It is under development and not very useful yet, but can be used to generate random assembler codeThis is a python model of the RISC-V ISA. It is intended to be a resource for Python-based automated testing and verification. It is under development and not very useful yet, but can be used to generate random assembler code&lt;/p&gt;</description>
    </item>
    <item>
      <title>riscv picorv32 hello demystified</title>
      <link>/posts/2022/01/riscv-picorv32-hello-demystified/</link>
      <pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/01/riscv-picorv32-hello-demystified/</guid>
      <description>&lt;p&gt;This is a post about hello test in &lt;a href=&#34;https://github.com/YosysHQ/picorv32&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;piscorv32&lt;/a&gt;. I am not going to dig deep into picorv32 itself. Just the firmware.&lt;/p&gt;&#xA;&lt;h1 id=&#34;where-to-start&#34;&gt;&#xA;  Where to start&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#where-to-start&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;As usual, It makes sense to start with &lt;code&gt;Makefile&lt;/code&gt; and work backward.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make -n test&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After removing verilog related commands and tests, We have the following commands for the firmware.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32imc -o firmware/start.o firmware/start.S&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32ic -Os --std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/irq.o firmware/irq.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32ic -Os --std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/print.o firmware/print.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32ic -Os --std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/hello.o firmware/hello.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32ic -Os --std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/sieve.o firmware/sieve.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32ic -Os --std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/multest.o firmware/multest.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32ic -Os --std&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic  -ffreestanding -nostdlib -o firmware/stats.o firmware/stats.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-gcc -Os -mabi&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;ilp32 -march&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;rv32imc -ffreestanding -nostdlib -o firmware/firmware.elf &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;&#x9;-Wl,--build-id&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;none,-Bstatic,-T,firmware/sections.lds,-Map,firmware/firmware.map,--strip-debug &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;&#x9;firmware/start.o firmware/irq.o firmware/print.o firmware/hello.o firmware/sieve.o firmware/multest.o firmware/stats.o -lgcc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/riscv32i/bin/riscv32-unknown-elf-objcopy -O binary firmware/firmware.elf firmware/firmware.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 firmware/makehex.py firmware/firmware.bin &lt;span style=&#34;color:#a5d6ff&#34;&gt;32768&lt;/span&gt; &amp;gt; firmware/firmware.hex&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;startup-assembly&#34;&gt;&#xA;  Startup assembly&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#startup-assembly&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Probably the most important part(beside linking):&lt;/p&gt;</description>
    </item>
    <item>
      <title>RISCV Memory Consistency Model Basics</title>
      <link>/posts/2022/01/riscv-memory-consistency-model-basics/</link>
      <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/01/riscv-memory-consistency-model-basics/</guid>
      <description>&lt;p&gt;The memory consistency model is an important (and complicated) topic that defines how memory loads/stores work in multi-thread(Hart in rv lingo) environment.&#xA;More detailed explanation of memory consistency can be found in &lt;a href=&#34;https://www.morganclaypool.com/doi/abs/10.2200/S00346ED1V01Y201104CAC016&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A Primer on Memory Consitency and Cache Coherency&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;There are several chapters in the spec related to memory model. Listed here for reference&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Chapter 2: &lt;code&gt;Fence&lt;/code&gt; instruction&lt;/li&gt;&#xA;&lt;li&gt;Chapter 3: Zifencei Instruction-Fetch Fence&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Chapter 8: A Standard Extension for Atomic Instructions&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Chapter 14: RVWMO Memory Consistency Modeal&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;Chapter 22: Zam Standard Extension for Misaligned Atomics&lt;/li&gt;&#xA;&lt;li&gt;Chapter 23: Ztso Standard Extension for Total Store Ordering&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;rvwmo&#34;&gt;&#xA;  RVWMO&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#rvwmo&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The following sections define instructions used for explicit sync of RISCV memory model &lt;code&gt;RVWMO&lt;/code&gt;. Chapter 14 defines &lt;code&gt;RVWMO&lt;/code&gt; formal specifications in detail. I will put couple of important snippets here but probably needs a separate post.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RISCV Privileged Specification and Linux Kernel Deep-ish Dive</title>
      <link>/posts/2022/01/riscv-privileged-specification-and-linux-kernel-deep-ish-dive/</link>
      <pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/01/riscv-privileged-specification-and-linux-kernel-deep-ish-dive/</guid>
      <description>&lt;p&gt;This is a deep-ish dive into the riscv privileged &lt;a href=&#34;https://github.com/riscv/riscv-isa-manual/releases/download/Priv-v1.12/riscv-privileged-20211203.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;specifications&lt;/a&gt; and Linux kernel syscall implementation.&lt;/p&gt;&#xA;&lt;h1 id=&#34;privileged-specification-tour&#34;&gt;&#xA;  Privileged specification tour&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#privileged-specification-tour&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;To keep it short, There are 3 privilege levels&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;U (user) : 0&lt;/li&gt;&#xA;&lt;li&gt;S (supervisor) : 1&lt;/li&gt;&#xA;&lt;li&gt;Reserved&lt;/li&gt;&#xA;&lt;li&gt;M (Machine) : 3&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;And specs describes them as&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;At any time, a RISC-V hardware thread (hart) is running at some privilege level encoded as a mode in one or more CSRs (control and status registers).&lt;/p&gt;</description>
    </item>
    <item>
      <title>How much riscv verilog I can write in 5 hours</title>
      <link>/posts/2022/01/how-much-riscv-verilog-i-can-write-in-5-hours/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/01/how-much-riscv-verilog-i-can-write-in-5-hours/</guid>
      <description>&lt;p&gt;While I was waiting for my weekly chicken roast to cook, I had this really bad idea for a challenge. &lt;strong&gt;how much riscv verilog i can write from scratch in the next 2 hours until the chicken is done?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;So, yeah that&amp;rsquo;s what I did on the last day of new year vacation.&lt;/p&gt;&#xA;&lt;h1 id=&#34;2-hours-to-v-hours&#34;&gt;&#xA;  2 hours to V hours&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#2-hours-to-v-hours&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I thought to start with a skeleton for single-cycle (See [H and H][1]) and try to build the blocks bottom up style.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RISCV Simple Assembler - Part1</title>
      <link>/posts/2021/12/riscv-simple-assembler-part1/</link>
      <pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate>
      <guid>/posts/2021/12/riscv-simple-assembler-part1/</guid>
      <description>&lt;p&gt;This is write-up about a &lt;em&gt;work-in-progress&lt;/em&gt; simple riscv assembler in python. The riscv ISA is simple enough to implement in few 100s LOC. Besides,it looked like a good enough project for nice evening.&lt;/p&gt;&#xA;&lt;p&gt;The following items are on my todo list:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;define all rv32i instructions&lt;/li&gt;&#xA;&lt;li&gt;handle the ABI naming convention(a0-a31, sp, etc)&lt;/li&gt;&#xA;&lt;li&gt;handle pseudoinstruction defined in chapter 25&lt;/li&gt;&#xA;&lt;li&gt;write tkinter gui for the assembler&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;riscv-rv32i-isa&#34;&gt;&#xA;  riscv rv32i ISA&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#riscv-rv32i-isa&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;It&amp;rsquo;s risc isa (duh!) with 32bit length. from Chapter 2:&lt;/p&gt;</description>
    </item>
    <item>
      <title>RISCV Assembly rv64</title>
      <link>/posts/2021/12/riscv-assembly-rv64/</link>
      <pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate>
      <guid>/posts/2021/12/riscv-assembly-rv64/</guid>
      <description>&lt;p&gt;This is a write-up about riscv rv64 and  the assembly generated by GCC.&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-example&#34;&gt;&#xA;  The example&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-example&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I am using a pre-built rv64 toolchain from the package &lt;code&gt;gcc-riscv64-linux-gnu&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt install gcc-riscv64-linux-gnu&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;riscv64-linux-gnu-gcc -v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The example i am using is very simple. Basically setting a variable on the stack (will see later why we need this) then return that variable.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#d2a8ff;font-weight:bold&#34;&gt;main&lt;/span&gt;(){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;int&lt;/span&gt; x;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; x;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;riscv64-linux-gnu-gcc&lt;/code&gt; is used with a twist. This toolchain is using the compressed instructions. To see the full 32 bits, i had to pass the following options to gcc&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
