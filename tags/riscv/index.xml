<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>riscv on Techiedeepdive</title>
    <link>/tags/riscv/</link>
    <description>Recent content in riscv on Techiedeepdive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 13 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/riscv/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>force-riscv hello world</title>
      <link>/posts/2022/11/force-riscv-hello-world/</link>
      <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/11/force-riscv-hello-world/</guid>
      <description>This post is force-riscv which is framework to generate random sequences of riscv instructions. I still need to dig deeper into the docs/code to understand the full feature list, but it seems very powerful with option to constraint the generation.
Building  Link to heading   Building force-riscv as simple as calling make
git clone https://github.com/openhwgroup/force-riscv cd force-riscv source setenv.bash make Smoke test  Link to heading   In README.</description>
    </item>
    
    <item>
      <title>RISCV riscv python model deepdive</title>
      <link>/posts/2022/05/riscv-riscv-python-model-deepdive/</link>
      <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/05/riscv-riscv-python-model-deepdive/</guid>
      <description>This post is about riscv python model. The doc describes it as:
 This is a python model of the RISC-V ISA. It is intended to be a resource for Python-based automated testing and verification. It is under development and not very useful yet, but can be used to generate random assembler codeThis is a python model of the RISC-V ISA. It is intended to be a resource for Python-based automated testing and verification.</description>
    </item>
    
    <item>
      <title>riscv picorv32 hello demystified</title>
      <link>/posts/2022/01/riscv-picorv32-hello-demystified/</link>
      <pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/01/riscv-picorv32-hello-demystified/</guid>
      <description>This is a post about hello test in piscorv32. I am not going to dig deep into picorv32 itself. Just the firmware.
Where to start  Link to heading   As usual, It makes sense to start with Makefile and work backward.
make -n test After removing verilog related commands and tests, We have the following commands for the firmware.
/opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi=ilp32 -march=rv32imc -o firmware/start.o firmware/start.S /opt/riscv32i/bin/riscv32-unknown-elf-gcc -c -mabi=ilp32 -march=rv32ic -Os --std=c99 -Werror -Wall -Wextra -Wshadow -Wundef -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes -pedantic -ffreestanding -nostdlib -o firmware/irq.</description>
    </item>
    
    <item>
      <title>RISCV Memory Consistency Model Basics</title>
      <link>/posts/2022/01/riscv-memory-consistency-model-basics/</link>
      <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/01/riscv-memory-consistency-model-basics/</guid>
      <description>The memory consistency model is an important (and complicated) topic that defines how memory loads/stores work in multi-thread(Hart in rv lingo) environment. More detailed explanation of memory consistency can be found in A Primer on Memory Consitency and Cache Coherency
There are several chapters in the spec related to memory model. Listed here for reference
 Chapter 2: Fence instruction Chapter 3: Zifencei Instruction-Fetch Fence Chapter 8: A Standard Extension for Atomic Instructions Chapter 14: RVWMO Memory Consistency Modeal Chapter 22: Zam Standard Extension for Misaligned Atomics Chapter 23: Ztso Standard Extension for Total Store Ordering  RVWMO  Link to heading   The following sections define instructions used for explicit sync of RISCV memory model RVWMO.</description>
    </item>
    
    <item>
      <title>RISCV Privileged Specification and Linux Kernel Deep-ish Dive</title>
      <link>/posts/2022/01/riscv-privileged-specification-and-linux-kernel-deep-ish-dive/</link>
      <pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/01/riscv-privileged-specification-and-linux-kernel-deep-ish-dive/</guid>
      <description>This is a deep-ish dive into the riscv privileged specifications and Linux kernel syscall implementation.
Privileged specification tour  Link to heading   To keep it short, There are 3 privilege levels
 U (user) : 0 S (supervisor) : 1 Reserved M (Machine) : 3  And specs describes them as
 At any time, a RISC-V hardware thread (hart) is running at some privilege level encoded as a mode in one or more CSRs (control and status registers).</description>
    </item>
    
    <item>
      <title>How much riscv verilog I can write in 5 hours</title>
      <link>/posts/2022/01/how-much-riscv-verilog-i-can-write-in-5-hours/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/01/how-much-riscv-verilog-i-can-write-in-5-hours/</guid>
      <description>While I was waiting for my weekly chicken roast to cook, I had this really bad idea for a challenge. how much riscv verilog i can write from scratch in the next 2 hours until the chicken is done?
So, yeah that&amp;rsquo;s what I did on the last day of new year vacation.
2 hours to V hours  Link to heading   I thought to start with a skeleton for single-cycle (See [H and H][1]) and try to build the blocks bottom up style.</description>
    </item>
    
    <item>
      <title>RISCV Simple Assembler - Part1</title>
      <link>/posts/2021/12/riscv-simple-assembler-part1/</link>
      <pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/12/riscv-simple-assembler-part1/</guid>
      <description>This is write-up about a work-in-progress simple riscv assembler in python. The riscv ISA is simple enough to implement in few 100s LOC. Besides,it looked like a good enough project for nice evening.
The following items are on my todo list:
 define all rv32i instructions handle the ABI naming convention(a0-a31, sp, etc) handle pseudoinstruction defined in chapter 25 write tkinter gui for the assembler  riscv rv32i ISA  Link to heading   It&amp;rsquo;s risc isa (duh!</description>
    </item>
    
    <item>
      <title>RISCV Assembly rv64</title>
      <link>/posts/2021/12/riscv-assembly-rv64/</link>
      <pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/12/riscv-assembly-rv64/</guid>
      <description>This is a write-up about riscv rv64 and the assembly generated by GCC.
The example  Link to heading   I am using a pre-built rv64 toolchain from the package gcc-riscv64-linux-gnu
apt install gcc-riscv64-linux-gnu riscv64-linux-gnu-gcc -v The example i am using is very simple. Basically setting a variable on the stack (will see later why we need this) then return that variable.
int main(){ int x; x = 0; return x; } riscv64-linux-gnu-gcc is used with a twist.</description>
    </item>
    
  </channel>
</rss>
