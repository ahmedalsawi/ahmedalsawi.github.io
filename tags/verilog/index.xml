<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Verilog on Techiedeepdive</title>
    <link>/tags/verilog/</link>
    <description>Recent content in Verilog on Techiedeepdive</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 25 Aug 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/verilog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Poor man&#39;s RTL development setup with yosys</title>
      <link>/posts/2025/08/poor-mans-rtl-development-setup-with-yosys/</link>
      <pubDate>Mon, 25 Aug 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/08/poor-mans-rtl-development-setup-with-yosys/</guid>
      <description>&lt;p&gt;This is a quick post about the setup I am using for writing RTL and seeing the synthesis output in real time. This is kind of a poor man&amp;rsquo;s IDE by opening multiple VS Code files and rerunning the commands automatically.&lt;/p&gt;&#xA;&lt;p&gt;This is also a good chance to talk more about yosys flow and commands. Starting with my go-to &lt;code&gt;Makefile&lt;/code&gt; to play with yosys:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;all:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    yosys synth.ys&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    netlistsvg  top.vis.json -o top.vis.svg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    convert top.vis.svg top.vis.png&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    netlistsvg  top.synth.json -o top.synth.svg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    convert top.synth.svg top.synth.png&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    netlistsvg  top.pdk.json -o top.pdk.svg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    convert top.pdk.svg top.pdk.png&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;yosys-script&#34;&gt;&#xA;  Yosys Script&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#yosys-script&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The first thing is reading the Verilog code with &lt;code&gt;read_verilog&lt;/code&gt;. For this setup, I will use one file called &lt;code&gt;top.v&lt;/code&gt; to make my life easier.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Weekend project - Python Hardware Description Language - PHDL</title>
      <link>/posts/2023/02/weekend-project-python-hardware-description-language-phdl/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/weekend-project-python-hardware-description-language-phdl/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s Saturday night and I have been cleaning up my github repos. And I found this old defunct project I wrote few years ago. So, I thought to write this post about it.&lt;/p&gt;&#xA;&lt;p&gt;This is a quick prototype for Python Hardware Description Language(Ironically, Named PHDL). Basically, I wanted to figure out semantics to specify verilog design programmatically. I started with defining components I need to generate a module.  The snippet below shows &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;Parameter&lt;/code&gt;. I am using python templates to generate fragments of texts after full tree is build.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to read network tunnel packets in verilog using VPI</title>
      <link>/posts/2023/01/how-to-read-network-tunnel-packets-in-verilog-using-vpi/</link>
      <pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/01/how-to-read-network-tunnel-packets-in-verilog-using-vpi/</guid>
      <description>&lt;p&gt;In previous post, I went through example how to get raw IP packets instead of going to link/phy layer. So, in this post, I thought what if i have IP stack in verilog  and i want to get actual IP packets from the interface instead of creating packets myself? why not?! It&amp;rsquo;s slow sunday after all.&lt;/p&gt;&#xA;&lt;p&gt;So, the idea is using VPI to get the packets and pass it back to verilog. Simple, Right?&lt;/p&gt;</description>
    </item>
    <item>
      <title>verilator - Hello World and Beyond</title>
      <link>/posts/2022/10/verilator-hello-world-and-beyond/</link>
      <pubDate>Sun, 23 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/verilator-hello-world-and-beyond/</guid>
      <description>&lt;p&gt;verilator is, well, I will just paste the wiki one-liner here&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Verilator is a free and open-source software tool which converts Verilog to a cycle-accurate behavioral model in C++ or SystemC.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Similar to iverilog, It compiles verilog to a different language but verilator generates C++ not the iverilog-specific commands.&lt;/p&gt;&#xA;&lt;h1 id=&#34;installation&#34;&gt;&#xA;  Installation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#installation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/verilator/verilator&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;autoconf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./configure --prefix&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;pwd&lt;span style=&#34;color:#a5d6ff&#34;&gt;`&lt;/span&gt;/build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or we can use the pre-built packages. Whatever easier!&lt;/p&gt;</description>
    </item>
    <item>
      <title>How much riscv verilog I can write in 5 hours</title>
      <link>/posts/2022/01/how-much-riscv-verilog-i-can-write-in-5-hours/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/01/how-much-riscv-verilog-i-can-write-in-5-hours/</guid>
      <description>&lt;p&gt;While I was waiting for my weekly chicken roast to cook, I had this really bad idea for a challenge. &lt;strong&gt;how much riscv verilog i can write from scratch in the next 2 hours until the chicken is done?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;So, yeah that&amp;rsquo;s what I did on the last day of new year vacation.&lt;/p&gt;&#xA;&lt;h1 id=&#34;2-hours-to-v-hours&#34;&gt;&#xA;  2 hours to V hours&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#2-hours-to-v-hours&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;I thought to start with a skeleton for single-cycle (See [H and H][1]) and try to build the blocks bottom up style.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
