<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RTL on Techiedeepdive</title>
    <link>/tags/rtl/</link>
    <description>Recent content in RTL on Techiedeepdive</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 25 Aug 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/rtl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The minimalist RTL development setup with yosys</title>
      <link>/posts/2025/08/the-minimalist-rtl-development-setup-with-yosys/</link>
      <pubDate>Mon, 25 Aug 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/08/the-minimalist-rtl-development-setup-with-yosys/</guid>
      <description>&lt;p&gt;This is a quick post about the setup I am using for writing RTL and seeing the synthesis output in real time. This is also a good chance to talk more about yosys flow and commands. Starting with my go-to &lt;code&gt;Makefile&lt;/code&gt; to play with yosys:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;all:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    yosys synth.ys&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    netlistsvg  top.vis.json -o top.vis.svg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    convert top.vis.svg top.vis.png&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    netlistsvg  top.synth.json -o top.synth.svg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    convert top.synth.svg top.synth.png&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    netlistsvg  top.pdk.json -o top.pdk.svg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    convert top.pdk.svg top.pdk.png&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;yosys-script&#34;&gt;&#xA;  Yosys Script&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#yosys-script&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The first thing is reading the Verilog code with &lt;code&gt;read_verilog&lt;/code&gt;. For this setup, I will use one file called &lt;code&gt;top.v&lt;/code&gt; to make my life easier.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
