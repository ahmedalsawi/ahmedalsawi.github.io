<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cryptography on Techiedeepdive</title>
    <link>/tags/cryptography/</link>
    <description>Recent content in Cryptography on Techiedeepdive</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 05 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/cryptography/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Crypto - SHA Hashing</title>
      <link>/posts/2025/04/crypto-sha-hashing/</link>
      <pubDate>Sat, 05 Apr 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/04/crypto-sha-hashing/</guid>
      <description>&lt;p&gt;SHA256 is hashing function used by many internet standard such as TLS and SSL. form &lt;a href=&#34;https://en.wikipedia.org/wiki/SHA-2&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt;, It one of SHA2 family of hash functions&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;SHA-2 includes significant changes from its predecessor, SHA-1. The SHA-2 family consists of six hash functions with digests (hash values) that are 224, 256, 384 or 512 bits:[5] SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, SHA-512/256. SHA-256 and SHA-512 are hash functions whose digests are eight 32-bit and 64-bit words, respectively. They use different shift amounts and additive constants, but their structures are otherwise virtually identical, differing only in the number of rounds. SHA-224 and SHA-384 are truncated versions of SHA-256 and SHA-512 respectively, computed with different initial values. SHA-512/224 and SHA-512/256 are also truncated versions of SHA-512, but the initial values are generated using the method described in Federal Information Processing Standards (FIPS) PUB 180-4.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Galois Fields arithmetic - Hello World</title>
      <link>/posts/2025/03/galois-fields-arithmetic-hello-world/</link>
      <pubDate>Sat, 29 Mar 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/03/galois-fields-arithmetic-hello-world/</guid>
      <description>&lt;p&gt;This is short intro to &lt;code&gt;Galois fields&lt;/code&gt; which is important for cryptography. For example, AES uses in section 4&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;each byte in the state array is interpreted as one of the 256 elements of a fnite feld, also known as a Galois Field, denoted by GF(28). 1&lt;/p&gt;&#xA;&lt;p&gt;In order to defne addition and multiplication in GF(28), each byte {b7 b6 b5 b4 b3 b2 b1 b0} is interpreted as a polynomial, denoted by b(x), as follows:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blake2 Cryptographic Hash and Message Authentication Code</title>
      <link>/posts/2025/02/blake2-cryptographic-hash-and-message-authentication-code/</link>
      <pubDate>Sun, 02 Feb 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/02/blake2-cryptographic-hash-and-message-authentication-code/</guid>
      <description>&lt;p&gt;This is a quick write-up about blake2b which defined as follows (from &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7693&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The BLAKE2 cryptographic hash function [BLAKE2] was designed by Jean-&#xA;Philippe Aumasson, Samuel Neves, Zooko Wilcox-O&amp;rsquo;Hearn, and Christian&#xA;Winnerlein.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;And from &lt;a href=&#34;https://en.wikipedia.org/wiki/BLAKE_%28hash_function%29&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2&lt;/a&gt;, We get the definition from Blake&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;BLAKE is a cryptographic hash function based on Daniel J. Bernstein&amp;rsquo;s ChaCha stream cipher, but a permuted copy of the input block, XORed with round constants, is added before each ChaCha round. Like SHA-2, there are two variants differing in the word size.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ChaCha20 Stream Cipher</title>
      <link>/posts/2025/02/chacha20-stream-cipher/</link>
      <pubDate>Sun, 02 Feb 2025 00:00:00 +0000</pubDate>
      <guid>/posts/2025/02/chacha20-stream-cipher/</guid>
      <description>&lt;p&gt;I am here because I was looking into Blake which is a variant of &lt;a href=&#34;https://en.wikipedia.org/wiki/BLAKE_%28hash_function%29&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ChaCha&lt;/a&gt; stream cipher. I guess we will start with &lt;code&gt;ChaCha&lt;/code&gt; first.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;BLAKE is a cryptographic hash function based on Daniel J. Bernstein&amp;rsquo;s ChaCha stream cipher, but a permuted copy of the input block, XORed with round constants, is added before each ChaCha round.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;chachar-and-salsa20&#34;&gt;&#xA;  ChaChar and Salsa20&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#chachar-and-salsa20&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;According to &lt;a href=&#34;https://en.wikipedia.org/wiki/Salsa20#ChaCha_variant&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Salsa20&lt;/a&gt;, Chacha is a variant of cipher called Salsa20.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PKCS 1: RSA Cryptography Specifications</title>
      <link>/posts/2023/04/pkcs-1-rsa-cryptography-specifications/</link>
      <pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/04/pkcs-1-rsa-cryptography-specifications/</guid>
      <description>&lt;h1 id=&#34;rsa-signing&#34;&gt;&#xA;  RSA Signing&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#rsa-signing&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc8017&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFV8017&lt;/a&gt; defines the standard for PKCS RSA which is an update over 1.5 version from 2003. In that spec, &lt;code&gt;RSASSA-PSS&lt;/code&gt; algorithm is defines as:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Encoding: converting the message to encoded message&lt;/li&gt;&#xA;&lt;li&gt;Covert encoded message to octet string&lt;/li&gt;&#xA;&lt;li&gt;Octet to Integer&lt;/li&gt;&#xA;&lt;li&gt;Sign Octet with private key&lt;/li&gt;&#xA;&lt;li&gt;convert signature from int to Octet&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This is the copy from the [RFV8017][spec]&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;8.1.1.  Signature Generation Operation&lt;/p&gt;</description>
    </item>
    <item>
      <title>X509 with openssl</title>
      <link>/posts/2023/04/x509-with-openssl/</link>
      <pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/04/x509-with-openssl/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc5280&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;x509&lt;/a&gt; defines the format for public key based certificate.&lt;/p&gt;&#xA;&lt;h1 id=&#34;openssl-with-local-ca&#34;&gt;&#xA;  openssl with local CA&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#openssl-with-local-ca&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In this section, I will use openssl to generates CA cert and key. And use that CA to sign the cert.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Generate private key&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl genrsa -out server.key &lt;span style=&#34;color:#a5d6ff&#34;&gt;2048&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Generate csr&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl req -new -key server.key -out server.csr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Create CA&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl req -x509 &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;            -sha256 -days &lt;span style=&#34;color:#a5d6ff&#34;&gt;356&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;            -nodes &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;            -newkey rsa:2048 &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;            -subj &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;/CN=demo.com/C=US/L=San Fransisco&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;            -keyout rootCA.key -out rootCA.crt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Sign cert with CA&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl x509 -req &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;    -in server.csr &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;    -CA rootCA.crt -CAkey rootCA.key &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;    -CAcreateserial -out server.crt &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;    -days &lt;span style=&#34;color:#a5d6ff&#34;&gt;365&lt;/span&gt; &lt;span style=&#34;color:#79c0ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#79c0ff&#34;&gt;&lt;/span&gt;    -sha256&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s clear that issuer is the CA but the subject is different (it&amp;rsquo;s the default)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Crypto - big Picture</title>
      <link>/posts/2023/03/crypto-big-picture/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/03/crypto-big-picture/</guid>
      <description>&lt;p&gt;This post describes the cryptography algorithms and their applications (As I understand them). Over the years, I read bits of &amp;ldquo;Understanding cryptography&amp;rdquo; by Cristof Paar and these are my notes which kinda match the chapters of the book. I also, added links to related posts for each section.&lt;/p&gt;&#xA;&lt;p&gt;The crypto provides several goals (the technical name is &lt;code&gt;services&lt;/code&gt;)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;confidentiality: Stop people from seeing the message&lt;/li&gt;&#xA;&lt;li&gt;Integrity: Make sure the message is correct(no tampering)&lt;/li&gt;&#xA;&lt;li&gt;Message Authentication (The message is coming from the right person)&lt;/li&gt;&#xA;&lt;li&gt;Nonrepudiation: prove that some person signed a message&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;symmetric-algorithms&#34;&gt;&#xA;  symmetric algorithms&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#symmetric-algorithms&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;symmetric algorithms provide confidentiality by using &lt;code&gt;shared key&lt;/code&gt; known by the Bob and Alice.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Crypto - DH key exchange</title>
      <link>/posts/2023/03/crypto-dh-key-exchange/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/03/crypto-dh-key-exchange/</guid>
      <description>&lt;p&gt;In most Crypto algorithms, we assumed the keys are already known by Alice and Bob. But we need a way to exchange the keys on securely first&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;symmertic exchange (not common)&lt;/li&gt;&#xA;&lt;li&gt;Asymmetric exchange (very popular)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In Asymmetric exchange, Both sides share public keys and the other side uses the public key and private key, to calculate secret key.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Alice  ------ A -----&amp;gt; Bob&#xA;      &amp;lt;-------B------&#xA;&#xA;At Alice&#xA;Kab = Fun(a, B)&#xA;&#xA;At Bob&#xA;Kab = Fun(b, A)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;diffiehellman-key-exchange-dhke&#34;&gt;&#xA;  Diffie–Hellman key exchange (DHKE)&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#diffiehellman-key-exchange-dhke&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The problem how make sure is that Bob is Bob?&#xA;The good solution using digital signature to sign the public key and Identity. and send &lt;code&gt;certificate&lt;/code&gt; which &amp;lt;message, sign(message)&amp;gt;. In this case, &lt;code&gt; sign_Kpr,a(&amp;lt;Kpub,a  IDa&amp;gt;)&lt;/code&gt; where Kpr is Alice&amp;rsquo;s private key.  This way the receiver needs Kpub to verify the certificate first&lt;/p&gt;</description>
    </item>
    <item>
      <title>AES-GCM Galois-Counter Mode</title>
      <link>/posts/2023/02/aes-gcm-galois-counter-mode/</link>
      <pubDate>Sat, 18 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/aes-gcm-galois-counter-mode/</guid>
      <description>&lt;p&gt;AES is one most important block ciphers used right now. AES has several modes of operation like CBC, ECB. This post is about GCM (Galois Counter Mode). This is used in several specifications. For example, This is I and E in PCIe IDE :)&lt;/p&gt;&#xA;&lt;p&gt;GCM provides authenticated encryption. Basically, It keeps things secret and makes sure nobody played around with these secret. I read the NIST document for GCM but I think the best resource I found is &lt;a href=&#34;https://luca-giuzzi.unibs.it/corsi/Support/papers-cryptography/gcm-spec.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;paper&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AES-GCM Galois-Counter Mode </title>
      <link>/posts/2023/02/aes-gcm-galois-counter-mode/</link>
      <pubDate>Sat, 18 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/aes-gcm-galois-counter-mode/</guid>
      <description>&lt;p&gt;AES is one most important block ciphers used right now. AES has several modes of operation like CBC, ECB. This post is about GCM (Galois Counter Mode). This is used in several specifications. For example, This is I and E in PCIe IDE :)&lt;/p&gt;&#xA;&lt;p&gt;GCM provides authenticated encryption. Basically, It keeps things secret and makes sure nobody played around with these secret. I read the NIST document for GCM but I think the best resource I found is &lt;a href=&#34;https://luca-giuzzi.unibs.it/corsi/Support/papers-cryptography/gcm-spec.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;paper&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PCIe IDE - Integrity and Data Encryption</title>
      <link>/posts/2023/02/pcie-ide-integrity-and-data-encryption/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/pcie-ide-integrity-and-data-encryption/</guid>
      <description>&lt;p&gt;The security components are divided 3 components&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SPDM - Security Protocol and Data Model: A standard defined by [2][DMTF] for key management&lt;/li&gt;&#xA;&lt;li&gt;CMA  - Component Measurement and Authentication: defined by PCI SIG and It&amp;rsquo;s adaptation of SPDM&lt;/li&gt;&#xA;&lt;li&gt;DOE  - Data Object Exchange: defines by PCI SIG, CMA defines DOE to transport SPDM messages between requester and responder for key/cert exchange.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Note that CMA and SPDM are lumped together in the spec as I see it CMA is basically SPDM with extra requirement or rules.  DOE is just extended capability in the configuration address space where it allows the host and device to exchange messages using 2 mailboxes registers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Root of trust primer</title>
      <link>/posts/2023/02/root-of-trust-primer/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/root-of-trust-primer/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://csrc.nist.gov/Projects/Hardware-Roots-of-Trust&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NIST&lt;/a&gt; defines Root of trust (RoT) as follows&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Roots of trust are highly reliable hardware, firmware, and software components that perform specific, critical security functions. Because roots of trust are inherently trusted, they must be secure by design.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Basically, It&amp;rsquo;s hardware implementation of security functions like&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;key management(generation and storage)&lt;/li&gt;&#xA;&lt;li&gt;cryptographygraphic functions(Block ciphers, Asymmetric key crypto, Hash)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The hardware is designed with security threat model in mind. &lt;a href=&#34;https://csrc.nist.gov/CSRC/media/Publications/sp/800-164/draft/documents/sp800_164_draft.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NIST Guidelines on Hardware Rooted Security in Mobile Devices&lt;/a&gt; states 3 important guidelines for RoT&lt;/p&gt;</description>
    </item>
    <item>
      <title>AES Rijndael S-box explained</title>
      <link>/posts/2023/02/aes-rijndael-s-box-explained/</link>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/02/aes-rijndael-s-box-explained/</guid>
      <description>&lt;p&gt;This post is about Rijndael S-box which the first stage of AES encryption. It&amp;rsquo;s substitution lookup table. AES implementation usually uses pre-computed table. I thought it would be fun to calculate it in python to see it action.&lt;/p&gt;&#xA;&lt;p&gt;From Wiki&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;the input is mapped to its multiplicative inverse in GF(28) = GF(2) [x]/(x8 + x4 + x3 + x + 1), Rijndael&amp;rsquo;s finite field. Zero, as the identity, is mapped to itself. This transformation is known as the Nyberg S-box after its inventor Kaisa Nyberg.[2] The multiplicative inverse is then transformed using the following affine transformation:&lt;/p&gt;</description>
    </item>
    <item>
      <title>elliptical curve crypto key exchange</title>
      <link>/posts/2022/10/elliptical-curve-crypto-key-exchange/</link>
      <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/elliptical-curve-crypto-key-exchange/</guid>
      <description>&lt;p&gt;In previous post, I wrote simple Diffie-Hellman key exchange algorithm, so I wanted to do elliptical curve key exchange as well. Again, The math is there in crypto book. but the algorithm is simple(strangely simple).&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/elliptical-curve-algo.png&#34; alt=&#34;Example image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;The trick is calculating &lt;code&gt;aP&lt;/code&gt; where P is point on the elliptical curve that satisfies &lt;code&gt;y^2 =  x^3+ a.x + y&lt;/code&gt;. The following algorithm calculates the addition (and incase 2 points are the same, it is doubling).&lt;/p&gt;</description>
    </item>
    <item>
      <title>The diffie hellman Key Exchange</title>
      <link>/posts/2022/10/the-diffie-hellman-key-exchange/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/10/the-diffie-hellman-key-exchange/</guid>
      <description>&lt;p&gt;This post is about Diffie-Hellman exchange key protocol to be used for symmetric crypto protocol like AES. From Wiki:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Diffie–Hellman key exchange[nb 1] is a method of securely exchanging cryptographic keys over a public channel and was one of the first public-key protocols as conceived by Ralph Merkle and named after Whitfield Diffie and Martin Hellman.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Same as RSA, i am not going to go through the math, but the algorithm defines how Alice and Bob create the their keys and eventually create the common key.&#xA;&lt;img src=&#34;/dh.png&#34; alt=&#34;Example image&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>The slowest RSA implementation</title>
      <link>/posts/2022/09/the-slowest-rsa-implementation/</link>
      <pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/09/the-slowest-rsa-implementation/</guid>
      <description>&lt;p&gt;This post is about the  slowest and worst-ish implementation of RSA, RSA is an important public key encryption algorithm. From wiki:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;RSA (Rivest–Shamir–Adleman) is a public-key cryptosystem that is widely used for secure data transmission. It is also one of the oldest. The acronym &amp;ldquo;RSA&amp;rdquo; comes from the surnames of Ron Rivest, Adi Shamir and Leonard Adleman, who publicly described the algorithm in 1977&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;The math behind RSA requires more mental calories than i can afford on Saturday morning. Anyway, The algorithm is simple (simple-ish). These are steps to calculate integer public and private keys&lt;/p&gt;</description>
    </item>
    <item>
      <title>hash based message authentication HMAC</title>
      <link>/posts/2022/06/hash-based-message-authentication-hmac/</link>
      <pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate>
      <guid>/posts/2022/06/hash-based-message-authentication-hmac/</guid>
      <description>&lt;p&gt;HMAC(&lt;a href=&#34;https://en.wikipedia.org/wiki/HMAC&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt;) is &lt;code&gt;hash-based message authentication code&lt;/code&gt; which verifies data integrity and authenticity of a message. Basically, it ensure sender is really who they are and whatever they sent wasn&amp;rsquo;t changed.&lt;/p&gt;&#xA;&lt;p&gt;The algorithm can be found on wiki which is easy enough to write(i am using sha256 from hashlib :)).&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;function hmac is&#xA;    input:&#xA;        key:        Bytes    // Array of bytes&#xA;        message:    Bytes    // Array of bytes to be hashed&#xA;        hash:       Function // The hash function to use (e.g. SHA-1)&#xA;        blockSize:  Integer  // The block size of the hash function (e.g. 64 bytes for SHA-1)&#xA;        outputSize: Integer  // The output size of the hash function (e.g. 20 bytes for SHA-1)&#xA;&#xA;    // Compute the block sized key&#xA;    block_sized_key = computeBlockSizedKey(key, hash, blockSize)&#xA;&#xA;    o_key_pad ← block_sized_key xor [0x5c blockSize]   // Outer padded key&#xA;    i_key_pad ← block_sized_key xor [0x36 blockSize]   // Inner padded key&#xA;&#xA;    return  hash(o_key_pad ∥ hash(i_key_pad ∥ message))&#xA;&#xA;function computeBlockSizedKey is&#xA;    input:&#xA;        key:        Bytes    // Array of bytes&#xA;        hash:       Function // The hash function to use (e.g. SHA-1)&#xA;        blockSize:  Integer  // The block size of the hash function (e.g. 64 bytes for SHA-1)&#xA;&#xA;    // Keys longer than blockSize are shortened by hashing them&#xA;    if (length(key) &amp;gt; blockSize) then&#xA;        key = hash(key)&#xA;&#xA;    // Keys shorter than blockSize are padded to blockSize by padding with zeros on the right&#xA;    if (length(key) &amp;lt; blockSize) then&#xA;        return  Pad(key, blockSize) // Pad key with zeros to make it blockSize bytes long&#xA;&#xA;    return  key&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;python-implementation&#34;&gt;&#xA;  Python implementation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#python-implementation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The main issue here is getting the bytes arithmetic right. I wrote small utility function &lt;code&gt;xor_bytes&lt;/code&gt; for inner and outter hashes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Merkle Tree</title>
      <link>/posts/2020/05/merkle-tree/</link>
      <pubDate>Fri, 29 May 2020 23:04:23 +0200</pubDate>
      <guid>/posts/2020/05/merkle-tree/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Merkle_tree&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Merkle tree&lt;/a&gt; is hash tree (usually binary tree) where each node is hash function of children nodes.&#xA;i used binary tree with sha256 from &lt;code&gt;hashlib&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h1 id=&#34;building-the-tree&#34;&gt;&#xA;  Building the tree&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#building-the-tree&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;i choose to start from the leafs and build up the tree bottom-to-top. &lt;code&gt;_buildTree&lt;/code&gt; does that by the recursively building parent nodes. for uniformity, i chose to add padding node to the tree (with empty hash string). this way the nodes are always even number all the way to the root node. this means unneeded nodes but easier logic. I didn&amp;rsquo;t put much thought about the upper limit for the number of dummy nodes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>MD5 python implementation</title>
      <link>/posts/2020/05/md5-python-implementation/</link>
      <pubDate>Fri, 15 May 2020 23:04:19 +0200</pubDate>
      <guid>/posts/2020/05/md5-python-implementation/</guid>
      <description>&lt;p&gt;I thought it would be fun to implement MD5 from scratch. it was indeed fun but with few Gotchas. so, after shaking off PTSD, i wrote this post.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://tools.ietf.org/html/rfc1321&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rfc1321&lt;/a&gt; defines MD5 digest algorithm. It also has reference C implementation which is nice (and needlessly complicated). That said, I don&amp;rsquo;t think Python is really the best language for bit manipulations of binary files. but that is part of the fun, right?&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
