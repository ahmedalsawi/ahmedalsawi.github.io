<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PSS on Techiedeepdive</title>
    <link>/tags/pss/</link>
    <description>Recent content in PSS on Techiedeepdive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 27 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/pss/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Portable Stimulus Standard - Part 1</title>
      <link>/posts/2023/02/portable-stimulus-standard-part-1/</link>
      <pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/portable-stimulus-standard-part-1/</guid>
      <description>Portable stimulus standard (PSS) is very interesting. That said, It&amp;rsquo;s surprising simple.
These are important abstraction units specific by the spec:
 component action Activity  Component Component is a way to encapsulate other elements (mainly actions)
 Components serve as a mechanism to encapsulate and reuse elements of functionality in a portable stimulus model. Typically, a model is broken down into parts that correspond to roles played by different actors during test execution.</description>
    </item>
    
    <item>
      <title>Portable Stimulus Standard for fun and profit</title>
      <link>/posts/2022/10/portable-stimulus-standard-for-fun-and-profit/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/portable-stimulus-standard-for-fun-and-profit/</guid>
      <description>These are my notes while reading the Portable Stimulus Standard. I will keep updating on the go.
The specs define PSS as:
 The Portable Test and Stimulus Standard defines a specification for creating a single representation of stimulus and test scenarios, usable by a variety of users across different levels of integration under different configurations, enabling the generation of different implementations of a scenario that run on a variety of execution platforms, including, but not necessarily limited to, simulation, emulation, FPGA prototyping, and post-silicon.</description>
    </item>
    
    <item>
      <title>That time I found a typo in Portable Stimulus Standard</title>
      <link>/posts/2022/10/that-time-i-found-a-typo-in-portable-stimulus-standard/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/10/that-time-i-found-a-typo-in-portable-stimulus-standard/</guid>
      <description>For few weeks, I was obsessed(for the lack of better word) with PSS and naturally I decided to write the BNF in LARK and I even stared on AST transformations. Anyway, while I am copying parts of BNF I noticed an error with type_identifier. When i looked at the rule, I noticed it is saying type_identifer_elem. See the issue there?
type_identifier: [ &amp;#34;::&amp;#34; ] type_identifer_elem ( &amp;#34;::&amp;#34; type_identifer_elem )* Now, i saw the glitch in the matrix, I have no idea how to report it.</description>
    </item>
    
  </channel>
</rss>
