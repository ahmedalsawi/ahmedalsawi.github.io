<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tcl on Techiedeepdive</title>
    <link>/tags/tcl/</link>
    <description>Recent content in tcl on Techiedeepdive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 02 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/tcl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Parsing UPF - Embedding TCL interpreter with python</title>
      <link>/posts/2023/03/parsing-upf-embedding-tcl-interpreter-with-python/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/03/parsing-upf-embedding-tcl-interpreter-with-python/</guid>
      <description>This post is about quirky idea to parse UPF for fun and profit. I started with writing Lark BNF, To a man with a hammer, everything looks like a nail :) But gave up on the idea as i will end up writing frontend for TCL. So, I was mentally blocked for some time.
Then it hit me, I can use full-blown TCL interpreter to parse the actual UPF and pass it back to python for processing.</description>
    </item>
    
    <item>
      <title>TCL And C interface</title>
      <link>/posts/2020/12/tcl-and-c-interface/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/12/tcl-and-c-interface/</guid>
      <description>Calling TCL from C  Link to heading   Starting with working example, we can see that Tcl_CreateInterp and Tcl_Eval are the only two Tcl calls.
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;tcl.h&amp;gt; main (int argc, char *argv[]) { Tcl_Interp *myinterp; char *action = &amp;#34;set a [expr 5 * 8]; puts $a&amp;#34;; int status; printf (&amp;#34;Your Program will run ... \n&amp;#34;); myinterp = Tcl_CreateInterp(); status = Tcl_Eval(myinterp,action); printf (&amp;#34;Your Program has completed\n&amp;#34;); } And compilation command</description>
    </item>
    
  </channel>
</rss>
