<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on Techiedeepdive</title>
    <link>/tags/web/</link>
    <description>Recent content in web on Techiedeepdive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 31 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="/tags/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Relearning React in 2024</title>
      <link>/posts/2024/05/relearning-react-in-2024/</link>
      <pubDate>Fri, 31 May 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/2024/05/relearning-react-in-2024/</guid>
      <description>I had to learn React few years to do some simple UI for some skunkworks project. But i didn&amp;rsquo;t use it for years, So it is about time to revive it.
The first step is to install yarn to use as package manager and runner.
npm install -g yarn Run vite to create app. Vite is new packager to replace react-create-app.
$ yarn create vite yarn create v1.22.22 [1/4] Resolving packages.</description>
    </item>
    
    <item>
      <title>Python - fastapi </title>
      <link>/posts/2024/05/python-fastapi/</link>
      <pubDate>Thu, 23 May 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/2024/05/python-fastapi/</guid>
      <description>fastapi is quick way to develop REST API. It can be done with flask or Django but fastapi can do a lot of stuff out of the box. For example, fastapi creates openapi SWAGGER UI on /docs.
from typing import Union from fastapi import FastAPI app = FastAPI() @app.get(&amp;#34;/&amp;#34;) def read_root(): return {&amp;#34;Hello&amp;#34;: &amp;#34;World&amp;#34;} @app.get(&amp;#34;/items/{item_id}&amp;#34;) def read_item(item_id: int, q: Union[str, None] = None): return {&amp;#34;item_id&amp;#34;: item_id, &amp;#34;q&amp;#34;: q} To start the server, we can use dev server from the application app.</description>
    </item>
    
    <item>
      <title>websocket - Hello World</title>
      <link>/posts/2024/05/websocket-hello-world/</link>
      <pubDate>Thu, 23 May 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/2024/05/websocket-hello-world/</guid>
      <description>Introduction  Link to heading   websocket is a cool protocol used for bi-directional communication like notifications or chat applications. From wiki, it says
 WebSocket is a computer communications protocol, providing a simultaneous two-way communication channel over a single Transmission Control Protocol (TCP) connection.
  WebSocket is distinct from HTTP used to serve most webpages. Although they are different, RFC 6455 states that WebSocket &amp;ldquo;is designed to work over HTTP ports 443 and 80 as well as to support HTTP proxies and intermediaries&amp;rdquo;, thus making it compatible with HTTP.</description>
    </item>
    
    <item>
      <title>WE API reverse engineering</title>
      <link>/posts/2020/08/we-api-reverse-engineering/</link>
      <pubDate>Sat, 29 Aug 2020 21:39:25 +0200</pubDate>
      
      <guid>/posts/2020/08/we-api-reverse-engineering/</guid>
      <description>Background  Link to heading   My ISP has a &amp;ldquo;modern&amp;rdquo; web app using Angular and REST backend. that said, their website sucks because their login form breaks my password manager. So, I have to login manually every time.
Obviously, they don&amp;rsquo;t have a documented API. so, i have to trace the xhr requests in the browser. This is a 3 hour journey to reverse engineer their login API including deepdive into their weird password encryption!</description>
    </item>
    
    <item>
      <title>Starting With Wordpress</title>
      <link>/posts/2020/06/starting-with-wordpress/</link>
      <pubDate>Thu, 25 Jun 2020 19:14:05 +0200</pubDate>
      
      <guid>/posts/2020/06/starting-with-wordpress/</guid>
      <description>Dependencies  Link to heading   sudo apt install wordpress php libapache2-mod-php mysql-server php-mysql This will install some important files at /usr/share/wordpress. If this is the first time to install mysql you may be asked to set root user password.
Apache setup  Link to heading   First we need to setup Apache to serve php files from /usr/share/wordpress. Edit /etc/apache2/sites-available/wordpress.conf with the following content
Alias /blog /usr/share/wordpress &amp;lt;Directory /usr/share/wordpress&amp;gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.</description>
    </item>
    
    <item>
      <title>Flask Internals Part1</title>
      <link>/posts/2019/09/flask-internals-part1/</link>
      <pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/09/flask-internals-part1/</guid>
      <description>Introduction  Link to heading   I have been playing around with flask for few weeks now. It&amp;rsquo;s definitely leaner than Django but still there are some parts that look like black magic (I am looking at you, g).
So, Starting with&amp;hellip;
Hello world  Link to heading   This looks like a good to place to start. This is the smallest functional flask app, I guess.
Basically, there are two things happening here:</description>
    </item>
    
    <item>
      <title>Web scraping with python</title>
      <link>/posts/2019/06/web-scraping-with-python/</link>
      <pubDate>Sun, 02 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/06/web-scraping-with-python/</guid>
      <description>This post is about the fetch and crawl of html pages using requests and BeautifulSoup
I came across an interesting forum and i was looking for posts with some keywords. The forum did have a search form but didn&amp;rsquo;t support any kind of regex. I think it uses some kind OR&amp;rsquo;ing logic for search keywords and returns any post that has any of the words. It was built in early 00&amp;rsquo;s using PHP, lucky for me.</description>
    </item>
    
  </channel>
</rss>
