<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UVM Internals on Techiedeepdive</title>
    <link>/series/uvm-internals/</link>
    <description>Recent content in UVM Internals on Techiedeepdive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 23 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="/series/uvm-internals/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UVM Internals - set_config_int and set_config_string</title>
      <link>/posts/2023/09/uvm-internals-set_config_int-and-set_config_string/</link>
      <pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/09/uvm-internals-set_config_int-and-set_config_string/</guid>
      <description>UVM provides several command line utils to change config. Two of these command line knobs are set_config_int and set_config_string. This is a deepdive into how they work.
Starting with src/base/uvm_root.svh, where m_do_config_settings is called in the build_phase of the uvm_root.
function void uvm_root::build_phase(uvm_phase phase); super.build_phase(phase); m_set_cl_msg_args(); m_do_verbosity_settings(); m_do_timeout_settings(); m_do_factory_settings(); m_do_config_settings(); m_do_max_quit_settings(); m_do_dump_args(); endfunction In the same file, m_do_config_settings matches command line option with uvm_set_config_int and uvm_set_config_string and call m_process_config with is_bitargument to set to 1 with int.</description>
    </item>
    
    <item>
      <title>UVM Internals - deepdive into uvm_reg_predictor</title>
      <link>/posts/2023/02/uvm-internals-deepdive-into-uvm_reg_predictor/</link>
      <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/uvm-internals-deepdive-into-uvm_reg_predictor/</guid>
      <description>I uvm_predictor is UVM way to determine the value of registers model by monitoring the bus in case someone other than reg model is changing the registers. The usual boilerplate code looks something like this:
predict.map = regmodel.default_map; predict.adapter = reg2rw; // reg2rw is adapter  bus.mon.ap.connect(predict.bus_in); regmodel.default_map.set_auto_predict(0); Looking at the source code, The following important variables bus_in, map and adapter.
`uvm_component_param_utils(uvm_reg_predictor#(BUSTYPE)) // Variable: bus_in  //  // Observed bus transactions of type ~BUSTYPE~ are received from this  // port and processed.</description>
    </item>
    
    <item>
      <title>UVM Internals - Deepdive into uvm_reg_bit_bash_seq</title>
      <link>/posts/2023/02/uvm-internals-deepdive-into-uvm_reg_bit_bash_seq/</link>
      <pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/uvm-internals-deepdive-into-uvm_reg_bit_bash_seq/</guid>
      <description>This is a deepdive into uvm_reg_bit_bash_seq. It&amp;rsquo;s one of UVM RAL builtin sequences to test registers. uvm_reg_bit_bash_seq can be used as by setting the model and start the sequence and that&amp;rsquo;s it.
seq = uvm_reg_bit_bash_seq::type_id::create(&amp;#34;seq&amp;#34;,this); seq.model = env.regmodel; seq.start(null); seq.wait_for_sequence_state(FINISHED); Starting with body(), it seems reset_blk is empty in src/reg/sequences/uvm_reg_bit_bash_seq.svh
reg_seq = uvm_reg_single_bit_bash_seq::type_id::create(&amp;#34;reg_single_bit_bash_seq&amp;#34;); this.reset_blk(model); model.reset(); do_block(model); The loop works on all registers and calls vm_reg_single_bit_bash_seq on each register
protected virtual task do_block(uvm_reg_block blk); uvm_reg regs[$]; .</description>
    </item>
    
    <item>
      <title>UVM Internals - What happens when you call set_auto_predict</title>
      <link>/posts/2023/02/uvm-internals-what-happens-when-you-call-set_auto_predict/</link>
      <pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/02/uvm-internals-what-happens-when-you-call-set_auto_predict/</guid>
      <description>This is a deepdive into how set_auto_predict works.
When called on reg_map, It updates the mirror values with write/read operation going through the reg model.
blabla_reg_block_map.set_auto_predict(1); The function is defined in uvm_reg_map.svh with the following comment
// When ~on~ is ~TRUE~,  // the register model will automatically update its mirror  // (what it thinks should be in the DUT) immediately after  // any bus read or write operation via this map.</description>
    </item>
    
    <item>
      <title>UVM Internals - uvm_pool</title>
      <link>/posts/2023/01/uvm-internals-uvm_pool/</link>
      <pubDate>Thu, 26 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/01/uvm-internals-uvm_pool/</guid>
      <description>This post is about one of UVM utility uvm_pool which is wrapper around Systemverilog associative array. UVM defines singletons from uvm_pool as well.
Starting with some internal inside uvm_pool, poolassoc array is delatred as protected as there couple of setters and getter defines anyway.
typedef uvm_pool #(KEY,T) this_type; static protected this_type m_global_pool; protected T pool[KEY]; get and setare defined as follows. Easy enough!
virtual function T get (KEY key); if (!</description>
    </item>
    
    <item>
      <title>UVM Internals - uvm_barrier</title>
      <link>/posts/2023/01/uvm-internals-uvm_barrier/</link>
      <pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/2023/01/uvm-internals-uvm_barrier/</guid>
      <description>This post is about one of UVM synchronization. Well, we all use phases which is implicitly one way to synchronize tasks(build, connect, run). Anyway, barriers is not a new thing it is used a lot in multi-thread/kernel development.
The most import method is wait_for. The processes call it at the point where it wants other processes. In this example, both process will continue after 20 delay.
uvm_barrier b = new(&amp;#39;b_test&amp;#39; , 2); initial begin #10; b.</description>
    </item>
    
    <item>
      <title>UVM Internals - objections</title>
      <link>/posts/2022/09/uvm-internals-objections/</link>
      <pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/09/uvm-internals-objections/</guid>
      <description>This post is a deep dive into UVM objections implementation. Objections are UVM mechanism to control test shutdown(or stopping shutdown really).. It basically keeps things running until all important things stops running(ie objections are dropped).
raise_objection and drop_objection are used at the start and end of run_phase as follows
55 class test extends test_base; 56 `uvm_component_utils(test) 57 61 62 task run_phase(uvm_phase phase); 65 66 phase.raise_objection(this); ... ... 87 phase.drop_objection(this); 88 endtask RANT: Before I started this, It seemed simple enough but it turned out to be more complicated than I thought.</description>
    </item>
    
    <item>
      <title>UVM Internals - set_drain_time</title>
      <link>/posts/2022/04/uvm-internals-set_drain_time/</link>
      <pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/04/uvm-internals-set_drain_time/</guid>
      <description>Set up  Link to heading   In run_phase, set_drain_time is called from phase.phase_done which uvm_objection.
task run_phase(uvm_phase phase); phase.phase_done.set_drain_time(this, 10); endtask The set_drain_time sets drain in m_drain_time which is called m_forked_drain.
function void set_drain_time (uvm_object obj=null, time drain); if (obj==null) obj = m_top; m_drain_time[obj] = drain; m_set_hier_mode(obj); endfunction objection timeout  Link to heading   In m_execute_scheduled_forks(), m_forked_drain is called
objection.m_forked_drain(ctxt.obj, ctxt.source_obj, ctxt.description, ctxt.count, 1); and m_forked_drain calls uvm_delay</description>
    </item>
    
    <item>
      <title>UVM Internals - UVM_TIMEOUT</title>
      <link>/posts/2022/04/uvm-internals-uvm_timeout/</link>
      <pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/04/uvm-internals-uvm_timeout/</guid>
      <description>This posts explains how +UVM_TIMEOUT works.
Starting with how it is used
&amp;lt;sim command&amp;gt; +UVM_TIMEOUT=200000,NO UVM_TIMEOUT is read in uvm_root.svh which parses the value and override strings and calls set_timeout.
timeout_count = clp.get_arg_values(&amp;#34;+UVM_TIMEOUT=&amp;#34;, timeout_settings); if (timeout_count == 0) return; else begin timeout = timeout_settings[0]; if (timeout_count &amp;gt; 1) begin string timeout_list; string sep; for (int i = 0; i &amp;lt; timeout_settings.size(); i++) begin if (i != 0) sep = &amp;#34;; &amp;#34;; timeout_list = {timeout_list, sep, timeout_settings[i]}; end uvm_report_warning(&amp;#34;MULTTIMOUT&amp;#34;, $sformatf(&amp;#34;Multiple (%0d) +UVM_TIMEOUT arguments provided on the command line.</description>
    </item>
    
    <item>
      <title>UVM Internals - UVM 2020-2.0 Early release diff Part1 - m_uvm_core_state</title>
      <link>/posts/2022/03/uvm-internals-uvm-2020-2.0-early-release-diff-part1-m_uvm_core_state/</link>
      <pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/03/uvm-internals-uvm-2020-2.0-early-release-diff-part1-m_uvm_core_state/</guid>
      <description>UVM 2020-2.0 early release is out and i thought it would be fun to deep dive into one of the differences and try to understand why that change was made.
I thought that was an interesting one!
&amp;lt; // we use a queue here only to avoid any problems on writing to variables &amp;lt; // inside an always_comb/latch/ff in case those call UVM &amp;lt; uvm_core_state m_uvm_core_state[$]; --- &amp;gt; uvm_core_state m_uvm_core_state = UVM_CORE_UNINITIALIZED; So, what does this comment mean?</description>
    </item>
    
    <item>
      <title>UVM Internals - Sequence to Sequencer connection</title>
      <link>/posts/2022/03/uvm-internals-sequence-to-sequencer-connection/</link>
      <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/03/uvm-internals-sequence-to-sequencer-connection/</guid>
      <description>This post answers the following question &amp;ldquo;How the typical sequencer to sequence coonection works?!&amp;rdquo;
An example  Link to heading    Create sequencer class handle from vanilla uvm_sequencer  uvm_sequencer #(foo_req, foo_rsp) sqr;  Connect it to driver port in connect phase  drv.seq_item_port.connect(sqr.seq_item_export);  Define uvm_sequence with body  class foo_sequence extends uvm_sequence#(foo_seq_item); virtual task body(); start_item(item); // Create the seq item  ... finish_item(item); endtask endclass  Call the sequence with sequencer instance.</description>
    </item>
    
    <item>
      <title>UVM Internals - How do p_sequencer and m_sequencer work?</title>
      <link>/posts/2022/02/uvm-internals-how-do-p_sequencer-and-m_sequencer-work/</link>
      <pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/02/uvm-internals-how-do-p_sequencer-and-m_sequencer-work/</guid>
      <description>One of the most iconic DV interview questions is &amp;ldquo;What are m_sequencer and p_sequencer?&amp;rdquo;. So, A good way to impress the interviewer is to answer the question by explaining how they work :)
What are p_sequencer and m_sequencer?  Link to heading   p_sequencer is declared using uvm_declare_p_sequencer in the sequence to have access to the correct specialization of uvm_sequencer.
class my_sequence extends uvm_sequence; ... ... `uvm_declare_p_sequencer(ubus_slave_sequencer) Which expands to the following where $cast will only work if m_sequencer can be cast to p_sequencer(ie cast from base class to parameterized derived class)</description>
    </item>
    
    <item>
      <title>UVM Internals - Transaction Recording Infrastructure</title>
      <link>/posts/2022/02/uvm-internals-transaction-recording-infrastructure/</link>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/02/uvm-internals-transaction-recording-infrastructure/</guid>
      <description>UVM has a builtin transaction recorder as part of uvm_transaciton. This is deepdive into how it works.
How to use transaction recorder  Link to heading   First, The recording should be enabled. In this example, this is part of sequence body where enable_recording is called with stream name.
pkt = apb_rw::type_id::create(&amp;#34;apb_rw&amp;#34;); pkt.enable_recording(&amp;#34;packet_stream&amp;#34;); start_item(pkt); pkt.randomize(); finish_item(pkt); Next, run_phase can call accpet_tr, begin_tr and end_tr to log the transactions in the stream.</description>
    </item>
    
    <item>
      <title>UVM Internals - Register model callbacks</title>
      <link>/posts/2022/01/uvm-internals-register-model-callbacks/</link>
      <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/2022/01/uvm-internals-register-model-callbacks/</guid>
      <description>UVM register model defines several callback hooks. This is deepdive into how it works.
pre_read example  Link to heading   First, we need to define callback class extending uvm_reg_cbs. I am using pre_read in this case.
class mycb extends uvm_reg_cbs; `uvm_object_utils(mycb) function new(string name=&amp;#34;&amp;#34;); super.new(name); endfunction virtual task pre_read(uvm_reg_item rw); $display(&amp;#34;cb called&amp;#34;); endtask endclass Then register the callback with required uvm register(not confusing at all!).
mycb m_mycb; virtual function void build_phase(uvm_phase phase); .</description>
    </item>
    
    <item>
      <title>UVM Internals - TLM analysis port</title>
      <link>/posts/2021/11/uvm-internals-tlm-analysis-port/</link>
      <pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/11/uvm-internals-tlm-analysis-port/</guid>
      <description>This is write-up about the internals of UVM 1800.2 analysis_port rabbit hole.
Starting with uvm_analysis_port.svh, where the doc has small snippet of uvm_analysis_port object.
//------------------------------------------------------------------------------ // Class -- NODOCS -- uvm_analysis_port // // Broadcasts a value to all subscribers implementing a &amp;lt;uvm_analysis_imp&amp;gt;. // //| class mon extends uvm_component; //| uvm_analysis_port#(trans) ap; //| //| function new(string name = &amp;#34;sb&amp;#34;, uvm_component parent = null); //| super.new(name, parent); //| ap = new(&amp;#34;ap&amp;#34;, this); //| endfunction //| //| task run_phase(uvm_phase phase); //| trans t; //| .</description>
    </item>
    
    <item>
      <title>UVM Internals - TLM port to imp Connection</title>
      <link>/posts/2021/01/uvm-internals-tlm-port-to-imp-connection/</link>
      <pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/01/uvm-internals-tlm-port-to-imp-connection/</guid>
      <description>This is a write-up about the Internals of TLM connection port-to-imp. I am using uvm_blocking_put_port but others shouldn&amp;rsquo;t be different.
Producer/Consumer example  Link to heading   The producer creates port and calls put with the transaction
class producer extesnds uvm_component; ... ... uvm_blocking_put_port #(transaction) put_port; function build_phase(...); put_port = new(&amp;#34;foo&amp;#34;, this); endfunction function run_phase(....); .... put_port.put(t); endfunction endclass The consumer creates imp and providesput method that gets called eventually.</description>
    </item>
    
    <item>
      <title>UVM Internals - transaction id</title>
      <link>/posts/2021/01/uvm-internals-transaction-id/</link>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/01/uvm-internals-transaction-id/</guid>
      <description>Have you ever wondered what set_id_info does? If you have, read on.
UVM docs describe set_id_info as:
 function void set_id_info(	uvm_sequence_item item	)
Copies the sequence_id and transaction_id from the referenced item into the calling item. This routine should always be used by drivers to initialize responses for future compatibility.
 Basically, set_id_info is called as a part of req/rsp protocol. driver can have something like the following
seq_item_port.get(req); rsp = new(); rsp.</description>
    </item>
    
    <item>
      <title>UVM Internals - uvm_create and uvm_send</title>
      <link>/posts/2021/01/uvm-internals-uvm_create-and-uvm_send/</link>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/2021/01/uvm-internals-uvm_create-and-uvm_send/</guid>
      <description>Typical pattern for sequence body does 3 things:
 Create object Configure and randomize Object Send Object  req = req::type_id::create(&amp;#34;req&amp;#34;); start_item(req); // Do something here with req  finish_item(req); UVM provide two macros to do less typing&amp;hellip; and confuse everyone (always bonus for UVM people). these macros are uvm_create and uvm_send
uvm_create  Link to heading   Starting with uvm_create which calls uvm_create_on
`uvm_create() // Do something here with req  `uvm_send(req) `define uvm_create(SEQ_OR_ITEM) \ `uvm_create_on(SEQ_OR_ITEM, m_sequencer)  uvm_create uses uvm_create_on macro</description>
    </item>
    
    <item>
      <title>UVM Internals - Structural Components</title>
      <link>/posts/2020/11/uvm-internals-structural-components/</link>
      <pubDate>Sat, 07 Nov 2020 00:13:06 +0200</pubDate>
      
      <guid>/posts/2020/11/uvm-internals-structural-components/</guid>
      <description>Components  Link to heading   UVM defines set of standard building blocks to build test hierarchy. All components inherit from uvm_component. but some components have more bells and whistles than others.
uvm_comps.svh  Link to heading   starting with src/comps/uvm_comps.svh where components live, we can see there are two types
 Utility components Structural components  `include &amp;#34;comps/uvm_pair.svh&amp;#34; `include &amp;#34;comps/uvm_policies.svh&amp;#34; `include &amp;#34;comps/uvm_in_order_comparator.svh&amp;#34; `include &amp;#34;comps/uvm_algorithmic_comparator.svh&amp;#34; `include &amp;#34;comps/uvm_random_stimulus.svh&amp;#34; `include &amp;#34;comps/uvm_subscriber.</description>
    </item>
    
    <item>
      <title>UVM Internals - Configuration database</title>
      <link>/posts/2020/05/uvm-internals-configuration-database/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/05/uvm-internals-configuration-database/</guid>
      <description>The White Rabbit  Link to heading   Configuration database is used to pass around configuration parameters through centralized database. one of the famous patterns is storing the virtual interface.
uvm_config_db#(virtual v_if)::set(null,&amp;#34;*&amp;#34;,&amp;#34;v_if&amp;#34;,intf); Then any component(driver/monitor) can get the virtual interface
uvm_config_db#(virtual v_if)::get(null,&amp;#34;*&amp;#34;,&amp;#34;v_if&amp;#34;,vintf); ::set  Link to heading   Starting with ::set, it is defined in src/base/uvm_config_db.svh as static method of class uvm_class_db
class uvm_config_db#(type T=int) extends uvm_resource_db#(T); ... .</description>
    </item>
    
    <item>
      <title>UVM Internals - Reporting</title>
      <link>/posts/2020/05/uvm-internals-reporting/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/05/uvm-internals-reporting/</guid>
      <description>The White Rabbit  Link to heading   uvm reporting is the mechanism to control which/how messages are printed to the logs. In this post, i am going to trace one of the macro down to IO system task.
Starting with an example of uvm_warning macro
`uvm_warning(&amp;#34;MYWARN1&amp;#34;, &amp;#34;This is a warning&amp;#34;) uvm_warning  Link to heading   starting with macro expansion
`define uvm_warning(ID,MSG) \ begin \ if (uvm_report_enabled(UVM_NONE,UVM_WARNING,ID)) \ uvm_report_warning (ID, MSG, UVM_NONE, `uvm_file, `uvm_line); \ end  in uvm_globals.</description>
    </item>
    
    <item>
      <title>UVM Internals - Factory</title>
      <link>/posts/2020/05/uvm-internals-factory/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/05/uvm-internals-factory/</guid>
      <description>The White Rabbit  Link to heading   The factory is a way to dynamically construct objects(see wiki). For UVM, Factory can be used to override the objected created which allow injection of new functionality into already existing sequences.
It requires registering the class first then using create to get an object
 registration  class env extends uvm_env; `uvm_component_utils(uvm_env)  Creation  env = uvm_env::type_id::create(&amp;#34;env&amp;#34;,this); Registration  Link to heading   uvm_component_utils is defined in src/macros/uvm_object_defines.</description>
    </item>
    
    <item>
      <title>UVM Internals - run_test</title>
      <link>/posts/2020/04/uvm-internals-run_test/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/04/uvm-internals-run_test/</guid>
      <description>Hello World  Link to heading   The simplest UVM testbench starts with run_test.
initial begin run_test(&amp;quot;test01&amp;quot;); end run_test is defined on src/base/uvm_globals.svh where it constructs uvm_root and run run_test from top.run_test()
task run_test (string test_name=&amp;quot;&amp;quot;); uvm_root top; top = uvm_root::get(); top.run_test(test_name); endtask Creating uvm_root  Link to heading   uvm_root is created by calling uvm_root::get static method. Beside creating the singelton uvm_root, it creates the uvm_domain which is also a singelton.</description>
    </item>
    
  </channel>
</rss>
