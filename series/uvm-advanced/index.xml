<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UVM Advanced on Techiedeepdive</title>
    <link>/series/uvm-advanced/</link>
    <description>Recent content in UVM Advanced on Techiedeepdive</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 04 Sep 2020 03:13:06 +0200</lastBuildDate><atom:link href="/series/uvm-advanced/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UVM Report Server</title>
      <link>/posts/2020/09/uvm-report-server/</link>
      <pubDate>Fri, 04 Sep 2020 03:13:06 +0200</pubDate>
      
      <guid>/posts/2020/09/uvm-report-server/</guid>
      <description>UVM Class reference manual define uvm_report_server
 uvm_report_handler. None of its methods are intended to be called by normal testbench uvm_report_server is a global server that processes all of the reports generated by an code, although in some circumstances the virtual methods process_report and/or compose_uvm_info may be overloaded in a subclass.
 Define uvm_report_server To change the message format, say CSV, compase_message can be used to return re-formatted message.
compose_message documentation states:</description>
    </item>
    
    <item>
      <title>UVM Report Catcher</title>
      <link>/posts/2020/09/uvm-report-catcher/</link>
      <pubDate>Tue, 01 Sep 2020 03:13:06 +0200</pubDate>
      
      <guid>/posts/2020/09/uvm-report-catcher/</guid>
      <description>How to use UVM report catcher to change message attributes. Report catcher can&amp;rsquo;t change the message format. Report server can be used to change the format.
Report Catcher first we need to sub-class uvm_report_catcher and override catch. in this example,get_severity and get_id are used to filter messages. Then THROW is returned which passes the modified message.
class catcher extends uvm_report_catcher; function new(string name=&amp;#34;catcher&amp;#34;); super.new(name); endfunction function action_e catch(); if(get_severity() == UVM_WARNING&amp;amp;&amp;amp; get_id() == &amp;#34;MYID&amp;#34;) set_severity(UVM_ERROR); return THROW; endfunction endclass All getters and setters can be found at UVM report cat catcher</description>
    </item>
    
    <item>
      <title>UVM Sequencer grab()</title>
      <link>/posts/2020/08/uvm-sequencer-grab/</link>
      <pubDate>Mon, 31 Aug 2020 03:13:06 +0200</pubDate>
      
      <guid>/posts/2020/08/uvm-sequencer-grab/</guid>
      <description>Hierarchical sequences Big part of sequencer functionality( ie. complexity) is sequence arbitration. That&amp;rsquo;s why we have the whole start_item and get_next_item thing AKA driver-sequence protocol.
In this example, I am using 2 sequences with p_sequencer. By default, the priority of all items from sequences are equal and default arbitration algorithm is fifo.
class my_sequence extends uvm_sequence#(my_transaction); `uvm_object_utils(my_sequence) `uvm_declare_p_sequencer(my_sequencer) function new(string name=&amp;#34;&amp;#34;); super.new(name); endfunction m_seq1 s1; m_seq2 s2; task body(); s1 = m_seq1::type_id::create(&amp;#34;s1&amp;#34;); s2 = m_seq2::type_id::create(&amp;#34;s2&amp;#34;); fork s1.</description>
    </item>
    
    <item>
      <title>uvm_config_db spellchecker</title>
      <link>/posts/2020/08/uvm_config_db-spellchecker/</link>
      <pubDate>Mon, 31 Aug 2020 03:13:06 +0200</pubDate>
      
      <guid>/posts/2020/08/uvm_config_db-spellchecker/</guid>
      <description>Fun trivia i didn&amp;rsquo;t know about UVM config DB. It has build-in spell checker for resource lookup. Who Knew!
The class for spell checker is uvm_spell_chkr. grep&amp;rsquo;ing trough UVM-1.1d, i found it&amp;rsquo;s used once inside uvm_resource.svh
function bit spell_check(string s); return uvm_spell_chkr#(uvm_resource_types::rsrc_q_t)::check(rtab, s); endfunction looking at check, It seems like poorman&amp;rsquo;s spell checker for resource names.
[.........] $display(&amp;#34;%s not located&amp;#34;, s); // if (min == max) then the string table is empty  if(min == max) begin $display(&amp;#34; no alternatives to suggest&amp;#34;); return 0; end // dump all the alternatives with the minimum distance  foreach(min_key[i]) begin $display(&amp;#34; did you mean %s?</description>
    </item>
    
    <item>
      <title>UVM user defined phase</title>
      <link>/posts/2020/08/uvm-user-defined-phase/</link>
      <pubDate>Sat, 29 Aug 2020 00:13:06 +0200</pubDate>
      
      <guid>/posts/2020/08/uvm-user-defined-phase/</guid>
      <description>UVM provide a weird pattern to define user defined phases. Usually, it&amp;rsquo;s useful for adding phases for VIP&amp;rsquo;s
User defined phase boiler-plate According to UVM class reference manual, we need to extends on of the class
class my_PHASE_phase extends uvm_task_phase; class my_PHASE_phase extends uvm_topdown_phase; class my_PHASE_phase extends uvm_bottomup_phase; then override exec_task or exec_func
task exec_task(uvm_component comp, uvm_phase schedule); function void exec_func(uvm_component comp, uvm_phase schedule); the important part about exec method that it calls the phase from the component</description>
    </item>
    
    <item>
      <title>UVM Hearbeat</title>
      <link>/posts/2020/08/uvm-hearbeat/</link>
      <pubDate>Fri, 28 Aug 2020 02:28:49 +0200</pubDate>
      
      <guid>/posts/2020/08/uvm-hearbeat/</guid>
      <description>Example of UVM hearbeat based on example and UVM heartbeat docs
Introduction UVM reference manual defines Heart Beat as
 Heartbeats provide a way for environments to easily ensure that their descendants are alive. A uvm_heartbeat is associated with a specific objection object. A component that is being tracked by the heartbeat object must raise (or drop) the synchronizing objection during the heartbeat window. The synchronizing objection must be a uvm_callbacks_objection type.</description>
    </item>
    
  </channel>
</rss>
