<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UVM Advanced on Techiedeepdive</title>
    <link>/series/uvm-advanced/</link>
    <description>Recent content in UVM Advanced on Techiedeepdive</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 15 Oct 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="/series/uvm-advanced/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UVM Internals - Auto configuration</title>
      <link>/posts/2023/10/uvm-internals-auto-configuration/</link>
      <pubDate>Sun, 15 Oct 2023 00:00:00 +0000</pubDate>
      <guid>/posts/2023/10/uvm-internals-auto-configuration/</guid>
      <description>&lt;p&gt;This is follow-up post about automatic setting of a variable in UVM component after being set in config_db. Like anything in UVM,there are 2 parts. The registration and actual call. Let&amp;rsquo;s do the registration first.&lt;/p&gt;&#xA;&lt;p&gt;For a component, you can define fields using &lt;code&gt;uvm_field_*&lt;/code&gt; macros between &lt;code&gt;uvm_component_utils_begin&lt;/code&gt; and &lt;code&gt;uvm_component_utils_end&lt;/code&gt;. In this example, I will trace &lt;code&gt;uvm_field_int&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_component_utils_begin&lt;/span&gt;(foobar)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_field_int&lt;/span&gt;      (addr, UVM_ALL_ON)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_component_utils_end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In &lt;code&gt;src/macros/uvm_object_defines.svh&lt;/code&gt;, these macros are defined as follows.&#xA;&lt;code&gt;uvm_field_utils_begin&lt;/code&gt; defines  &lt;code&gt;__m_uvm_field_automation&lt;/code&gt; which calls &lt;code&gt;super.__m_uvm_field_automation()&lt;/code&gt; before the fields macros expand to switch-case for each of the operations.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Report Server</title>
      <link>/posts/2020/09/uvm-report-server/</link>
      <pubDate>Fri, 04 Sep 2020 03:13:06 +0200</pubDate>
      <guid>/posts/2020/09/uvm-report-server/</guid>
      <description>&lt;p&gt;UVM Class reference manual define &lt;code&gt;uvm_report_server&lt;/code&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;uvm_report_handler. None of its methods are intended to be called by normal testbench&#xA;uvm_report_server is a global server that processes all of the reports generated by an&#xA;code, although in some circumstances the virtual methods process_report and/or&#xA;compose_uvm_info may be overloaded in a subclass.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;define-uvm_report_server&#34;&gt;&#xA;  Define uvm_report_server&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#define-uvm_report_server&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;To change the message format, say CSV, &lt;code&gt;compase_message&lt;/code&gt; can be used to return re-formatted message.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Report Catcher</title>
      <link>/posts/2020/09/uvm-report-catcher/</link>
      <pubDate>Tue, 01 Sep 2020 03:13:06 +0200</pubDate>
      <guid>/posts/2020/09/uvm-report-catcher/</guid>
      <description>&lt;p&gt;How to use UVM report catcher to change message attributes. Report catcher can&amp;rsquo;t change the message format. Report server can be used to change the format.&lt;/p&gt;&#xA;&lt;h1 id=&#34;report-catcher&#34;&gt;&#xA;  Report Catcher&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#report-catcher&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;first we need to sub-class &lt;code&gt;uvm_report_catcher&lt;/code&gt; and override &lt;code&gt;catch&lt;/code&gt;. in this example,&lt;code&gt;get_severity&lt;/code&gt; and &lt;code&gt;get_id&lt;/code&gt; are used to filter messages. Then &lt;code&gt;THROW&lt;/code&gt; is returned which passes the modified message.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class catcher extends uvm_report_catcher;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; new(&lt;span style=&#34;color:#ff7b72&#34;&gt;string&lt;/span&gt; name&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;catcher&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    super.new(name);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; action_e catch();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt;(get_severity() &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;==&lt;/span&gt; UVM_WARNING&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; get_id() &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;MYID&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      set_severity(UVM_ERROR);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; THROW;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All getters and setters can be found at &lt;a href=&#34;https://verificationacademy.com/verification-methodology-reference/uvm/docs_1.1a/html/files/base/uvm_report_catcher-svh.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UVM report cat catcher&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Sequencer grab()</title>
      <link>/posts/2020/08/uvm-sequencer-grab/</link>
      <pubDate>Mon, 31 Aug 2020 03:13:06 +0200</pubDate>
      <guid>/posts/2020/08/uvm-sequencer-grab/</guid>
      <description>&lt;h1 id=&#34;hierarchical-sequences&#34;&gt;&#xA;  Hierarchical sequences&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#hierarchical-sequences&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;A big part of sequencer functionality (i.e., complexity) is sequence arbitration. That&amp;rsquo;s why we have the whole &lt;code&gt;start_item&lt;/code&gt; and &lt;code&gt;get_next_item&lt;/code&gt; thing, AKA driver-sequence protocol.&lt;/p&gt;&#xA;&lt;p&gt;In this example, I am using 2 sequences with &lt;code&gt;p_sequencer&lt;/code&gt;. By default, the priority of all items from sequences are equal and default arbitration algorithm is fifo.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class my_sequence extends uvm_sequence#(my_transaction);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_object_utils&lt;/span&gt;(my_sequence)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#79c0ff;font-weight:bold&#34;&gt;`uvm_declare_p_sequencer&lt;/span&gt;(my_sequencer)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt;  new(&lt;span style=&#34;color:#ff7b72&#34;&gt;string&lt;/span&gt; name&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;super.new(name);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;m_seq1 s1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    m_seq2 s2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#ff7b72&#34;&gt;task&lt;/span&gt; body();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      s1 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; m_seq1&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;type_id&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;create(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;s1&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      s2 &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;=&lt;/span&gt; m_seq2&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;type_id&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;create(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;s2&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff7b72&#34;&gt;fork&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        s1.start(p_sequencer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        s2.start(p_sequencer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff7b72&#34;&gt;join&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;endtask&lt;/span&gt;&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;:&lt;/span&gt; body&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The sequencer alternates between sequences. So, we have items from each sequence in the order they were called from the virtual sequence.&lt;/p&gt;</description>
    </item>
    <item>
      <title>uvm_config_db spellchecker</title>
      <link>/posts/2020/08/uvm_config_db-spellchecker/</link>
      <pubDate>Mon, 31 Aug 2020 03:13:06 +0200</pubDate>
      <guid>/posts/2020/08/uvm_config_db-spellchecker/</guid>
      <description>&lt;p&gt;Fun trivia i didn&amp;rsquo;t know about UVM config DB. It has build-in spell checker for resource lookup. Who Knew!&lt;/p&gt;&#xA;&lt;p&gt;The class for spell checker is &lt;code&gt;uvm_spell_chkr&lt;/code&gt;. grep&amp;rsquo;ing trough UVM-1.1d, i found it&amp;rsquo;s used once inside &lt;code&gt;uvm_resource.svh&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;bit&lt;/span&gt; spell_check(&lt;span style=&#34;color:#ff7b72&#34;&gt;string&lt;/span&gt; s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; uvm_spell_chkr#(uvm_resource_types&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;rsrc_q_t)&lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;::&lt;/span&gt;check(rtab, s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff7b72&#34;&gt;endfunction&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;looking at &lt;code&gt;check&lt;/code&gt;, It seems like poorman&amp;rsquo;s spell checker for resource names.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [.........]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;%s not located&amp;#34;&lt;/span&gt;, s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// if (min == max) then the string table is empty&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;if&lt;/span&gt;(min &lt;span style=&#34;color:#ff7b72;font-weight:bold&#34;&gt;==&lt;/span&gt; max) &lt;span style=&#34;color:#ff7b72&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      $display(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;  no alternatives to suggest&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff7b72&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a5d6ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;// dump all the alternatives with the minimum distance&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;&lt;/span&gt;    foreach(min_key[i]) &lt;span style=&#34;color:#ff7b72&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      $display(&lt;span style=&#34;color:#a5d6ff&#34;&gt;&amp;#34;  did you mean %s?&amp;#34;&lt;/span&gt;, min_key[i]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff7b72&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And &lt;code&gt;spell_check&lt;/code&gt; is called from lookup_name&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM user defined phase</title>
      <link>/posts/2020/08/uvm-user-defined-phase/</link>
      <pubDate>Sat, 29 Aug 2020 00:13:06 +0200</pubDate>
      <guid>/posts/2020/08/uvm-user-defined-phase/</guid>
      <description>&lt;p&gt;UVM provide a weird pattern to define user defined phases. Usually, it&amp;rsquo;s useful for adding phases for VIP&amp;rsquo;s&lt;/p&gt;&#xA;&lt;h1 id=&#34;user-defined-phase-boiler-plate&#34;&gt;&#xA;  User defined phase boiler-plate&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#user-defined-phase-boiler-plate&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;According to UVM class reference manual, we need to extends on of the class&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class my_PHASE_phase extends uvm_task_phase;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class my_PHASE_phase extends uvm_topdown_phase;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class my_PHASE_phase extends uvm_bottomup_phase;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;then override exec_task or exec_func&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;task&lt;/span&gt; exec_task(uvm_component comp, uvm_phase schedule);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff7b72&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#ff7b72&#34;&gt;void&lt;/span&gt; exec_func(uvm_component comp, uvm_phase schedule);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;the important part about exec method that it calls the phase from the component&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Hearbeat</title>
      <link>/posts/2020/08/uvm-hearbeat/</link>
      <pubDate>Fri, 28 Aug 2020 02:28:49 +0200</pubDate>
      <guid>/posts/2020/08/uvm-hearbeat/</guid>
      <description>&lt;p&gt;Example of UVM hearbeat based on &lt;a href=&#34;https://verificationguide.com/uvm/uvm-heartbeat-example/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;example&lt;/a&gt; and &lt;a href=&#34;https://verificationacademy.com/verification-methodology-reference/uvm/docs_1.1c/html/files/base/uvm_heartbeat-svh.html#uvm_heartbeat&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UVM heartbeat docs&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;UVM reference manual defines &lt;code&gt;Heart Beat&lt;/code&gt; as&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Heartbeats provide a way for environments to easily ensure that their descendants are&#xA;alive. A uvm_heartbeat is associated with a specific objection object. A component that&#xA;is being tracked by the heartbeat object must raise (or drop) the synchronizing objection&#xA;during the heartbeat window. The synchronizing objection must be a&#xA;uvm_callbacks_objection type.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
